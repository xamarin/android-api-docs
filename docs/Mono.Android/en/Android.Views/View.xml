<Type Name="View" FullName="Android.Views.View">
  <TypeSignature Language="C#" Value="public class View : Java.Lang.Object, Android.Graphics.Drawables.Drawable.ICallback, Android.Views.Accessibility.IAccessibilityEventSource, Android.Views.KeyEvent.ICallback, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit View extends Java.Lang.Object implements class Android.Graphics.Drawables.Drawable/ICallback, class Android.Runtime.IJavaObject, class Android.Views.Accessibility.IAccessibilityEventSource, class Android.Views.KeyEvent/ICallback, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Graphics.Drawables.Drawable+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.Accessibility.IAccessibilityEventSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.KeyEvent+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/View", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary tool="true">
      <format type="text/html">
        <h3>Developer Guides</h3>
      </format>For information about using this class to develop your application's user interface,
 read the <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/ui/index.html">User Interface</a></format> developer guide.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Developer Guides</h3>
        </format>For information about using this class to develop your application's user interface,
 read the <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/ui/index.html">User Interface</a></format> developer guide.
 <format type="text/html"><h3>Using Views</h3></format><format type="text/html"><h3>Implementing a Custom View</h3></format><format type="text/html"><h3>IDs</h3></format>
 Views may have an integer id associated with them. These ids are typically
 assigned in the layout XML files, and are used to find specific views within
 the view tree. A common pattern is to:
 <list type="bullet"><item><term>Define a Button in the layout file and assign it a unique ID.
 <example><code lang="xml">
 &lt;Button
     android:id="@+id/my_button"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:text="@string/my_button_text"/&gt;
 </code></example></term></item><item><term>From the onCreate method of an Activity, find the Button
 <example><code lang="java">
      Button myButton = (Button) findViewById(R.id.my_button);
 </code></example></term></item></list><format type="text/html"><h3>Position</h3></format><format type="text/html"><h3>Size, padding and margins</h3></format><format type="text/html"><h3>Layout</h3></format><format type="text/html"><h3>Drawing</h3></format><format type="text/html"><h3>Event Handling and Threading</h3></format><format type="text/html"><h3>Focus Handling</h3></format><format type="text/html"><h3>Touch Mode</h3></format><format type="text/html"><h3>Scrolling</h3></format><format type="text/html"><h3>Tags</h3></format><format type="text/html"><h3>Properties</h3></format><format type="text/html"><h3>Animation</h3></format><format type="text/html"><h3>Security</h3></format></para>
      <para tool="javadoc-to-mdoc">
 This class represents the basic building block for user interface components. A View
 occupies a rectangular area on the screen and is responsible for drawing and
 event handling. View is the base class for <i>widgets</i>, which are
 used to create interactive UI components (buttons, text fields, etc.). The
 <c><see cref="T:Android.Views.ViewGroup" /></c> subclass is the base class for <i>layouts</i>, which
 are invisible containers that hold other Views (or other ViewGroups) and define
 their layout properties.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
 All of the views in a window are arranged in a single tree. You can add views
 either from code or by specifying a tree of views in one or more XML layout
 files. There are many specialized subclasses of views that act as controls or
 are capable of displaying text, images, or other content.
 </para>
      <para tool="javadoc-to-mdoc">
 Once you have created a tree of views, there are typically a few types of
 common operations you may wish to perform:
 <list type="bullet"><item><term><i>Set properties:</i> for example setting the text of a
 <c><see cref="T:Android.Widget.TextView" /></c>. The available properties and the methods
 that set them will vary among the different subclasses of views. Note that
 properties that are known at build time can be set in the XML layout
 files.</term></item><item><term><i>Set focus:</i> The framework will handled moving focus in
 response to user input. To force focus to a specific view, call
 <c><see cref="M:Android.Views.View.RequestFocus" /></c>.</term></item><item><term><i>Set up listeners:</i> Views allow clients to set listeners
 that will be notified when something interesting happens to the view. For
 example, all views will let you set a listener to be notified when the view
 gains or loses focus. You can register such a listener using
 <c><see cref="P:Android.Views.View.OnFocusChangeListener" /></c>.
 Other view subclasses offer more specialized listeners. For example, a Button
 exposes a listener to notify clients when the button is clicked.</term></item><item><term><i>Set visibility:</i> You can hide or show views using
 <c><see cref="P:Android.Views.View.Visibility" /></c>.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <i>
 Note: The Android framework is responsible for measuring, laying out and
 drawing views. You should not call methods that perform these actions on
 views yourself unless you are actually implementing a
 <c><see cref="T:Android.Views.ViewGroup" /></c>.
 </i>
      </para>
      <para tool="javadoc-to-mdoc">
 To implement a custom view, you will usually begin by providing overrides for
 some of the standard methods that the framework calls on all views. You do
 not need to override all of these methods. In fact, you can start by just
 overriding <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>.
 <format type="text/html"><table border="2" width="85%" align="center" cellpadding="5"><thead><tr><th>Category</th><th>Methods</th><th>Description</th></tr></thead><tbody><tr><td rowspan="2">Creation</td><td>Constructors</td><td>There is a form of the constructor that are called when the view
         is created from code and a form that is called when the view is
         inflated from a layout file. The second form should parse and apply
         any attributes defined in the layout file.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnFinishInflate" /></c></c></td><td>Called after a view and all of its children has been inflated
         from XML.</td></tr><tr><td rowspan="3">Layout</td><td><c><c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c></c></td><td>Called to determine the size requirements for this view and all
         of its children.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)" /></c></c></td><td>Called when this view should assign a size and position to all
         of its children.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnSizeChanged(System.Int32,System.Int32,System.Int32,System.Int32)" /></c></c></td><td>Called when the size of this view has changed.
         </td></tr><tr><td>Drawing</td><td><c><c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c></c></td><td>Called when the view should render its content.
         </td></tr><tr><td rowspan="4">Event processing</td><td><c><c><see cref="M:Android.Views.View.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)" /></c></c></td><td>Called when a new hardware key event occurs.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)" /></c></c></td><td>Called when a hardware key up event occurs.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnTrackballEvent(Android.Views.MotionEvent)" /></c></c></td><td>Called when a trackball motion event occurs.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnTouchEvent(Android.Views.MotionEvent)" /></c></c></td><td>Called when a touch screen motion event occurs.
         </td></tr><tr><td rowspan="2">Focus</td><td><c><c><see cref="M:Android.Views.View.OnFocusChanged(System.Boolean,Android.Views.FocusSearchDirection,Android.Views.FocusSearchDirection)" /></c></c></td><td>Called when the view gains or loses focus.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnWindowFocusChanged(System.Boolean)" /></c></c></td><td>Called when the window containing the view gains or loses focus.
         </td></tr><tr><td rowspan="3">Attaching</td><td><c><c><see cref="M:Android.Views.View.OnAttachedToWindow" /></c></c></td><td>Called when the view is attached to a window.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c></c></td><td>Called when the view is detached from its window.
         </td></tr><tr><td><c><c><see cref="M:Android.Views.View.OnWindowVisibilityChanged(Android.Views.ViewStates)" /></c></c></td><td>Called when the visibility of the window containing the view
         has changed.
         </td></tr></tbody></table></format></para>
      <para tool="javadoc-to-mdoc">
 View IDs need not be unique throughout the tree, but it is good practice to
 ensure that they are at least unique within the part of the tree you are
 searching.
 </para>
      <para tool="javadoc-to-mdoc">
 The geometry of a view is that of a rectangle. A view has a location,
 expressed as a pair of <i>left</i> and <i>top</i> coordinates, and
 two dimensions, expressed as a width and a height. The unit for location
 and dimensions is the pixel.
 </para>
      <para tool="javadoc-to-mdoc">
 It is possible to retrieve the location of a view by invoking the methods
 <c><see cref="P:Android.Views.View.Left" /></c> and <c><see cref="P:Android.Views.View.Top" /></c>. The former returns the left, or X,
 coordinate of the rectangle representing the view. The latter returns the
 top, or Y, coordinate of the rectangle representing the view. These methods
 both return the location of the view relative to its parent. For instance,
 when getLeft() returns 20, that means the view is located 20 pixels to the
 right of the left edge of its direct parent.
 </para>
      <para tool="javadoc-to-mdoc">
 In addition, several convenience methods are offered to avoid unnecessary
 computations, namely <c><see cref="P:Android.Views.View.Right" /></c> and <c><see cref="P:Android.Views.View.Bottom" /></c>.
 These methods return the coordinates of the right and bottom edges of the
 rectangle representing the view. For instance, calling <c><see cref="P:Android.Views.View.Right" /></c>
 is similar to the following computation: <c>getLeft() + getWidth()</c>
 (see  for more information about the width.)
 </para>
      <para tool="javadoc-to-mdoc">
 The size of a view is expressed with a width and a height. A view actually
 possess two pairs of width and height values.
 </para>
      <para tool="javadoc-to-mdoc">
 The first pair is known as <i>measured width</i> and
 <i>measured height</i>. These dimensions define how big a view wants to be
 within its parent (see  for more details.) The
 measured dimensions can be obtained by calling <c><see cref="P:Android.Views.View.MeasuredWidth" /></c>
 and <c><see cref="P:Android.Views.View.MeasuredHeight" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The second pair is simply known as <i>width</i> and <i>height</i>, or
 sometimes <i>drawing width</i> and <i>drawing height</i>. These
 dimensions define the actual size of the view on screen, at drawing time and
 after layout. These values may, but do not have to, be different from the
 measured width and height. The width and height can be obtained by calling
 <c><see cref="P:Android.Views.View.Width" /></c> and <c><see cref="P:Android.Views.View.Height" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 To measure its dimensions, a view takes into account its padding. The padding
 is expressed in pixels for the left, top, right and bottom parts of the view.
 Padding can be used to offset the content of the view by a specific amount of
 pixels. For instance, a left padding of 2 will push the view's content by
 2 pixels to the right of the left edge. Padding can be set using the
 <c><see cref="M:Android.Views.View.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> or <c><see cref="M:Android.Views.View.SetPaddingRelative(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 method and queried by calling <c><see cref="P:Android.Views.View.PaddingLeft" /></c>, <c><see cref="P:Android.Views.View.PaddingTop" /></c>,
 <c><see cref="P:Android.Views.View.PaddingRight" /></c>, <c><see cref="P:Android.Views.View.PaddingBottom" /></c>, <c><see cref="P:Android.Views.View.PaddingStart" /></c>,
 <c><see cref="P:Android.Views.View.PaddingEnd" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Even though a view can define a padding, it does not provide any support for
 margins. However, view groups provide such a support. Refer to
 <c><see cref="T:Android.Views.ViewGroup" /></c> and
 <c><see cref="!:NoType:android/view/ViewGroup$MarginLayoutParams;Href=../../../reference/android/view/ViewGroup.MarginLayoutParams.html" /></c> for further information.
 </para>
      <para tool="javadoc-to-mdoc">
 Layout is a two pass process: a measure pass and a layout pass. The measuring
 pass is implemented in <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c> and is a top-down traversal
 of the view tree. Each view pushes dimension specifications down the tree
 during the recursion. At the end of the measure pass, every view has stored
 its measurements. The second pass happens in
 <c><see cref="M:Android.Views.View.Layout(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and is also top-down. During
 this pass each parent is responsible for positioning all of its children
 using the sizes computed in the measure pass.
 </para>
      <para tool="javadoc-to-mdoc">
 When a view's measure() method returns, its <c><see cref="P:Android.Views.View.MeasuredWidth" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredHeight" /></c> values must be set, along with those for all of
 that view's descendants. A view's measured width and measured height values
 must respect the constraints imposed by the view's parents. This guarantees
 that at the end of the measure pass, all parents accept all of their
 children's measurements. A parent view may call measure() more than once on
 its children. For example, the parent may measure each child once with
 unspecified dimensions to find out how big they want to be, then call
 measure() on them again with actual numbers if the sum of all the children's
 unconstrained sizes is too big or too small.
 </para>
      <para tool="javadoc-to-mdoc">
 The measure pass uses two classes to communicate dimensions. The
 <c><see cref="!:NoType:android/view/View$MeasureSpec;Href=../../../reference/android/view/View.MeasureSpec.html" /></c> class is used by views to tell their parents how they
 want to be measured and positioned. The base LayoutParams class just
 describes how big the view wants to be for both width and height. For each
 dimension, it can specify one of:
 <list type="bullet"><item><term> an exact number
 </term></item><item><term>MATCH_PARENT, which means the view wants to be as big as its parent
 (minus padding)
 </term></item><item><term> WRAP_CONTENT, which means that the view wants to be just big enough to
 enclose its content (plus padding).
 </term></item></list>
 There are subclasses of LayoutParams for different subclasses of ViewGroup.
 For example, AbsoluteLayout has its own subclass of LayoutParams which adds
 an X and Y value.
 </para>
      <para tool="javadoc-to-mdoc">
 MeasureSpecs are used to push requirements down the tree from parent to
 child. A MeasureSpec can be in one of three modes:
 <list type="bullet"><item><term>UNSPECIFIED: This is used by a parent to determine the desired dimension
 of a child view. For example, a LinearLayout may call measure() on its child
 with the height set to UNSPECIFIED and a width of EXACTLY 240 to find out how
 tall the child view wants to be given a width of 240 pixels.
 </term></item><item><term>EXACTLY: This is used by the parent to impose an exact size on the
 child. The child must use this size, and guarantee that all of its
 descendants will fit within this size.
 </term></item><item><term>AT_MOST: This is used by the parent to impose a maximum size on the
 child. The child must guarantee that it and all of its descendants will fit
 within this size.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">
 To initiate a layout, call <c><see cref="M:Android.Views.View.RequestLayout" /></c>. This method is typically
 called by a view on itself when it believes that is can no longer fit within
 its current bounds.
 </para>
      <para tool="javadoc-to-mdoc">
 Drawing is handled by walking the tree and recording the drawing commands of
 any View that needs to update. After this, the drawing commands of the
 entire tree are issued to screen, clipped to the newly damaged area.
 </para>
      <para tool="javadoc-to-mdoc">
 The tree is largely recorded and drawn in order, with parents drawn before
 (i.e., behind) their children, with siblings drawn in the order they appear
 in the tree. If you set a background drawable for a View, then the View will
 draw it before calling back to its <c>onDraw()</c> method. The child
 drawing order can be overridden with
 <c><see cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" /></c>
 in a ViewGroup, and with <c><see cref="M:Android.Views.View.SetZ(System.Single)" /></c> custom Z values} set on Views.
 </para>
      <para tool="javadoc-to-mdoc">
 To force a view to draw, call <c><see cref="M:Android.Views.View.Invalidate" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The basic cycle of a view is as follows:
 <list type="number"><item><term>An event comes in and is dispatched to the appropriate view. The view
 handles the event and notifies any listeners.</term></item><item><term>If in the course of processing the event, the view's bounds may need
 to be changed, the view will call <c><see cref="M:Android.Views.View.RequestLayout" /></c>.</term></item><item><term>Similarly, if in the course of processing the event the view's appearance
 may need to be changed, the view will call <c><see cref="M:Android.Views.View.Invalidate" /></c>.</term></item><item><term>If either <c><see cref="M:Android.Views.View.RequestLayout" /></c> or <c><see cref="M:Android.Views.View.Invalidate" /></c> were called,
 the framework will take care of measuring, laying out, and drawing the tree
 as appropriate.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <i>Note: The entire view tree is single threaded. You must always be on
 the UI thread when calling any method on any view.</i>
 If you are doing work on other threads and want to update the state of a view
 from that thread, you should use a <c><see cref="T:Android.OS.Handler" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The framework will handle routine focus movement in response to user input.
 This includes changing the focus as views are removed or hidden, or as new
 views become available. Views indicate their willingness to take focus
 through the <c><see cref="P:Android.Views.View.Focusable" /></c> method. To change whether a view can take
 focus, call <c><see cref="P:Android.Views.View.Focusable" /></c>.  When in touch mode (see notes below)
 views indicate whether they still would like focus via <c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c>
 and can change this via <c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Focus movement is based on an algorithm which finds the nearest neighbor in a
 given direction. In rare cases, the default algorithm may not match the
 intended behavior of the developer. In these situations, you can provide
 explicit overrides by using these XML attributes in the layout file:
 <example><code lang="java">
 nextFocusDown
 nextFocusLeft
 nextFocusRight
 nextFocusUp
 </code></example></para>
      <para tool="javadoc-to-mdoc">
 To get a particular view to take focus, call <c><see cref="M:Android.Views.View.RequestFocus" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 When a user is navigating a user interface via directional keys such as a D-pad, it is
 necessary to give focus to actionable items such as buttons so the user can see
 what will take input.  If the device has touch capabilities, however, and the user
 begins interacting with the interface by touching it, it is no longer necessary to
 always highlight, or give focus to, a particular view.  This motivates a mode
 for interaction named 'touch mode'.
 </para>
      <para tool="javadoc-to-mdoc">
 For a touch capable device, once the user touches the screen, the device
 will enter touch mode.  From this point onward, only views for which
 <c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c> is true will be focusable, such as text editing widgets.
 Other views that are touchable, like buttons, will not take focus when touched; they will
 only fire the on click listeners.
 </para>
      <para tool="javadoc-to-mdoc">
 Any time a user hits a directional key, such as a D-pad direction, the view device will
 exit touch mode, and find a view to take focus, so that the user may resume interacting
 with the user interface without touching the screen again.
 </para>
      <para tool="javadoc-to-mdoc">
 The touch mode state is maintained across <c><see cref="T:Android.App.Activity" /></c>s.  Call
 <c><see cref="P:Android.Views.View.IsInTouchMode" /></c> to see whether the device is currently in touch mode.
 </para>
      <para tool="javadoc-to-mdoc">
 The framework provides basic support for views that wish to internally
 scroll their content. This includes keeping track of the X and Y scroll
 offset as well as mechanisms for drawing scrollbars. See
 <c><see cref="M:Android.Views.View.ScrollBy(System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.Views.View.ScrollTo(System.Int32,System.Int32)" /></c>, and
 <c><see cref="M:Android.Views.View.AwakenScrollBars" /></c> for more details.
 </para>
      <para tool="javadoc-to-mdoc">
 Unlike IDs, tags are not used to identify views. Tags are essentially an
 extra piece of information that can be associated with a view. They are most
 often used as a convenience to store data related to views in the views
 themselves rather than by putting them in a separate structure.
 </para>
      <para tool="javadoc-to-mdoc">
 The View class exposes an <c><see cref="!:Android.Views.View.ALPHA" /></c> property, as well as several transform-related
 properties, such as <c><see cref="!:Android.Views.View.TRANSLATION_X" /></c> and <c><see cref="!:Android.Views.View.TRANSLATION_Y" /></c>. These properties are
 available both in the <c><see cref="T:Android.Util.Property" /></c> form as well as in similarly-named setter/getter
 methods (such as <c><see cref="P:Android.Views.View.Alpha" /></c> for <c><see cref="!:Android.Views.View.ALPHA" /></c>). These properties can
 be used to set persistent state associated with these rendering-related properties on the view.
 The properties and methods can also be used in conjunction with
 <c><see cref="T:Android.Animation.Animator" /></c>-based animations, described more in the
  section.
 </para>
      <para tool="javadoc-to-mdoc">
 Starting with Android 3.0, the preferred way of animating views is to use the
 <c><see cref="N:Android.Animation" /></c> package APIs. These <c><see cref="T:Android.Animation.Animator" /></c>-based
 classes change actual properties of the View object, such as <c><see cref="P:Android.Views.View.Alpha" /></c> and
 <c><see cref="P:Android.Views.View.TranslationX" /></c>. This behavior is contrasted to that of the pre-3.0
 <c><see cref="T:Android.Views.Animations.Animation" /></c>-based classes, which instead animate only
 how the view is drawn on the display. In particular, the <c><see cref="T:Android.Views.ViewPropertyAnimator" /></c> class
 makes animating these View properties particularly easy and efficient.
 </para>
      <para tool="javadoc-to-mdoc">
 Alternatively, you can use the pre-3.0 animation classes to animate how Views are rendered.
 You can attach an <c><see cref="T:Android.Views.Animations.Animation" /></c> object to a view using
 <c><see cref="P:Android.Views.View.Animation" /></c> or
 <c><see cref="M:Android.Views.View.StartAnimation(Android.Views.Animations.Animation)" /></c>. The animation can alter the scale,
 rotation, translation and alpha of a view over time. If the animation is
 attached to a view that has children, the animation will affect the entire
 subtree rooted by that node. When an animation is started, the framework will
 take care of redrawing the appropriate views until the animation completes.
 </para>
      <para tool="javadoc-to-mdoc">
 Sometimes it is essential that an application be able to verify that an action
 is being performed with the full knowledge and consent of the user, such as
 granting a permission request, making a purchase or clicking on an advertisement.
 Unfortunately, a malicious application could try to spoof the user into
 performing these actions, unaware, by concealing the intended purpose of the view.
 As a remedy, the framework offers a touch filtering mechanism that can be used to
 improve the security of views that provide access to sensitive functionality.
 </para>
      <para tool="javadoc-to-mdoc">
 To enable touch filtering, call <c><see cref="P:Android.Views.View.FilterTouchesWhenObscured" /></c> or set the
 android:filterTouchesWhenObscured layout attribute to true.  When enabled, the framework
 will discard touches that are received whenever the view's window is obscured by
 another visible window.  As a result, the view will not receive touches whenever a
 toast, dialog or other window appears above the view's window.
 </para>
      <para tool="javadoc-to-mdoc">
 For more fine-grained control over security, consider overriding the
 <c><see cref="M:Android.Views.View.OnFilterTouchEventForSecurity(Android.Views.MotionEvent)" /></c> method to implement your own
 security policy. See also <c><see cref="F:Android.Views.MotionEvent.FlagWindowIsObscured" /></c>.
 </para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Views.ViewGroup" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/View.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Simple constructor to use when creating a view from code.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Simple constructor to use when creating a view from code.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#View(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>Constructor that is called when inflating a view from XML.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor that is called when inflating a view from XML. This is called
 when a view is being constructed from an XML file, supplying attributes
 that were specified in the XML file. This version uses a default style of
 0, so the only attribute values applied are those in the Context's Theme
 and the given AttributeSet.

 </para>
          <para tool="javadoc-to-mdoc">
 The method onFinishInflate() will be called after all children have been
 added.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#View(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="C:Android.Views.View(Android.Content.Context, Android.Util.IAttributeSet, Android.Util.IAttributeSet)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected View (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View (Android.Content.Context context, Android.Util.IAttributeSet attrs, int defStyleAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <param name="defStyleAttr">To be added.</param>
        <summary>Perform inflation from XML and apply a class-specific base style from a
 theme attribute.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform inflation from XML and apply a class-specific base style from a
 theme attribute. This constructor of View allows subclasses to use their
 own base style when they are inflating. For example, a Button class's
 constructor would call this version of the super class constructor and
 supply <c>R.attr.buttonStyle</c> for <format type="text/html"><var>defStyleAttr</var></format>; this
 allows the theme's button style to modify all of the base view attributes
 (in particular its background) as well as the Button class's attributes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#View(android.content.Context, android.util.AttributeSet, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="C:Android.Views.View(Android.Content.Context, Android.Util.IAttributeSet)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View (Android.Content.Context context, Android.Util.IAttributeSet attrs, int defStyleAttr, int defStyleRes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr, int32 defStyleRes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyleAttr" Type="System.Int32" />
        <Parameter Name="defStyleRes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <param name="defStyleAttr">To be added.</param>
        <param name="defStyleRes">To be added.</param>
        <summary>Perform inflation from XML and apply a class-specific base style from a
 theme attribute or style resource.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform inflation from XML and apply a class-specific base style from a
 theme attribute or style resource. This constructor of View allows
 subclasses to use their own base style when they are inflating.
 </para>
          <para tool="javadoc-to-mdoc">
 When determining the final value of a particular attribute, there are
 four inputs that come into play:
 <list type="number"><item><term>Any attribute values in the given AttributeSet.
 </term></item><item><term>The style resource specified in the AttributeSet (named "style").
 </term></item><item><term>The default style specified by <format type="text/html"><var>defStyleAttr</var></format>.
 </term></item><item><term>The default style specified by <format type="text/html"><var>defStyleRes</var></format>.
 </term></item><item><term>The base values in this theme.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 Each of these inputs is considered in-order, with the first listed taking
 precedence over the following ones. In other words, if in the
 AttributeSet you have supplied <c>&lt;Button * textColor="#ff000000"&gt;</c>
 , then the button's text will <i>always</i> be black, regardless of
 what is specified in any of the styles.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#View(android.content.Context, android.util.AttributeSet, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="C:Android.Views.View(Android.Content.Context, Android.Util.IAttributeSet, Android.Util.IAttributeSet)" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLiveRegion">
      <MemberSignature Language="C#" Value="public virtual Android.Views.AccessibilityLiveRegion AccessibilityLiveRegion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.AccessibilityLiveRegion AccessibilityLiveRegion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAccessibilityLiveRegion", "()I", "GetGetAccessibilityLiveRegionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAccessibilityLiveRegion", "(I)V", "GetSetAccessibilityLiveRegion_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.AccessibilityLiveRegion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the live region mode for this View.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getAccessibilityLiveRegion()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the live region mode for this View.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the live region mode for this view. This indicates to accessibility
 services whether they should automatically notify the user about changes
 to the view's content description or text, or to the content descriptions
 or text of the view's children (where applicable).
 
 For example, in a login screen with a TextView that displays an "incorrect
 password" notification, that view should be marked as a live region with
 mode <c><see cref="F:Android.Views.View.AccessibilityLiveRegionPolite" /></c>.
 
 To disable change notifications for this view, use
 <c><see cref="F:Android.Views.View.AccessibilityLiveRegionNone" /></c>. This is the default live region
 mode for most views.
 
 To indicate that the user should be notified of changes, use
 <c><see cref="F:Android.Views.View.AccessibilityLiveRegionPolite" /></c>.
 
 If the view's changes should interrupt ongoing speech and notify the user
 immediately, use <c><see cref="F:Android.Views.View.AccessibilityLiveRegionAssertive" /></c>.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.Views.View.AccessibilityLiveRegion" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="AccessibilityLiveRegionAssertive">
      <MemberSignature Language="C#" Value="public const Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionAssertive = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionAssertive = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACCESSIBILITY_LIVE_REGION_ASSERTIVE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.AccessibilityLiveRegion enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.AccessibilityLiveRegion</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Live region mode specifying that accessibility services should interrupt
 ongoing speech to immediately announce changes to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Live region mode specifying that accessibility services should interrupt
 ongoing speech to immediately announce changes to this view.
 </para>
          <para tool="javadoc-to-mdoc">
 Use with <c><see cref="P:Android.Views.View.AccessibilityLiveRegion" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_ASSERTIVE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLiveRegionNone">
      <MemberSignature Language="C#" Value="public const Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionNone = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACCESSIBILITY_LIVE_REGION_NONE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.AccessibilityLiveRegion enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.AccessibilityLiveRegion</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Live region mode specifying that accessibility services should not
 automatically announce changes to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Live region mode specifying that accessibility services should not
 automatically announce changes to this view. This is the default live
 region mode for most views.
 </para>
          <para tool="javadoc-to-mdoc">
 Use with <c><see cref="P:Android.Views.View.AccessibilityLiveRegion" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_NONE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLiveRegionPolite">
      <MemberSignature Language="C#" Value="public const Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionPolite = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.AccessibilityLiveRegion AccessibilityLiveRegionPolite = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACCESSIBILITY_LIVE_REGION_POLITE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.AccessibilityLiveRegion enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.AccessibilityLiveRegion</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Live region mode specifying that accessibility services should announce
 changes to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Live region mode specifying that accessibility services should announce
 changes to this view.
 </para>
          <para tool="javadoc-to-mdoc">
 Use with <c><see cref="P:Android.Views.View.AccessibilityLiveRegion" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_POLITE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNodeProvider">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Accessibility.AccessibilityNodeProvider AccessibilityNodeProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Accessibility.AccessibilityNodeProvider AccessibilityNodeProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAccessibilityNodeProvider", "()Landroid/view/accessibility/AccessibilityNodeProvider;", "GetGetAccessibilityNodeProviderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Accessibility.AccessibilityNodeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the provider for managing a virtual view hierarchy rooted at this View
 and reported to <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>s
 that explore the window content.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the provider for managing a virtual view hierarchy rooted at this View
 and reported to <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>s
 that explore the window content.
 </para>
          <para tool="javadoc-to-mdoc">
 If this method returns an instance, this instance is responsible for managing
 <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s describing the virtual sub-tree rooted at this
 View including the one representing the View itself. Similarly the returned
 instance is responsible for performing accessibility actions on any virtual
 view or the root view itself.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getAccessibilityNodeProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public virtual bool Activated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Activated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isActivated", "()Z", "GetIsActivatedHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setActivated", "(Z)V", "GetSetActivated_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the activation state of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isActivated()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates the activation state of this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setActivated(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Changes the activated state of this view. A view can be activated or not.
 Note that activation is not the same as selection.  Selection is
 a transient property, representing the view (hierarchy) the user is
 currently interacting with.  Activation is a longer-term state that the
 user can move views in and out of.  For example, in a list view with
 single or multiple selection enabled, the views in the current selection
 set are activated.  (Um, yeah, we are deeply sorry about the terminology
 here.)  The activated state is propagated down to children of the view it
 is set on.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddChildrenForAccessibility">
      <MemberSignature Language="C#" Value="public virtual void AddChildrenForAccessibility (System.Collections.Generic.IList&lt;Android.Views.View&gt; children);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChildrenForAccessibility(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; children) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addChildrenForAccessibility", "(Ljava/util/ArrayList;)V", "GetAddChildrenForAccessibility_Ljava_util_ArrayList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="children" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
      </Parameters>
      <Docs>
        <param name="children">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFocusables">
      <MemberSignature Language="C#" Value="public virtual void AddFocusables (System.Collections.Generic.IList&lt;Android.Views.View&gt; views, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddFocusables(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; views, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addFocusables", "(Ljava/util/ArrayList;I)V", "GetAddFocusables_Ljava_util_ArrayList_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="views" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="views">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFocusables">
      <MemberSignature Language="C#" Value="public virtual void AddFocusables (System.Collections.Generic.IList&lt;Android.Views.View&gt; views, Android.Views.FocusSearchDirection direction, Android.Views.FocusablesFlags focusableMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddFocusables(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; views, valuetype Android.Views.FocusSearchDirection direction, valuetype Android.Views.FocusablesFlags focusableMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addFocusables", "(Ljava/util/ArrayList;II)V", "GetAddFocusables_Ljava_util_ArrayList_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="views" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="focusableMode" Type="Android.Views.FocusablesFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="views">To be added.</param>
        <param name="direction">To be added.</param>
        <param name="focusableMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnAttachStateChangeListener">
      <MemberSignature Language="C#" Value="public virtual void AddOnAttachStateChangeListener (Android.Views.View.IOnAttachStateChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnAttachStateChangeListener(class Android.Views.View/IOnAttachStateChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnAttachStateChangeListener", "(Landroid/view/View$OnAttachStateChangeListener;)V", "GetAddOnAttachStateChangeListener_Landroid_view_View_OnAttachStateChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.View+IOnAttachStateChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">Listener to attach</param>
        <summary>Add a listener for attach state changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a listener for attach state changes.

 This listener will be called whenever this view is attached or detached
 from a window. Remove the listener using
 <c><see cref="M:Android.Views.View.RemoveOnAttachStateChangeListener(.IOnAttachStateChangeListener)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#addOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
        <altmember cref="M:Android.Views.View.RemoveOnAttachStateChangeListener(.IOnAttachStateChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="AddOnLayoutChangeListener">
      <MemberSignature Language="C#" Value="public virtual void AddOnLayoutChangeListener (Android.Views.View.IOnLayoutChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnLayoutChangeListener(class Android.Views.View/IOnLayoutChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnLayoutChangeListener", "(Landroid/view/View$OnLayoutChangeListener;)V", "GetAddOnLayoutChangeListener_Landroid_view_View_OnLayoutChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.View+IOnLayoutChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be called when layout bounds change.
</param>
        <summary>Add a listener that will be called when the bounds of the view change due to
 layout processing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a listener that will be called when the bounds of the view change due to
 layout processing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#addOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddTouchables">
      <MemberSignature Language="C#" Value="public virtual void AddTouchables (System.Collections.Generic.IList&lt;Android.Views.View&gt; views);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTouchables(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; views) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTouchables", "(Ljava/util/ArrayList;)V", "GetAddTouchables_Ljava_util_ArrayList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="views" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
      </Parameters>
      <Docs>
        <param name="views">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Alpha">
      <MemberSignature Language="C#" Value="public virtual float Alpha { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Alpha" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAlpha", "()F", "GetGetAlphaHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAlpha", "(F)V", "GetSetAlpha_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The opacity of the view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getAlpha()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The opacity of the view. This is a value from 0 to 1, where 0 means the view is
 completely transparent and 1 means the view is completely opaque.

 By default this is 1.0f.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setAlpha(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the opacity of the view to a value from 0 to 1, where 0 means the view is
 completely transparent and 1 means the view is completely opaque.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> setting alpha to a translucent value (0 </para>
          <para tool="javadoc-to-mdoc">For a view with a frequently changing alpha, such as during a fading animation, it is
 strongly recommended for performance reasons to either override
 <c><see cref="P:Android.Views.View.HasOverlappingRendering" /></c> to return <c>false</c> if appropriate, or setting a
 <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c> on the view for the duration
 of the animation. On versions <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> and below,
 the default path for rendering an unlayered View with alpha could add multiple milliseconds
 of rendering cost, even for simple or small views. Starting with
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, <c><see cref="!:Android.Views.View.LAYER_TYPE_HARDWARE" /></c> is automatically
 applied to the view at the rendering level.</para>
          <para tool="javadoc-to-mdoc">If this view overrides <c><see cref="M:Android.Views.View.OnSetAlpha(System.Int32)" /></c> to return true, then this view is
 responsible for applying the opacity itself.</para>
          <para tool="javadoc-to-mdoc">On versions <c><see cref="F:Android.OS.Build.VERSION_CODES.Lollipop" tool="ReplaceLinkValue" /></c> and below, note that if
 the view is backed by a <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c> and is
 associated with a <c><see cref="M:Android.Views.View.SetLayerPaint(Android.Graphics.Paint)" /></c>, setting an
 alpha value less than 1.0 will supersede the alpha of the layer paint.</para>
          <para tool="javadoc-to-mdoc">Starting with <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, setting a translucent alpha
 value will clip a View to its bounds, unless the View returns <c>false</c> from
 <c><see cref="P:Android.Views.View.HasOverlappingRendering" /></c>.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.HasOverlappingRendering" />
        <altmember cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType, Android.Graphics.Paint)" />
      </Docs>
    </Member>
    <Member MemberName="Animate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewPropertyAnimator Animate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ViewPropertyAnimator Animate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("animate", "()Landroid/view/ViewPropertyAnimator;", "GetAnimateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewPropertyAnimator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method returns a ViewPropertyAnimator object, which can be used to animate
 specific properties on this View.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method returns a ViewPropertyAnimator object, which can be used to animate
 specific properties on this View.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#animate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="Animation">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Animations.Animation Animation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Animations.Animation Animation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAnimation", "()Landroid/view/animation/Animation;", "GetGetAnimationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAnimation", "(Landroid/view/animation/Animation;)V", "GetSetAnimation_Landroid_view_animation_Animation_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Animations.Animation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the animation currently associated with this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getAnimation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Get the animation currently associated with this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setAnimation(android.view.animation.Animation)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the next animation to play for this view.
 If you want the animation to play immediately, use
 <c><see cref="M:Android.Views.View.StartAnimation(Android.Views.Animations.Animation)" /></c> instead.
 This method provides allows fine-grained
 control over the start time and invalidation, but you
 must make sure that 1) the animation has a start time set, and
 2) the view's parent (which controls animations on its children)
 will be invalidated when the animation is supposed to
 start.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AnnounceForAccessibility">
      <MemberSignature Language="C#" Value="public virtual void AnnounceForAccessibility (Java.Lang.ICharSequence text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AnnounceForAccessibility(class Java.Lang.ICharSequence text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("announceForAccessibility", "(Ljava/lang/CharSequence;)V", "GetAnnounceForAccessibility_Ljava_lang_CharSequence_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="text">The announcement text.
</param>
        <summary>Convenience method for sending a <c><see cref="F:Android.Support.V4.View.Accessibility.AccessibilityEventCompat.TypeAnnouncement" tool="ReplaceLinkValue" /></c><c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to make an announcement which is related to some
 sort of a context change for which none of the events representing UI transitions
 is a good fit.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for sending a <c><see cref="F:Android.Support.V4.View.Accessibility.AccessibilityEventCompat.TypeAnnouncement" tool="ReplaceLinkValue" /></c><c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to make an announcement which is related to some
 sort of a context change for which none of the events representing UI transitions
 is a good fit. For example, announcing a new page in a book. If accessibility
 is not enabled this method does nothing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#announceForAccessibility(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="AnnounceForAccessibility">
      <MemberSignature Language="C#" Value="public void AnnounceForAccessibility (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AnnounceForAccessibility(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationWindowToken">
      <MemberSignature Language="C#" Value="public virtual Android.OS.IBinder ApplicationWindowToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.IBinder ApplicationWindowToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getApplicationWindowToken", "()Landroid/os/IBinder;", "GetGetApplicationWindowTokenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a unique token identifying the top-level "real" window of
 the window that this view is attached to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a unique token identifying the top-level "real" window of
 the window that this view is attached to.  That is, this is like
 <c><see cref="P:Android.Views.View.WindowToken" /></c>, except if the window this view in is a panel
 window (attached to another containing window), then the token of
 the containing window is returned instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getApplicationWindowToken()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ApplyWindowInsets">
      <MemberSignature Language="C#" Value="public Android.Views.View.ApplyWindowInsetsHandler ApplyWindowInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View/ApplyWindowInsetsHandler ApplyWindowInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.View+ApplyWindowInsetsHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwakenScrollBars">
      <MemberSignature Language="C#" Value="protected virtual bool AwakenScrollBars ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AwakenScrollBars() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awakenScrollBars", "()Z", "GetAwakenScrollBarsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Trigger the scrollbars to draw. When invoked this method starts an
 animation to fade the scrollbars out after a default delay. If a subclass
 provides animated scrolling, the start delay should equal the duration
 of the scrolling animation.</para>
          <para tool="javadoc-to-mdoc">The animation starts only if at least one of the scrollbars is
 enabled, as specified by <c><see cref="P:Android.Views.View.HorizontalScrollBarEnabled" /></c> and
 <c><see cref="P:Android.Views.View.VerticalScrollBarEnabled" /></c>. When the animation is started,
 this method returns true, and false otherwise. If the animation is
 started, this method calls <c><see cref="M:Android.Views.View.Invalidate" /></c>; in that case the
 caller should not call <c><see cref="M:Android.Views.View.Invalidate" /></c>.</para>
          <para tool="javadoc-to-mdoc">This method should be invoked every time a subclass directly updates
 the scroll parameters.</para>
          <para tool="javadoc-to-mdoc">This method is automatically invoked by <c><see cref="M:Android.Views.View.ScrollBy(System.Int32,System.Int32)" /></c>
 and <c><see cref="M:Android.Views.View.ScrollTo(System.Int32,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#awakenScrollBars()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.AwakenScrollBars(System.Int32)" />
        <altmember cref="M:Android.Views.View.ScrollBy(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.ScrollTo(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
      </Docs>
    </Member>
    <Member MemberName="AwakenScrollBars">
      <MemberSignature Language="C#" Value="protected virtual bool AwakenScrollBars (int startDelay);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AwakenScrollBars(int32 startDelay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awakenScrollBars", "(I)Z", "GetAwakenScrollBars_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startDelay">the delay, in milliseconds, after which the animation
        should start; when the delay is 0, the animation starts
        immediately</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Trigger the scrollbars to draw. When invoked this method starts an
 animation to fade the scrollbars out after a fixed delay. If a subclass
 provides animated scrolling, the start delay should equal the duration of
 the scrolling animation.
 </para>
          <para tool="javadoc-to-mdoc">
 The animation starts only if at least one of the scrollbars is enabled,
 as specified by <c><see cref="P:Android.Views.View.HorizontalScrollBarEnabled" /></c> and
 <c><see cref="P:Android.Views.View.VerticalScrollBarEnabled" /></c>. When the animation is started,
 this method returns true, and false otherwise. If the animation is
 started, this method calls <c><see cref="M:Android.Views.View.Invalidate" /></c>; in that case the caller
 should not call <c><see cref="M:Android.Views.View.Invalidate" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This method should be invoked every time a subclass directly updates the
 scroll parameters.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#awakenScrollBars(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.ScrollBy(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.ScrollTo(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
      </Docs>
    </Member>
    <Member MemberName="AwakenScrollBars">
      <MemberSignature Language="C#" Value="protected virtual bool AwakenScrollBars (int startDelay, bool invalidate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AwakenScrollBars(int32 startDelay, bool invalidate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awakenScrollBars", "(IZ)Z", "GetAwakenScrollBars_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDelay" Type="System.Int32" />
        <Parameter Name="invalidate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startDelay">the delay, in milliseconds, after which the animation
        should start; when the delay is 0, the animation starts
        immediately</param>
        <param name="invalidate">Whether this method should call invalidate</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Trigger the scrollbars to draw. When invoked this method starts an
 animation to fade the scrollbars out after a fixed delay. If a subclass
 provides animated scrolling, the start delay should equal the duration of
 the scrolling animation.
 </para>
          <para tool="javadoc-to-mdoc">
 The animation starts only if at least one of the scrollbars is enabled,
 as specified by <c><see cref="P:Android.Views.View.HorizontalScrollBarEnabled" /></c> and
 <c><see cref="P:Android.Views.View.VerticalScrollBarEnabled" /></c>. When the animation is started,
 this method returns true, and false otherwise. If the animation is
 started, this method calls <c><see cref="M:Android.Views.View.Invalidate" /></c> if the invalidate parameter
 is set to true; in that case the caller
 should not call <c><see cref="M:Android.Views.View.Invalidate" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This method should be invoked every time a subclass directly updates the
 scroll parameters.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#awakenScrollBars(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.ScrollBy(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.ScrollTo(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Drawables.Drawable Background" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBackground", "()Landroid/graphics/drawable/Drawable;", "GetGetBackgroundHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBackground", "(Landroid/graphics/drawable/Drawable;)V", "GetSetBackground_Landroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the background drawable</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getBackground()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the background drawable</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the background to a given Drawable, or remove the background. If the
 background has padding, this View's padding is set to the background's
 padding. However, when a background is removed, this View's padding isn't
 touched. If setting the padding is desired, please use
 <c><see cref="M:Android.Views.View.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Background" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundTintList">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.ColorStateList BackgroundTintList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.ColorStateList BackgroundTintList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBackgroundTintList", "()Landroid/content/res/ColorStateList;", "GetGetBackgroundTintListHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBackgroundTintList", "(Landroid/content/res/ColorStateList;)V", "GetSetBackgroundTintList_Landroid_content_res_ColorStateList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.ColorStateList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the tint applied to the background drawable, if specified.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getBackgroundTintList()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the tint applied to the background drawable, if specified.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setBackgroundTintList(android.content.res.ColorStateList)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Applies a tint to the background drawable. Does not modify the current tint
 mode, which is <c><see cref="T:Android.Graphics.PorterDuff+Mode" tool="ReplaceLinkValue" /></c> by default.
 
 Subsequent calls to <c><see cref="P:Android.Views.View.Background" /></c> will automatically
 mutate the drawable and apply the specified tint and tint mode using
 <c><see cref="M:Android.Graphics.Drawables.Drawable.SetTintList(Android.Content.Res.ColorStateList)" /></c>.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.Views.View.BackgroundTintList" />
        <altmember cref="P:Android.Views.View.BackgroundTintList" />
        <altmember cref="M:Android.Graphics.Drawables.Drawable.SetTintList(Android.Content.Res.ColorStateList)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundTintMode">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.PorterDuff.Mode BackgroundTintMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.PorterDuff/Mode BackgroundTintMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBackgroundTintMode", "()Landroid/graphics/PorterDuff$Mode;", "GetGetBackgroundTintModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBackgroundTintMode", "(Landroid/graphics/PorterDuff$Mode;)V", "GetSetBackgroundTintMode_Landroid_graphics_PorterDuff_Mode_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.PorterDuff+Mode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the blending mode used to apply the tint to the background
 drawable, if specified.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getBackgroundTintMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the blending mode used to apply the tint to the background
 drawable, if specified.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setBackgroundTintMode(android.graphics.PorterDuff.Mode)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Specifies the blending mode used to apply the tint specified by
 <c><see cref="P:Android.Views.View.BackgroundTintList" /></c>} to the background
 drawable. The default mode is <c><see cref="T:Android.Graphics.PorterDuff+Mode" tool="ReplaceLinkValue" /></c>.</para>
        </remarks>
        <altmember cref="P:Android.Views.View.BackgroundTintMode" />
        <altmember cref="P:Android.Views.View.BackgroundTintMode" />
        <altmember cref="M:Android.Graphics.Drawables.Drawable.SetTintMode(.Mode)" />
      </Docs>
    </Member>
    <Member MemberName="Baseline">
      <MemberSignature Language="C#" Value="public virtual int Baseline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Baseline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBaseline", "()I", "GetGetBaselineHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Return the offset of the widget's text baseline from the widget's top
 boundary. If this widget does not support baseline alignment, this
 method returns -1. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getBaseline()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBottom", "()I", "GetGetBottomHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBottom", "(I)V", "GetSetBottom_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bottom position of this view relative to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getBottom()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Bottom position of this view relative to its parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setBottom(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the bottom position of this view relative to its parent. This method is meant to be
 called by the layout system and should not generally be called otherwise, because the
 property may be changed at any time by the layout.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BottomFadingEdgeStrength">
      <MemberSignature Language="C#" Value="protected virtual float BottomFadingEdgeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 BottomFadingEdgeStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBottomFadingEdgeStrength", "()F", "GetGetBottomFadingEdgeStrengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the strength, or intensity, of the bottom faded edge.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the strength, or intensity, of the bottom faded edge. The strength is
 a value between 0.0 (no fade) and 1.0 (full fade). The default implementation
 returns 0.0 or 1.0 but no value in between.

 Subclasses should override this method to provide a smoother fade transition
 when scrolling occurs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getBottomFadingEdgeStrength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BottomPaddingOffset">
      <MemberSignature Language="C#" Value="protected virtual int BottomPaddingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BottomPaddingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBottomPaddingOffset", "()I", "GetGetBottomPaddingOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount by which to extend the bottom fading region.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Amount by which to extend the bottom fading region. Called only when
 <c><see cref="P:Android.Views.View.IsPaddingOffsetRequired" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getBottomPaddingOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 2" />
        <altmember cref="P:Android.Views.View.IsPaddingOffsetRequired" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public virtual void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringToFront() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bringToFront", "()V", "GetBringToFrontHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Change the view's z order in the tree, so it's on top of other sibling
 views.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Change the view's z order in the tree, so it's on top of other sibling
 views. This ordering change may affect layout, if the parent container
 uses an order-dependent layout scheme (e.g., LinearLayout). Prior
 to <c><see cref="F:Android.OS.Build+VERSION_CODES.KitKat" tool="ReplaceLinkValue" /></c> this
 method should be followed by calls to <c><see cref="M:Android.Views.View.RequestLayout" /></c> and
 <c><see cref="M:Android.Views.View.Invalidate" /></c> on the view's parent to force the parent to redraw
 with the new child ordering.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#bringToFront()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.BringChildToFront(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="BuildDrawingCache">
      <MemberSignature Language="C#" Value="public virtual void BuildDrawingCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BuildDrawingCache() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("buildDrawingCache", "()V", "GetBuildDrawingCacheHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Calling this method is equivalent to calling <c>buildDrawingCache(false)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#buildDrawingCache()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.BuildDrawingCache(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BuildDrawingCache">
      <MemberSignature Language="C#" Value="public virtual void BuildDrawingCache (bool autoScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BuildDrawingCache(bool autoScale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("buildDrawingCache", "(Z)V", "GetBuildDrawingCache_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoScale" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoScale">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Forces the drawing cache to be built if the drawing cache is invalid.</para>
          <para tool="javadoc-to-mdoc">If you call <c><see cref="M:Android.Views.View.BuildDrawingCache" /></c> manually without calling
 <c><see cref="P:Android.Views.View.DrawingCacheEnabled" /></c>, you
 should cleanup the cache by calling <c><see cref="M:Android.Views.View.DestroyDrawingCache" /></c> afterwards.</para>
          <para tool="javadoc-to-mdoc">Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 this method will create a bitmap of the same size as this view. Because this bitmap
 will be drawn scaled by the parent ViewGroup, the result on screen might show
 scaling artifacts. To avoid such artifacts, you should call this method by setting
 the auto scaling to true. Doing so, however, will generate a bitmap of a different
 size than the view. This implies that your application must be able to handle this
 size.</para>
          <para tool="javadoc-to-mdoc">You should avoid calling this method when hardware acceleration is enabled. If
 you do not need the drawing cache bitmap, calling this method will increase memory
 usage and cause the view to be rendered in software once, thus negatively impacting
 performance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#buildDrawingCache(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Views.View.DrawingCache" />
        <altmember cref="M:Android.Views.View.DestroyDrawingCache" />
      </Docs>
    </Member>
    <Member MemberName="BuildLayer">
      <MemberSignature Language="C#" Value="public virtual void BuildLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BuildLayer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("buildLayer", "()V", "GetBuildLayerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces this view's layer to be created and this view to be rendered
 into its layer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Forces this view's layer to be created and this view to be rendered
 into its layer. If this view's layer type is set to <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>,
 invoking this method will have no effect.

 This method can for instance be used to render a view into its layer before
 starting an animation. If this view is complex, rendering into the layer
 before starting the animation will avoid skipping frames.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#buildLayer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalStateException">If this view is not attached to a window</exception>
        <altmember cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType, Android.Graphics.Paint)" />
      </Docs>
    </Member>
    <Member MemberName="CallOnClick">
      <MemberSignature Language="C#" Value="public virtual bool CallOnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CallOnClick() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callOnClick", "()Z", "GetCallOnClickHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Directly call any attached OnClickListener.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Directly call any attached OnClickListener.  Unlike <c><see cref="M:Android.Views.View.PerformClick" /></c>,
 this only calls the listener, and does not do any associated clicking
 actions like reporting an accessibility event.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#callOnClick()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="CameraDistance">
      <MemberSignature Language="C#" Value="public virtual float CameraDistance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 CameraDistance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCameraDistance", "()F", "GetGetCameraDistanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the distance along the Z axis from the camera to this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the distance along the Z axis from the camera to this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getCameraDistance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.SetCameraDistance(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="CancelLongPress">
      <MemberSignature Language="C#" Value="public virtual void CancelLongPress ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelLongPress() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelLongPress", "()V", "GetCancelLongPressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels a pending long press.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels a pending long press.  Your subclass can use this if you
 want the context menu to come up if the user presses and holds
 at the same place, but you don't want it to come up if they press
 and then move around enough to cause scrolling.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#cancelLongPress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CancelPendingInputEvents">
      <MemberSignature Language="C#" Value="public void CancelPendingInputEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingInputEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelPendingInputEvents", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel any deferred high-level input events that were previously posted to the event queue.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancel any deferred high-level input events that were previously posted to the event queue.

 </para>
          <para tool="javadoc-to-mdoc">Many views post high-level events such as click handlers to the event queue
 to run deferred in order to preserve a desired user experience - clearing visible
 pressed states before executing, etc. This method will abort any events of this nature
 that are currently in flight.</para>
          <para tool="javadoc-to-mdoc">Custom views that generate their own high-level deferred input events should override
 <c><see cref="M:Android.Views.View.OnCancelPendingInputEvents" /></c> and remove those pending events from the queue.</para>
          <para tool="javadoc-to-mdoc">This will also cancel pending input events for any child views.</para>
          <para tool="javadoc-to-mdoc">Note that this may not be sufficient as a debouncing strategy for clicks in all cases.
 This will not impact newer events posted after this call that may occur as a result of
 lower-level input events still waiting in the queue. If you are trying to prevent
 double-submitted  events for the duration of some sort of asynchronous transaction
 you should also take other steps to protect against unexpected double inputs e.g. calling
 <c><see cref="P:Android.Views.View.Enabled" /></c> and re-enabling the view when
 the transaction completes, tracking already submitted transaction IDs, etc.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#cancelPendingInputEvents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveLayoutDirection">
      <MemberSignature Language="C#" Value="public virtual bool CanResolveLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveLayoutDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveLayoutDirection", "()Z", "GetCanResolveLayoutDirectionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check if layout direction resolution can be done.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if layout direction resolution can be done.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canResolveLayoutDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextAlignment">
      <MemberSignature Language="C#" Value="public virtual bool CanResolveTextAlignment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextAlignment() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextAlignment", "()Z", "GetCanResolveTextAlignmentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check if text alignment resolution can be done.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if text alignment resolution can be done.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canResolveTextAlignment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextDirection">
      <MemberSignature Language="C#" Value="public virtual bool CanResolveTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextDirection", "()Z", "GetCanResolveTextDirectionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check if text direction resolution can be done.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if text direction resolution can be done.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canResolveTextDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanScrollHorizontally">
      <MemberSignature Language="C#" Value="public virtual bool CanScrollHorizontally (Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanScrollHorizontally(valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canScrollHorizontally", "(I)Z", "GetCanScrollHorizontally_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">Negative to check scrolling left, positive to check scrolling right.</param>
        <summary>Check if this view can be scrolled horizontally in a certain direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if this view can be scrolled horizontally in a certain direction.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canScrollHorizontally(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="CanScrollHorizontally">
      <MemberSignature Language="C#" Value="public virtual bool CanScrollHorizontally (int direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanScrollHorizontally(int32 direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canScrollHorizontally", "(I)Z", "GetCanScrollHorizontally_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">Negative to check scrolling left, positive to check scrolling right.</param>
        <summary>Check if this view can be scrolled horizontally in a certain direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if this view can be scrolled horizontally in a certain direction.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canScrollHorizontally(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanScrollVertically">
      <MemberSignature Language="C#" Value="public virtual bool CanScrollVertically (Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanScrollVertically(valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canScrollVertically", "(I)Z", "GetCanScrollVertically_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">Negative to check scrolling up, positive to check scrolling down.</param>
        <summary>Check if this view can be scrolled vertically in a certain direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if this view can be scrolled vertically in a certain direction.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canScrollVertically(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="CanScrollVertically">
      <MemberSignature Language="C#" Value="public virtual bool CanScrollVertically (int direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanScrollVertically(int32 direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canScrollVertically", "(I)Z", "GetCanScrollVertically_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">Negative to check scrolling up, positive to check scrolling down.</param>
        <summary>Check if this view can be scrolled vertically in a certain direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check if this view can be scrolled vertically in a certain direction.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#canScrollVertically(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckInputConnectionProxy">
      <MemberSignature Language="C#" Value="public virtual bool CheckInputConnectionProxy (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckInputConnectionProxy(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkInputConnectionProxy", "(Landroid/view/View;)Z", "GetCheckInputConnectionProxy_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The View that is making the InputMethodManager call.</param>
        <summary>Called by the <c><see cref="T:Android.Views.InputMethods.InputMethodManager" /></c>
 when a view who is not the current
 input connection target is trying to make a call on the manager.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the <c><see cref="T:Android.Views.InputMethods.InputMethodManager" /></c>
 when a view who is not the current
 input connection target is trying to make a call on the manager.  The
 default implementation returns false; you can override this to return
 true for certain views if you are performing InputConnection proxying
 to them.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#checkInputConnectionProxy(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ClearAnimation">
      <MemberSignature Language="C#" Value="public virtual void ClearAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearAnimation", "()V", "GetClearAnimationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels any animations for this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels any animations for this view.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#clearAnimation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearFocus">
      <MemberSignature Language="C#" Value="public virtual void ClearFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearFocus", "()V", "GetClearFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when this view wants to give up focus.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when this view wants to give up focus. If focus is cleared
 <c><see cref="M:Android.Views.View.OnFocusChanged(System.Boolean,Android.Views.FocusSearchDirection,Android.Views.FocusSearchDirection)" /></c> is called.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> When a View clears focus the framework is trying
 to give focus to the first focusable View from the top. Hence, if this
 View is the first from the top that can take focus, then all callbacks
 related to clearing focus will be invoked after which the framework will
 give focus to this view.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#clearFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clickable">
      <MemberSignature Language="C#" Value="public virtual bool Clickable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Clickable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isClickable", "()Z", "GetIsClickableHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setClickable", "(Z)V", "GetSetClickable_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this view reacts to click events or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isClickable()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether this view reacts to click events or not.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setClickable(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Enables or disables click events for this view. When a view
 is clickable it will change its state to "pressed" on every click.
 Subclasses should set the view clickable to visually react to
 user's clicks.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Clickable" />
        <altmember cref="P:Android.Views.View.Clickable" />
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Rect ClipBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getClipBounds", "()Landroid/graphics/Rect;", "GetGetClipBoundsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setClipBounds", "(Landroid/graphics/Rect;)V", "GetSetClipBounds_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a copy of the current <c><see cref="P:Android.Views.View.ClipBounds" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getClipBounds()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns a copy of the current <c><see cref="P:Android.Views.View.ClipBounds" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setClipBounds(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets a rectangular area on this view to which the view will be clipped
 when it is drawn. Setting the value to null will remove the clip bounds
 and the view will draw normally, using its full bounds.</para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="ClipToOutline">
      <MemberSignature Language="C#" Value="public bool ClipToOutline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToOutline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getClipToOutline", "()Z", "GetGetClipToOutlineHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setClipToOutline", "(Z)V", "GetSetClipToOutline_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the Outline should be used to clip the contents of the View.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getClipToOutline()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether the Outline should be used to clip the contents of the View.
 
 Note that this flag will only be respected if the View's Outline returns true from
 <c><see cref="M:Android.Graphics.Outline.CanClip" /></c>.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setClipToOutline(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the View's Outline should be used to clip the contents of the View.
 
 Only a single non-rectangular clip can be applied on a View at any time.
 Circular clips from a <c><see cref="M:Android.Views.ViewAnimationUtils.CreateCircularReveal(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> animation take priority over Outline clipping, and
 child Outline clipping takes priority over Outline clipping done by a
 parent.
 
 Note that this flag will only be respected if the View's Outline returns true from
 <c><see cref="M:Android.Graphics.Outline.CanClip" /></c>.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.Views.View.OutlineProvider" />
        <altmember cref="P:Android.Views.View.ClipToOutline" />
        <altmember cref="P:Android.Views.View.OutlineProvider" />
        <altmember cref="P:Android.Views.View.ClipToOutline" />
      </Docs>
    </Member>
    <Member MemberName="CombineMeasuredStates">
      <MemberSignature Language="C#" Value="public static int CombineMeasuredStates (int curState, int newState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CombineMeasuredStates(int32 curState, int32 newState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("combineMeasuredStates", "(II)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curState" Type="System.Int32" />
        <Parameter Name="newState" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="curState">The current state as returned from a view or the result
 of combining multiple views.</param>
        <param name="newState">The new view state to combine.</param>
        <summary>Merge two states as returned by <c><see cref="P:Android.Views.View.MeasuredState" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Merge two states as returned by <c><see cref="P:Android.Views.View.MeasuredState" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#combineMeasuredStates(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ComputeHorizontalScrollExtent">
      <MemberSignature Language="C#" Value="protected virtual int ComputeHorizontalScrollExtent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeHorizontalScrollExtent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeHorizontalScrollExtent", "()I", "GetComputeHorizontalScrollExtentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the horizontal extent of the horizontal scrollbar's thumb
 within the horizontal range. This value is used to compute the length
 of the thumb within the scrollbar's track.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeHorizontalScrollRange" /></c> and
 <c><see cref="M:Android.Views.View.ComputeHorizontalScrollOffset" /></c>.</para>
          <para tool="javadoc-to-mdoc">The default extent is the drawing width of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeHorizontalScrollExtent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollRange" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollOffset" />
      </Docs>
    </Member>
    <Member MemberName="ComputeHorizontalScrollOffset">
      <MemberSignature Language="C#" Value="protected virtual int ComputeHorizontalScrollOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeHorizontalScrollOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeHorizontalScrollOffset", "()I", "GetComputeHorizontalScrollOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the horizontal offset of the horizontal scrollbar's thumb
 within the horizontal range. This value is used to compute the position
 of the thumb within the scrollbar's track.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeHorizontalScrollRange" /></c> and
 <c><see cref="M:Android.Views.View.ComputeHorizontalScrollExtent" /></c>.</para>
          <para tool="javadoc-to-mdoc">The default offset is the scroll offset of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeHorizontalScrollOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollRange" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollExtent" />
      </Docs>
    </Member>
    <Member MemberName="ComputeHorizontalScrollRange">
      <MemberSignature Language="C#" Value="protected virtual int ComputeHorizontalScrollRange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeHorizontalScrollRange() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeHorizontalScrollRange", "()I", "GetComputeHorizontalScrollRangeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the horizontal range that the horizontal scrollbar
 represents.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeHorizontalScrollExtent" /></c> and
 <c><see cref="M:Android.Views.View.ComputeHorizontalScrollOffset" /></c>.</para>
          <para tool="javadoc-to-mdoc">The default range is the drawing width of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeHorizontalScrollRange()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollExtent" />
        <altmember cref="M:Android.Views.View.ComputeHorizontalScrollOffset" />
      </Docs>
    </Member>
    <Member MemberName="ComputeScroll">
      <MemberSignature Language="C#" Value="public virtual void ComputeScroll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ComputeScroll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeScroll", "()V", "GetComputeScrollHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by a parent to request that a child update its values for mScrollX
 and mScrollY if necessary.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a parent to request that a child update its values for mScrollX
 and mScrollY if necessary. This will typically be done if the child is
 animating a scroll using a <c><see cref="T:Android.Widget.Scroller" /></c>
 object.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeScroll()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ComputeSystemWindowInsets">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowInsets ComputeSystemWindowInsets (Android.Views.WindowInsets in, Android.Graphics.Rect outLocalInsets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.WindowInsets ComputeSystemWindowInsets(class Android.Views.WindowInsets in, class Android.Graphics.Rect outLocalInsets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeSystemWindowInsets", "(Landroid/view/WindowInsets;Landroid/graphics/Rect;)Landroid/view/WindowInsets;", "GetComputeSystemWindowInsets_Landroid_view_WindowInsets_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowInsets</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="Android.Views.WindowInsets" />
        <Parameter Name="outLocalInsets" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="in">Insets currently being processed by this View, likely received as a parameter
           to <c><see cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" /></c>.</param>
        <param name="outLocalInsets">A Rect that will receive the insets that should be consumed
                       by this view</param>
        <summary>Compute insets that should be consumed by this view and the ones that should propagate
 to those under it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compute insets that should be consumed by this view and the ones that should propagate
 to those under it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeSystemWindowInsets(android.view.WindowInsets, android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeVerticalScrollExtent">
      <MemberSignature Language="C#" Value="protected virtual int ComputeVerticalScrollExtent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeVerticalScrollExtent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeVerticalScrollExtent", "()I", "GetComputeVerticalScrollExtentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the vertical extent of the vertical scrollbar's thumb
 within the vertical range. This value is used to compute the length
 of the thumb within the scrollbar's track.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeVerticalScrollRange" /></c> and
 <c><see cref="M:Android.Views.View.ComputeVerticalScrollOffset" /></c>.</para>
          <para tool="javadoc-to-mdoc">The default extent is the drawing height of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeVerticalScrollExtent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollRange" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollOffset" />
      </Docs>
    </Member>
    <Member MemberName="ComputeVerticalScrollOffset">
      <MemberSignature Language="C#" Value="protected virtual int ComputeVerticalScrollOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeVerticalScrollOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeVerticalScrollOffset", "()I", "GetComputeVerticalScrollOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the vertical offset of the vertical scrollbar's thumb
 within the horizontal range. This value is used to compute the position
 of the thumb within the scrollbar's track.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeVerticalScrollRange" /></c> and
 <c><see cref="M:Android.Views.View.ComputeVerticalScrollExtent" /></c>.</para>
          <para tool="javadoc-to-mdoc">The default offset is the scroll offset of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeVerticalScrollOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollRange" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollExtent" />
      </Docs>
    </Member>
    <Member MemberName="ComputeVerticalScrollRange">
      <MemberSignature Language="C#" Value="protected virtual int ComputeVerticalScrollRange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ComputeVerticalScrollRange() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeVerticalScrollRange", "()I", "GetComputeVerticalScrollRangeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Compute the vertical range that the vertical scrollbar represents.</para>
          <para tool="javadoc-to-mdoc">The range is expressed in arbitrary units that must be the same as the
 units used by <c><see cref="M:Android.Views.View.ComputeVerticalScrollExtent" /></c> and
 <c><see cref="M:Android.Views.View.ComputeVerticalScrollOffset" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#computeVerticalScrollRange()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollExtent" />
        <altmember cref="M:Android.Views.View.ComputeVerticalScrollOffset" />
      </Docs>
    </Member>
    <Member MemberName="ContentDescription">
      <MemberSignature Language="C#" Value="public string ContentDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentDescriptionFormatted">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ICharSequence ContentDescriptionFormatted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ICharSequence ContentDescriptionFormatted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContentDescription", "()Ljava/lang/CharSequence;", "GetGetContentDescriptionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setContentDescription", "(Ljava/lang/CharSequence;)V", "GetSetContentDescription_Ljava_lang_CharSequence_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <c><see cref="T:Android.Views.View" /></c> description.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getContentDescription()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the <c><see cref="T:Android.Views.View" /></c> description. It briefly describes the view and is
 primarily used for accessibility support. Set this property to enable
 better accessibility support for your application. This is especially
 true for views that do not have textual representation (For example,
 ImageButton).</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setContentDescription(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the <c><see cref="T:Android.Views.View" /></c> description. It briefly describes the view and is
 primarily used for accessibility support. Set this property to enable
 better accessibility support for your application. This is especially
 true for views that do not have textual representation (For example,
 ImageButton).</para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the context the view is running in, through which it can
 access the current theme, resources, etc.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the context the view is running in, through which it can
 access the current theme, resources, etc.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.CreateContextMenuEventArgs&gt; ContextMenuCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/CreateContextMenuEventArgs&gt; ContextMenuCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+CreateContextMenuEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuInfo">
      <MemberSignature Language="C#" Value="protected virtual Android.Views.IContextMenuContextMenuInfo ContextMenuInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IContextMenuContextMenuInfo ContextMenuInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContextMenuInfo", "()Landroid/view/ContextMenu$ContextMenuInfo;", "GetGetContextMenuInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IContextMenuContextMenuInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Views should implement this if they have extra information to associate
 with the context menu.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Views should implement this if they have extra information to associate
 with the context menu. The return result is supplied as a parameter to
 the <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)" /></c>
 callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getContextMenuInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityNodeInfo">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Accessibility.AccessibilityNodeInfo CreateAccessibilityNodeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.Accessibility.AccessibilityNodeInfo CreateAccessibilityNodeInfo() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createAccessibilityNodeInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo;", "GetCreateAccessibilityNodeInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Accessibility.AccessibilityNodeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> representing this view from the
 point of view of an <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> representing this view from the
 point of view of an <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>.
 This method is responsible for obtaining an accessibility node info from a
 pool of reusable instances and calling
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityNodeInfo(Android.Views.Accessibility.AccessibilityNodeInfo)" /></c> on this view to
 initialize the former.
 </para>
          <para tool="javadoc-to-mdoc">
 Note: The client is responsible for recycling the obtained instance by calling
       <c><see cref="M:Android.Views.Accessibility.AccessibilityNodeInfo.Recycle" /></c> to minimize object creation.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#createAccessibilityNodeInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateContextMenu">
      <MemberSignature Language="C#" Value="public virtual void CreateContextMenu (Android.Views.IContextMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateContextMenu(class Android.Views.IContextMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createContextMenu", "(Landroid/view/ContextMenu;)V", "GetCreateContextMenu_Landroid_view_ContextMenu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu to populate
</param>
        <summary>Show the context menu for this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Show the context menu for this view. It is not safe to hold on to the
 menu after returning from this method.

 You should normally not overload this method. Overload
 <c><see cref="M:Android.Views.View.OnCreateContextMenu(Android.Views.IContextMenu)" /></c> or define an
 <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html" /></c> to add items to the context menu.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#createContextMenu(android.view.ContextMenu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DestroyDrawingCache">
      <MemberSignature Language="C#" Value="public virtual void DestroyDrawingCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyDrawingCache() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("destroyDrawingCache", "()V", "GetDestroyDrawingCacheHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Frees the resources used by the drawing cache. If you call
 <c><see cref="M:Android.Views.View.BuildDrawingCache" /></c> manually without calling
 <c><see cref="P:Android.Views.View.DrawingCacheEnabled" /></c>, you
 should cleanup the cache with this method afterwards.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#destroyDrawingCache()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="M:Android.Views.View.BuildDrawingCache" />
        <altmember cref="P:Android.Views.View.DrawingCache" />
      </Docs>
    </Member>
    <Member MemberName="DispatchApplyWindowInsets">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowInsets DispatchApplyWindowInsets (Android.Views.WindowInsets insets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.WindowInsets DispatchApplyWindowInsets(class Android.Views.WindowInsets insets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchApplyWindowInsets", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;", "GetDispatchApplyWindowInsets_Landroid_view_WindowInsets_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowInsets</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insets" Type="Android.Views.WindowInsets" />
      </Parameters>
      <Docs>
        <param name="insets">Insets to apply</param>
        <summary>Request to apply the given window insets to this view or another view in its subtree.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request to apply the given window insets to this view or another view in its subtree.

 </para>
          <para tool="javadoc-to-mdoc">This method should be called by clients wishing to apply insets corresponding to areas
 obscured by window decorations or overlays. This can include the status and navigation bars,
 action bars, input methods and more. New inset categories may be added in the future.
 The method returns the insets provided minus any that were applied by this view or its
 children.</para>
          <para tool="javadoc-to-mdoc">Clients wishing to provide custom behavior should override the
 <c><see cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" /></c> method or alternatively provide a
 <c><see cref="!:NoType:android/view/View$OnApplyWindowInsetsListener;Href=../../../reference/android/view/View.OnApplyWindowInsetsListener.html" /></c> via the
 <c><see cref="M:Android.Views.View.SetOnApplyWindowInsetsListener(.IOnApplyWindowInsetsListener)" /></c>
 method.</para>
          <para tool="javadoc-to-mdoc">This method replaces the older <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> method.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchApplyWindowInsets(android.view.WindowInsets)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void DispatchConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetDispatchConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new resource configuration.</param>
        <summary>Dispatch a notification about a resource configuration change down
 the view hierarchy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a notification about a resource configuration change down
 the view hierarchy.
 ViewGroups should override to route to their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Views.View.OnConfigurationChanged(Android.Content.Res.Configuration)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchDisplayHint">
      <MemberSignature Language="C#" Value="public virtual void DispatchDisplayHint (Android.Views.ViewStates hint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchDisplayHint(valuetype Android.Views.ViewStates hint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchDisplayHint", "(I)V", "GetDispatchDisplayHint_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hint" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="hint">A hint about whether or not this view is displayed:
 <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>Dispatch a hint about whether this view is displayed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a hint about whether this view is displayed. For instance, when
 a View moves out of the screen, it might receives a display hint indicating
 the view is not displayed. Applications should not <i>rely</i> on this hint
 as there is no guarantee that they will receive one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchDisplayHint(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DispatchDragEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchDragEvent (Android.Views.DragEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchDragEvent(class Android.Views.DragEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchDragEvent", "(Landroid/view/DragEvent;)Z", "GetDispatchDragEvent_Landroid_view_DragEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.DragEvent" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Detects if this View is enabled and has a drag event listener.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detects if this View is enabled and has a drag event listener.
 If both are true, then it calls the drag event listener with the
 <c><see cref="T:Android.Views.DragEvent" /></c> it received. If the drag event listener returns
 <c>true</c>, then dispatchDragEvent() returns <c>true</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 For all other cases, the method calls the
 <c><see cref="M:Android.Views.View.OnDragEvent(Android.Views.DragEvent)" /></c> drag event handler
 method and returns its result.
 </para>
          <para tool="javadoc-to-mdoc">
 This ensures that a drag event is always consumed, even if the View does not have a drag
 event listener. However, if the View has a listener and the listener returns true, then
 onDragEvent() is not called.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchDragEvent(android.view.DragEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchDraw">
      <MemberSignature Language="C#" Value="protected virtual void DispatchDraw (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchDraw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchDraw", "(Landroid/graphics/Canvas;)V", "GetDispatchDraw_Landroid_graphics_Canvas_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">the canvas on which to draw the view
</param>
        <summary>Called by draw to draw the child views.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by draw to draw the child views. This may be overridden
 by derived classes to gain control just before its children are drawn
 (but after its own view has been drawn).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchDraw(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericFocusedEvent">
      <MemberSignature Language="C#" Value="protected virtual bool DispatchGenericFocusedEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DispatchGenericFocusedEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchGenericFocusedEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericFocusedEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Dispatch a generic motion event to the currently focused view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a generic motion event to the currently focused view.
 </para>
          <para tool="javadoc-to-mdoc">
 Do not call this method directly.
 Call <c><see cref="M:Android.Views.View.DispatchGenericMotionEvent(Android.Views.MotionEvent)" /></c> instead.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchGenericFocusedEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchGenericMotionEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchGenericMotionEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericMotionEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Dispatch a generic motion event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a generic motion event.
 </para>
          <para tool="javadoc-to-mdoc">
 Generic motion events with source class <c><see cref="F:Android.Views.InputDevice.SourceClassPointer" /></c>
 are delivered to the view under the pointer.  All other generic motion events are
 delivered to the focused view.  Hover events are handled specially and are delivered
 to <c><see cref="M:Android.Views.View.OnHoverEvent(Android.Views.MotionEvent)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchGenericMotionEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericPointerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool DispatchGenericPointerEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DispatchGenericPointerEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchGenericPointerEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericPointerEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Dispatch a generic motion event to the view under the first pointer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a generic motion event to the view under the first pointer.
 </para>
          <para tool="javadoc-to-mdoc">
 Do not call this method directly.
 Call <c><see cref="M:Android.Views.View.DispatchGenericMotionEvent(Android.Views.MotionEvent)" /></c> instead.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchGenericPointerEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="DispatchHoverEvent">
      <MemberSignature Language="C#" Value="protected virtual bool DispatchHoverEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DispatchHoverEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchHoverEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchHoverEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Dispatch a hover event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a hover event.
 </para>
          <para tool="javadoc-to-mdoc">
 Do not call this method directly.
 Call <c><see cref="M:Android.Views.View.DispatchGenericMotionEvent(Android.Views.MotionEvent)" /></c> instead.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchHoverEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event to be dispatched.</param>
        <summary>Dispatch a key event to the next view on the focus path.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a key event to the next view on the focus path. This path runs
 from the top of the view tree down to the currently focused view. If this
 view has focus, it will dispatch to itself. Otherwise it will dispatch
 the next node down the focus path. This method also fires any key
 listeners.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchKeyEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyEventPreIme">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyEventPreIme (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyEventPreIme(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyEventPreIme", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEventPreIme_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event to be dispatched.</param>
        <summary>Dispatch a key event before it is processed by any input method
 associated with the view hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a key event before it is processed by any input method
 associated with the view hierarchy.  This can be used to intercept
 key events in special situations before the IME consumes them; a
 typical example would be handling the BACK key to update the application's
 UI instead of allowing the IME to see it and close itself.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchKeyEventPreIme(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyShortcutEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyShortcutEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyShortcutEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyShortcutEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event to be dispatched.</param>
        <summary>Dispatches a key shortcut event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatches a key shortcut event.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchKeyShortcutEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchNestedFling">
      <MemberSignature Language="C#" Value="public virtual bool DispatchNestedFling (float velocityX, float velocityY, bool consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchNestedFling(float32 velocityX, float32 velocityY, bool consumed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchNestedFling", "(FFZ)Z", "GetDispatchNestedFling_FFZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
        <Parameter Name="consumed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="velocityX">Horizontal fling velocity in pixels per second</param>
        <param name="velocityY">Vertical fling velocity in pixels per second</param>
        <param name="consumed">true if the child consumed the fling, false otherwise</param>
        <summary>Dispatch a fling to a nested scrolling parent.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a fling to a nested scrolling parent.

 </para>
          <para tool="javadoc-to-mdoc">This method should be used to indicate that a nested scrolling child has detected
 suitable conditions for a fling. Generally this means that a touch scroll has ended with a
 <c><see cref="T:Android.Views.VelocityTracker" /></c> in the direction of scrolling that meets or exceeds
 the <c><see cref="P:Android.Views.ViewConfiguration.ScaledMinimumFlingVelocity" /></c>
 along a scrollable axis.</para>
          <para tool="javadoc-to-mdoc">If a nested scrolling child view would normally fling but it is at the edge of
 its own content, it can use this method to delegate the fling to its nested scrolling
 parent instead. The parent may optionally consume the fling or observe a child fling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchNestedFling(float, float, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchNestedPreFling">
      <MemberSignature Language="C#" Value="public virtual bool DispatchNestedPreFling (float velocityX, float velocityY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchNestedPreFling(float32 velocityX, float32 velocityY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchNestedPreFling", "(FF)Z", "GetDispatchNestedPreFling_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="velocityX">Horizontal fling velocity in pixels per second</param>
        <param name="velocityY">Vertical fling velocity in pixels per second</param>
        <summary>Dispatch a fling to a nested scrolling parent before it is processed by this view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a fling to a nested scrolling parent before it is processed by this view.

 <list type="bullet"><item><term>If a custom view is paged and needs to settle to a fixed page-point, do not
     call <c>dispatchNestedPreFling</c>; consume the fling and settle to a valid
     position regardless.</term></item><item><term>If a nested parent does consume the fling, this view should not scroll at all,
     even to settle back to a valid idle position.</term></item></list></para>
          <para tool="javadoc-to-mdoc">Nested pre-fling events are to nested fling events what touch intercept is to touch
 and what nested pre-scroll is to nested scroll. <c>dispatchNestedPreFling</c>
 offsets an opportunity for the parent view in a nested fling to fully consume the fling
 before the child view consumes it. If this method returns <c>true</c>, a nested
 parent view consumed the fling and this view should not scroll as a result.</para>
          <para tool="javadoc-to-mdoc">For a better user experience, only one view in a nested scrolling chain should consume
 the fling at a time. If a parent view consumed the fling this method will return false.
 Custom view implementations should account for this in two ways:</para>
          <para tool="javadoc-to-mdoc">Views should also not offer fling velocities to nested parent views along an axis
 where scrolling is not currently supported; a <c><see cref="T:Android.Widget.ScrollView" /></c>
 should not offer a horizontal fling velocity to its parents since scrolling along that
 axis is not permitted and carrying velocity along that motion does not make sense.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchNestedPreFling(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchNestedPreScroll">
      <MemberSignature Language="C#" Value="public virtual bool DispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchNestedPreScroll(int32 dx, int32 dy, int32[] consumed, int32[] offsetInWindow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchNestedPreScroll", "(II[I[I)Z", "GetDispatchNestedPreScroll_IIarrayIarrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
        <Parameter Name="consumed" Type="System.Int32[]" />
        <Parameter Name="offsetInWindow" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="dx">Horizontal scroll distance in pixels</param>
        <param name="dy">Vertical scroll distance in pixels</param>
        <param name="consumed">Output. If not null, consumed[0] will contain the consumed component of dx
                 and consumed[1] the consumed dy.</param>
        <param name="offsetInWindow">Optional. If not null, on return this will contain the offset
                       in local view coordinates of this view from before this operation
                       to after it completes. View implementations may use this to adjust
                       expected input coordinate tracking.</param>
        <summary>Dispatch one step of a nested scroll in progress before this view consumes any portion of it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch one step of a nested scroll in progress before this view consumes any portion of it.

 </para>
          <para tool="javadoc-to-mdoc">Nested pre-scroll events are to nested scroll events what touch intercept is to touch.
 <c>dispatchNestedPreScroll</c> offers an opportunity for the parent view in a nested
 scrolling operation to consume some or all of the scroll operation before the child view
 consumes it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchNestedPreScroll(int, int, int[], int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.View.DispatchNestedScroll(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchNestedScroll">
      <MemberSignature Language="C#" Value="public virtual bool DispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchNestedScroll(int32 dxConsumed, int32 dyConsumed, int32 dxUnconsumed, int32 dyUnconsumed, int32[] offsetInWindow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchNestedScroll", "(IIII[I)Z", "GetDispatchNestedScroll_IIIIarrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dxConsumed" Type="System.Int32" />
        <Parameter Name="dyConsumed" Type="System.Int32" />
        <Parameter Name="dxUnconsumed" Type="System.Int32" />
        <Parameter Name="dyUnconsumed" Type="System.Int32" />
        <Parameter Name="offsetInWindow" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="dxConsumed">Horizontal distance in pixels consumed by this view during this scroll step</param>
        <param name="dyConsumed">Vertical distance in pixels consumed by this view during this scroll step</param>
        <param name="dxUnconsumed">Horizontal scroll distance in pixels not consumed by this view</param>
        <param name="dyUnconsumed">Horizontal scroll distance in pixels not consumed by this view</param>
        <param name="offsetInWindow">Optional. If not null, on return this will contain the offset
                       in local view coordinates of this view from before this operation
                       to after it completes. View implementations may use this to adjust
                       expected input coordinate tracking.</param>
        <summary>Dispatch one step of a nested scroll in progress.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch one step of a nested scroll in progress.

 </para>
          <para tool="javadoc-to-mdoc">Implementations of views that support nested scrolling should call this to report
 info about a scroll in progress to the current nested scrolling parent. If a nested scroll
 is not currently in progress or nested scrolling is not
 <c><see cref="P:Android.Views.View.NestedScrollingEnabled" /></c> for this view this method does nothing.</para>
          <para tool="javadoc-to-mdoc">Compatible View implementations should also call
 <c><see cref="M:Android.Views.View.DispatchNestedPreScroll(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> before
 consuming a component of the scroll event themselves.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchNestedScroll(int, int, int, int, int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.View.DispatchNestedPreScroll(System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchPopulateAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchPopulateAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event.</param>
        <summary>Dispatches an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to the <c><see cref="T:Android.Views.View" /></c> first and then
 to its children for adding their text content to the event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatches an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to the <c><see cref="T:Android.Views.View" /></c> first and then
 to its children for adding their text content to the event. Note that the
 event text is populated in a separate dispatch path since we add to the
 event not only the text of the source but also the text of all its descendants.
 A typical implementation will call
 <c><see cref="M:Android.Views.View.OnPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> on the this view
 and then call the <c><see cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c>
 on each child. Override this method if custom population of the event text
 content is required.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Accessibility events of certain types are not dispatched for
 populating the event text via this method. For details refer to <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="DispatchRestoreInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void DispatchRestoreInstanceState (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchRestoreInstanceState(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchRestoreInstanceState", "(Landroid/util/SparseArray;)V", "GetDispatchRestoreInstanceState_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchSaveInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void DispatchSaveInstanceState (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchSaveInstanceState(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSaveInstanceState", "(Landroid/util/SparseArray;)V", "GetDispatchSaveInstanceState_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchSetActivated">
      <MemberSignature Language="C#" Value="protected virtual void DispatchSetActivated (bool activated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchSetActivated(bool activated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSetActivated", "(Z)V", "GetDispatchSetActivated_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="activated">The new activated state
</param>
        <summary>Dispatch setActivated to all of this View's children.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch setActivated to all of this View's children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchSetActivated(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.Activated" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSetPressed">
      <MemberSignature Language="C#" Value="protected virtual void DispatchSetPressed (bool pressed);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchSetPressed(bool pressed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSetPressed", "(Z)V", "GetDispatchSetPressed_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pressed">The new pressed state
</param>
        <summary>Dispatch setPressed to all of this View's children.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch setPressed to all of this View's children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchSetPressed(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Pressed" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSetSelected">
      <MemberSignature Language="C#" Value="protected virtual void DispatchSetSelected (bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchSetSelected(bool selected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSetSelected", "(Z)V", "GetDispatchSetSelected_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selected">The new selected state
</param>
        <summary>Dispatch setSelected to all of this View's children.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch setSelected to all of this View's children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchSetSelected(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Selected" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSystemUiVisibilityChanged">
      <MemberSignature Language="C#" Value="public virtual void DispatchSystemUiVisibilityChanged (Android.Views.SystemUiFlags visibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchSystemUiVisibilityChanged(valuetype Android.Views.SystemUiFlags visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSystemUiVisibilityChanged", "(I)V", "GetDispatchSystemUiVisibilityChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visibility" Type="Android.Views.SystemUiFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="visibility">To be added.</param>
        <summary>Dispatch callbacks to <c><see cref="M:Android.Views.View.SetOnSystemUiVisibilityChangeListener(.IOnSystemUiVisibilityChangeListener)" /></c> down
 the view hierarchy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch callbacks to <c><see cref="M:Android.Views.View.SetOnSystemUiVisibilityChangeListener(.IOnSystemUiVisibilityChangeListener)" /></c> down
 the view hierarchy.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchSystemUiVisibilityChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSystemUiVisibilityChanged">
      <MemberSignature Language="C#" Value="public void DispatchSystemUiVisibilityChanged (int visibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchSystemUiVisibilityChanged(int32 visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visibility" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="visibility">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTouchEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTouchEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Pass the touch screen motion event down to the target view, or this
 view if it is the target.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Pass the touch screen motion event down to the target view, or this
 view if it is the target.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTrackballEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTrackballEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTrackballEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be dispatched.</param>
        <summary>Pass a trackball motion event down to the focused view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Pass a trackball motion event down to the focused view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchTrackballEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchUnhandledMove">
      <MemberSignature Language="C#" Value="public virtual bool DispatchUnhandledMove (Android.Views.View focused, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchUnhandledMove(class Android.Views.View focused, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchUnhandledMove", "(Landroid/view/View;I)Z", "GetDispatchUnhandledMove_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focused" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="focused">The currently focused view.</param>
        <param name="direction">The direction focus wants to move. One of FOCUS_UP,
        FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT.</param>
        <summary>This method is the last chance for the focused view and its ancestors to
 respond to an arrow key.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is the last chance for the focused view and its ancestors to
 respond to an arrow key. This is called when the focused view did not
 consume the key internally, nor could the view system find a new view in
 the requested direction to give focus to.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchUnhandledMove(android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchVisibilityChanged">
      <MemberSignature Language="C#" Value="protected virtual void DispatchVisibilityChanged (Android.Views.View changedView, Android.Views.ViewStates visibility);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchVisibilityChanged(class Android.Views.View changedView, valuetype Android.Views.ViewStates visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchVisibilityChanged", "(Landroid/view/View;I)V", "GetDispatchVisibilityChanged_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changedView" Type="Android.Views.View" />
        <Parameter Name="visibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="changedView">The view whose visibility changed. Could be 'this' or
 an ancestor view.</param>
        <param name="visibility">The new visibility of changedView: <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>,
 <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>Dispatch a view visibility change down the view hierarchy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a view visibility change down the view hierarchy.
 ViewGroups should override to route to their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchVisibilityChanged(android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DispatchWindowFocusChanged">
      <MemberSignature Language="C#" Value="public virtual void DispatchWindowFocusChanged (bool hasFocus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchWindowFocusChanged(bool hasFocus) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchWindowFocusChanged", "(Z)V", "GetDispatchWindowFocusChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasFocus" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasFocus">True if the window containing this view now has focus,
        false otherwise.
</param>
        <summary>Called when the window containing this view gains or loses window focus.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the window containing this view gains or loses window focus.
 ViewGroups should override to route to their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchWindowFocusChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchWindowSystemUiVisiblityChanged">
      <MemberSignature Language="C#" Value="public virtual void DispatchWindowSystemUiVisiblityChanged (Android.Views.SystemUiFlags visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchWindowSystemUiVisiblityChanged(valuetype Android.Views.SystemUiFlags visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchWindowSystemUiVisiblityChanged", "(I)V", "GetDispatchWindowSystemUiVisiblityChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="Android.Views.SystemUiFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="visible">To be added.</param>
        <summary>Dispatch callbacks to <c><see cref="M:Android.Views.View.OnWindowSystemUiVisibilityChanged(Android.Views.SystemUiFlags)" /></c> down
 the view hierarchy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch callbacks to <c><see cref="M:Android.Views.View.OnWindowSystemUiVisibilityChanged(Android.Views.SystemUiFlags)" /></c> down
 the view hierarchy.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchWindowSystemUiVisiblityChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DispatchWindowVisibilityChanged">
      <MemberSignature Language="C#" Value="public virtual void DispatchWindowVisibilityChanged (Android.Views.ViewStates visibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchWindowVisibilityChanged(valuetype Android.Views.ViewStates visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchWindowVisibilityChanged", "(I)V", "GetDispatchWindowVisibilityChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="visibility">The new visibility of the window.</param>
        <summary>Dispatch a window visibility change down the view hierarchy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatch a window visibility change down the view hierarchy.
 ViewGroups should override to route to their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#dispatchWindowVisibilityChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnWindowVisibilityChanged(Android.Views.ViewStates)" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Display Display { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Display Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDisplay", "()Landroid/view/Display;", "GetGetDisplayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical display to which the view's window has been attached.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the logical display to which the view's window has been attached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDisplay()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.DragEventArgs&gt; Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/DragEventArgs&gt; Drag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+DragEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The Canvas to which the View is rendered.
</param>
        <summary>Manually render this view (and all of its children) to the given Canvas.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Manually render this view (and all of its children) to the given Canvas.
 The view must have already done a full layout before this function is
 called.  When implementing a view, implement
 <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c> instead of overriding this method.
 If you do need to override this method, call the superclass version.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#draw(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawableHotspotChanged">
      <MemberSignature Language="C#" Value="public virtual void DrawableHotspotChanged (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawableHotspotChanged(float32 x, float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drawableHotspotChanged", "(FF)V", "GetDrawableHotspotChanged_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">hotspot x coordinate</param>
        <param name="y">hotspot y coordinate
</param>
        <summary>This function is called whenever the view hotspot changes and needs to
 be propagated to drawables or child views managed by the view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function is called whenever the view hotspot changes and needs to
 be propagated to drawables or child views managed by the view.
 </para>
          <para tool="javadoc-to-mdoc">
 Dispatching to child views is handled by
 <c><see cref="M:Android.Views.View.DispatchDrawableHotspotChanged(System.Single,System.Single)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Be sure to call through to the superclass when overriding this function.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#drawableHotspotChanged(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawableStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void DrawableStateChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DrawableStateChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drawableStateChanged", "()V", "GetDrawableStateChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function is called whenever the state of the view changes in such
 a way that it impacts the state of drawables being shown.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function is called whenever the state of the view changes in such
 a way that it impacts the state of drawables being shown.
 </para>
          <para tool="javadoc-to-mdoc">
 If the View has a StateListAnimator, it will also be called to run necessary state
 change animations.
 </para>
          <para tool="javadoc-to-mdoc">
 Be sure to call through to the superclass when overriding this function.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#drawableStateChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Graphics.Drawables.Drawable.SetState(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="DrawingCache">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Bitmap DrawingCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Bitmap DrawingCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDrawingCache", "()Landroid/graphics/Bitmap;", "GetGetDrawingCacheHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Calling this method is equivalent to calling <c>getDrawingCache(false)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingCache()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.GetDrawingCache(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DrawingCacheBackgroundColor">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Color DrawingCacheBackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.Color DrawingCacheBackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDrawingCacheBackgroundColor", "()I", "GetGetDrawingCacheBackgroundColorHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDrawingCacheBackgroundColor", "(I)V", "GetSetDrawingCacheBackgroundColor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingCacheBackgroundColor()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setDrawingCacheBackgroundColor(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Setting a solid background color for the drawing cache's bitmaps will improve
 performance and memory usage. Note, though that this should only be used if this
 view will always be drawn on top of a solid color.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.DrawingCacheBackgroundColor" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="M:Android.Views.View.BuildDrawingCache" />
        <altmember cref="P:Android.Views.View.DrawingCache" />
      </Docs>
    </Member>
    <Member MemberName="DrawingCacheEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DrawingCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DrawingCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDrawingCacheEnabled", "()Z", "GetIsDrawingCacheEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDrawingCacheEnabled", "(Z)V", "GetSetDrawingCacheEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isDrawingCacheEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicates whether the drawing cache is enabled for this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setDrawingCacheEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Enables or disables the drawing cache. When the drawing cache is enabled, the next call
 to <c><see cref="P:Android.Views.View.DrawingCache" /></c> or <c><see cref="M:Android.Views.View.BuildDrawingCache" /></c> will draw the view in a
 bitmap. Calling <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c> will not draw from the cache when
 the cache is enabled. To benefit from the cache, you must request the drawing cache by
 calling <c><see cref="P:Android.Views.View.DrawingCache" /></c> and draw it on screen if the returned bitmap is not
 null.</para>
          <para tool="javadoc-to-mdoc">Enabling the drawing cache is similar to
 <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c> when hardware
 acceleration is turned off. When hardware acceleration is turned on, enabling the
 drawing cache has no effect on rendering because the system uses a different mechanism
 for acceleration which ignores the flag. If you want to use a Bitmap for the view, even
 when hardware acceleration is enabled, see <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c>
 for information on how to enable software and hardware layers.</para>
          <para tool="javadoc-to-mdoc">This API can be used to manually generate
 a bitmap copy of this view, by setting the flag to <c>true</c> and calling
 <c><see cref="P:Android.Views.View.DrawingCache" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCache" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCache" />
        <altmember cref="M:Android.Views.View.BuildDrawingCache" />
        <altmember cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType, Android.Graphics.Paint)" />
      </Docs>
    </Member>
    <Member MemberName="DrawingCacheQuality">
      <MemberSignature Language="C#" Value="public virtual Android.Views.DrawingCacheQuality DrawingCacheQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.DrawingCacheQuality DrawingCacheQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDrawingCacheQuality", "()I", "GetGetDrawingCacheQualityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDrawingCacheQuality", "(I)V", "GetSetDrawingCacheQuality_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DrawingCacheQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the quality of the drawing cache.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingCacheQuality()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the quality of the drawing cache.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setDrawingCacheQuality(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the drawing cache quality of this view. This value is used only when the
 drawing cache is enabled</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.DrawingCacheQuality" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheQuality" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="DrawingTime">
      <MemberSignature Language="C#" Value="public virtual long DrawingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 DrawingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDrawingTime", "()J", "GetGetDrawingTimeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Return the time at which the drawing of the view hierarchy started.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingTime()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DuplicateParentStateEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DuplicateParentStateEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DuplicateParentStateEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDuplicateParentStateEnabled", "()Z", "GetIsDuplicateParentStateEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDuplicateParentStateEnabled", "(Z)V", "GetSetDuplicateParentStateEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isDuplicateParentStateEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicates whether this duplicates its drawable state from its parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setDuplicateParentStateEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Enables or disables the duplication of the parent's state into this view. When
 duplication is enabled, this view gets its drawable state from its parent rather
 than from its own internal properties.</para>
          <para tool="javadoc-to-mdoc">Note: in the current implementation, setting this property to true after the
 view was added to a ViewGroup might have no effect at all. This property should
 always be used from XML or set to true before adding this view to a ViewGroup.</para>
          <para tool="javadoc-to-mdoc">Note: if this view's parent addStateFromChildren property is enabled and this
 property is enabled, an exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">Note: if the child view uses and updates additional states which are unknown to the
 parent, these states should not be affected by this method.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
        <altmember cref="P:Android.Views.View.DuplicateParentStateEnabled" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
        <altmember cref="P:Android.Views.View.DuplicateParentStateEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Elevation">
      <MemberSignature Language="C#" Value="public virtual float Elevation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Elevation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getElevation", "()F", "GetGetElevationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setElevation", "(F)V", "GetSetElevation_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The base elevation of this view relative to its parent, in pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getElevation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The base elevation of this view relative to its parent, in pixels.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setElevation(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the base elevation of this view, in pixels.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EmptyStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EmptyStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EMPTY_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view has no states set.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view has no states set. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#EMPTY_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isEnabled", "()Z", "GetIsEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setEnabled", "(Z)V", "GetSetEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the enabled status for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the enabled status for this view. The interpretation of the
 enabled state varies by subclass.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the enabled state of this view. The interpretation of the enabled
 state varies by subclass.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnabledFocusedSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledFocusedSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledFocusedSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_FOCUSED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled, focused and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled, focused and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledFocusedSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledFocusedSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledFocusedSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled, focused, selected and its window
 has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled, focused, selected and its window
 has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled and has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled and has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledFocusedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledFocusedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledFocusedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled, focused and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled, focused and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled, selected and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled, selected and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="EnabledStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="EnabledWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; EnabledWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; EnabledWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENABLED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is enabled and that its window has focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is enabled and that its window has focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#ENABLED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="FilterTouchesWhenObscured">
      <MemberSignature Language="C#" Value="public virtual bool FilterTouchesWhenObscured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterTouchesWhenObscured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFilterTouchesWhenObscured", "()Z", "GetGetFilterTouchesWhenObscuredHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFilterTouchesWhenObscured", "(Z)V", "GetSetFilterTouchesWhenObscured_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the framework should discard touches when the view's
 window is obscured by another visible window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getFilterTouchesWhenObscured()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets whether the framework should discard touches when the view's
 window is obscured by another visible window.
 Refer to the <c><see cref="T:Android.Views.View" /></c> security documentation for more details.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the framework should discard touches when the view's
 window is obscured by another visible window.
 Refer to the <c><see cref="T:Android.Views.View" /></c> security documentation for more details.</para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="P:Android.Views.View.FilterTouchesWhenObscured" />
        <altmember cref="P:Android.Views.View.FilterTouchesWhenObscured" />
      </Docs>
    </Member>
    <Member MemberName="FindFocus">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FindFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FindFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findFocus", "()Landroid/view/View;", "GetFindFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Find the view in the hierarchy rooted at this view that currently has
 focus.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Find the view in the hierarchy rooted at this view that currently has
 focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#findFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById">
      <MemberSignature Language="C#" Value="public Android.Views.View FindViewById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.View FindViewById(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findViewById", "(I)Landroid/view/View;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">The id to search for.</param>
        <summary>Look for a child view with the given id.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Look for a child view with the given id.  If this view has the given
 id, return this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#findViewById(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T FindViewById&lt;T&gt; (int id) where T : Android.Views.View;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T FindViewById&lt;(class Android.Views.View) T&gt;(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Android.Views.View</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="id">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindViewsWithContentDescription">
      <MemberSignature Language="C#" Value="public const Android.Views.FindViewsWith FindViewsWithContentDescription = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.FindViewsWith FindViewsWithContentDescription = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FIND_VIEWS_WITH_CONTENT_DESCRIPTION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.FindViewsWith enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.FindViewsWith</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Find find views that contain the specified content description.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Find find views that contain the specified content description.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#FIND_VIEWS_WITH_CONTENT_DESCRIPTION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="FindViewsWithText">
      <MemberSignature Language="C#" Value="public virtual void FindViewsWithText (System.Collections.Generic.IList&lt;Android.Views.View&gt; outViews, Java.Lang.ICharSequence searched, Android.Views.FindViewsWith flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindViewsWithText(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; outViews, class Java.Lang.ICharSequence searched, valuetype Android.Views.FindViewsWith flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findViewsWithText", "(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V", "GetFindViewsWithText_Ljava_util_ArrayList_Ljava_lang_CharSequence_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outViews" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
        <Parameter Name="searched" Type="Java.Lang.ICharSequence" />
        <Parameter Name="flags" Type="Android.Views.FindViewsWith">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="outViews">To be added.</param>
        <param name="searched">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindViewsWithText">
      <MemberSignature Language="C#" Value="public void FindViewsWithText (System.Collections.Generic.IList&lt;Android.Views.View&gt; outViews, string searched, Android.Views.FindViewsWith flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FindViewsWithText(class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; outViews, string searched, valuetype Android.Views.FindViewsWith flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outViews" Type="System.Collections.Generic.IList&lt;Android.Views.View&gt;" />
        <Parameter Name="searched" Type="System.String" />
        <Parameter Name="flags" Type="Android.Views.FindViewsWith">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="outViews">To be added.</param>
        <param name="searched">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindViewWithTag">
      <MemberSignature Language="C#" Value="public Android.Views.View FindViewWithTag (Java.Lang.Object tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.View FindViewWithTag(class Java.Lang.Object tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findViewWithTag", "(Ljava/lang/Object;)Landroid/view/View;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="tag">The tag to search for, using "tag.equals(getTag())".</param>
        <summary>Look for a child view with the given tag.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Look for a child view with the given tag.  If this view has the given
 tag, return this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#findViewWithTag(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FitsSystemWindows">
      <MemberSignature Language="C#" Value="public virtual bool FitsSystemWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitsSystemWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFitsSystemWindows", "()Z", "GetGetFitsSystemWindowsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check for state of <c><see cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check for state of <c><see cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" /></c>. If this method
 returns <c>true</c>, the default implementation of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c>
 will be executed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getFitsSystemWindows()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" />
        <altmember cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="FitSystemWindows">
      <MemberSignature Language="C#" Value="protected virtual bool FitSystemWindows (Android.Graphics.Rect insets);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool FitSystemWindows(class Android.Graphics.Rect insets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fitSystemWindows", "(Landroid/graphics/Rect;)Z", "GetFitSystemWindows_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insets" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="insets">Current content insets of the window.  Prior to
 <c><see cref="F:Android.OS.Build+VERSION.JellyBean" tool="ReplaceLinkValue" /></c> you must not modify
 the insets or else you and Android will be unhappy.</param>
        <summary>Called by the view hierarchy when the content insets for a window have
 changed, to allow it to adjust its content to fit within those windows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the view hierarchy when the content insets for a window have
 changed, to allow it to adjust its content to fit within those windows.
 The content insets tell you the space that the status bar, input method,
 and other system windows infringe on the application's window.

 </para>
          <para tool="javadoc-to-mdoc">You do not normally need to deal with this function, since the default
 window decoration given to applications takes care of applying it to the
 content of the window.  If you use <c><see cref="F:Android.Views.View.SystemUiFlagLayoutFullscreen" /></c>
 or <c><see cref="F:Android.Views.View.SystemUiFlagLayoutHideNavigation" /></c> this will not be the case,
 and your content can be placed under those system elements.  You can then
 use this method within your view hierarchy if you have parts of your UI
 which you would like to ensure are not being covered.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation of this method simply applies the content
 insets to the view's padding, consuming that content (modifying the
 insets to be 0), and returning true.  This behavior is off by default, but can
 be enabled through <c><see cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This function's traversal down the hierarchy is depth-first.  The same content
 insets object is propagated down the hierarchy, so any changes made to it will
 be seen by all following views (including potentially ones above in
 the hierarchy since this is a depth-first traversal).  The first view
 that returns true will abort the entire traversal.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation works well for a situation where it is
 used with a container that covers the entire window, allowing it to
 apply the appropriate insets to its content on all edges.  If you need
 a more complicated layout (such as two different views fitting system
 windows, one on the top of the window, and one on the bottom),
 you can override the method and handle the insets however you would like.
 Note that the insets provided by the framework are always relative to the
 far edges of the window, not accounting for the location of the called view
 within that window.  (In fact when this method is called you do not yet know
 where the layout will place the view, as it is done before layout happens.)

 </para>
          <para tool="javadoc-to-mdoc">Note: unlike many View methods, there is no dispatch phase to this
 call.  If you are overriding it in a ViewGroup and want to allow the
 call to continue to your children, you must be sure to call the super
 implementation.

 </para>
          <para tool="javadoc-to-mdoc">Here is a sample layout that makes use of fitting system windows
 to have controls for a video view placed inside of the window decorations
 that it hides and shows.  This can be used with code like the second
 sample (video player) shown in <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>.

 <example><code lang="xml">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent" android:layout_height="match_parent"
    &gt;
    &lt;view class="com.example.android.apis.view.VideoPlayerActivity$Content"
        android:id="@+id/content"
        android:src="@drawable/frantic"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:scaleType="center"
        /&gt;
    &lt;FrameLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fitsSystemWindows="true"
        android:animateLayoutChanges="true"
        &gt;
        &lt;TextView
            android:id="@+id/title"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="top|center_horizontal"
            android:textColor="#ffffffff"
            android:background="#a0000000"
            android:textAppearance="?android:attr/textAppearanceLarge"
            android:gravity="left"
            android:padding="16dp"
            android:text="A title goes here"
            /&gt;
        &lt;Button
            android:id="@+id/play"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:gravity="center"
            android:textSize="28dp"
            /&gt;
        &lt;SeekBar
            android:id="@+id/seekbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom|center_horizontal"
            android:layout_marginBottom="16dp"
            /&gt;
    &lt;/FrameLayout&gt;
&lt;/FrameLayout&gt;</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#fitSystemWindows(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.FitsSystemWindows" />
        <altmember cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFocusable", "()Z", "GetIsFocusableHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFocusable", "(Z)V", "GetSetFocusable_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this View is able to take focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isFocusable()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether this View is able to take focus.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setFocusable(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set whether this view can receive the focus.

 Setting this to false will also ensure that this view is not focusable
 in touch mode.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.FocusableInTouchMode" />
      </Docs>
    </Member>
    <Member MemberName="FocusableInTouchMode">
      <MemberSignature Language="C#" Value="public bool FocusableInTouchMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FocusableInTouchMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFocusableInTouchMode", "()Z", "GetIsFocusableInTouchModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFocusableInTouchMode", "(Z)V", "GetSetFocusableInTouchMode_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When a view is focusable, it may not want to take focus when in touch mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isFocusableInTouchMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>When a view is focusable, it may not want to take focus when in touch mode.
 For example, a button would like focus when the user is navigating via a D-pad
 so that the user can click on it, but once the user starts touching the screen,
 the button shouldn't take focus</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setFocusableInTouchMode(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set whether this view can receive focus while in touch mode.

 Setting this to true will also ensure that this view is focusable.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.FocusChangeEventArgs&gt; FocusChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/FocusChangeEventArgs&gt; FocusChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+FocusChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; FocusedSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FOCUSED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is focused and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is focused and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#FOCUSED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="FocusedSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; FocusedSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is focused, selected and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is focused, selected and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="FocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; FocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is focused.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is focused. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="FocusedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; FocusedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FOCUSED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view has the focus and that its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view has the focus and that its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#FOCUSED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FocusSearch (Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusSearch", "(I)Landroid/view/View;", "GetFocusSearch_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <summary>Find the nearest view in the specified direction that can take focus.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Find the nearest view in the specified direction that can take focus.
 This does not actually give focus to that view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#focusSearch(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ForceLayout">
      <MemberSignature Language="C#" Value="public virtual void ForceLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForceLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forceLayout", "()V", "GetForceLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces this view to be laid out during the next layout pass.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Forces this view to be laid out during the next layout pass.
 This method does not call requestLayout() or forceLayout()
 on the parent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#forceLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateViewId">
      <MemberSignature Language="C#" Value="public static int GenerateViewId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GenerateViewId() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("generateViewId", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generate a value suitable for use in <c><see cref="P:Android.Views.View.Id" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Generate a value suitable for use in <c><see cref="P:Android.Views.View.Id" /></c>.
 This value will not collide with ID values generated at build time by aapt for R.id.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#generateViewId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GenericMotion">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.GenericMotionEventArgs&gt; GenericMotion;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/GenericMotionEventArgs&gt; GenericMotion" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+GenericMotionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSize">
      <MemberSignature Language="C#" Value="public static int GetDefaultSize (int size, int measureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDefaultSize(int32 size, int32 measureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultSize", "(II)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="measureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">Default size for this view</param>
        <param name="measureSpec">Constraints imposed by the parent</param>
        <summary>Utility to return a default size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Utility to return a default size. Uses the supplied size if the
 MeasureSpec imposed no constraints. Will get larger if allowed
 by the MeasureSpec.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDefaultSize(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetDrawableState">
      <MemberSignature Language="C#" Value="public int[] GetDrawableState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetDrawableState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDrawableState", "()[I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return an array of resource IDs of the drawable states representing the
 current state of the view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return an array of resource IDs of the drawable states representing the
 current state of the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawableState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Graphics.Drawables.Drawable.SetState(System.Int32[])" />
        <altmember cref="M:Android.Views.View.DrawableStateChanged" />
        <altmember cref="M:Android.Views.View.OnCreateDrawableState(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDrawingCache">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Bitmap GetDrawingCache (bool autoScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Bitmap GetDrawingCache(bool autoScale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDrawingCache", "(Z)Landroid/graphics/Bitmap;", "GetGetDrawingCache_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoScale" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoScale">Indicates whether the generated bitmap should be scaled based on
        the current density of the screen when the application is in compatibility
        mode.</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Returns the bitmap in which this view drawing is cached. The returned bitmap
 is null when caching is disabled. If caching is enabled and the cache is not ready,
 this method will create it. Calling <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c> will not
 draw from the cache when the cache is enabled. To benefit from the cache, you must
 request the drawing cache by calling this method and draw it on screen if the
 returned bitmap is not null.</para>
          <para tool="javadoc-to-mdoc">Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 this method will create a bitmap of the same size as this view. Because this bitmap
 will be drawn scaled by the parent ViewGroup, the result on screen might show
 scaling artifacts. To avoid such artifacts, you should call this method by setting
 the auto scaling to true. Doing so, however, will generate a bitmap of a different
 size than the view. This implies that your application must be able to handle this
 size.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingCache(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="M:Android.Views.View.BuildDrawingCache(System.Boolean)" />
        <altmember cref="M:Android.Views.View.DestroyDrawingCache" />
      </Docs>
    </Member>
    <Member MemberName="GetDrawingRect">
      <MemberSignature Language="C#" Value="public virtual void GetDrawingRect (Android.Graphics.Rect outRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDrawingRect(class Android.Graphics.Rect outRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDrawingRect", "(Landroid/graphics/Rect;)V", "GetGetDrawingRect_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="outRect">The (scrolled) drawing bounds of the view.
</param>
        <summary>Return the visible drawing bounds of your view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the visible drawing bounds of your view. Fills in the output
 rectangle with the values from getScrollX(), getScrollY(),
 getWidth(), and getHeight(). These bounds do not account for any
 transformation properties currently set on the view, such as
 <c><see cref="P:Android.Views.View.ScaleX" /></c> or <c><see cref="P:Android.Views.View.Rotation" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getDrawingRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFocusables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Views.View&gt; GetFocusables (Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; GetFocusables(valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFocusables", "(I)Ljava/util/ArrayList;", "GetGetFocusables_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Views.View&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">The direction of the focus</param>
        <summary>Find and return all focusable views that are descendants of this view,
 possibly including this view if it is focusable itself.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Find and return all focusable views that are descendants of this view,
 possibly including this view if it is focusable itself.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getFocusables(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFocusedRect">
      <MemberSignature Language="C#" Value="public virtual void GetFocusedRect (Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFocusedRect(class Android.Graphics.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFocusedRect", "(Landroid/graphics/Rect;)V", "GetGetFocusedRect_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="r">The rectangle to fill in, in this view's coordinates.
</param>
        <summary>When a view has focus and the user navigates away from it, the next view is searched for
 starting from the rectangle filled in by this method.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a view has focus and the user navigates away from it, the next view is searched for
 starting from the rectangle filled in by this method.

 By default, the rectangle is the <c><see cref="M:Android.Views.View.GetDrawingRect(Android.Graphics.Rect)" /></c>)
 of the view.  However, if your view maintains some idea of internal selection,
 such as a cursor, or a selected row or column, you should override this method and
 fill in a more specific rectangle.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getFocusedRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetGlobalVisibleRect">
      <MemberSignature Language="C#" Value="public bool GetGlobalVisibleRect (Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetGlobalVisibleRect(class Android.Graphics.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getGlobalVisibleRect", "(Landroid/graphics/Rect;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetGlobalVisibleRect">
      <MemberSignature Language="C#" Value="public virtual bool GetGlobalVisibleRect (Android.Graphics.Rect r, Android.Graphics.Point globalOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetGlobalVisibleRect(class Android.Graphics.Rect r, class Android.Graphics.Point globalOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getGlobalVisibleRect", "(Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetGlobalVisibleRect_Landroid_graphics_Rect_Landroid_graphics_Point_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="globalOffset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="r">If true is returned, r holds the global coordinates of the
        visible portion of this view.</param>
        <param name="globalOffset">If true is returned, globalOffset holds the dx,dy
        between this view and its root. globalOffet may be null.</param>
        <summary>If some part of this view is not clipped by any of its parents, then
 return that area in r in global (root) coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">If some part of this view is not clipped by any of its parents, then
 return that area in r in global (root) coordinates. To convert r to local
 coordinates (without taking possible View rotations into account), offset
 it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)).
 If the view is completely clipped or translated out, return false.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetHitRect">
      <MemberSignature Language="C#" Value="public virtual void GetHitRect (Android.Graphics.Rect outRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetHitRect(class Android.Graphics.Rect outRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getHitRect", "(Landroid/graphics/Rect;)V", "GetGetHitRect_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="outRect">The hit rectangle of the view.
</param>
        <summary>Hit rectangle in parent's coordinates</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Hit rectangle in parent's coordinates</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getHitRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocalVisibleRect">
      <MemberSignature Language="C#" Value="public bool GetLocalVisibleRect (Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetLocalVisibleRect(class Android.Graphics.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocalVisibleRect", "(Landroid/graphics/Rect;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLocalVisibleRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocationInWindow">
      <MemberSignature Language="C#" Value="public virtual void GetLocationInWindow (int[] location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLocationInWindow(int32[] location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocationInWindow", "([I)V", "GetGetLocationInWindow_arrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="location">an array of two integers in which to hold the coordinates
</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Computes the coordinates of this view in its window. The argument
 must be an array of two integers. After the method returns, the array
 contains the x and y location in that order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLocationInWindow(int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocationOnScreen">
      <MemberSignature Language="C#" Value="public virtual void GetLocationOnScreen (int[] location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLocationOnScreen(int32[] location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocationOnScreen", "([I)V", "GetGetLocationOnScreen_arrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="location">an array of two integers in which to hold the coordinates
</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Computes the coordinates of this view on the screen. The argument
 must be an array of two integers. After the method returns, the array
 contains the x and y location in that order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLocationOnScreen(int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetTag">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object GetTag (int key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetTag(int32 key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTag", "(I)Ljava/lang/Object;", "GetGetTag_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">The key identifying the tag</param>
        <summary>Returns the tag associated with this view and the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the tag associated with this view and the specified key.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getTag(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="M:Android.Views.View.SetTag(System.Int32, Java.Lang.Object)" />
        <altmember cref="P:Android.Views.View.Tag" />
      </Docs>
    </Member>
    <Member MemberName="GetWindowVisibleDisplayFrame">
      <MemberSignature Language="C#" Value="public virtual void GetWindowVisibleDisplayFrame (Android.Graphics.Rect outRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetWindowVisibleDisplayFrame(class Android.Graphics.Rect outRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWindowVisibleDisplayFrame", "(Landroid/graphics/Rect;)V", "GetGetWindowVisibleDisplayFrame_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="outRect">Filled in with the visible display frame.  If the view
 is not attached to a window, this is simply the raw display size.
</param>
        <summary>Retrieve the overall visible display size in which the window this view is
 attached to has been positioned in.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the overall visible display size in which the window this view is
 attached to has been positioned in.  This takes into account screen
 decorations above the window, for both cases where the window itself
 is being position inside of them or the window is being placed under
 then and covered insets are used for the window to position its content
 inside.  In effect, this tells you the available area where content can
 be placed and remain visible to users.

 </para>
          <para tool="javadoc-to-mdoc">This function requires an IPC back to the window manager to retrieve
 the requested information, so should not be used in performance critical
 code like drawing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowVisibleDisplayFrame(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetX">
      <MemberSignature Language="C#" Value="public virtual float GetX ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetX() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getX", "()F", "GetGetXHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The visual x position of this view, in pixels.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The visual x position of this view, in pixels. This is equivalent to the
 <c><see cref="P:Android.Views.View.TranslationX" /></c> property plus the current
 <c><see cref="P:Android.Views.View.Left" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getX()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetY">
      <MemberSignature Language="C#" Value="public virtual float GetY ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetY() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getY", "()F", "GetGetYHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The visual y position of this view, in pixels.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The visual y position of this view, in pixels. This is equivalent to the
 <c><see cref="P:Android.Views.View.TranslationY" /></c> property plus the current
 <c><see cref="P:Android.Views.View.Top" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getY()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetZ">
      <MemberSignature Language="C#" Value="public virtual float GetZ ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetZ() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getZ", "()F", "GetGetZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The visual z position of this view, in pixels.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The visual z position of this view, in pixels. This is equivalent to the
 <c><see cref="P:Android.Views.View.TranslationZ" /></c> property plus the current
 <c><see cref="P:Android.Views.View.Elevation" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getZ()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Handler Handler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Handler Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHandler", "()Landroid/os/Handler;", "GetGetHandlerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Handler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HapticFeedbackEnabled">
      <MemberSignature Language="C#" Value="public virtual bool HapticFeedbackEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HapticFeedbackEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHapticFeedbackEnabled", "()Z", "GetIsHapticFeedbackEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHapticFeedbackEnabled", "(Z)V", "GetSetHapticFeedbackEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isHapticFeedbackEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setHapticFeedbackEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set whether this view should have haptic feedback for events such as
 long presses.

 You may wish to disable haptic feedback if your view already controls
 its own haptic feedback.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="P:Android.Views.View.HapticFeedbackEnabled" />
        <altmember cref="M:Android.Views.View.PerformHapticFeedback(Android.Views.FeedbackConstants)" />
        <altmember cref="P:Android.Views.View.HapticFeedbackEnabled" />
        <altmember cref="M:Android.Views.View.PerformHapticFeedback(Android.Views.FeedbackConstants)" />
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasFocus", "()Z", "GetHasFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view has focus itself, or is the ancestor of the
 view that has focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view has focus itself, or is the ancestor of the
 view that has focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasFocusable">
      <MemberSignature Language="C#" Value="public virtual bool HasFocusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasFocusable", "()Z", "GetHasFocusableHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view is focusable or if it contains a reachable View
 for which <c><see cref="P:Android.Views.View.HasFocusable" /></c> returns true.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view is focusable or if it contains a reachable View
 for which <c><see cref="P:Android.Views.View.HasFocusable" /></c> returns true. A "reachable hasFocusable()"
 is a View whose parents do not block descendants focus.

 Only <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> views are considered focusable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasFocusable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.TouchscreenBlocksFocus" />
      </Docs>
    </Member>
    <Member MemberName="HasNestedScrollingParent">
      <MemberSignature Language="C#" Value="public virtual bool HasNestedScrollingParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNestedScrollingParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNestedScrollingParent", "()Z", "GetHasNestedScrollingParentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view has a nested scrolling parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view has a nested scrolling parent.

 </para>
          <para tool="javadoc-to-mdoc">The presence of a nested scrolling parent indicates that this view has initiated
 a nested scroll and it was accepted by an ancestor view further up the view hierarchy.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasNestedScrollingParent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOnClickListeners">
      <MemberSignature Language="C#" Value="public virtual bool HasOnClickListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasOnClickListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasOnClickListeners", "()Z", "GetHasOnClickListenersHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this view has an attached OnClickListener.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return whether this view has an attached OnClickListener.  Returns
 true if there is a listener, false if there is none.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasOnClickListeners()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="HasOverlappingRendering">
      <MemberSignature Language="C#" Value="public virtual bool HasOverlappingRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasOverlappingRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasOverlappingRendering", "()Z", "GetHasOverlappingRenderingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this View has content which overlaps.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this View has content which overlaps.

 </para>
          <para tool="javadoc-to-mdoc">This function, intended to be overridden by specific View types, is an optimization when
 alpha is set on a view. If rendering overlaps in a view with alpha </para>
          <para tool="javadoc-to-mdoc">The current implementation of the saveLayer and saveLayerAlpha methods in <c><see cref="T:Android.Graphics.Canvas" /></c>
 necessitates that a View return true if it uses the methods internally without passing the
 <c><see cref="!:Android.Graphics.Canvas.CLIP_TO_LAYER_SAVE_FLAG" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasOverlappingRendering()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="HasTransientState">
      <MemberSignature Language="C#" Value="public virtual bool HasTransientState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasTransientState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasTransientState", "()Z", "GetHasTransientStateHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHasTransientState", "(Z)V", "GetSetHasTransientState_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the view is currently tracking transient state that the
 app should not need to concern itself with saving and restoring, but that
 the framework should take special note to preserve when possible.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#hasTransientState()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether the view is currently tracking transient state that the
 app should not need to concern itself with saving and restoring, but that
 the framework should take special note to preserve when possible.

 </para>
          <para tool="javadoc-to-mdoc">A view with transient state cannot be trivially rebound from an external
 data source, such as an adapter binding item views in a list. This may be
 because the view is performing an animation, tracking user selection
 of content, or similar.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setHasTransientState(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set whether this view is currently tracking transient state that the
 framework should attempt to preserve when possible. This flag is reference counted,
 so every call to setHasTransientState(true) should be paired with a later call
 to setHasTransientState(false).

 </para>
          <para tool="javadoc-to-mdoc">A view with transient state cannot be trivially rebound from an external
 data source, such as an adapter binding item views in a list. This may be
 because the view is performing an animation, tracking user selection
 of content, or similar.</para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="HasWindowFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasWindowFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWindowFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasWindowFocus", "()Z", "GetHasWindowFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view is in a window that currently has window focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view is in a window that currently has window focus.
 Note that this is not the same as the view itself having focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#hasWindowFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the height of your view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the height of your view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalFadingEdgeEnabled">
      <MemberSignature Language="C#" Value="public virtual bool HorizontalFadingEdgeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalFadingEdgeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHorizontalFadingEdgeEnabled", "()Z", "GetIsHorizontalFadingEdgeEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHorizontalFadingEdgeEnabled", "(Z)V", "GetSetHorizontalFadingEdgeEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isHorizontalFadingEdgeEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicate whether the horizontal edges are faded when the view is
 scrolled horizontally.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setHorizontalFadingEdgeEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Define whether the horizontal edges should be faded when this view
 is scrolled horizontally.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.HorizontalFadingEdgeEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalFadingEdgeEnabled" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalFadingEdgeLength">
      <MemberSignature Language="C#" Value="public virtual int HorizontalFadingEdgeLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalFadingEdgeLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHorizontalFadingEdgeLength", "()I", "GetGetHorizontalFadingEdgeLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the size of the horizontal faded edges used to indicate that more
 content in this view is visible.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the size of the horizontal faded edges used to indicate that more
 content in this view is visible.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getHorizontalFadingEdgeLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBarEnabled">
      <MemberSignature Language="C#" Value="public virtual bool HorizontalScrollBarEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollBarEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHorizontalScrollBarEnabled", "()Z", "GetIsHorizontalScrollBarEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHorizontalScrollBarEnabled", "(Z)V", "GetSetHorizontalScrollBarEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isHorizontalScrollBarEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicate whether the horizontal scrollbar should be drawn or not. The
 scrollbar is not drawn by default.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setHorizontalScrollBarEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Define whether the horizontal scrollbar should be drawn or not. The
 scrollbar is not drawn by default.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalScrollBarEnabled" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbarHeight">
      <MemberSignature Language="C#" Value="protected virtual int HorizontalScrollbarHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalScrollbarHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHorizontalScrollbarHeight", "()I", "GetGetHorizontalScrollbarHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the height of the horizontal scrollbar.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the height of the horizontal scrollbar.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Hover">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.HoverEventArgs&gt; Hover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/HoverEventArgs&gt; Hover" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+HoverEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hovered">
      <MemberSignature Language="C#" Value="public virtual bool Hovered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Hovered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHovered", "()Z", "GetIsHoveredHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHovered", "(Z)V", "GetSetHovered_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the view is currently hovered.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isHovered()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if the view is currently hovered.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setHovered(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the view is currently hovered.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method also changes the drawable state of the view.  This
 enables the view to react to hover by using different drawable resources
 to change its appearance.
 </para>
          <para tool="javadoc-to-mdoc">
 The <c><see cref="M:Android.Views.View.OnHoverChanged(System.Boolean)" /></c> method is called when the hovered state changes.
 </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.Hovered" />
        <altmember cref="M:Android.Views.View.OnHoverChanged(System.Boolean)" />
        <altmember cref="P:Android.Views.View.Hovered" />
        <altmember cref="M:Android.Views.View.OnHoverChanged(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public virtual int Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()I", "GetGetIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setId", "(I)V", "GetSetId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns this view's identifier.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns this view's identifier.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the identifier for this view. The identifier does not have to be
 unique in this view's hierarchy. The identifier should be a positive
 number.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Id" />
        <altmember cref="M:Android.Views.View.FindViewById(System.Int32)" />
        <altmember cref="F:Android.Views.View.NoId" />
        <altmember cref="P:Android.Views.View.Id" />
        <altmember cref="M:Android.Views.View.FindViewById(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ImportantForAccessibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ImportantForAccessibility ImportantForAccessibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ImportantForAccessibility ImportantForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getImportantForAccessibility", "()I", "GetGetImportantForAccessibilityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setImportantForAccessibility", "(I)V", "GetSetImportantForAccessibility_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ImportantForAccessibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mode for determining whether this View is important for accessibility
 which is if it fires accessibility events and if it is reported to
 accessibility services that query the screen.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getImportantForAccessibility()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the mode for determining whether this View is important for accessibility
 which is if it fires accessibility events and if it is reported to
 accessibility services that query the screen.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setImportantForAccessibility(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets how to determine whether this view is important for accessibility
 which is if it fires accessibility events and if it is reported to
 accessibility services that query the screen.</para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityYes" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityNo" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityNoHideDescendants" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityAuto" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityYes" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityNo" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityNoHideDescendants" />
        <altmember cref="F:Android.Views.View.ImportantForAccessibilityAuto" />
      </Docs>
    </Member>
    <Member MemberName="ImportantForAccessibilityAuto">
      <MemberSignature Language="C#" Value="public const Android.Views.ImportantForAccessibility ImportantForAccessibilityAuto = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ImportantForAccessibility ImportantForAccessibilityAuto = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("IMPORTANT_FOR_ACCESSIBILITY_AUTO")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ImportantForAccessibility enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ImportantForAccessibility</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Automatically determine whether a view is important for accessibility.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Automatically determine whether a view is important for accessibility.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_AUTO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ImportantForAccessibilityNo">
      <MemberSignature Language="C#" Value="public const Android.Views.ImportantForAccessibility ImportantForAccessibilityNo = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ImportantForAccessibility ImportantForAccessibilityNo = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("IMPORTANT_FOR_ACCESSIBILITY_NO")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ImportantForAccessibility enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ImportantForAccessibility</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>The view is not important for accessibility.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The view is not important for accessibility.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ImportantForAccessibilityNoHideDescendants">
      <MemberSignature Language="C#" Value="public const Android.Views.ImportantForAccessibility ImportantForAccessibilityNoHideDescendants = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ImportantForAccessibility ImportantForAccessibilityNoHideDescendants = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ImportantForAccessibility enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ImportantForAccessibility</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>The view is not important for accessibility, nor are any of its
 descendant views.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The view is not important for accessibility, nor are any of its
 descendant views.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportantForAccessibilityYes">
      <MemberSignature Language="C#" Value="public const Android.Views.ImportantForAccessibility ImportantForAccessibilityYes = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ImportantForAccessibility ImportantForAccessibilityYes = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("IMPORTANT_FOR_ACCESSIBILITY_YES")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ImportantForAccessibility enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ImportantForAccessibility</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The view is important for accessibility.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The view is important for accessibility.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_YES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static Android.Views.View Inflate (Android.Content.Context context, int resource, Android.Views.ViewGroup root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Views.View Inflate(class Android.Content.Context context, int32 resource, class Android.Views.ViewGroup root) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inflate", "(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resource" Type="System.Int32" />
        <Parameter Name="root" Type="Android.Views.ViewGroup" />
      </Parameters>
      <Docs>
        <param name="context">The Context object for your activity or application.</param>
        <param name="resource">The resource ID to inflate</param>
        <param name="root">A view group that will be the parent.  Used to properly inflate the
 layout_* parameters.</param>
        <summary>Inflate a view from an XML resource.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflate a view from an XML resource.  This convenience method wraps the <c><see cref="T:Android.Views.LayoutInflater" /></c> class, which provides a full range of options for view inflation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#inflate(android.content.Context, int, android.view.ViewGroup)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Views.LayoutInflater" />
      </Docs>
    </Member>
    <Member MemberName="InitializeFadingEdge">
      <MemberSignature Language="C#" Value="protected virtual void InitializeFadingEdge (Android.Content.Res.TypedArray a);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeFadingEdge(class Android.Content.Res.TypedArray a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("initializeFadingEdge", "(Landroid/content/res/TypedArray;)V", "GetInitializeFadingEdge_Landroid_content_res_TypedArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="Android.Content.Res.TypedArray" />
      </Parameters>
      <Docs>
        <param name="a">the styled attributes set to initialize the fading edges from
</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Initializes the fading edges from a given set of styled attributes. This
 method should be called by subclasses that need fading edges and when an
 instance of these subclasses is created programmatically rather than
 being inflated from XML. This method is automatically called when the XML
 is inflated.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#initializeFadingEdge(android.content.res.TypedArray)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InitializeScrollbars">
      <MemberSignature Language="C#" Value="protected virtual void InitializeScrollbars (Android.Content.Res.TypedArray a);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeScrollbars(class Android.Content.Res.TypedArray a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("initializeScrollbars", "(Landroid/content/res/TypedArray;)V", "GetInitializeScrollbars_Landroid_content_res_TypedArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="Android.Content.Res.TypedArray" />
      </Parameters>
      <Docs>
        <param name="a">the styled attributes set to initialize the scrollbars from
</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Initializes the scrollbars from a given set of styled attributes. This
 method should be called by subclasses that need scrollbars and when an
 instance of these subclasses is created programmatically rather than
 being inflated from XML. This method is automatically called when the XML
 is inflated.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#initializeScrollbars(android.content.res.TypedArray)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidate", "()V", "GetInvalidateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidate the whole view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invalidate the whole view. If the view is visible,
 <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c> will be called at some point in
 the future.
 </para>
          <para tool="javadoc-to-mdoc">
 This must be called from a UI thread. To call from a non-UI thread, call
 <c><see cref="M:Android.Views.View.PostInvalidate" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#invalidate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate (Android.Graphics.Rect dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate(class Android.Graphics.Rect dirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidate", "(Landroid/graphics/Rect;)V", "GetInvalidate_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="dirty">the rectangle representing the bounds of the dirty region
</param>
        <summary>Mark the area defined by dirty as needing to be drawn.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark the area defined by dirty as needing to be drawn. If the view is
 visible, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c> will be called at some
 point in the future.
 </para>
          <para tool="javadoc-to-mdoc">
 This must be called from a UI thread. To call from a non-UI thread, call
 <c><see cref="M:Android.Views.View.PostInvalidate" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>WARNING:</b>
            </format> In API 19 and below, this method may be destructive to
 <c>dirty</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#invalidate(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate (int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate(int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidate", "(IIII)V", "GetInvalidate_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="l">the left position of the dirty region</param>
        <param name="t">the top position of the dirty region</param>
        <param name="r">the right position of the dirty region</param>
        <param name="b">the bottom position of the dirty region
</param>
        <summary>Mark the area defined by the rect (l,t,r,b) as needing to be drawn.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark the area defined by the rect (l,t,r,b) as needing to be drawn. The
 coordinates of the dirty rect are relative to the view. If the view is
 visible, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c> will be called at some
 point in the future.
 </para>
          <para tool="javadoc-to-mdoc">
 This must be called from a UI thread. To call from a non-UI thread, call
 <c><see cref="M:Android.Views.View.PostInvalidate" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#invalidate(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateDrawable">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDrawable (Android.Graphics.Drawables.Drawable drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDrawable(class Android.Graphics.Drawables.Drawable drawable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateDrawable", "(Landroid/graphics/drawable/Drawable;)V", "GetInvalidateDrawable_Landroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawable" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="drawable">the drawable to invalidate
</param>
        <summary>Invalidates the specified Drawable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invalidates the specified Drawable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#invalidateDrawable(android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateOutline">
      <MemberSignature Language="C#" Value="public virtual void InvalidateOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateOutline() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateOutline", "()V", "GetInvalidateOutlineHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called to rebuild this View's Outline from its <c><see cref="T:Android.Views.ViewOutlineProvider" /></c></summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to rebuild this View's Outline from its <c><see cref="T:Android.Views.ViewOutlineProvider" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#invalidateOutline()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.View.OutlineProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvokeFitsSystemWindows">
      <MemberSignature Language="C#" Value="public virtual bool InvokeFitsSystemWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InvokeFitsSystemWindows() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fitsSystemWindows", "()Z", "GetInvokeFitsSystemWindowsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessibilityFocused">
      <MemberSignature Language="C#" Value="public virtual bool IsAccessibilityFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessibilityFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAccessibilityFocused", "()Z", "GetIsAccessibilityFocusedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this View is accessibility focused.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this View is accessibility focused.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isAccessibilityFocused()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttachedToWindow">
      <MemberSignature Language="C#" Value="public virtual bool IsAttachedToWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachedToWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAttachedToWindow", "()Z", "GetIsAttachedToWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view is currently attached to a window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view is currently attached to a window.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isAttachedToWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public virtual bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDirty", "()Z", "GetIsDirtyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>True if this view has changed since the last time being drawn.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">True if this view has changed since the last time being drawn.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isDirty()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public virtual bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFocused", "()Z", "GetIsFocusedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view has focus</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view has focus</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isFocused()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsHardwareAccelerated">
      <MemberSignature Language="C#" Value="public virtual bool IsHardwareAccelerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHardwareAccelerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHardwareAccelerated", "()Z", "GetIsHardwareAcceleratedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Indicates whether this view is attached to a hardware accelerated
 window or not.</para>
          <para tool="javadoc-to-mdoc">Even if this method returns true, it does not mean that every call
 to <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c> will be made with an hardware
 accelerated <c><see cref="T:Android.Graphics.Canvas" /></c>. For instance, if this view
 is drawn onto an offscreen <c><see cref="T:Android.Graphics.Bitmap" /></c> and its
 window is hardware accelerated,
 <c><see cref="P:Android.Graphics.Canvas.IsHardwareAccelerated" /></c> will likely
 return false, and this method will return true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isHardwareAccelerated()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsImportantForAccessibility">
      <MemberSignature Language="C#" Value="public virtual bool IsImportantForAccessibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImportantForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isImportantForAccessibility", "()Z", "GetIsImportantForAccessibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Computes whether this view should be exposed for accessibility.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Computes whether this view should be exposed for accessibility. In
 general, views that are interactive or provide information are exposed
 while views that serve only as containers are hidden.
 </para>
          <para tool="javadoc-to-mdoc">
 If an ancestor of this view has importance
 <c><see cref="F:Android.Views.View.ImportantForAccessibilityNoHideDescendants" /></c>, this method
 returns <c>false</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Otherwise, the value is computed according to the view's
 <c><see cref="P:Android.Views.View.ImportantForAccessibility" /></c> value:
 <list type="number"><item><term><c><see cref="F:Android.Views.View.ImportantForAccessibilityNo" /></c> or
 <c><see cref="F:Android.Views.View.ImportantForAccessibilityNoHideDescendants" /></c>, return <c>false
 </c></term></item><item><term><c><see cref="F:Android.Views.View.ImportantForAccessibilityYes" /></c>, return <c>true</c></term></item><item><term><c><see cref="F:Android.Views.View.ImportantForAccessibilityAuto" /></c>, return <c>true</c> if
 view satisfies any of the following:
 <list type="bullet" /></term></item><item><term>Is actionable, e.g. <c><see cref="P:Android.Views.View.Clickable" /></c>,
 <c><see cref="P:Android.Views.View.LongClickable" /></c>, or <c><see cref="P:Android.Views.View.Focusable" /></c></term></item><item><term>Has an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c></term></item><item><term>Has an interaction listener, e.g. <c><see cref="!:NoType:android/view/View$OnTouchListener;Href=../../../reference/android/view/View.OnTouchListener.html" /></c>,
 <c><see cref="!:NoType:android/view/View$OnKeyListener;Href=../../../reference/android/view/View.OnKeyListener.html" /></c>, etc.
 </term></item><item><term>Is an accessibility live region, e.g.
 <c><see cref="P:Android.Views.View.AccessibilityLiveRegion" /></c> is not
 <c><see cref="F:Android.Views.View.AccessibilityLiveRegionNone" /></c>.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isImportantForAccessibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.View.ImportantForAccessibility" />
        <altmember cref="P:Android.Views.View.ImportantForAccessibility" />
      </Docs>
    </Member>
    <Member MemberName="IsInEditMode">
      <MemberSignature Language="C#" Value="public virtual bool IsInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInEditMode", "()Z", "GetIsInEditModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this View is currently in edit mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this View is currently in edit mode. A View is usually
 in edit mode when displayed within a developer tool. For instance, if
 this View is being drawn by a visual user interface builder, this method
 should return true.

 Subclasses should check the return value of this method to provide
 different behaviors if their normal behavior might interfere with the
 host environment. For instance: the class spawns a thread in its
 constructor, the drawing code relies on device-specific features, etc.

 This method is usually checked in the drawing code of custom widgets.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isInEditMode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IsInLayout">
      <MemberSignature Language="C#" Value="public virtual bool IsInLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInLayout", "()Z", "GetIsInLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the view hierarchy is currently undergoing a layout pass.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the view hierarchy is currently undergoing a layout pass. This
 information is useful to avoid situations such as calling <c><see cref="M:Android.Views.View.RequestLayout" /></c> during
 a layout pass.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isInLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsInTouchMode">
      <MemberSignature Language="C#" Value="public virtual bool IsInTouchMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInTouchMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInTouchMode", "()Z", "GetIsInTouchModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the device is currently in touch mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the device is currently in touch mode.  Touch mode is entered
 once the user begins interacting with the device by touch, and affects various
 things like whether focus is always visible to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isInTouchMode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLaidOut">
      <MemberSignature Language="C#" Value="public virtual bool IsLaidOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLaidOut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLaidOut", "()Z", "GetIsLaidOutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this view has been through at least one layout since it
 was last attached to or detached from a window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this view has been through at least one layout since it
 was last attached to or detached from a window.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isLaidOut()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutDirectionResolved">
      <MemberSignature Language="C#" Value="public virtual bool IsLayoutDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutDirectionResolved", "()Z", "GetIsLayoutDirectionResolvedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isLayoutDirectionResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutRequested">
      <MemberSignature Language="C#" Value="public virtual bool IsLayoutRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutRequested", "()Z", "GetIsLayoutRequestedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Indicates whether or not this view's layout will be requested during
 the next hierarchy layout pass.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isLayoutRequested()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsOpaque">
      <MemberSignature Language="C#" Value="public virtual bool IsOpaque { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpaque" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isOpaque", "()Z", "GetIsOpaqueHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this View is opaque.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this View is opaque. An opaque View guarantees that it will
 draw all the pixels overlapping its bounds using a fully opaque color.

 Subclasses of View should override this method whenever possible to indicate
 whether an instance is opaque. Opaque Views are treated in a special way by
 the View hierarchy, possibly allowing it to perform optimizations during
 invalidate/draw passes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isOpaque()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="IsPaddingOffsetRequired">
      <MemberSignature Language="C#" Value="protected virtual bool IsPaddingOffsetRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaddingOffsetRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPaddingOffsetRequired", "()Z", "GetIsPaddingOffsetRequiredHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If the View draws content inside its padding and enables fading edges,
 it needs to support padding offsets.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If the View draws content inside its padding and enables fading edges,
 it needs to support padding offsets. Padding offsets are added to the
 fading edges to extend the length of the fade so that it covers pixels
 drawn inside the padding.

 Subclasses of this class should override this method if they need
 to draw content inside the padding.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isPaddingOffsetRequired()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 2" />
        <altmember cref="P:Android.Views.View.LeftPaddingOffset" />
        <altmember cref="P:Android.Views.View.RightPaddingOffset" />
        <altmember cref="P:Android.Views.View.TopPaddingOffset" />
        <altmember cref="P:Android.Views.View.BottomPaddingOffset" />
      </Docs>
    </Member>
    <Member MemberName="IsPaddingRelative">
      <MemberSignature Language="C#" Value="public virtual bool IsPaddingRelative { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaddingRelative" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPaddingRelative", "()Z", "GetIsPaddingRelativeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return if the padding has been set through relative values
 <c><see cref="M:Android.Views.View.SetPaddingRelative(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> or through</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return if the padding has been set through relative values
 <c><see cref="M:Android.Views.View.SetPaddingRelative(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> or through</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isPaddingRelative()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="IsScrollContainer">
      <MemberSignature Language="C#" Value="public virtual bool IsScrollContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsScrollContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isScrollContainer", "()Z", "GetIsScrollContainerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this view is one of the set of scrollable containers in
 its window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this view is one of the set of scrollable containers in
 its window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isScrollContainer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="IsShown">
      <MemberSignature Language="C#" Value="public virtual bool IsShown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isShown", "()Z", "GetIsShownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the visibility of this view and all of its ancestors</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the visibility of this view and all of its ancestors</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isShown()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTextAlignmentResolved">
      <MemberSignature Language="C#" Value="public virtual bool IsTextAlignmentResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextAlignmentResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextAlignmentResolved", "()Z", "GetIsTextAlignmentResolvedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isTextAlignmentResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextDirectionResolved">
      <MemberSignature Language="C#" Value="public virtual bool IsTextDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextDirectionResolved", "()Z", "GetIsTextDirectionResolvedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#isTextDirectionResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpDrawablesToCurrentState">
      <MemberSignature Language="C#" Value="public virtual void JumpDrawablesToCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void JumpDrawablesToCurrentState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("jumpDrawablesToCurrentState", "()V", "GetJumpDrawablesToCurrentStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call <c><see cref="M:Android.Graphics.Drawables.Drawable.JumpToCurrentState" /></c>
 on all Drawable objects associated with this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call <c><see cref="M:Android.Graphics.Drawables.Drawable.JumpToCurrentState" /></c>
 on all Drawable objects associated with this view.
 </para>
          <para tool="javadoc-to-mdoc">
 Also calls <c><see cref="M:Android.Animation.StateListAnimator.JumpToCurrentState" /></c> if there is a StateListAnimator
 attached to this view.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#jumpDrawablesToCurrentState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="KeepScreenOn">
      <MemberSignature Language="C#" Value="public virtual bool KeepScreenOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepScreenOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getKeepScreenOn", "()Z", "GetGetKeepScreenOnHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setKeepScreenOn", "(Z)V", "GetSetKeepScreenOn_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the screen should remain on, corresponding to the current
 value of <c><see cref="!:Android.Views.View.KEEP_SCREEN_ON" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getKeepScreenOn()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether the screen should remain on, corresponding to the current
 value of <c><see cref="!:Android.Views.View.KEEP_SCREEN_ON" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setKeepScreenOn(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls whether the screen should remain on, modifying the
 value of <c><see cref="!:Android.Views.View.KEEP_SCREEN_ON" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.KeepScreenOn" />
        <altmember cref="P:Android.Views.View.KeepScreenOn" />
      </Docs>
    </Member>
    <Member MemberName="KeyDispatcherState">
      <MemberSignature Language="C#" Value="public virtual Android.Views.KeyEvent.DispatcherState KeyDispatcherState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.KeyEvent/DispatcherState KeyDispatcherState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getKeyDispatcherState", "()Landroid/view/KeyEvent$DispatcherState;", "GetGetKeyDispatcherStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEvent+DispatcherState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the global <c><see cref="!:NoType:android/view/KeyEvent$DispatcherState;Href=../../../reference/android/view/KeyEvent.DispatcherState.html" /></c>
 for this view's window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the global <c><see cref="!:NoType:android/view/KeyEvent$DispatcherState;Href=../../../reference/android/view/KeyEvent.DispatcherState.html" /></c>
 for this view's window.  Returns null if the view is not currently attached
 to the window.  Normally you will not need to use this directly, but
 just use the standard high-level event callbacks like
 <c><see cref="M:Android.Views.View.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getKeyDispatcherState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.KeyEventArgs&gt; KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/KeyEventArgs&gt; KeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+KeyEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelFor">
      <MemberSignature Language="C#" Value="public virtual int LabelFor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LabelFor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLabelFor", "()I", "GetGetLabelForHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLabelFor", "(I)V", "GetSetLabelFor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of a view for which this view serves as a label for
 accessibility purposes.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getLabelFor()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of a view for which this view serves as a label for
 accessibility purposes.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setLabelFor(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of a view for which this view serves as a label for
 accessibility purposes.</para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayerType">
      <MemberSignature Language="C#" Value="public virtual Android.Views.LayerType LayerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.LayerType LayerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayerType", "()I", "GetGetLayerTypeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayerType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates what type of layer is currently associated with this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates what type of layer is currently associated with this view. By default
 a view does not have a layer, and the layer type is <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>.
 Refer to the documentation of <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c>
 for more information on the different types of layers.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLayerType()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType, Android.Graphics.Paint)" />
        <altmember cref="M:Android.Views.View.BuildLayer" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public virtual void Layout (int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Layout(int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("layout", "(IIII)V", "GetLayout_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="l">Left position, relative to parent</param>
        <param name="t">Top position, relative to parent</param>
        <param name="r">Right position, relative to parent</param>
        <param name="b">Bottom position, relative to parent
</param>
        <summary tool="true">Assign a size and position to a view and all of its
 descendants

 </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Assign a size and position to a view and all of its
 descendants

 </para>
          <para tool="javadoc-to-mdoc">This is the second phase of the layout mechanism.
 (The first is measuring). In this phase, each parent calls
 layout on all of its children to position them.
 This is typically done using the child measurements
 that were stored in the measure pass().</para>
          <para tool="javadoc-to-mdoc">Derived classes should not override this method.
 Derived classes with children should override
 onLayout. In that method, they should
 call layout on each of their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#layout(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.LayoutChangeEventArgs&gt; LayoutChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/LayoutChangeEventArgs&gt; LayoutChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+LayoutChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDirection">
      <MemberSignature Language="C#" Value="public virtual Android.Views.LayoutDirection LayoutDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.LayoutDirection LayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutDirection", "()I", "GetGetLayoutDirectionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutDirection", "(I)V", "GetSetLayoutDirection_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the resolved layout direction for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getLayoutDirection()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the resolved layout direction for this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setLayoutDirection(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the layout direction for this view. This will propagate a reset of layout direction
 resolution to the view's children and resolve layout direction for this view.</para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayoutDirectionInherit">
      <MemberSignature Language="C#" Value="public const Android.Views.LayoutDirection LayoutDirectionInherit = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.LayoutDirection LayoutDirectionInherit = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_DIRECTION_INHERIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.LayoutDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Horizontal layout direction of this view is inherited from its parent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Horizontal layout direction of this view is inherited from its parent.
 Use with <c><see cref="P:Android.Views.View.LayoutDirection" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_INHERIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayoutDirectionLocale">
      <MemberSignature Language="C#" Value="public const Android.Views.LayoutDirection LayoutDirectionLocale = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.LayoutDirection LayoutDirectionLocale = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_DIRECTION_LOCALE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.LayoutDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Horizontal layout direction of this view is from deduced from the default language
 script for the locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Horizontal layout direction of this view is from deduced from the default language
 script for the locale. Use with <c><see cref="P:Android.Views.View.LayoutDirection" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LOCALE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayoutDirectionLtr">
      <MemberSignature Language="C#" Value="public const Android.Views.LayoutDirection LayoutDirectionLtr = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.LayoutDirection LayoutDirectionLtr = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_DIRECTION_LTR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.LayoutDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Horizontal layout direction of this view is from Left to Right.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Horizontal layout direction of this view is from Left to Right.
 Use with <c><see cref="P:Android.Views.View.LayoutDirection" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LTR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayoutDirectionRtl">
      <MemberSignature Language="C#" Value="public const Android.Views.LayoutDirection LayoutDirectionRtl = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.LayoutDirection LayoutDirectionRtl = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_DIRECTION_RTL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.LayoutDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Horizontal layout direction of this view is from Right to Left.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Horizontal layout direction of this view is from Right to Left.
 Use with <c><see cref="P:Android.Views.View.LayoutDirection" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_RTL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LayoutParameters">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewGroup.LayoutParams LayoutParameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.ViewGroup/LayoutParams LayoutParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutParams", "()Landroid/view/ViewGroup$LayoutParams;", "GetGetLayoutParametersHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)V", "GetSetLayoutParameters_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the LayoutParams associated with this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getLayoutParams()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Get the LayoutParams associated with this view. All views should have
 layout parameters. These supply parameters to the <format type="text/html"><i>parent</i></format> of this
 view specifying how it should be arranged. There are many subclasses of
 ViewGroup.LayoutParams, and these correspond to the different subclasses
 of ViewGroup that are responsible for arranging their children.

 This method may return null if this View is not attached to a parent
 ViewGroup or <c><see cref="P:Android.Views.View.LayoutParameters" /></c>
 was not invoked successfully. When a View is attached to a parent
 ViewGroup, this method must not return null.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setLayoutParams(android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the layout parameters associated with this view. These supply
 parameters to the <format type="text/html"><i>parent</i></format> of this view specifying how it should be
 arranged. There are many subclasses of ViewGroup.LayoutParams, and these
 correspond to the different subclasses of ViewGroup that are responsible
 for arranging their children.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLeft", "()I", "GetGetLeftHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLeft", "(I)V", "GetSetLeft_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Left position of this view relative to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getLeft()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Left position of this view relative to its parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setLeft(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the left position of this view relative to its parent. This method is meant to be called
 by the layout system and should not generally be called otherwise, because the property
 may be changed at any time by the layout.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LeftFadingEdgeStrength">
      <MemberSignature Language="C#" Value="protected virtual float LeftFadingEdgeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 LeftFadingEdgeStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLeftFadingEdgeStrength", "()F", "GetGetLeftFadingEdgeStrengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the strength, or intensity, of the left faded edge.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the strength, or intensity, of the left faded edge. The strength is
 a value between 0.0 (no fade) and 1.0 (full fade). The default implementation
 returns 0.0 or 1.0 but no value in between.

 Subclasses should override this method to provide a smoother fade transition
 when scrolling occurs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLeftFadingEdgeStrength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LeftPaddingOffset">
      <MemberSignature Language="C#" Value="protected virtual int LeftPaddingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LeftPaddingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLeftPaddingOffset", "()I", "GetGetLeftPaddingOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount by which to extend the left fading region.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Amount by which to extend the left fading region. Called only when
 <c><see cref="P:Android.Views.View.IsPaddingOffsetRequired" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getLeftPaddingOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 2" />
        <altmember cref="P:Android.Views.View.IsPaddingOffsetRequired" />
      </Docs>
    </Member>
    <Member MemberName="LongClick">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.LongClickEventArgs&gt; LongClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/LongClickEventArgs&gt; LongClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+LongClickEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LongClickable">
      <MemberSignature Language="C#" Value="public virtual bool LongClickable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LongClickable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLongClickable", "()Z", "GetIsLongClickableHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLongClickable", "(Z)V", "GetSetLongClickable_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this view reacts to long click events or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isLongClickable()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether this view reacts to long click events or not.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setLongClickable(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Enables or disables long click events for this view. When a view is long
 clickable it reacts to the user holding down the button for a longer
 duration than a tap. This event can either launch the listener or a
 context menu.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.LongClickable" />
        <altmember cref="P:Android.Views.View.LongClickable" />
      </Docs>
    </Member>
    <Member MemberName="Matrix">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Matrix Matrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Matrix Matrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMatrix", "()Landroid/graphics/Matrix;", "GetGetMatrixHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The transform matrix of this view, which is calculated based on the current
 rotation, scale, and pivot properties.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The transform matrix of this view, which is calculated based on the current
 rotation, scale, and pivot properties.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMatrix()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.ScaleX" />
        <altmember cref="P:Android.Views.View.ScaleY" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (int widthMeasureSpec, int heightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(int32 widthMeasureSpec, int32 heightMeasureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("measure", "(II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="widthMeasureSpec">Horizontal space requirements as imposed by the
        parent</param>
        <param name="heightMeasureSpec">Vertical space requirements as imposed by the
        parent</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 This is called to find out how big a view should be. The parent
 supplies constraint information in the width and height parameters.
 </para>
          <para tool="javadoc-to-mdoc">
 The actual measurement work of a view is performed in
 <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c>, called by this method. Therefore, only
 <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c> can and must be overridden by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#measure(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnMeasure(System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredHeight">
      <MemberSignature Language="C#" Value="public int MeasuredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MeasuredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMeasuredHeight", "()I", "GetGetMeasuredHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Like <c><see cref="P:Android.Views.View.MeasuredHeightAndState" /></c>, but only returns the
 raw width component (that is the result is masked by
 <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c>).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="P:Android.Views.View.MeasuredHeightAndState" /></c>, but only returns the
 raw width component (that is the result is masked by
 <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMeasuredHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredHeightAndState">
      <MemberSignature Language="C#" Value="public int MeasuredHeightAndState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MeasuredHeightAndState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMeasuredHeightAndState", "()I", "GetGetMeasuredHeightAndStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the full height measurement information for this view as computed
 by the most recent call to <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the full height measurement information for this view as computed
 by the most recent call to <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c>.  This result is a bit mask
 as defined by <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> and <c><see cref="F:Android.Views.View.MeasuredStateTooSmall" /></c>.
 This should be used during measurement and layout calculations only. Use
 <c><see cref="P:Android.Views.View.Height" /></c> to see how wide a view is after layout.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMeasuredHeightAndState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredHeightStateShift">
      <MemberSignature Language="C#" Value="public const int MeasuredHeightStateShift = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MeasuredHeightStateShift = (16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEASURED_HEIGHT_STATE_SHIFT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Bit shift of <c><see cref="F:Android.Views.View.MeasuredStateMask" /></c> to get to the height bits
 for functions that combine both width and height into a single int,
 such as <c><see cref="P:Android.Views.View.MeasuredState" /></c> and the childState argument of
 <c><see cref="M:Android.Views.View.ResolveSizeAndState(System.Int32,System.Int32,System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Bit shift of <c><see cref="F:Android.Views.View.MeasuredStateMask" /></c> to get to the height bits
 for functions that combine both width and height into a single int,
 such as <c><see cref="P:Android.Views.View.MeasuredState" /></c> and the childState argument of
 <c><see cref="M:Android.Views.View.ResolveSizeAndState(System.Int32,System.Int32,System.Int32)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#MEASURED_HEIGHT_STATE_SHIFT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredSizeMask">
      <MemberSignature Language="C#" Value="public const int MeasuredSizeMask = 16777215;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MeasuredSizeMask = (16777215)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEASURED_SIZE_MASK")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>16777215</MemberValue>
      <Docs>
        <summary>Bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that provide the actual measured size.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that provide the actual measured size.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#MEASURED_SIZE_MASK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredState">
      <MemberSignature Language="C#" Value="public int MeasuredState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MeasuredState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMeasuredState", "()I", "GetGetMeasuredStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return only the state bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c>
 and <c><see cref="P:Android.Views.View.MeasuredHeightAndState" /></c>, combined into one integer.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return only the state bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c>
 and <c><see cref="P:Android.Views.View.MeasuredHeightAndState" /></c>, combined into one integer.
 The width component is in the regular bits <c><see cref="F:Android.Views.View.MeasuredStateMask" /></c>
 and the height component is at the shifted bits
 <c><see cref="F:Android.Views.View.MeasuredHeightStateShift" /></c>&gt;&gt;<c><see cref="F:Android.Views.View.MeasuredStateMask" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMeasuredState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredStateMask">
      <MemberSignature Language="C#" Value="public const int MeasuredStateMask = -16777216;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MeasuredStateMask = (-16777216)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEASURED_STATE_MASK")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-16777216</MemberValue>
      <Docs>
        <summary>Bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that provide the additional state bits.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Bits of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that provide the additional state bits.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#MEASURED_STATE_MASK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredStateTooSmall">
      <MemberSignature Language="C#" Value="public const int MeasuredStateTooSmall = 16777216;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MeasuredStateTooSmall = (16777216)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEASURED_STATE_TOO_SMALL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>Bit of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that indicates the measured size
 is smaller that the space the view would like to have.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Bit of <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> and
 <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c> that indicates the measured size
 is smaller that the space the view would like to have.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#MEASURED_STATE_TOO_SMALL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredWidth">
      <MemberSignature Language="C#" Value="public int MeasuredWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MeasuredWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMeasuredWidth", "()I", "GetGetMeasuredWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Like <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c>, but only returns the
 raw width component (that is the result is masked by
 <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c>).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="P:Android.Views.View.MeasuredWidthAndState" /></c>, but only returns the
 raw width component (that is the result is masked by
 <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMeasuredWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasuredWidthAndState">
      <MemberSignature Language="C#" Value="public int MeasuredWidthAndState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MeasuredWidthAndState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMeasuredWidthAndState", "()I", "GetGetMeasuredWidthAndStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the full width measurement information for this view as computed
 by the most recent call to <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the full width measurement information for this view as computed
 by the most recent call to <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c>.  This result is a bit mask
 as defined by <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> and <c><see cref="F:Android.Views.View.MeasuredStateTooSmall" /></c>.
 This should be used during measurement and layout calculations only. Use
 <c><see cref="P:Android.Views.View.Width" /></c> to see how wide a view is after layout.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMeasuredWidthAndState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MergeDrawableStates">
      <MemberSignature Language="C#" Value="protected static int[] MergeDrawableStates (int[] baseState, int[] additionalState);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig int32[] MergeDrawableStates(int32[] baseState, int32[] additionalState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("mergeDrawableStates", "([I[I)[I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseState" Type="System.Int32[]" />
        <Parameter Name="additionalState" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="baseState">The base state values returned by
 <c><see cref="M:Android.Views.View.OnCreateDrawableState(System.Int32)" /></c>, which will be modified to also hold your
 own additional state values.</param>
        <param name="additionalState">The additional state values you would like
 added to <format type="text/html"><var>baseState</var></format>; this array is not modified.</param>
        <summary>Merge your own state values in <format type="text/html"><var>additionalState</var></format> into the base
 state values <format type="text/html"><var>baseState</var></format> that were returned by
 <c><see cref="M:Android.Views.View.OnCreateDrawableState(System.Int32)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Merge your own state values in <format type="text/html"><var>additionalState</var></format> into the base
 state values <format type="text/html"><var>baseState</var></format> that were returned by
 <c><see cref="M:Android.Views.View.OnCreateDrawableState(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#mergeDrawableStates(int[], int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnCreateDrawableState(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MinimumHeight">
      <MemberSignature Language="C#" Value="public virtual int MinimumHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMinimumHeight", "()I", "GetGetMinimumHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the minimum height of the view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the minimum height of the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMinimumHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.SetMinimumHeight(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MinimumWidth">
      <MemberSignature Language="C#" Value="public virtual int MinimumWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMinimumWidth", "()I", "GetGetMinimumWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the minimum width of the view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the minimum width of the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getMinimumWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.SetMinimumWidth(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NestedScrollingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool NestedScrollingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NestedScrollingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isNestedScrollingEnabled", "()Z", "GetIsNestedScrollingEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNestedScrollingEnabled", "(Z)V", "GetSetNestedScrollingEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if nested scrolling is enabled for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isNestedScrollingEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if nested scrolling is enabled for this view.

 </para>
          <para tool="javadoc-to-mdoc">If nested scrolling is enabled and this View class implementation supports it,
 this view will act as a nested scrolling child view when applicable, forwarding data
 about the scroll operation in progress to a compatible and cooperating nested scrolling
 parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNestedScrollingEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Enable or disable nested scrolling for this view.

 </para>
          <para tool="javadoc-to-mdoc">If this property is set to true the view will be permitted to initiate nested
 scrolling operations with a compatible parent view in the current hierarchy. If this
 view does not implement nested scrolling this will have no effect. Disabling nested scrolling
 while a nested scroll is in progress has the effect of <c><see cref="M:Android.Views.View.StopNestedScroll" /></c>
 the nested scroll.</para>
        </remarks>
        <altmember cref="P:Android.Views.View.NestedScrollingEnabled" />
        <altmember cref="P:Android.Views.View.NestedScrollingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="NextFocusDownId">
      <MemberSignature Language="C#" Value="public virtual int NextFocusDownId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextFocusDownId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextFocusDownId", "()I", "GetGetNextFocusDownIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNextFocusDownId", "(I)V", "GetSetNextFocusDownId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_DOWN" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getNextFocusDownId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_DOWN" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNextFocusDownId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_DOWN" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextFocusForwardId">
      <MemberSignature Language="C#" Value="public virtual int NextFocusForwardId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextFocusForwardId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextFocusForwardId", "()I", "GetGetNextFocusForwardIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNextFocusForwardId", "(I)V", "GetSetNextFocusForwardId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_FORWARD" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getNextFocusForwardId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_FORWARD" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNextFocusForwardId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_FORWARD" /></c>.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NextFocusLeftId">
      <MemberSignature Language="C#" Value="public virtual int NextFocusLeftId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextFocusLeftId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextFocusLeftId", "()I", "GetGetNextFocusLeftIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNextFocusLeftId", "(I)V", "GetSetNextFocusLeftId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_LEFT" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getNextFocusLeftId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_LEFT" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNextFocusLeftId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_LEFT" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextFocusRightId">
      <MemberSignature Language="C#" Value="public virtual int NextFocusRightId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextFocusRightId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextFocusRightId", "()I", "GetGetNextFocusRightIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNextFocusRightId", "(I)V", "GetSetNextFocusRightId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_RIGHT" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getNextFocusRightId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_RIGHT" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNextFocusRightId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_RIGHT" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextFocusUpId">
      <MemberSignature Language="C#" Value="public virtual int NextFocusUpId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextFocusUpId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextFocusUpId", "()I", "GetGetNextFocusUpIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNextFocusUpId", "(I)V", "GetSetNextFocusUpId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_UP" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getNextFocusUpId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_UP" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setNextFocusUpId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the id of the view to use when the next focus is <c><see cref="!:Android.Views.View.FOCUS_UP" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NoId">
      <MemberSignature Language="C#" Value="public const int NoId = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoId = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NO_ID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Used to mark a View that has no ID.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Used to mark a View that has no ID.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#NO_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OffsetLeftAndRight">
      <MemberSignature Language="C#" Value="public virtual void OffsetLeftAndRight (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OffsetLeftAndRight(int32 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offsetLeftAndRight", "(I)V", "GetOffsetLeftAndRight_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">the number of pixels to offset the view by
</param>
        <summary>Offset this view's horizontal location by the specified amount of pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Offset this view's horizontal location by the specified amount of pixels.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#offsetLeftAndRight(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OffsetTopAndBottom">
      <MemberSignature Language="C#" Value="public virtual void OffsetTopAndBottom (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OffsetTopAndBottom(int32 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offsetTopAndBottom", "(I)V", "GetOffsetTopAndBottom_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">the number of pixels to offset the view by
</param>
        <summary>Offset this view's vertical location by the specified number of pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Offset this view's vertical location by the specified number of pixels.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#offsetTopAndBottom(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnAnimationEnd">
      <MemberSignature Language="C#" Value="protected virtual void OnAnimationEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAnimationEnd() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAnimationEnd", "()V", "GetOnAnimationEndHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked by a parent ViewGroup to notify the end of the animation
 currently associated with this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invoked by a parent ViewGroup to notify the end of the animation
 currently associated with this view. If you override this method,
 always call super.onAnimationEnd();</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onAnimationEnd()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Animation" />
        <altmember cref="P:Android.Views.View.Animation" />
      </Docs>
    </Member>
    <Member MemberName="OnAnimationStart">
      <MemberSignature Language="C#" Value="protected virtual void OnAnimationStart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAnimationStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAnimationStart", "()V", "GetOnAnimationStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked by a parent ViewGroup to notify the start of the animation
 currently associated with this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invoked by a parent ViewGroup to notify the start of the animation
 currently associated with this view. If you override this method,
 always call super.onAnimationStart();</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onAnimationStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Animation" />
        <altmember cref="P:Android.Views.View.Animation" />
      </Docs>
    </Member>
    <Member MemberName="OnApplyWindowInsets">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowInsets OnApplyWindowInsets (Android.Views.WindowInsets insets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.WindowInsets OnApplyWindowInsets(class Android.Views.WindowInsets insets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onApplyWindowInsets", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;", "GetOnApplyWindowInsets_Landroid_view_WindowInsets_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowInsets</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insets" Type="Android.Views.WindowInsets" />
      </Parameters>
      <Docs>
        <param name="insets">Insets to apply</param>
        <summary>Called when the view should apply <c><see cref="T:Android.Views.WindowInsets" /></c> according to its internal policy.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the view should apply <c><see cref="T:Android.Views.WindowInsets" /></c> according to its internal policy.

 </para>
          <para tool="javadoc-to-mdoc">This method should be overridden by views that wish to apply a policy different from or
 in addition to the default behavior. Clients that wish to force a view subtree
 to apply insets should call <c><see cref="M:Android.Views.View.DispatchApplyWindowInsets(Android.Views.WindowInsets)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Clients may supply an <c><see cref="!:NoType:android/view/View$OnApplyWindowInsetsListener;Href=../../../reference/android/view/View.OnApplyWindowInsetsListener.html" /></c> to a view. If one is set
 it will be called during dispatch instead of this method. The listener may optionally
 call this method from its own implementation if it wishes to apply the view's default
 insets policy in addition to its own.</para>
          <para tool="javadoc-to-mdoc">Implementations of this method should either return the insets parameter unchanged
 or a new <c><see cref="T:Android.Views.WindowInsets" /></c> cloned from the supplied insets with any insets consumed
 that this view applied itself. This allows new inset types added in future platform
 versions to pass through existing implementations unchanged without being erroneously
 consumed.</para>
          <para tool="javadoc-to-mdoc">By default if a view's <c><see cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" /></c>
 property is set then the view will consume the system window insets and apply them
 as padding for the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onApplyWindowInsets(android.view.WindowInsets)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttachedToWindow">
      <MemberSignature Language="C#" Value="protected virtual void OnAttachedToWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttachedToWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the view is attached to a window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the view is attached to a window.  At this point it
 has a Surface and will start drawing.  Note that this function is
 guaranteed to be called before <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 however it may be called any time before the first onDraw -- including
 before or after <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onAttachedToWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnDetachedFromWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnCancelPendingInputEvents">
      <MemberSignature Language="C#" Value="public virtual void OnCancelPendingInputEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCancelPendingInputEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCancelPendingInputEvents", "()V", "GetOnCancelPendingInputEventsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called as the result of a call to <c><see cref="M:Android.Views.View.CancelPendingInputEvents" /></c> on this view or
 a parent view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called as the result of a call to <c><see cref="M:Android.Views.View.CancelPendingInputEvents" /></c> on this view or
 a parent view.

 </para>
          <para tool="javadoc-to-mdoc">This method is responsible for removing any pending high-level input events that were
 posted to the event queue to run later. Custom view classes that post their own deferred
 high-level events via <c><see cref="M:Android.Views.View.Post(Java.Lang.IRunnable)" /></c>, <c><see cref="M:Android.Views.View.PostDelayed(Java.Lang.IRunnable,System.Int64)" /></c> or
 <c><see cref="T:Android.OS.Handler" /></c> should override this method, call
 <c>super.onCancelPendingInputEvents()</c> and remove those callbacks as appropriate.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onCancelPendingInputEvents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCheckIsTextEditor">
      <MemberSignature Language="C#" Value="public virtual bool OnCheckIsTextEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCheckIsTextEditor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCheckIsTextEditor", "()Z", "GetOnCheckIsTextEditorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check whether the called view is a text editor, in which case it
 would make sense to automatically display a soft input window for
 it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check whether the called view is a text editor, in which case it
 would make sense to automatically display a soft input window for
 it.  Subclasses should override this if they implement
 <c><see cref="M:Android.Views.View.OnCreateInputConnection(Android.Views.InputMethods.EditorInfo)" /></c> to return true if
 a call on that method would return a non-null InputConnection, and
 they are really a first-class editor that the user would normally
 start typing on when the go into a window containing your view.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation always returns false.  This does
 <i>not</i> mean that its <c><see cref="M:Android.Views.View.OnCreateInputConnection(Android.Views.InputMethods.EditorInfo)" /></c>
 will not be called or the user can not otherwise perform edits on your
 view; it is just a hint to the system that this is not the primary
 purpose of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onCheckIsTextEditor()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new resource configuration.
</param>
        <summary>Called when the current configuration of the resources being used
 by the application have changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the current configuration of the resources being used
 by the application have changed.  You can use this to decide when
 to reload resources that can changed based on orientation and other
 configuration characteristics.  You only need to use this if you are
 not relying on the normal <c><see cref="T:Android.App.Activity" /></c> mechanism of
 recreating the activity instance upon a configuration change.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateContextMenu">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateContextMenu (Android.Views.IContextMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateContextMenu(class Android.Views.IContextMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateContextMenu", "(Landroid/view/ContextMenu;)V", "GetOnCreateContextMenu_Landroid_view_ContextMenu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
      </Parameters>
      <Docs>
        <param name="menu">the context menu to populate
</param>
        <summary>Views should implement this if the view itself is going to add items to
 the context menu.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Views should implement this if the view itself is going to add items to
 the context menu.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onCreateContextMenu(android.view.ContextMenu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDrawableState">
      <MemberSignature Language="C#" Value="protected virtual int[] OnCreateDrawableState (int extraSpace);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32[] OnCreateDrawableState(int32 extraSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateDrawableState", "(I)[I", "GetOnCreateDrawableState_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraSpace" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="extraSpace">if non-zero, this is the number of extra entries you
 would like in the returned array in which you can place your own
 states.</param>
        <summary>Generate the new <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> state for
 this view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Generate the new <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> state for
 this view. This is called by the view
 system when the cached Drawable state is determined to be invalid.  To
 retrieve the current state, you should use <c><see cref="M:Android.Views.View.GetDrawableState" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onCreateDrawableState(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.MergeDrawableStates(System.Int32[], System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateInputConnection">
      <MemberSignature Language="C#" Value="public virtual Android.Views.InputMethods.IInputConnection OnCreateInputConnection (Android.Views.InputMethods.EditorInfo outAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.IInputConnection OnCreateInputConnection(class Android.Views.InputMethods.EditorInfo outAttrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateInputConnection", "(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;", "GetOnCreateInputConnection_Landroid_view_inputmethod_EditorInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.IInputConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outAttrs" Type="Android.Views.InputMethods.EditorInfo" />
      </Parameters>
      <Docs>
        <param name="outAttrs">Fill in with attribute information about the connection.
</param>
        <summary>Create a new InputConnection for an InputMethod to interact
 with the view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new InputConnection for an InputMethod to interact
 with the view.  The default implementation returns null, since it doesn't
 support input methods.  You can override this to implement such support.
 This is only needed for views that take focus and text input.

 </para>
          <para tool="javadoc-to-mdoc">When implementing this, you probably also want to implement
 <c><see cref="M:Android.Views.View.OnCheckIsTextEditor" /></c> to indicate you will return a
 non-null InputConnection.</para>
          <para tool="javadoc-to-mdoc">Also, take good care to fill in the <c><see cref="T:Android.Views.InputMethods.EditorInfo" /></c>
 object correctly and in its entirety, so that the connected IME can rely
 on its values. For example, <c><see cref="P:Android.Views.InputMethods.EditorInfo.InitialSelStart" /></c>
 and  <c><see cref="P:Android.Views.InputMethods.EditorInfo.InitialSelEnd" /></c> members
 must be filled in with the correct cursor position for IMEs to work correctly
 with your application.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onCreateInputConnection(android.view.inputmethod.EditorInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnDetachedFromWindow">
      <MemberSignature Language="C#" Value="protected virtual void OnDetachedFromWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDetachedFromWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the view is detached from a window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the view is detached from a window.  At this point it
 no longer has a surface for drawing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onDetachedFromWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnAttachedToWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnDisplayHint">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayHint (int hint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayHint(int32 hint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisplayHint", "(I)V", "GetOnDisplayHint_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hint">A hint about whether or not this view is displayed:
 <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>Gives this view a hint about whether is displayed or not.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gives this view a hint about whether is displayed or not. For instance, when
 a View moves out of the screen, it might receives a display hint indicating
 the view is not displayed. Applications should not <i>rely</i> on this hint
 as there is no guarantee that they will receive one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onDisplayHint(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnDragEvent (Android.Views.DragEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnDragEvent(class Android.Views.DragEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDragEvent", "(Landroid/view/DragEvent;)Z", "GetOnDragEvent_Landroid_view_DragEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.DragEvent" />
      </Parameters>
      <Docs>
        <param name="e">The <c><see cref="T:Android.Views.DragEvent" /></c> sent by the system.
 The <c><see cref="P:Android.Views.DragEvent.Action" /></c> method returns an action type constant defined
 in DragEvent, indicating the type of drag event represented by this object.</param>
        <summary>Handles drag events sent by the system following a call to
 <c><see cref="M:Android.Views.View.StartDrag(Android.Content.ClipData,.DragShadowBuilder,.DragShadowBuilder,.DragShadowBuilder)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Handles drag events sent by the system following a call to
 <c><see cref="M:Android.Views.View.StartDrag(Android.Content.ClipData,.DragShadowBuilder,.DragShadowBuilder,.DragShadowBuilder)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
 When the system calls this method, it passes a
 <c><see cref="T:Android.Views.DragEvent" /></c> object. A call to
 <c><see cref="P:Android.Views.DragEvent.Action" /></c> returns one of the action type constants defined
 in DragEvent. The method uses these to determine what is happening in the drag and drop
 operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onDragEvent(android.view.DragEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDraw">
      <MemberSignature Language="C#" Value="protected virtual void OnDraw (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDraw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDraw", "(Landroid/graphics/Canvas;)V", "GetOnDraw_Landroid_graphics_Canvas_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">the canvas on which the background will be drawn
</param>
        <summary>Implement this to do your drawing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to do your drawing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onDraw(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawScrollBars">
      <MemberSignature Language="C#" Value="protected void OnDrawScrollBars (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDrawScrollBars(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDrawScrollBars", "(Landroid/graphics/Canvas;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">the canvas on which to draw the scrollbars</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Request the drawing of the horizontal and the vertical scrollbar. The
 scrollbars are painted only if they have been awakened first.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onDrawScrollBars(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 7" />
        <altmember cref="M:Android.Views.View.AwakenScrollBars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnFilterTouchEventForSecurity">
      <MemberSignature Language="C#" Value="public virtual bool OnFilterTouchEventForSecurity (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnFilterTouchEventForSecurity(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFilterTouchEventForSecurity", "(Landroid/view/MotionEvent;)Z", "GetOnFilterTouchEventForSecurity_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event to be filtered.</param>
        <summary>Filter the touch event to apply security policies.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Filter the touch event to apply security policies.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onFilterTouchEventForSecurity(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="P:Android.Views.View.FilterTouchesWhenObscured" />
      </Docs>
    </Member>
    <Member MemberName="OnFinishInflate">
      <MemberSignature Language="C#" Value="protected virtual void OnFinishInflate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFinishInflate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFinishInflate", "()V", "GetOnFinishInflateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalize inflating a view from XML.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Finalize inflating a view from XML.  This is called as the last phase
 of inflation, after all child views have been added.

 </para>
          <para tool="javadoc-to-mdoc">Even if the subclass overrides onFinishInflate, they should always be
 sure to call the super method, so that we get called.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onFinishInflate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnFinishTemporaryDetach">
      <MemberSignature Language="C#" Value="public virtual void OnFinishTemporaryDetach ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnFinishTemporaryDetach() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFinishTemporaryDetach", "()V", "GetOnFinishTemporaryDetachHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c><see cref="M:Android.Views.View.OnStartTemporaryDetach" /></c> when the container is done
 changing the view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after <c><see cref="M:Android.Views.View.OnStartTemporaryDetach" /></c> when the container is done
 changing the view.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onFinishTemporaryDetach()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnFocusChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFocusChanged (bool gainFocus, Android.Views.FocusSearchDirection direction, Android.Graphics.Rect previouslyFocusedRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFocusChanged(bool gainFocus, valuetype Android.Views.FocusSearchDirection direction, class Android.Graphics.Rect previouslyFocusedRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFocusChanged", "(ZILandroid/graphics/Rect;)V", "GetOnFocusChanged_ZILandroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gainFocus" Type="System.Boolean" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="previouslyFocusedRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="gainFocus">True if the View has focus; false otherwise.</param>
        <param name="direction">The direction focus has moved when requestFocus()
                  is called to give this view focus. Values are
                  <c><see cref="!:Android.Views.View.FOCUS_UP" /></c>, <c><see cref="!:Android.Views.View.FOCUS_DOWN" /></c>, <c><see cref="!:Android.Views.View.FOCUS_LEFT" /></c>,
                  <c><see cref="!:Android.Views.View.FOCUS_RIGHT" /></c>, <c><see cref="!:Android.Views.View.FOCUS_FORWARD" /></c>, or <c><see cref="!:Android.Views.View.FOCUS_BACKWARD" /></c>.
                  It may not always apply, in which case use the default.</param>
        <param name="previouslyFocusedRect">The rectangle, in this view's coordinate
        system, of the previously focused view.  If applicable, this will be
        passed in as finer grained information about where the focus is coming
        from (in addition to direction).  Will be <c>null</c> otherwise.
</param>
        <summary>Called by the view system when the focus state of this view changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the view system when the focus state of this view changes.
 When the focus change event is caused by directional navigation, direction
 and previouslyFocusedRect provide insight into where the focus is coming from.
 When overriding, be sure to call up through to the super class so that
 the standard focus handling will occur.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onFocusChanged(boolean, int, android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnFocusChangeListener">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View.IOnFocusChangeListener OnFocusChangeListener { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View/IOnFocusChangeListener OnFocusChangeListener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOnFocusChangeListener", "()Landroid/view/View$OnFocusChangeListener;", "GetGetOnFocusChangeListenerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setOnFocusChangeListener", "(Landroid/view/View$OnFocusChangeListener;)V", "GetSetOnFocusChangeListener_Landroid_view_View_OnFocusChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View+IOnFocusChangeListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the focus-change callback registered for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getOnFocusChangeListener()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the focus-change callback registered for this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setOnFocusChangeListener(android.view.View.OnFocusChangeListener)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Register a callback to be invoked when focus of this view changed.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnGenericMotionEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnGenericMotionEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetOnGenericMotionEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The generic motion event being processed.</param>
        <summary>Implement this method to handle generic motion events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this method to handle generic motion events.
 <example><code lang="java"> public boolean onGenericMotionEvent(MotionEvent event) {
     if (event.isFromSource(InputDevice.SOURCE_CLASS_JOYSTICK)) {
         if (event.getAction() == MotionEvent.ACTION_MOVE) {
             // process the joystick movement...
             return true;
         }
     }
     if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
         switch (event.getAction()) {
             case MotionEvent.ACTION_HOVER_MOVE:
                 // process the mouse hover movement...
                 return true;
             case MotionEvent.ACTION_SCROLL:
                 // process the scroll wheel movement...
                 return true;
         }
     }
     return super.onGenericMotionEvent(event);
 }</code></example></para>
          <para tool="javadoc-to-mdoc">
 Generic motion events describe joystick movements, mouse hovers, track pad
 touches, scroll wheel movements and other input events.  The
 <c><see cref="P:Android.Views.MotionEvent.Source" /></c> of the motion event specifies
 the class of input that was received.  Implementations of this method
 must examine the bits in the source before processing the event.
 The following code example shows how this is done.
 </para>
          <para tool="javadoc-to-mdoc">
 Generic motion events with source class <c><see cref="F:Android.Views.InputDevice.SourceClassPointer" /></c>
 are delivered to the view under the pointer.  All other generic motion events are
 delivered to the focused view.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnHoverChanged">
      <MemberSignature Language="C#" Value="public virtual void OnHoverChanged (bool hovered);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHoverChanged(bool hovered) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onHoverChanged", "(Z)V", "GetOnHoverChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hovered" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hovered">The current hover state, as returned by <c><see cref="P:Android.Views.View.Hovered" /></c>.</param>
        <summary>Implement this method to handle hover state changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this method to handle hover state changes.
 </para>
          <para tool="javadoc-to-mdoc">
 This method is called whenever the hover state changes as a result of a
 call to <c><see cref="P:Android.Views.View.Hovered" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onHoverChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.Hovered" />
        <altmember cref="P:Android.Views.View.Hovered" />
      </Docs>
    </Member>
    <Member MemberName="OnHoverEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnHoverEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnHoverEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onHoverEvent", "(Landroid/view/MotionEvent;)Z", "GetOnHoverEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event that describes the hover.</param>
        <summary>Implement this method to handle hover events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this method to handle hover events.
 <list type="bullet"><item><term>The view receives a hover event with action <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_ENTER" /></c>
 when the pointer enters the bounds of the view.</term></item><item><term>The view receives a hover event with action <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_MOVE" /></c>
 when the pointer has already entered the bounds of the view and has moved.</term></item><item><term>The view receives a hover event with action <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_EXIT" /></c>
 when the pointer has exited the bounds of the view or when the pointer is
 about to go down due to a button click, tap, or similar user action that
 causes the view to be touched.</term></item></list></para>
          <para tool="javadoc-to-mdoc">
 This method is called whenever a pointer is hovering into, over, or out of the
 bounds of a view and the view is not currently being touched.
 Hover events are represented as pointer events with action
 <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_ENTER" /></c>, <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_MOVE" /></c>,
 or <c><see cref="!:Android.Views.MotionEvent.ACTION_HOVER_EXIT" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 The view should implement this method to return true to indicate that it is
 handling the hover event, such as by changing its drawable state.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation calls <c><see cref="P:Android.Views.View.Hovered" /></c> to update the hovered state
 of the view when a hover enter or hover exit event is received, if the view
 is enabled and is clickable.  The default implementation also sends hover
 accessibility events.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onHoverEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.Hovered" />
        <altmember cref="P:Android.Views.View.Hovered" />
        <altmember cref="M:Android.Views.View.OnHoverChanged(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnInitializeAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void OnInitializeAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInitializeAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInitializeAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)V", "GetOnInitializeAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event to initialize.</param>
        <summary>Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> with information about
 this View which is the event source.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> with information about
 this View which is the event source. In other words, the source of
 an accessibility event is the view whose state change triggered firing
 the event.
 </para>
          <para tool="javadoc-to-mdoc">
 Example: Setting the password property of an event in addition
          to properties set by the super implementation:
 <example><code lang="java"> public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
     super.onInitializeAccessibilityEvent(event);
     event.setPassword(true);
 }</code></example></para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Always call the super implementation before adding
 information to the event, in case the default implementation has basic information to add.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" />
        <altmember cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnInitializeAccessibilityNodeInfo">
      <MemberSignature Language="C#" Value="public virtual void OnInitializeAccessibilityNodeInfo (Android.Views.Accessibility.AccessibilityNodeInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInitializeAccessibilityNodeInfo(class Android.Views.Accessibility.AccessibilityNodeInfo info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInitializeAccessibilityNodeInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo;)V", "GetOnInitializeAccessibilityNodeInfo_Landroid_view_accessibility_AccessibilityNodeInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Parameters>
      <Docs>
        <param name="info">The instance to initialize.
</param>
        <summary>Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> with information about this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> with information about this view.
 The base implementation sets:
 <list type="bullet"><item><term><c><see cref="M:Android.Views.Accessibility.AccessibilityNodeInfo.SetParent(Android.Views.View)" /></c>,</term></item><item><term><c><see cref="M:Android.Views.Accessibility.AccessibilityNodeInfo.SetBoundsInParent(Android.Graphics.Rect)" /></c>,</term></item><item><term><c><see cref="M:Android.Views.Accessibility.AccessibilityNodeInfo.SetBoundsInScreen(Android.Graphics.Rect)" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.PackageNameFormatted" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.ClassNameFormatted" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.ContentDescriptionFormatted" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.Enabled" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.Clickable" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.Focusable" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.Focused" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.LongClickable" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.Selected" /></c>,</term></item><item><term><c><see cref="P:Android.Views.Accessibility.AccessibilityNodeInfo.ContextClickable" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 Subclasses should override this method, call the super implementation,
 and set additional attributes.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyDown (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyDown(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyDown", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyDown_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">A key code that represents the button pressed, from
                <c><see cref="T:Android.Views.KeyEvent" /></c>.</param>
        <param name="e">The KeyEvent object that defines the button action.
</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyDown(int,android.view.KeyEvent)" /></c>: perform press of the view
 when <c><see cref="!:Android.Views.KeyEvent.KEYCODE_DPAD_CENTER" /></c> or <c><see cref="!:Android.Views.KeyEvent.KEYCODE_ENTER" /></c>
 is released, if the view is enabled and clickable.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyDown(int,android.view.KeyEvent)" /></c>: perform press of the view
 when <c><see cref="!:Android.Views.KeyEvent.KEYCODE_DPAD_CENTER" /></c> or <c><see cref="!:Android.Views.KeyEvent.KEYCODE_ENTER" /></c>
 is released, if the view is enabled and clickable.

 </para>
          <para tool="javadoc-to-mdoc">Key presses in software keyboards will generally NOT trigger this listener,
 although some may elect to do so in some situations. Do not rely on this to
 catch software key presses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyDown(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyLongPress">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyLongPress (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyLongPress(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyLongPress", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyLongPress_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyLongPress(int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyLongPress(int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).
 </para>
          <para tool="javadoc-to-mdoc">Key presses in software keyboards will generally NOT trigger this listener,
 although some may elect to do so in some situations. Do not rely on this to
 catch software key presses.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyLongPress(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyMultiple">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyMultiple (Android.Views.Keycode keyCode, int repeatCount, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyMultiple(valuetype Android.Views.Keycode keyCode, int32 repeatCount, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyMultiple", "(IILandroid/view/KeyEvent;)Z", "GetOnKeyMultiple_IILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">A key code that represents the button pressed, from
                    <c><see cref="T:Android.Views.KeyEvent" /></c>.</param>
        <param name="repeatCount">The number of times the action was made.</param>
        <param name="e">The KeyEvent object that defines the button action.
</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyMultiple(int,int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyMultiple(int,int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).
 </para>
          <para tool="javadoc-to-mdoc">Key presses in software keyboards will generally NOT trigger this listener,
 although some may elect to do so in some situations. Do not rely on this to
 catch software key presses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyMultiple(int, int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPreIme">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyPreIme (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyPreIme(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyPreIme", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyPreIme_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Handle a key event before it is processed by any input method
 associated with the view hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Handle a key event before it is processed by any input method
 associated with the view hierarchy.  This can be used to intercept
 key events in special situations before the IME consumes them; a
 typical example would be handling the BACK key to update the application's
 UI instead of allowing the IME to see it and close itself.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyPreIme(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyShortcut">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyShortcut (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyShortcut(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyShortcut", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyShortcut_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called on the focused view when a key shortcut event is not handled.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called on the focused view when a key shortcut event is not handled.
 Override this method to implement local key shortcuts for the View.
 Key shortcuts can also be implemented by setting the
 <c><see cref="M:Android.Views.IMenuItem.SetShortcut(System.Char,System.Char)" /></c> property of menu items.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyShortcut(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyUp (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyUp(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyUp", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyUp_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">A key code that represents the button pressed, from
                <c><see cref="T:Android.Views.KeyEvent" /></c>.</param>
        <param name="e">The KeyEvent object that defines the button action.
</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyUp(int,android.view.KeyEvent)" /></c>: perform clicking of the view
 when <c><see cref="!:Android.Views.KeyEvent.KEYCODE_DPAD_CENTER" /></c> or
 <c><see cref="!:Android.Views.KeyEvent.KEYCODE_ENTER" /></c> is released.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyUp(int,android.view.KeyEvent)" /></c>: perform clicking of the view
 when <c><see cref="!:Android.Views.KeyEvent.KEYCODE_DPAD_CENTER" /></c> or
 <c><see cref="!:Android.Views.KeyEvent.KEYCODE_ENTER" /></c> is released.
 </para>
          <para tool="javadoc-to-mdoc">Key presses in software keyboards will generally NOT trigger this listener,
 although some may elect to do so in some situations. Do not rely on this to
 catch software key presses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onKeyUp(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (bool changed, int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(bool changed, int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLayout", "(ZIIII)V", "GetOnLayout_ZIIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changed" Type="System.Boolean" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changed">This is a new size or position for this view</param>
        <param name="left">Left position, relative to parent</param>
        <param name="top">Top position, relative to parent</param>
        <param name="right">Right position, relative to parent</param>
        <param name="bottom">Bottom position, relative to parent
</param>
        <summary>Called from layout when this view should
 assign a size and position to each of its children.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called from layout when this view should
 assign a size and position to each of its children.

 Derived classes with children should override
 this method and call layout on each of
 their children.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onLayout(boolean, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMeasure">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasure (int widthMeasureSpec, int heightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasure(int32 widthMeasureSpec, int32 heightMeasureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onMeasure", "(II)V", "GetOnMeasure_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="widthMeasureSpec">horizontal space requirements as imposed by the parent.
                         The requirements are encoded with
                         <c><see cref="!:NoType:android/view/View$MeasureSpec;Href=../../../reference/android/view/View.MeasureSpec.html" /></c>.</param>
        <param name="heightMeasureSpec">vertical space requirements as imposed by the parent.
                         The requirements are encoded with
                         <c><see cref="!:NoType:android/view/View$MeasureSpec;Href=../../../reference/android/view/View.MeasureSpec.html" /></c>.</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Measure the view and its content to determine the measured width and the
 measured height. This method is invoked by <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c> and
 should be overridden by subclasses to provide accurate and efficient
 measurement of their contents.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>CONTRACT:</i> When overriding this method, you
 <i>must</i> call <c><see cref="M:Android.Views.View.SetMeasuredDimension(System.Int32,System.Int32)" /></c> to store the
 measured width and height of this view. Failure to do so will trigger an
 <c>IllegalStateException</c>, thrown by
 <c><see cref="M:Android.Views.View.Measure(System.Int32,System.Int32)" /></c>. Calling the superclass'
 <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c> is a valid use.
 </para>
          <para tool="javadoc-to-mdoc">
 The base class implementation of measure defaults to the background size,
 unless a larger size is allowed by the MeasureSpec. Subclasses should
 override <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c> to provide better measurements of
 their content.
 </para>
          <para tool="javadoc-to-mdoc">
 If this method is overridden, it is the subclass's responsibility to make
 sure the measured height and width are at least the view's minimum height
 and width (<c><see cref="P:Android.Views.View.SuggestedMinimumHeight" /></c> and
 <c><see cref="P:Android.Views.View.SuggestedMinimumWidth" /></c>).
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onMeasure(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.MeasuredWidth" />
        <altmember cref="P:Android.Views.View.MeasuredHeight" />
        <altmember cref="M:Android.Views.View.SetMeasuredDimension(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.View.SuggestedMinimumHeight" />
        <altmember cref="P:Android.Views.View.SuggestedMinimumWidth" />
      </Docs>
    </Member>
    <Member MemberName="OnOverScrolled">
      <MemberSignature Language="C#" Value="protected virtual void OnOverScrolled (int scrollX, int scrollY, bool clampedX, bool clampedY);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOverScrolled(int32 scrollX, int32 scrollY, bool clampedX, bool clampedY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOverScrolled", "(IIZZ)V", "GetOnOverScrolled_IIZZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollX" Type="System.Int32" />
        <Parameter Name="scrollY" Type="System.Int32" />
        <Parameter Name="clampedX" Type="System.Boolean" />
        <Parameter Name="clampedY" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scrollX">New X scroll value in pixels</param>
        <param name="scrollY">New Y scroll value in pixels</param>
        <param name="clampedX">True if scrollX was clamped to an over-scroll boundary</param>
        <param name="clampedY">True if scrollY was clamped to an over-scroll boundary
</param>
        <summary>Called by <c><see cref="M:Android.Views.View.OverScrollBy(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> to
 respond to the results of an over-scroll operation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by <c><see cref="M:Android.Views.View.OverScrollBy(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> to
 respond to the results of an over-scroll operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onOverScrolled(int, int, boolean, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="OnPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void OnPopulateAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPopulateAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)V", "GetOnPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The accessibility event which to populate.</param>
        <summary>Called from <c><see cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c>
 giving a chance to this View to populate the accessibility event with its
 text content.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called from <c><see cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c>
 giving a chance to this View to populate the accessibility event with its
 text content. While this method is free to modify event
 attributes other than text content, doing so should normally be performed in
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Example: Adding formatted date string to an accessibility event in addition
          to the text added by the super implementation:
 <example><code lang="java"> public void onPopulateAccessibilityEvent(AccessibilityEvent event) {
     super.onPopulateAccessibilityEvent(event);
     final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY;
     String selectedDateUtterance = DateUtils.formatDateTime(mContext,
         mCurrentDate.getTimeInMillis(), flags);
     event.getText().add(selectedDateUtterance);
 }</code></example></para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Always call the super implementation before adding
 information to the event, in case the default implementation has basic information to add.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" />
        <altmember cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnRestoreInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void OnRestoreInstanceState (Android.OS.IParcelable state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRestoreInstanceState(class Android.OS.IParcelable state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Parcelable;)V", "GetOnRestoreInstanceState_Landroid_os_Parcelable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Android.OS.IParcelable" />
      </Parameters>
      <Docs>
        <param name="state">The frozen state that had previously been returned by
        <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c>.</param>
        <summary>Hook allowing a view to re-apply a representation of its internal state that had previously
 been generated by <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Hook allowing a view to re-apply a representation of its internal state that had previously
 been generated by <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c>. This function will never be called with a
 null state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onRestoreInstanceState(android.os.Parcelable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnSaveInstanceState" />
      </Docs>
    </Member>
    <Member MemberName="OnRtlPropertiesChanged">
      <MemberSignature Language="C#" Value="public virtual void OnRtlPropertiesChanged (Android.Views.LayoutDirection layoutDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRtlPropertiesChanged(valuetype Android.Views.LayoutDirection layoutDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRtlPropertiesChanged", "(I)V", "GetOnRtlPropertiesChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutDirection" Type="Android.Views.LayoutDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="layoutDirection">the direction of the layout</param>
        <summary>Called when any RTL property (layout direction or text direction or text alignment) has
 been changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when any RTL property (layout direction or text direction or text alignment) has
 been changed.

 Subclasses need to override this method to take care of cached information that depends on the
 resolved layout direction, or to inform child views that inherit their layout direction.

 The default implementation does nothing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onRtlPropertiesChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="F:Android.Views.View.LayoutDirectionLtr" />
        <altmember cref="F:Android.Views.View.LayoutDirectionRtl" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="protected virtual Android.OS.IParcelable OnSaveInstanceState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.OS.IParcelable OnSaveInstanceState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSaveInstanceState", "()Landroid/os/Parcelable;", "GetOnSaveInstanceStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hook allowing a view to generate a representation of its internal state
 that can later be used to create a new instance with that same state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Hook allowing a view to generate a representation of its internal state
 that can later be used to create a new instance with that same state.
 This state should only contain information that is not persistent or can
 not be reconstructed later. For example, you will never store your
 current position on screen because that will be computed again when a
 new instance of the view is placed in its view hierarchy.
 </para>
          <para tool="javadoc-to-mdoc">
 Some examples of things you may store here: the current cursor position
 in a text view (but usually not the text itself since that is stored in a
 content provider or other persistent storage), the currently selected
 item in a list view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onSaveInstanceState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.OnRestoreInstanceState(Android.OS.IParcelable)" />
        <altmember cref="P:Android.Views.View.SaveEnabled" />
      </Docs>
    </Member>
    <Member MemberName="OnScreenStateChanged">
      <MemberSignature Language="C#" Value="public virtual void OnScreenStateChanged (Android.Views.ScreenState screenState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnScreenStateChanged(valuetype Android.Views.ScreenState screenState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onScreenStateChanged", "(I)V", "GetOnScreenStateChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenState" Type="Android.Views.ScreenState">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="screenState">The new state of the screen. Can be either
                    <c><see cref="F:Android.Views.View.ScreenStateOn" /></c> or <c><see cref="F:Android.Views.View.ScreenStateOff" /></c></param>
        <summary>This method is called whenever the state of the screen this view is
 attached to changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called whenever the state of the screen this view is
 attached to changes. A state change will usually occurs when the screen
 turns on or off (whether it happens automatically or the user does it
 manually.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onScreenStateChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnScrollChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnScrollChanged (int l, int t, int oldl, int oldt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScrollChanged(int32 l, int32 t, int32 oldl, int32 oldt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onScrollChanged", "(IIII)V", "GetOnScrollChanged_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="oldl" Type="System.Int32" />
        <Parameter Name="oldt" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="l">Current horizontal scroll origin.</param>
        <param name="t">Current vertical scroll origin.</param>
        <param name="oldl">Previous horizontal scroll origin.</param>
        <param name="oldt">Previous vertical scroll origin.
</param>
        <summary>This is called in response to an internal scroll in this view (i.e., the
 view scrolled its own contents).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called in response to an internal scroll in this view (i.e., the
 view scrolled its own contents). This is typically as a result of
 <c><see cref="M:Android.Views.View.ScrollBy(System.Int32,System.Int32)" /></c> or <c><see cref="M:Android.Views.View.ScrollTo(System.Int32,System.Int32)" /></c> having been
 called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onScrollChanged(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnSetAlpha">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetAlpha (int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetAlpha(int32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSetAlpha", "(I)Z", "GetOnSetAlpha_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="alpha">The alpha (0..255) to apply to the view's drawing</param>
        <summary>Invoked if there is a Transform that involves alpha.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Invoked if there is a Transform that involves alpha. Subclass that can
 draw themselves with the specified alpha should return true, and then
 respect that alpha when their onDraw() is called. If this returns false
 then the view may be redirected to draw into an offscreen buffer to
 fulfill the request, which will look fine, but may be slower than if the
 subclass handles it internally. The default implementation returns false.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onSetAlpha(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (int w, int h, int oldw, int oldh);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(int32 w, int32 h, int32 oldw, int32 oldh) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSizeChanged", "(IIII)V", "GetOnSizeChanged_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Int32" />
        <Parameter Name="h" Type="System.Int32" />
        <Parameter Name="oldw" Type="System.Int32" />
        <Parameter Name="oldh" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="w">Current width of this view.</param>
        <param name="h">Current height of this view.</param>
        <param name="oldw">Old width of this view.</param>
        <param name="oldh">Old height of this view.
</param>
        <summary>This is called during layout when the size of this view has changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called during layout when the size of this view has changed. If
 you were just added to the view hierarchy, you're called with the old
 values of 0.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnStartTemporaryDetach">
      <MemberSignature Language="C#" Value="public virtual void OnStartTemporaryDetach ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStartTemporaryDetach() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartTemporaryDetach", "()V", "GetOnStartTemporaryDetachHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when a container is going to temporarily detach a child, with
 <c><see cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a container is going to temporarily detach a child, with
 <c><see cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" /></c>.
 It will either be followed by <c><see cref="M:Android.Views.View.OnFinishTemporaryDetach" /></c> or
 <c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c> when the container is done.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onStartTemporaryDetach()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTouchEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTouchEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event.</param>
        <summary>Implement this method to handle touch screen motion events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this method to handle touch screen motion events.
 </para>
          <para tool="javadoc-to-mdoc">
 If this method is used to detect click actions, it is recommended that
 the actions be performed by implementing and calling
 <c><see cref="M:Android.Views.View.PerformClick" /></c>. This will ensure consistent system behavior,
 including:
 <list type="bullet"><item><term>obeying click sound preferences
 </term></item><item><term>dispatching OnClickListener calls
 </term></item><item><term>handling <c><see cref="F:Android.Views.Accessibility.AccessibilityNodeInfo.ActionClick" /></c> when
 accessibility features are enabled
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTrackballEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTrackballEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTrackballEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event.</param>
        <summary>Implement this method to handle trackball motion events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this method to handle trackball motion events.  The
 <i>relative</i> movement of the trackball since the last event
 can be retrieve with <c><see cref="M:Android.Views.MotionEvent.GetX" /></c> and
 <c><see cref="M:Android.Views.MotionEvent.GetY" /></c>.  These are normalized so
 that a movement of 1 corresponds to the user pressing one DPAD key (so
 they will often be fractional values, representing the more fine-grained
 movement information available from a trackball).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onTrackballEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibilityChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibilityChanged (Android.Views.View changedView, Android.Views.ViewStates visibility);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibilityChanged(class Android.Views.View changedView, valuetype Android.Views.ViewStates visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onVisibilityChanged", "(Landroid/view/View;I)V", "GetOnVisibilityChanged_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changedView" Type="Android.Views.View" />
        <Parameter Name="visibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="changedView">The view whose visibility changed. May be
                    <c>this</c> or an ancestor view.</param>
        <param name="visibility">The new visibility, one of <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>,
                   <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>Called when the visibility of the view or an ancestor of the view has
 changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the visibility of the view or an ancestor of the view has
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onVisibilityChanged(android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowFocusChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowFocusChanged (bool hasWindowFocus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowFocusChanged(bool hasWindowFocus) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowFocusChanged", "(Z)V", "GetOnWindowFocusChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasWindowFocus" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasWindowFocus">True if the window containing this view now has
        focus, false otherwise.
</param>
        <summary>Called when the window containing this view gains or loses focus.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the window containing this view gains or loses focus.  Note
 that this is separate from view focus: to receive key events, both
 your view and its window must have focus.  If a window is displayed
 on top of yours that takes input focus, then your own window will lose
 focus but the view focus will remain unchanged.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onWindowFocusChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowSystemUiVisibilityChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowSystemUiVisibilityChanged (Android.Views.SystemUiFlags visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowSystemUiVisibilityChanged(valuetype Android.Views.SystemUiFlags visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowSystemUiVisibilityChanged", "(I)V", "GetOnWindowSystemUiVisibilityChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="Android.Views.SystemUiFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="visible">To be added.</param>
        <summary>Override to find out when the window's requested system UI visibility
 has changed, that is the value returned by <c><see cref="P:Android.Views.View.WindowSystemUiVisibility" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Override to find out when the window's requested system UI visibility
 has changed, that is the value returned by <c><see cref="P:Android.Views.View.WindowSystemUiVisibility" /></c>.
 This is different from the callbacks received through
 <c><see cref="M:Android.Views.View.SetOnSystemUiVisibilityChangeListener(.IOnSystemUiVisibilityChangeListener)" /></c>
 in that this is only telling you about the local request of the window,
 not the actual values applied by the system.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onWindowSystemUiVisibilityChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowVisibilityChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnWindowVisibilityChanged (Android.Views.ViewStates visibility);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWindowVisibilityChanged(valuetype Android.Views.ViewStates visibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowVisibilityChanged", "(I)V", "GetOnWindowVisibilityChanged_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="visibility">The new visibility of the window.
</param>
        <summary>Called when the window containing has change its visibility
 (between <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>, and <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the window containing has change its visibility
 (between <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>, and <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>).  Note
 that this tells you whether or not your window is being made visible
 to the window manager; this does <i>not</i> tell you whether or not
 your window is obscured by other windows on the screen, even if it
 is itself visible.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onWindowVisibilityChanged(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OutlineProvider">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewOutlineProvider OutlineProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.ViewOutlineProvider OutlineProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutlineProvider", "()Landroid/view/ViewOutlineProvider;", "GetGetOutlineProviderHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setOutlineProvider", "(Landroid/view/ViewOutlineProvider;)V", "GetSetOutlineProvider_Landroid_view_ViewOutlineProvider_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewOutlineProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current <c><see cref="T:Android.Views.ViewOutlineProvider" /></c> of the view, which generates the Outline
 that defines the shape of the shadow it casts, and enables outline clipping.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getOutlineProvider()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current <c><see cref="T:Android.Views.ViewOutlineProvider" /></c> of the view, which generates the Outline
 that defines the shape of the shadow it casts, and enables outline clipping.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setOutlineProvider(android.view.ViewOutlineProvider)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the <c><see cref="T:Android.Views.ViewOutlineProvider" /></c> of the view, which generates the Outline that defines
 the shape of the shadow it casts, and enables outline clipping.
 
 The default ViewOutlineProvider, <c><see cref="P:Android.Views.ViewOutlineProvider.Background" /></c>, queries the Outline
 from the View's background drawable, via <c><see cref="M:Android.Graphics.Drawables.Drawable.GetOutline(Android.Graphics.Outline)" /></c>. Changing the
 outline provider with this method allows this behavior to be overridden.
 
 If the ViewOutlineProvider is null, if querying it for an outline returns false,
 or if the produced Outline is <c><see cref="P:Android.Graphics.Outline.IsEmpty" /></c>, shadows will not be cast.
 
 Only outlines that return true from <c><see cref="M:Android.Graphics.Outline.CanClip" /></c> may be used for clipping.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.Views.View.OutlineProvider" />
        <altmember cref="P:Android.Views.View.ClipToOutline" />
        <altmember cref="P:Android.Views.View.ClipToOutline" />
        <altmember cref="P:Android.Views.View.OutlineProvider" />
      </Docs>
    </Member>
    <Member MemberName="Overlay">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewOverlay Overlay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.ViewOverlay Overlay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOverlay", "()Landroid/view/ViewOverlay;", "GetGetOverlayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewOverlay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the overlay for this view, creating it if it does not yet exist.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the overlay for this view, creating it if it does not yet exist.
 Adding drawables to the overlay will cause them to be displayed whenever
 the view itself is redrawn. Objects in the overlay should be actively
 managed: remove them when they should not be displayed anymore. The
 overlay will always have the same size as its host view.

 </para>
          <para tool="javadoc-to-mdoc">Note: Overlays do not currently work correctly with <c><see cref="T:Android.Views.SurfaceView" /></c> or <c><see cref="T:Android.Views.TextureView" /></c>; contents in overlays for these
 types of views may not display correctly.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getOverlay()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <altmember cref="T:Android.Views.ViewOverlay" />
      </Docs>
    </Member>
    <Member MemberName="OverScrollAlways">
      <MemberSignature Language="C#" Value="public const Android.Views.OverScrollMode OverScrollAlways = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.OverScrollMode OverScrollAlways = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("OVER_SCROLL_ALWAYS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.OverScrollMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.OverScrollMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Always allow a user to over-scroll this view, provided it is a
 view that can scroll.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Always allow a user to over-scroll this view, provided it is a
 view that can scroll.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#OVER_SCROLL_ALWAYS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
      </Docs>
    </Member>
    <Member MemberName="OverScrollBy">
      <MemberSignature Language="C#" Value="protected virtual bool OverScrollBy (int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, bool isTouchEvent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OverScrollBy(int32 deltaX, int32 deltaY, int32 scrollX, int32 scrollY, int32 scrollRangeX, int32 scrollRangeY, int32 maxOverScrollX, int32 maxOverScrollY, bool isTouchEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("overScrollBy", "(IIIIIIIIZ)Z", "GetOverScrollBy_IIIIIIIIZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deltaX" Type="System.Int32" />
        <Parameter Name="deltaY" Type="System.Int32" />
        <Parameter Name="scrollX" Type="System.Int32" />
        <Parameter Name="scrollY" Type="System.Int32" />
        <Parameter Name="scrollRangeX" Type="System.Int32" />
        <Parameter Name="scrollRangeY" Type="System.Int32" />
        <Parameter Name="maxOverScrollX" Type="System.Int32" />
        <Parameter Name="maxOverScrollY" Type="System.Int32" />
        <Parameter Name="isTouchEvent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deltaX">Change in X in pixels</param>
        <param name="deltaY">Change in Y in pixels</param>
        <param name="scrollX">Current X scroll value in pixels before applying deltaX</param>
        <param name="scrollY">Current Y scroll value in pixels before applying deltaY</param>
        <param name="scrollRangeX">Maximum content scroll range along the X axis</param>
        <param name="scrollRangeY">Maximum content scroll range along the Y axis</param>
        <param name="maxOverScrollX">Number of pixels to overscroll by in either direction
          along the X axis.</param>
        <param name="maxOverScrollY">Number of pixels to overscroll by in either direction
          along the Y axis.</param>
        <param name="isTouchEvent">true if this scroll operation is the result of a touch event.</param>
        <summary>Scroll the view with standard behavior for scrolling beyond the normal
 content boundaries.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Scroll the view with standard behavior for scrolling beyond the normal
 content boundaries. Views that call this method should override
 <c><see cref="M:Android.Views.View.OnOverScrolled(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> to respond to the
 results of an over-scroll operation.

 Views can use this method to handle any touch or fling-based scrolling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#overScrollBy(int, int, int, int, int, int, int, int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="OverScrollIfContentScrolls">
      <MemberSignature Language="C#" Value="public const Android.Views.OverScrollMode OverScrollIfContentScrolls = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.OverScrollMode OverScrollIfContentScrolls = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("OVER_SCROLL_IF_CONTENT_SCROLLS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.OverScrollMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.OverScrollMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Allow a user to over-scroll this view only if the content is large
 enough to meaningfully scroll, provided it is a view that can scroll.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Allow a user to over-scroll this view only if the content is large
 enough to meaningfully scroll, provided it is a view that can scroll.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#OVER_SCROLL_IF_CONTENT_SCROLLS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
      </Docs>
    </Member>
    <Member MemberName="OverScrollMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.OverScrollMode OverScrollMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.OverScrollMode OverScrollMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOverScrollMode", "()I", "GetGetOverScrollModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setOverScrollMode", "(I)V", "GetSetOverScrollMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.OverScrollMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the over-scroll mode for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getOverScrollMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the over-scroll mode for this view. The result will be
 one of <c><see cref="F:Android.Views.View.OverScrollAlways" /></c> (default), <c><see cref="F:Android.Views.View.OverScrollIfContentScrolls" /></c>
 (allow over-scrolling only if the view content is larger than the container),
 or <c><see cref="F:Android.Views.View.OverScrollNever" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setOverScrollMode(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the over-scroll mode for this view. Valid over-scroll modes are
 <c><see cref="F:Android.Views.View.OverScrollAlways" /></c> (default), <c><see cref="F:Android.Views.View.OverScrollIfContentScrolls" /></c>
 (allow over-scrolling only if the view content is larger than the container),
 or <c><see cref="F:Android.Views.View.OverScrollNever" /></c>.

 Setting the over-scroll mode of a view will have an effect only if the
 view is capable of scrolling.</para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="OverScrollNever">
      <MemberSignature Language="C#" Value="public const Android.Views.OverScrollMode OverScrollNever = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.OverScrollMode OverScrollNever = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("OVER_SCROLL_NEVER")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.OverScrollMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.OverScrollMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Never allow a user to over-scroll this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Never allow a user to over-scroll this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#OVER_SCROLL_NEVER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
        <altmember cref="P:Android.Views.View.OverScrollMode" />
      </Docs>
    </Member>
    <Member MemberName="PaddingBottom">
      <MemberSignature Language="C#" Value="public virtual int PaddingBottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingBottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingBottom", "()I", "GetGetPaddingBottomHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the bottom padding of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the bottom padding of this view. If there are inset and enabled
 scrollbars, this value may include the space required to display the
 scrollbars as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingBottom()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PaddingEnd">
      <MemberSignature Language="C#" Value="public virtual int PaddingEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingEnd", "()I", "GetGetPaddingEndHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the end padding of this view depending on its resolved layout direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the end padding of this view depending on its resolved layout direction.
 If there are inset and enabled scrollbars, this value may include the space
 required to display the scrollbars as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingEnd()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="PaddingLeft">
      <MemberSignature Language="C#" Value="public virtual int PaddingLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingLeft", "()I", "GetGetPaddingLeftHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the left padding of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the left padding of this view. If there are inset and enabled
 scrollbars, this value may include the space required to display the
 scrollbars as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingLeft()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PaddingRight">
      <MemberSignature Language="C#" Value="public virtual int PaddingRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingRight", "()I", "GetGetPaddingRightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the right padding of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the right padding of this view. If there are inset and enabled
 scrollbars, this value may include the space required to display the
 scrollbars as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingRight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PaddingStart">
      <MemberSignature Language="C#" Value="public virtual int PaddingStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingStart", "()I", "GetGetPaddingStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the start padding of this view depending on its resolved layout direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the start padding of this view depending on its resolved layout direction.
 If there are inset and enabled scrollbars, this value may include the space
 required to display the scrollbars as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="PaddingTop">
      <MemberSignature Language="C#" Value="public virtual int PaddingTop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPaddingTop", "()I", "GetGetPaddingTopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the top padding of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the top padding of this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getPaddingTop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParent", "()Landroid/view/ViewParent;", "GetGetParentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the parent of this view. Note that the parent is a
 ViewParent and not necessarily a View.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getParent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentForAccessibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.IViewParent ParentForAccessibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent ParentForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParentForAccessibility", "()Landroid/view/ViewParent;", "GetGetParentForAccessibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent for accessibility purposes.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the parent for accessibility purposes. Note that the parent for
 accessibility is not necessary the immediate parent. It is the first
 predecessor that is important for accessibility.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getParentForAccessibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="PerformAccessibilityAction">
      <MemberSignature Language="C#" Value="public virtual bool PerformAccessibilityAction (Android.AccessibilityServices.GlobalAction action, Android.OS.Bundle arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformAccessibilityAction(valuetype Android.AccessibilityServices.GlobalAction action, class Android.OS.Bundle arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performAccessibilityAction", "(ILandroid/os/Bundle;)Z", "GetPerformAccessibilityAction_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Android.AccessibilityServices.GlobalAction">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="action">The action to perform.</param>
        <param name="arguments">Optional action arguments.</param>
        <summary>Performs the specified accessibility action on the view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Performs the specified accessibility action on the view. For
 possible accessibility actions look at <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">The default implementation will delegate
 <c><see cref="F:Android.Views.Accessibility.AccessibilityNodeInfo.ActionScrollBackward" /></c> and
 <c><see cref="F:Android.Views.Accessibility.AccessibilityNodeInfo.ActionScrollForward" /></c> to nested scrolling parents if
 <c><see cref="P:Android.Views.View.NestedScrollingEnabled" /></c> on this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#performAccessibilityAction(int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public virtual bool PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformClick() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performClick", "()Z", "GetPerformClickHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this view's OnClickListener, if it is defined.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this view's OnClickListener, if it is defined.  Performs all normal
 actions associated with clicking: reporting accessibility event, playing
 a sound, etc.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#performClick()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PerformHapticFeedback">
      <MemberSignature Language="C#" Value="public virtual bool PerformHapticFeedback (Android.Views.FeedbackConstants feedbackConstant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformHapticFeedback(valuetype Android.Views.FeedbackConstants feedbackConstant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performHapticFeedback", "(I)Z", "GetPerformHapticFeedback_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feedbackConstant" Type="Android.Views.FeedbackConstants">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="feedbackConstant">One of the constants defined in
 <c><see cref="T:Android.Views.HapticFeedbackConstants" /></c></param>
        <summary>BZZZTT!!1!

 </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">BZZZTT!!1!

 </para>
          <para tool="javadoc-to-mdoc">Provide haptic feedback to the user for this view.

 </para>
          <para tool="javadoc-to-mdoc">The framework will provide haptic feedback for some built in actions,
 such as long presses, but you may wish to provide feedback for your
 own widget.

 </para>
          <para tool="javadoc-to-mdoc">The feedback will only be performed if
 <c><see cref="P:Android.Views.View.HapticFeedbackEnabled" /></c> is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#performHapticFeedback(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformHapticFeedback">
      <MemberSignature Language="C#" Value="public virtual bool PerformHapticFeedback (Android.Views.FeedbackConstants feedbackConstant, Android.Views.FeedbackFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformHapticFeedback(valuetype Android.Views.FeedbackConstants feedbackConstant, valuetype Android.Views.FeedbackFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performHapticFeedback", "(II)Z", "GetPerformHapticFeedback_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feedbackConstant" Type="Android.Views.FeedbackConstants">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flags" Type="Android.Views.FeedbackFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="feedbackConstant">One of the constants defined in
 <c><see cref="T:Android.Views.HapticFeedbackConstants" /></c></param>
        <param name="flags">Additional flags as per <c><see cref="T:Android.Views.HapticFeedbackConstants" /></c>.
</param>
        <summary>BZZZTT!!1!

 </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">BZZZTT!!1!

 </para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.Views.View.PerformHapticFeedback(Android.Views.FeedbackConstants)" /></c>, with additional options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#performHapticFeedback(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformLongClick">
      <MemberSignature Language="C#" Value="public virtual bool PerformLongClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformLongClick() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performLongClick", "()Z", "GetPerformLongClickHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this view's OnLongClickListener, if it is defined.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this view's OnLongClickListener, if it is defined. Invokes the context menu if the
 OnLongClickListener did not consume the event.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#performLongClick()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PivotX">
      <MemberSignature Language="C#" Value="public virtual float PivotX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PivotX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPivotX", "()F", "GetGetPivotXHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPivotX", "(F)V", "GetSetPivotX_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The x location of the point around which the view is <c><see cref="P:Android.Views.View.Rotation" /></c>
 and <c><see cref="P:Android.Views.View.ScaleX" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getPivotX()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The x location of the point around which the view is <c><see cref="P:Android.Views.View.Rotation" /></c>
 and <c><see cref="P:Android.Views.View.ScaleX" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setPivotX(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the x location of the point around which the view is
 <c><see cref="P:Android.Views.View.Rotation" /></c> and <c><see cref="P:Android.Views.View.ScaleX" /></c>.
 By default, the pivot point is centered on the object.
 Setting this property disables this behavior and causes the view to use only the
 explicitly set pivotX and pivotY values.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.ScaleX" />
        <altmember cref="P:Android.Views.View.ScaleY" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.ScaleX" />
        <altmember cref="P:Android.Views.View.ScaleY" />
        <altmember cref="P:Android.Views.View.PivotY" />
      </Docs>
    </Member>
    <Member MemberName="PivotY">
      <MemberSignature Language="C#" Value="public virtual float PivotY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PivotY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPivotY", "()F", "GetGetPivotYHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPivotY", "(F)V", "GetSetPivotY_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The y location of the point around which the view is <c><see cref="P:Android.Views.View.Rotation" /></c>
 and <c><see cref="P:Android.Views.View.ScaleY" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getPivotY()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The y location of the point around which the view is <c><see cref="P:Android.Views.View.Rotation" /></c>
 and <c><see cref="P:Android.Views.View.ScaleY" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setPivotY(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the y location of the point around which the view is <c><see cref="P:Android.Views.View.Rotation" /></c>
 and <c><see cref="P:Android.Views.View.ScaleY" /></c>. By default, the pivot point is centered on the object.
 Setting this property disables this behavior and causes the view to use only the
 explicitly set pivotX and pivotY values.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.ScaleX" />
        <altmember cref="P:Android.Views.View.ScaleY" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.ScaleX" />
        <altmember cref="P:Android.Views.View.ScaleY" />
        <altmember cref="P:Android.Views.View.PivotY" />
      </Docs>
    </Member>
    <Member MemberName="PlaySoundEffect">
      <MemberSignature Language="C#" Value="public virtual void PlaySoundEffect (Android.Views.SoundEffects soundConstant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PlaySoundEffect(valuetype Android.Views.SoundEffects soundConstant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playSoundEffect", "(I)V", "GetPlaySoundEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="soundConstant" Type="Android.Views.SoundEffects">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="soundConstant">One of the constants defined in <c><see cref="T:Android.Views.SoundEffectConstants" /></c></param>
        <summary>Play a sound effect for this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Play a sound effect for this view.

 </para>
          <para tool="javadoc-to-mdoc">The framework will play sound effects for some built in actions, such as
 clicking, but you may wish to play these effects in your widget,
 for instance, for internal navigation.

 </para>
          <para tool="javadoc-to-mdoc">The sound effect will only be played if sound effects are enabled by the user, and
 <c><see cref="P:Android.Views.View.SoundEffectsEnabled" /></c> is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#playSoundEffect(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public virtual bool Post (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Post(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("post", "(Ljava/lang/Runnable;)Z", "GetPost_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">The Runnable that will be executed.</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Causes the Runnable to be added to the message queue.
 The runnable will be run on the user interface thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.PostDelayed(Java.Lang.IRunnable, System.Int64)" />
        <altmember cref="M:Android.Views.View.RemoveCallbacks(Java.Lang.IRunnable)" />
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public bool Post (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Post(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDelayed">
      <MemberSignature Language="C#" Value="public virtual bool PostDelayed (Java.Lang.IRunnable action, long delayMillis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PostDelayed(class Java.Lang.IRunnable action, int64 delayMillis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postDelayed", "(Ljava/lang/Runnable;J)Z", "GetPostDelayed_Ljava_lang_Runnable_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
        <Parameter Name="delayMillis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="action">The Runnable that will be executed.</param>
        <param name="delayMillis">The delay (in milliseconds) until the Runnable
        will be executed.</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Causes the Runnable to be added to the message queue, to be run
 after the specified amount of time elapses.
 The runnable will be run on the user interface thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Post(Java.Lang.IRunnable)" />
        <altmember cref="M:Android.Views.View.RemoveCallbacks(Java.Lang.IRunnable)" />
      </Docs>
    </Member>
    <Member MemberName="PostDelayed">
      <MemberSignature Language="C#" Value="public bool PostDelayed (Action action, long delayMillis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool PostDelayed(class System.Action action, int64 delayMillis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="delayMillis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="delayMillis">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostInvalidate">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidate", "()V", "GetPostInvalidateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate to happen on a subsequent cycle through the event loop.
 Use this to invalidate the View from a non-UI thread.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Invalidate" />
        <altmember cref="M:Android.Views.View.PostInvalidateDelayed(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="PostInvalidate">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidate (int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidate(int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidate", "(IIII)V", "GetPostInvalidate_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The left coordinate of the rectangle to invalidate.</param>
        <param name="top">The top coordinate of the rectangle to invalidate.</param>
        <param name="right">The right coordinate of the rectangle to invalidate.</param>
        <param name="bottom">The bottom coordinate of the rectangle to invalidate.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate of the specified area to happen on a subsequent cycle
 through the event loop. Use this to invalidate the View from a non-UI thread.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidate(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Invalidate(System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.Invalidate(Android.Graphics.Rect)" />
        <altmember cref="M:Android.Views.View.PostInvalidateDelayed(System.Int64, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="PostInvalidateDelayed">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidateDelayed (long delayMilliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidateDelayed(int64 delayMilliseconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidateDelayed", "(J)V", "GetPostInvalidateDelayed_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayMilliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="delayMilliseconds">the duration in milliseconds to delay the
         invalidation by</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate to happen on a subsequent cycle through the event
 loop. Waits for the specified amount of time.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Invalidate" />
        <altmember cref="M:Android.Views.View.PostInvalidate" />
      </Docs>
    </Member>
    <Member MemberName="PostInvalidateDelayed">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidateDelayed (long delayMilliseconds, int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidateDelayed(int64 delayMilliseconds, int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidateDelayed", "(JIIII)V", "GetPostInvalidateDelayed_JIIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayMilliseconds" Type="System.Int64" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="delayMilliseconds">the duration in milliseconds to delay the
         invalidation by</param>
        <param name="left">The left coordinate of the rectangle to invalidate.</param>
        <param name="top">The top coordinate of the rectangle to invalidate.</param>
        <param name="right">The right coordinate of the rectangle to invalidate.</param>
        <param name="bottom">The bottom coordinate of the rectangle to invalidate.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate of the specified area to happen on a subsequent cycle
 through the event loop. Waits for the specified amount of time.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Invalidate(System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.Invalidate(Android.Graphics.Rect)" />
        <altmember cref="M:Android.Views.View.PostInvalidate(System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="PostInvalidateOnAnimation">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidateOnAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidateOnAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidateOnAnimation", "()V", "GetPostInvalidateOnAnimationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate to happen on the next animation time step, typically the
 next display frame.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="PostInvalidateOnAnimation">
      <MemberSignature Language="C#" Value="public virtual void PostInvalidateOnAnimation (int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostInvalidateOnAnimation(int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postInvalidateOnAnimation", "(IIII)V", "GetPostInvalidateOnAnimation_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The left coordinate of the rectangle to invalidate.</param>
        <param name="top">The top coordinate of the rectangle to invalidate.</param>
        <param name="right">The right coordinate of the rectangle to invalidate.</param>
        <param name="bottom">The bottom coordinate of the rectangle to invalidate.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cause an invalidate of the specified area to happen on the next animation
 time step, typically the next display frame.</para>
          <para tool="javadoc-to-mdoc">This method can be invoked from outside of the UI thread
 only when this View is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.Invalidate(System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.Invalidate(Android.Graphics.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="PostOnAnimation">
      <MemberSignature Language="C#" Value="public virtual void PostOnAnimation (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostOnAnimation(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postOnAnimation", "(Ljava/lang/Runnable;)V", "GetPostOnAnimation_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">The Runnable that will be executed.</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Causes the Runnable to execute on the next animation time step.
 The runnable will be run on the user interface thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postOnAnimation(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.PostOnAnimationDelayed(Java.Lang.IRunnable, System.Int64)" />
        <altmember cref="M:Android.Views.View.RemoveCallbacks(Java.Lang.IRunnable)" />
      </Docs>
    </Member>
    <Member MemberName="PostOnAnimationDelayed">
      <MemberSignature Language="C#" Value="public virtual void PostOnAnimationDelayed (Java.Lang.IRunnable action, long delayMillis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostOnAnimationDelayed(class Java.Lang.IRunnable action, int64 delayMillis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postOnAnimationDelayed", "(Ljava/lang/Runnable;J)V", "GetPostOnAnimationDelayed_Ljava_lang_Runnable_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
        <Parameter Name="delayMillis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="action">The Runnable that will be executed.</param>
        <param name="delayMillis">The delay (in milliseconds) until the Runnable
        will be executed.</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Causes the Runnable to execute on the next animation time step,
 after the specified amount of time elapses.
 The runnable will be run on the user interface thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#postOnAnimationDelayed(java.lang.Runnable, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.PostOnAnimation(Java.Lang.IRunnable)" />
        <altmember cref="M:Android.Views.View.RemoveCallbacks(Java.Lang.IRunnable)" />
      </Docs>
    </Member>
    <Member MemberName="Pressed">
      <MemberSignature Language="C#" Value="public virtual bool Pressed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pressed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPressed", "()Z", "GetIsPressedHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPressed", "(Z)V", "GetSetPressed_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the view is currently in pressed state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isPressed()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether the view is currently in pressed state. Unless
 <c><see cref="P:Android.Views.View.Pressed" /></c> is explicitly called, only clickable views can enter
 the pressed state.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setPressed(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the pressed state for this view.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Pressed" />
        <altmember cref="P:Android.Views.View.Clickable" />
        <altmember cref="P:Android.Views.View.Clickable" />
        <altmember cref="P:Android.Views.View.Clickable" />
        <altmember cref="P:Android.Views.View.Clickable" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledFocusedSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledFocusedSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledFocusedSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled, focused and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled, focused and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledFocusedSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledFocusedSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledFocusedSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled, focused, selected and its window
 has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled, focused, selected and its window
 has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled and focused.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled and focused.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledFocusedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledFocusedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledFocusedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled, focused and its window has the
 focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled, focused and its window has the
 focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled, selected and its window has the
 focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled, selected and its window has the
 focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed and enabled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed and enabled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedEnabledWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedEnabledWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedEnabledWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, enabled and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, enabled and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.EnabledStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedFocusedSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedFocusedSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedFocusedSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_FOCUSED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, focused and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, focused and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedFocusedSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedFocusedSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedFocusedSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, focused, selected and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, focused, selected and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed and focused.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed and focused.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedFocusedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedFocusedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedFocusedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, focused and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, focused and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.FocusedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedSelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedSelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedSelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed and selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed and selected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedSelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedSelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedSelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed, selected and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed, selected and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="PressedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="PressedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; PressedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; PressedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is pressed and its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is pressed and its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#PRESSED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.PressedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="RefreshDrawableState">
      <MemberSignature Language="C#" Value="public virtual void RefreshDrawableState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshDrawableState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("refreshDrawableState", "()V", "GetRefreshDrawableStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this to force a view to update its drawable state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to force a view to update its drawable state. This will cause
 drawableStateChanged to be called on this view. Views that are interested
 in the new state should call getDrawableState.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#refreshDrawableState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.DrawableStateChanged" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCallbacks">
      <MemberSignature Language="C#" Value="public virtual bool RemoveCallbacks (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveCallbacks(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeCallbacks", "(Ljava/lang/Runnable;)Z", "GetRemoveCallbacks_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">The Runnable to remove from the message handling queue</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Removes the specified Runnable from the message queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#removeCallbacks(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.Post(Java.Lang.IRunnable)" />
        <altmember cref="M:Android.Views.View.PostDelayed(Java.Lang.IRunnable, System.Int64)" />
        <altmember cref="M:Android.Views.View.PostOnAnimation(Java.Lang.IRunnable)" />
        <altmember cref="M:Android.Views.View.PostOnAnimationDelayed(Java.Lang.IRunnable, System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCallbacks">
      <MemberSignature Language="C#" Value="public bool RemoveCallbacks (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveCallbacks(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnAttachStateChangeListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveOnAttachStateChangeListener (Android.Views.View.IOnAttachStateChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnAttachStateChangeListener(class Android.Views.View/IOnAttachStateChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnAttachStateChangeListener", "(Landroid/view/View$OnAttachStateChangeListener;)V", "GetRemoveOnAttachStateChangeListener_Landroid_view_View_OnAttachStateChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.View+IOnAttachStateChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">Listener to remove</param>
        <summary>Remove a listener for attach state changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a listener for attach state changes. The listener will receive no further
 notification of window attach/detach events.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#removeOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
        <altmember cref="M:Android.Views.View.AddOnAttachStateChangeListener(.IOnAttachStateChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnLayoutChangeListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveOnLayoutChangeListener (Android.Views.View.IOnLayoutChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnLayoutChangeListener(class Android.Views.View/IOnLayoutChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnLayoutChangeListener", "(Landroid/view/View$OnLayoutChangeListener;)V", "GetRemoveOnLayoutChangeListener_Landroid_view_View_OnLayoutChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.View+IOnLayoutChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener for layout bounds change.
</param>
        <summary>Remove a listener for layout changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a listener for layout changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#removeOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RequestApplyInsets">
      <MemberSignature Language="C#" Value="public virtual void RequestApplyInsets ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestApplyInsets() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestApplyInsets", "()V", "GetRequestApplyInsetsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that a new dispatch of <c><see cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" /></c> be performed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Ask that a new dispatch of <c><see cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" /></c> be performed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestApplyInsets()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestFitSystemWindows">
      <MemberSignature Language="C#" Value="public virtual void RequestFitSystemWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestFitSystemWindows() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFitSystemWindows", "()V", "GetRequestFitSystemWindowsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that a new dispatch of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> be performed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Ask that a new dispatch of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> be performed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestFitSystemWindows()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RequestFocus">
      <MemberSignature Language="C#" Value="public bool RequestFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequestFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFocus", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Call this to try to give focus to a specific view or to one of its
 descendants.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to try to give focus to a specific view or to one of its
 descendants.

 A view will not actually take focus if it is not focusable (<c><see cref="P:Android.Views.View.Focusable" /></c> returns
 false), or if it is focusable and it is not focusable in touch mode
 (<c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c>) while the device is in touch mode.

 See also <c><see cref="M:Android.Views.View.FocusSearch(Android.Views.FocusSearchDirection)" /></c>, which is what you call to say that you
 have focus, and you want your parent to look for the next one.

 This is equivalent to calling <c><see cref="M:Android.Views.View.RequestFocus(Android.Views.FocusSearchDirection,Android.Graphics.Rect)" /></c> with arguments
 <c><see cref="!:Android.Views.View.FOCUS_DOWN" /></c> and <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFocus">
      <MemberSignature Language="C#" Value="public bool RequestFocus (Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequestFocus(valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFocus", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <summary>Call this to try to give focus to a specific view or to one of its
 descendants and give it a hint about what direction focus is heading.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to try to give focus to a specific view or to one of its
 descendants and give it a hint about what direction focus is heading.

 A view will not actually take focus if it is not focusable (<c><see cref="P:Android.Views.View.Focusable" /></c> returns
 false), or if it is focusable and it is not focusable in touch mode
 (<c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c>) while the device is in touch mode.

 See also <c><see cref="M:Android.Views.View.FocusSearch(Android.Views.FocusSearchDirection)" /></c>, which is what you call to say that you
 have focus, and you want your parent to look for the next one.

 This is equivalent to calling <c><see cref="M:Android.Views.View.RequestFocus(Android.Views.FocusSearchDirection,Android.Graphics.Rect)" /></c> with
 <c>null</c> set for the previously focused rectangle.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestFocus(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFocus">
      <MemberSignature Language="C#" Value="public virtual bool RequestFocus (Android.Views.FocusSearchDirection direction, Android.Graphics.Rect previouslyFocusedRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestFocus(valuetype Android.Views.FocusSearchDirection direction, class Android.Graphics.Rect previouslyFocusedRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFocus", "(ILandroid/graphics/Rect;)Z", "GetRequestFocus_ILandroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="previouslyFocusedRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <param name="previouslyFocusedRect">The rectangle (in this View's coordinate system)
        to give a finer grained hint about where focus is coming from.  May be null
        if there is no hint.</param>
        <summary>Call this to try to give focus to a specific view or to one of its descendants
 and give it hints about the direction and a specific rectangle that the focus
 is coming from.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to try to give focus to a specific view or to one of its descendants
 and give it hints about the direction and a specific rectangle that the focus
 is coming from.  The rectangle can help give larger views a finer grained hint
 about where focus is coming from, and therefore, where to show selection, or
 forward focus change internally.

 A view will not actually take focus if it is not focusable (<c><see cref="P:Android.Views.View.Focusable" /></c> returns
 false), or if it is focusable and it is not focusable in touch mode
 (<c><see cref="P:Android.Views.View.FocusableInTouchMode" /></c>) while the device is in touch mode.

 A View will not take focus if it is not visible.

 A View will not take focus if one of its parents has
 <c><see cref="P:Android.Views.ViewGroup.DescendantFocusability" /></c> equal to
 <c><see cref="!:Android.Views.ViewGroup.FOCUS_BLOCK_DESCENDANTS" /></c>.

 See also <c><see cref="M:Android.Views.View.FocusSearch(Android.Views.FocusSearchDirection)" /></c>, which is what you call to say that you
 have focus, and you want your parent to look for the next one.

 You may wish to override this method if your custom <c><see cref="T:Android.Views.View" /></c> has an internal
 <c><see cref="T:Android.Views.View" /></c> that it wishes to forward the request to.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestFocus(int, android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFocusFromTouch">
      <MemberSignature Language="C#" Value="public bool RequestFocusFromTouch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequestFocusFromTouch() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFocusFromTouch", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this to try to give focus to a specific view or to one of its descendants.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to try to give focus to a specific view or to one of its descendants. This is a
 special variant of <c><see cref="M:Android.Views.View.RequestFocus" /></c> that will allow views that are not focusable in
 touch mode to request focus when they are touched.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestFocusFromTouch()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.IsInTouchMode" />
      </Docs>
    </Member>
    <Member MemberName="RequestLayout">
      <MemberSignature Language="C#" Value="public virtual void RequestLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestLayout", "()V", "GetRequestLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this when something has changed which has invalidated the
 layout of this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this when something has changed which has invalidated the
 layout of this view. This will schedule a layout pass of the view
 tree. This should not be called while the view hierarchy is currently in a layout
 pass (<c><see cref="P:Android.Views.View.IsInLayout" /></c>. If layout is happening, the request may be honored at the
 end of the current layout pass (and then layout will run again) or after the current
 frame is drawn and the next layout occurs.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses which override this method should call the superclass method to
 handle possible request-during-layout errors correctly.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestRectangleOnScreen">
      <MemberSignature Language="C#" Value="public virtual bool RequestRectangleOnScreen (Android.Graphics.Rect rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestRectangleOnScreen(class Android.Graphics.Rect rectangle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestRectangleOnScreen", "(Landroid/graphics/Rect;)Z", "GetRequestRectangleOnScreen_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="rectangle">The rectangle.</param>
        <summary>Request that a rectangle of this view be visible on the screen,
 scrolling if necessary just enough.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that a rectangle of this view be visible on the screen,
 scrolling if necessary just enough.

 </para>
          <para tool="javadoc-to-mdoc">A View should call this if it maintains some notion of which part
 of its content is interesting.  For example, a text editing view
 should call this when its cursor moves.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestRectangleOnScreen">
      <MemberSignature Language="C#" Value="public virtual bool RequestRectangleOnScreen (Android.Graphics.Rect rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestRectangleOnScreen(class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestRectangleOnScreen", "(Landroid/graphics/Rect;Z)Z", "GetRequestRectangleOnScreen_Landroid_graphics_Rect_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rectangle">The rectangle.</param>
        <param name="immediate">True to forbid animated scrolling, false otherwise</param>
        <summary>Request that a rectangle of this view be visible on the screen,
 scrolling if necessary just enough.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that a rectangle of this view be visible on the screen,
 scrolling if necessary just enough.

 </para>
          <para tool="javadoc-to-mdoc">A View should call this if it maintains some notion of which part
 of its content is interesting.  For example, a text editing view
 should call this when its cursor moves.

 </para>
          <para tool="javadoc-to-mdoc">When <c>immediate</c> is set to true, scrolling will not be
 animated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestUnbufferedDispatch">
      <MemberSignature Language="C#" Value="public void RequestUnbufferedDispatch (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestUnbufferedDispatch(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestUnbufferedDispatch", "(Landroid/view/MotionEvent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Request unbuffered dispatch of the given stream of MotionEvents to this View.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Request unbuffered dispatch of the given stream of MotionEvents to this View.

 Until this View receives a corresponding <c><see cref="!:Android.Views.MotionEvent.ACTION_UP" /></c>, ask that the input
 system not batch <c><see cref="T:Android.Views.MotionEvent" /></c>s but instead deliver them as soon as they're
 available. This method should only be called for touch events.

 </para>
          <para tool="javadoc-to-mdoc">This api is not intended for most applications. Buffered dispatch
 provides many of benefits, and just requesting unbuffered dispatch on most MotionEvent
 streams will not improve your input latency. Side effects include: increased latency,
 jittery scrolls and inability to take advantage of system resampling. Talk to your input
 professional to see if <c><see cref="M:Android.Views.View.RequestUnbufferedDispatch(Android.Views.MotionEvent)" /></c> is right for
 you.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#requestUnbufferedDispatch(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveSize">
      <MemberSignature Language="C#" Value="public static int ResolveSize (int size, int measureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ResolveSize(int32 size, int32 measureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveSize", "(II)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="measureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="measureSpec">To be added.</param>
        <summary>Version of <c><see cref="M:Android.Views.View.ResolveSizeAndState(System.Int32,System.Int32,System.Int32)" /></c>
 returning only the <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> bits of the result.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Views.View.ResolveSizeAndState(System.Int32,System.Int32,System.Int32)" /></c>
 returning only the <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> bits of the result.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#resolveSize(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ResolveSizeAndState">
      <MemberSignature Language="C#" Value="public static int ResolveSizeAndState (int size, int measureSpec, int childMeasuredState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ResolveSizeAndState(int32 size, int32 measureSpec, int32 childMeasuredState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveSizeAndState", "(III)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="measureSpec" Type="System.Int32" />
        <Parameter Name="childMeasuredState" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">How big the view wants to be.</param>
        <param name="measureSpec">Constraints imposed by the parent.</param>
        <param name="childMeasuredState">Size information bit mask for the view's
                           children.</param>
        <summary>Utility to reconcile a desired size and state, with constraints imposed
 by a MeasureSpec.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Utility to reconcile a desired size and state, with constraints imposed
 by a MeasureSpec. Will take the desired size, unless a different size
 is imposed by the constraints. The returned value is a compound integer,
 with the resolved size in the <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> bits and
 optionally the bit <c><see cref="F:Android.Views.View.MeasuredStateTooSmall" /></c> set if the
 resulting size is smaller than the size the view wants to be.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#resolveSizeAndState(int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.Resources Resources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.Resources Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getResources", "()Landroid/content/res/Resources;", "GetGetResourcesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.Resources</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the resources associated with this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the resources associated with this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getResources()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RestoreHierarchyState">
      <MemberSignature Language="C#" Value="public virtual void RestoreHierarchyState (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RestoreHierarchyState(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("restoreHierarchyState", "(Landroid/util/SparseArray;)V", "GetRestoreHierarchyState_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRight", "()I", "GetGetRightHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRight", "(I)V", "GetSetRight_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Right position of this view relative to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getRight()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Right position of this view relative to its parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setRight(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the right position of this view relative to its parent. This method is meant to be called
 by the layout system and should not generally be called otherwise, because the property
 may be changed at any time by the layout.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RightFadingEdgeStrength">
      <MemberSignature Language="C#" Value="protected virtual float RightFadingEdgeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RightFadingEdgeStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRightFadingEdgeStrength", "()F", "GetGetRightFadingEdgeStrengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the strength, or intensity, of the right faded edge.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the strength, or intensity, of the right faded edge. The strength is
 a value between 0.0 (no fade) and 1.0 (full fade). The default implementation
 returns 0.0 or 1.0 but no value in between.

 Subclasses should override this method to provide a smoother fade transition
 when scrolling occurs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getRightFadingEdgeStrength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RightPaddingOffset">
      <MemberSignature Language="C#" Value="protected virtual int RightPaddingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RightPaddingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRightPaddingOffset", "()I", "GetGetRightPaddingOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount by which to extend the right fading region.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Amount by which to extend the right fading region. Called only when
 <c><see cref="P:Android.Views.View.IsPaddingOffsetRequired" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getRightPaddingOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 2" />
        <altmember cref="P:Android.Views.View.IsPaddingOffsetRequired" />
      </Docs>
    </Member>
    <Member MemberName="RootView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View RootView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View RootView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRootView", "()Landroid/view/View;", "GetGetRootViewHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Finds the topmost view in the current view hierarchy.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getRootView()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual float Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRotation", "()F", "GetGetRotationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRotation", "(F)V", "GetSetRotation_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The degrees that the view is rotated around the pivot point.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getRotation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The degrees that the view is rotated around the pivot point.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setRotation(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the degrees that the view is rotated around the pivot point. Increasing values
 result in clockwise rotation.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.RotationX" />
        <altmember cref="P:Android.Views.View.RotationY" />
      </Docs>
    </Member>
    <Member MemberName="RotationX">
      <MemberSignature Language="C#" Value="public virtual float RotationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRotationX", "()F", "GetGetRotationXHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRotationX", "(F)V", "GetSetRotationX_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The degrees that the view is rotated around the horizontal axis through the pivot point.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getRotationX()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The degrees that the view is rotated around the horizontal axis through the pivot point.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setRotationX(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
 Increasing values result in clockwise rotation from the viewpoint of looking down the
 x axis.

 When rotating large views, it is recommended to adjust the camera distance
 accordingly. Refer to <c><see cref="M:Android.Views.View.SetCameraDistance(System.Single)" /></c> for more information.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.RotationX" />
        <altmember cref="P:Android.Views.View.RotationX" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.RotationY" />
        <altmember cref="M:Android.Views.View.SetCameraDistance(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="RotationY">
      <MemberSignature Language="C#" Value="public virtual float RotationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RotationY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRotationY", "()F", "GetGetRotationYHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRotationY", "(F)V", "GetSetRotationY_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The degrees that the view is rotated around the vertical axis through the pivot point.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getRotationY()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The degrees that the view is rotated around the vertical axis through the pivot point.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setRotationY(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the degrees that the view is rotated around the vertical axis through the pivot point.
 Increasing values result in counter-clockwise rotation from the viewpoint of looking
 down the y axis.

 When rotating large views, it is recommended to adjust the camera distance
 accordingly. Refer to <c><see cref="M:Android.Views.View.SetCameraDistance(System.Single)" /></c> for more information.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.RotationY" />
        <altmember cref="P:Android.Views.View.RotationY" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.Rotation" />
        <altmember cref="P:Android.Views.View.RotationX" />
        <altmember cref="M:Android.Views.View.SetCameraDistance(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="SaveEnabled">
      <MemberSignature Language="C#" Value="public virtual bool SaveEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSaveEnabled", "()Z", "GetIsSaveEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSaveEnabled", "(Z)V", "GetSetSaveEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this view will save its state (that is,
 whether its <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c> method will be called).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isSaveEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether this view will save its state (that is,
 whether its <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c> method will be called).</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setSaveEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls whether the saving of this view's state is
 enabled (that is, whether its <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c> method
 will be called).  Note that even if freezing is enabled, the
 view still must have an id assigned to it (via <c><see cref="P:Android.Views.View.Id" /></c>)
 for its state to be saved.  This flag can only disable the
 saving of this view; any child views may still have their state saved.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.SaveEnabled" />
        <altmember cref="P:Android.Views.View.SaveEnabled" />
        <altmember cref="P:Android.Views.View.Id" />
        <altmember cref="M:Android.Views.View.OnSaveInstanceState" />
      </Docs>
    </Member>
    <Member MemberName="SaveFromParentEnabled">
      <MemberSignature Language="C#" Value="public virtual bool SaveFromParentEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveFromParentEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSaveFromParentEnabled", "()Z", "GetIsSaveFromParentEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSaveFromParentEnabled", "(Z)V", "GetSetSaveFromParentEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the entire hierarchy under this view will save its
 state when a state saving traversal occurs from its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isSaveFromParentEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether the entire hierarchy under this view will save its
 state when a state saving traversal occurs from its parent.  The default
 is true; if false, these views will not be saved unless
 <c><see cref="!:Android.Views.View.saveHierarchyState(android.util.SparseArray&lt;android.os.Parcelable&gt;)" /></c> is called directly on this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setSaveFromParentEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls whether the entire hierarchy under this view will save its
 state when a state saving traversal occurs from its parent.  The default
 is true; if false, these views will not be saved unless
 <c><see cref="!:Android.Views.View.saveHierarchyState(android.util.SparseArray&lt;android.os.Parcelable&gt;)" /></c> is called directly on this view.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.SaveFromParentEnabled" />
        <altmember cref="P:Android.Views.View.SaveFromParentEnabled" />
        <altmember cref="P:Android.Views.View.Id" />
        <altmember cref="M:Android.Views.View.OnSaveInstanceState" />
      </Docs>
    </Member>
    <Member MemberName="SaveHierarchyState">
      <MemberSignature Language="C#" Value="public virtual void SaveHierarchyState (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveHierarchyState(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("saveHierarchyState", "(Landroid/util/SparseArray;)V", "GetSaveHierarchyState_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public virtual float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScaleX", "()F", "GetGetScaleXHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScaleX", "(F)V", "GetSetScaleX_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The amount that the view is scaled in x around the pivot point, as a proportion of
 the view's unscaled width.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScaleX()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The amount that the view is scaled in x around the pivot point, as a proportion of
 the view's unscaled width. A value of 1, the default, means that no scaling is applied.

 By default, this is 1.0f.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScaleX(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the amount that the view is scaled in x around the pivot point, as a proportion of
 the view's unscaled width. A value of 1 means that no scaling is applied.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
      </Docs>
    </Member>
    <Member MemberName="ScaleXs">
      <MemberSignature Language="C#" Value="public static Android.Util.Property ScaleXs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Property ScaleXs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCALE_X")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Property</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Property wrapper around the <c>scaleX</c> functionality handled by the
 <c><see cref="P:Android.Views.View.ScaleX" /></c> and <c><see cref="P:Android.Views.View.ScaleX" /></c> methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">A Property wrapper around the <c>scaleX</c> functionality handled by the
 <c><see cref="P:Android.Views.View.ScaleX" /></c> and <c><see cref="P:Android.Views.View.ScaleX" /></c> methods.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCALE_X" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public virtual float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScaleY", "()F", "GetGetScaleYHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScaleY", "(F)V", "GetSetScaleY_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The amount that the view is scaled in y around the pivot point, as a proportion of
 the view's unscaled height.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScaleY()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The amount that the view is scaled in y around the pivot point, as a proportion of
 the view's unscaled height. A value of 1, the default, means that no scaling is applied.

 By default, this is 1.0f.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScaleY(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the amount that the view is scaled in Y around the pivot point, as a proportion of
 the view's unscaled width. A value of 1 means that no scaling is applied.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
        <altmember cref="P:Android.Views.View.PivotX" />
        <altmember cref="P:Android.Views.View.PivotY" />
      </Docs>
    </Member>
    <Member MemberName="ScaleYs">
      <MemberSignature Language="C#" Value="public static Android.Util.Property ScaleYs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Property ScaleYs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCALE_Y")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Property</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Property wrapper around the <c>scaleY</c> functionality handled by the
 <c><see cref="P:Android.Views.View.ScaleY" /></c> and <c><see cref="P:Android.Views.View.ScaleY" /></c> methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">A Property wrapper around the <c>scaleY</c> functionality handled by the
 <c><see cref="P:Android.Views.View.ScaleY" /></c> and <c><see cref="P:Android.Views.View.ScaleY" /></c> methods.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCALE_Y" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleDrawable">
      <MemberSignature Language="C#" Value="public virtual void ScheduleDrawable (Android.Graphics.Drawables.Drawable who, Java.Lang.IRunnable what, long when);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleDrawable(class Android.Graphics.Drawables.Drawable who, class Java.Lang.IRunnable what, int64 when) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleDrawable", "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V", "GetScheduleDrawable_Landroid_graphics_drawable_Drawable_Ljava_lang_Runnable_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="what" Type="Java.Lang.IRunnable" />
        <Parameter Name="when" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="who">the recipient of the action</param>
        <param name="what">the action to run on the drawable</param>
        <param name="when">the time at which the action must occur. Uses the
        <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> timebase.
</param>
        <summary>Schedules an action on a drawable to occur at a specified time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedules an action on a drawable to occur at a specified time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleDrawable">
      <MemberSignature Language="C#" Value="public void ScheduleDrawable (Android.Graphics.Drawables.Drawable who, Action what, long when);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleDrawable(class Android.Graphics.Drawables.Drawable who, class System.Action what, int64 when) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="what" Type="System.Action" />
        <Parameter Name="when" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <param name="what">To be added.</param>
        <param name="when">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenStateOff">
      <MemberSignature Language="C#" Value="public const Android.Views.ScreenState ScreenStateOff = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ScreenState ScreenStateOff = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCREEN_STATE_OFF")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ScreenState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScreenState</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Indicates that the screen has changed state and is now off.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that the screen has changed state and is now off.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCREEN_STATE_OFF" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.OnScreenStateChanged(Android.Views.ScreenState)" />
      </Docs>
    </Member>
    <Member MemberName="ScreenStateOn">
      <MemberSignature Language="C#" Value="public const Android.Views.ScreenState ScreenStateOn = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ScreenState ScreenStateOn = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCREEN_STATE_ON")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ScreenState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScreenState</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Indicates that the screen has changed state and is now on.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that the screen has changed state and is now on.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCREEN_STATE_ON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.OnScreenStateChanged(Android.Views.ScreenState)" />
      </Docs>
    </Member>
    <Member MemberName="ScrollAxisHorizontal">
      <MemberSignature Language="C#" Value="public const Android.Views.ScrollAxis ScrollAxisHorizontal = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ScrollAxis ScrollAxisHorizontal = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCROLL_AXIS_HORIZONTAL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ScrollAxis enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollAxis</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Indicates scrolling along the horizontal axis.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates scrolling along the horizontal axis.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_HORIZONTAL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAxisNone">
      <MemberSignature Language="C#" Value="public const Android.Views.ScrollAxis ScrollAxisNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ScrollAxis ScrollAxisNone = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCROLL_AXIS_NONE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ScrollAxis enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollAxis</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Indicates no axis of view scrolling.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates no axis of view scrolling.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_NONE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAxisVertical">
      <MemberSignature Language="C#" Value="public const Android.Views.ScrollAxis ScrollAxisVertical = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ScrollAxis ScrollAxisVertical = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCROLL_AXIS_VERTICAL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ScrollAxis enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollAxis</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Indicates scrolling along the vertical axis.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates scrolling along the vertical axis.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_VERTICAL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBarDefaultDelayBeforeFade">
      <MemberSignature Language="C#" Value="public virtual int ScrollBarDefaultDelayBeforeFade { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollBarDefaultDelayBeforeFade" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollBarDefaultDelayBeforeFade", "()I", "GetGetScrollBarDefaultDelayBeforeFadeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollBarDefaultDelayBeforeFade", "(I)V", "GetSetScrollBarDefaultDelayBeforeFade_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the delay before scrollbars fade.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollBarDefaultDelayBeforeFade()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the delay before scrollbars fade.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollBarDefaultDelayBeforeFade(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Define the delay before scrollbars fade.</para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBarFadeDuration">
      <MemberSignature Language="C#" Value="public virtual int ScrollBarFadeDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollBarFadeDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollBarFadeDuration", "()I", "GetGetScrollBarFadeDurationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollBarFadeDuration", "(I)V", "GetSetScrollBarFadeDuration_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scrollbar fade duration.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollBarFadeDuration()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the scrollbar fade duration.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollBarFadeDuration(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Define the scrollbar fade duration.</para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ScrollbarFadingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ScrollbarFadingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollbarFadingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isScrollbarFadingEnabled", "()Z", "GetIsScrollbarFadingEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollbarFadingEnabled", "(Z)V", "GetSetScrollbarFadingEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if scrollbars will fade when this view is not scrolling</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isScrollbarFadingEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if scrollbars will fade when this view is not scrolling</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollbarFadingEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Define whether scrollbars will fade when the view is not scrolling.</para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBarSize">
      <MemberSignature Language="C#" Value="public virtual int ScrollBarSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollBarSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollBarSize", "()I", "GetGetScrollBarSizeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollBarSize", "(I)V", "GetSetScrollBarSize_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scrollbar size.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollBarSize()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the scrollbar size.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollBarSize(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Define the scrollbar size.</para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBarStyle">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ScrollbarStyles ScrollBarStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ScrollbarStyles ScrollBarStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollBarStyle", "()I", "GetGetScrollBarStyleHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollBarStyle", "(I)V", "GetSetScrollBarStyle_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollbarStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollBarStyle()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Returns the current scrollbar style.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollBarStyle(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Specify the style of the scrollbars. The scrollbars can be overlaid or
 inset. When inset, they add to the padding of the view. And the scrollbars
 can be drawn inside the padding area or on the edge of the view. For example,
 if a view has a background drawable and you want to draw the scrollbars
 inside the padding specified by the drawable, you can use
 SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to
 appear at the edge of the view, ignoring the padding, then you can use
 SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBy">
      <MemberSignature Language="C#" Value="public virtual void ScrollBy (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollBy(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scrollBy", "(II)V", "GetScrollBy_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the amount of pixels to scroll by horizontally</param>
        <param name="y">the amount of pixels to scroll by vertically
</param>
        <summary>Move the scrolled position of your view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Move the scrolled position of your view. This will cause a call to
 <c><see cref="M:Android.Views.View.OnScrollChanged(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and the view will be
 invalidated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#scrollBy(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public virtual void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scrollTo", "(II)V", "GetScrollTo_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the x position to scroll to</param>
        <param name="y">the y position to scroll to
</param>
        <summary>Set the scrolled position of your view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the scrolled position of your view. This will cause a call to
 <c><see cref="M:Android.Views.View.OnScrollChanged(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and the view will be
 invalidated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#scrollTo(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ScrollX">
      <MemberSignature Language="C#" Value="public int ScrollX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollX", "()I", "GetGetScrollXHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollX", "(I)V", "GetSetScrollX_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the scrolled left position of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollX()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the scrolled left position of this view. This is the left edge of
 the displayed part of your view. You do not need to draw any pixels
 farther left, since those are outside of the frame of your view on
 screen.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollX(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the horizontal scrolled position of your view. This will cause a call to
 <c><see cref="M:Android.Views.View.OnScrollChanged(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and the view will be
 invalidated.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ScrollY">
      <MemberSignature Language="C#" Value="public int ScrollY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getScrollY", "()I", "GetGetScrollYHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScrollY", "(I)V", "GetSetScrollY_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the scrolled top position of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getScrollY()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the scrolled top position of this view. This is the top edge of
 the displayed part of your view. You do not need to draw any pixels above
 it, since those are outside of the frame of your view on screen.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollY(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the vertical scrolled position of your view. This will cause a call to
 <c><see cref="M:Android.Views.View.OnScrollChanged(System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and the view will be
 invalidated.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSelected", "()Z", "GetIsSelectedHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSelected", "(Z)V", "GetSetSelected_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the selection state of this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isSelected()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates the selection state of this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setSelected(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Changes the selection state of this view. A view can be selected or not.
 Note that selection is not the same as focus. Views are typically
 selected in the context of an AdapterView like ListView or GridView;
 the selected view is the view that is highlighted.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SelectedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; SelectedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; SelectedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SELECTED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is selected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is selected. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SELECTED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; SelectedWindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; SelectedWindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SELECTED_WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view is selected and that its window has the focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view is selected and that its window has the focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SELECTED_WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.SelectedStateSet" />
        <altmember cref="P:Android.Views.View.WindowFocusedStateSet" />
      </Docs>
    </Member>
    <Member MemberName="SendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void SendAccessibilityEvent (Android.Views.Accessibility.EventTypes eventType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendAccessibilityEvent(valuetype Android.Views.Accessibility.EventTypes eventType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendAccessibilityEvent", "(I)V", "GetSendAccessibilityEvent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="Android.Views.Accessibility.EventTypes" />
      </Parameters>
      <Docs>
        <param name="eventType">The type of the event to send, as defined by several types from
 <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>, such as
 <c><see cref="F:Android.Views.Accessibility.EventTypes.ViewClicked" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Support.V4.View.Accessibility.AccessibilityEventCompat.TypeViewHoverEnter" tool="ReplaceLinkValue" /></c>.</param>
        <summary>Sends an accessibility event of the given type.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sends an accessibility event of the given type. If accessibility is
 not enabled this method has no effect. The default implementation calls
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> first
 to populate information about the event source (this View), then calls
 <c><see cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> to
 populate the text content of the event source including its descendants,
 and last calls
 <c><see cref="M:Android.Views.IViewParent.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" /></c>
 on its parent to request sending of the event to interested parties.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> is
 responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#sendAccessibilityEvent(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="M:Android.Views.View.OnInitializeAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
        <altmember cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
        <altmember cref="M:Android.Views.IViewParent.RequestSendAccessibilityEvent(Android.Views.View, Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="SendAccessibilityEventUnchecked">
      <MemberSignature Language="C#" Value="public virtual void SendAccessibilityEventUnchecked (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendAccessibilityEventUnchecked(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendAccessibilityEventUnchecked", "(Landroid/view/accessibility/AccessibilityEvent;)V", "GetSendAccessibilityEventUnchecked_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event to send.</param>
        <summary>This method behaves exactly as <c><see cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" /></c> but
 takes as an argument an empty <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and does not
 perform a check whether accessibility is enabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method behaves exactly as <c><see cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" /></c> but
 takes as an argument an empty <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and does not
 perform a check whether accessibility is enabled.
 </para>
          <para tool="javadoc-to-mdoc">
 If an <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>
 is responsible for handling this call.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" />
      </Docs>
    </Member>
    <Member MemberName="SetAccessibilityDelegate">
      <MemberSignature Language="C#" Value="public virtual void SetAccessibilityDelegate (Android.Views.View.AccessibilityDelegate delegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAccessibilityDelegate(class Android.Views.View/AccessibilityDelegate delegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAccessibilityDelegate", "(Landroid/view/View$AccessibilityDelegate;)V", "GetSetAccessibilityDelegate_Landroid_view_View_AccessibilityDelegate_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegate" Type="Android.Views.View+AccessibilityDelegate" />
      </Parameters>
      <Docs>
        <param name="delegate">The delegate instance.</param>
        <summary>Sets a delegate for implementing accessibility support via composition as
 opposed to inheritance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a delegate for implementing accessibility support via composition as
 opposed to inheritance. The delegate's primary use is for implementing
 backwards compatible widgets. For more details see <c><see cref="T:Android.Views.View+AccessibilityDelegate" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setAccessibilityDelegate(android.view.View.AccessibilityDelegate)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundColor">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundColor (Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundColor(valuetype Android.Graphics.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBackgroundColor", "(I)V", "GetSetBackgroundColor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="color">the color of the background
</param>
        <summary>Sets the background color for this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the background color for this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setBackgroundColor(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundDrawable">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundDrawable (Android.Graphics.Drawables.Drawable background);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundDrawable(class Android.Graphics.Drawables.Drawable background) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBackgroundDrawable", "(Landroid/graphics/drawable/Drawable;)V", "GetSetBackgroundDrawable_Landroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="background">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setBackgroundDrawable(android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundResource">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundResource (int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundResource(int32 resid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBackgroundResource", "(I)V", "GetSetBackgroundResource_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resid">The identifier of the resource.</param>
        <summary>Set the background to a given resource.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the background to a given resource. The resource should refer to
 a Drawable object or 0 to remove the background.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setBackgroundResource(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetCameraDistance">
      <MemberSignature Language="C#" Value="public virtual void SetCameraDistance (float distance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCameraDistance(float32 distance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCameraDistance", "(F)V", "GetSetCameraDistance_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distance" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="distance">The distance in "depth pixels", if negative the opposite
        value is used</param>
        <summary tool="true">
          <example>
            <code lang="java">
 float scale = context.getResources().getDisplayMetrics().density;
 view.setCameraDistance(distance * scale);
 </code>
          </example>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">
 float scale = context.getResources().getDisplayMetrics().density;
 view.setCameraDistance(distance * scale);
 </code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">Sets the distance along the Z axis (orthogonal to the X/Y plane on which
 views are drawn) from the camera to this view. The camera's distance
 affects 3D transformations, for instance rotations around the X and Y
 axis. If the rotationX or rotationY properties are changed and this view is
 large (more than half the size of the screen), it is recommended to always
 use a camera distance that's greater than the height (X axis rotation) or
 the width (Y axis rotation) of this view.</para>
          <para tool="javadoc-to-mdoc">The distance of the camera from the view plane can have an affect on the
 perspective distortion of the view when it is rotated around the x or y axis.
 For example, a large distance will result in a large viewing angle, and there
 will not be much perspective distortion of the view as it rotates. A short
 distance may cause much more perspective distortion upon rotation, and can
 also result in some drawing artifacts if the rotated view ends up partially
 behind the camera (which is why the recommendation is to use a distance at
 least as far as the size of the view, if the view is to be rotated.)</para>
          <para tool="javadoc-to-mdoc">The distance is expressed in "depth pixels." The default distance depends
 on the screen density. For instance, on a medium density display, the
 default distance is 1280. On a high density display, the default distance
 is 1920.</para>
          <para tool="javadoc-to-mdoc">If you want to specify a distance that leads to visually consistent
 results across various densities, use the following formula:</para>
          <para tool="javadoc-to-mdoc">The density scale factor of a high density display is 1.5,
 and 1920 = 1280 * 1.5.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setCameraDistance(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
        <altmember cref="P:Android.Views.View.RotationX" />
        <altmember cref="P:Android.Views.View.RotationY" />
      </Docs>
    </Member>
    <Member MemberName="SetFadingEdgeLength">
      <MemberSignature Language="C#" Value="public virtual void SetFadingEdgeLength (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFadingEdgeLength(int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFadingEdgeLength", "(I)V", "GetSetFadingEdgeLength_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">The size in pixels of the faded edge used to indicate that more
        content in this view is visible.
</param>
        <summary>Set the size of the faded edge used to indicate that more content in this
 view is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the size of the faded edge used to indicate that more content in this
 view is available.  Will not change whether the fading edge is enabled; use
 <c><see cref="P:Android.Views.View.VerticalFadingEdgeEnabled" /></c> or
 <c><see cref="P:Android.Views.View.HorizontalFadingEdgeEnabled" /></c> to enable the fading edge
 for the vertical or horizontal fading edges.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setFadingEdgeLength(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFitsSystemWindows">
      <MemberSignature Language="C#" Value="public virtual void SetFitsSystemWindows (bool fitSystemWindows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFitsSystemWindows(bool fitSystemWindows) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFitsSystemWindows", "(Z)V", "GetSetFitsSystemWindows_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fitSystemWindows" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fitSystemWindows">If true, then the default implementation of
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> will be executed.</param>
        <summary>Sets whether or not this view should account for system screen decorations
 such as the status bar and inset its content; that is, controlling whether
 the default implementation of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> will be
 executed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets whether or not this view should account for system screen decorations
 such as the status bar and inset its content; that is, controlling whether
 the default implementation of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> will be
 executed.  See that method for more details.

 </para>
          <para tool="javadoc-to-mdoc">Note that if you are providing your own implementation of
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c>, then there is no need to set this
 flag to true -- your implementation will be overriding the default
 implementation that checks this flag.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setFitsSystemWindows(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.FitsSystemWindows" />
        <altmember cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SetLayerPaint">
      <MemberSignature Language="C#" Value="public virtual void SetLayerPaint (Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLayerPaint(class Android.Graphics.Paint paint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLayerPaint", "(Landroid/graphics/Paint;)V", "GetSetLayerPaint_Landroid_graphics_Paint_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="paint">The paint used to compose the layer. This argument is optional
        and can be null. It is ignored when the layer type is
        <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c></param>
        <summary>Updates the <c><see cref="T:Android.Graphics.Paint" /></c> object used with the current layer (used only if the current
 layer type is not set to <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Updates the <c><see cref="T:Android.Graphics.Paint" /></c> object used with the current layer (used only if the current
 layer type is not set to <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>). Changed properties of the Paint
 provided to <c><see cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType,Android.Graphics.Paint)" /></c> will be used the next time
 the View is redrawn, but <c><see cref="M:Android.Views.View.SetLayerPaint(Android.Graphics.Paint)" /></c> must be called to
 ensure that the view gets redrawn immediately.

 <list type="bullet"><item><term><c><see cref="P:Android.Graphics.Paint.Alpha" /></c></term></item><item><term><c><see cref="P:Android.Graphics.Paint.Xfermode" /></c></term></item><item><term><c><see cref="P:Android.Graphics.Paint.ColorFilter" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">A layer is associated with an optional <c><see cref="T:Android.Graphics.Paint" /></c>
 instance that controls how the layer is composed on screen. The following
 properties of the paint are taken into account when composing the layer:</para>
          <para tool="javadoc-to-mdoc">If this view has an alpha value set to <c><see cref="P:Android.Views.View.Alpha" /></c>, the
 alpha value of the layer's paint is superseded by this view's alpha value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setLayerPaint(android.graphics.Paint)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Views.View.SetLayerType(Android.Views.LayerType, Android.Graphics.Paint)" />
      </Docs>
    </Member>
    <Member MemberName="SetLayerType">
      <MemberSignature Language="C#" Value="public virtual void SetLayerType (Android.Views.LayerType layerType, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLayerType(valuetype Android.Views.LayerType layerType, class Android.Graphics.Paint paint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLayerType", "(ILandroid/graphics/Paint;)V", "GetSetLayerType_ILandroid_graphics_Paint_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layerType" Type="Android.Views.LayerType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="layerType">The type of layer to use with this view, must be one of
        <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>, <c><see cref="!:Android.Views.View.LAYER_TYPE_SOFTWARE" /></c> or
        <c><see cref="!:Android.Views.View.LAYER_TYPE_HARDWARE" /></c></param>
        <param name="paint">The paint used to compose the layer. This argument is optional
        and can be null. It is ignored when the layer type is
        <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c></param>
        <summary tool="true">
          <list type="bullet">
            <item>
              <term>
                <c>
                  <see cref="P:Android.Graphics.Paint.Alpha" />
                </c>
              </term>
            </item>
            <item>
              <term>
                <c>
                  <see cref="P:Android.Graphics.Paint.Xfermode" />
                </c>
              </term>
            </item>
            <item>
              <term>
                <c>
                  <see cref="P:Android.Graphics.Paint.ColorFilter" />
                </c>
              </term>
            </item>
          </list>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <item>
                <term>
                  <c>
                    <see cref="P:Android.Graphics.Paint.Alpha" />
                  </c>
                </term>
              </item>
              <item>
                <term>
                  <c>
                    <see cref="P:Android.Graphics.Paint.Xfermode" />
                  </c>
                </term>
              </item>
              <item>
                <term>
                  <c>
                    <see cref="P:Android.Graphics.Paint.ColorFilter" />
                  </c>
                </term>
              </item>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">Specifies the type of layer backing this view. The layer can be
 <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>, <c><see cref="!:Android.Views.View.LAYER_TYPE_SOFTWARE" /></c> or
 <c><see cref="!:Android.Views.View.LAYER_TYPE_HARDWARE" /></c>.</para>
          <para tool="javadoc-to-mdoc">A layer is associated with an optional <c><see cref="T:Android.Graphics.Paint" /></c>
 instance that controls how the layer is composed on screen. The following
 properties of the paint are taken into account when composing the layer:</para>
          <para tool="javadoc-to-mdoc">If this view has an alpha value set to <c><see cref="P:Android.Views.View.Alpha" /></c>, the alpha value of the layer's paint is superseded
 by this view's alpha value.</para>
          <para tool="javadoc-to-mdoc">Refer to the documentation of <c><see cref="!:Android.Views.View.LAYER_TYPE_NONE" /></c>,
 <c><see cref="!:Android.Views.View.LAYER_TYPE_SOFTWARE" /></c> and <c><see cref="!:Android.Views.View.LAYER_TYPE_HARDWARE" /></c>
 for more information on when and how to use layers.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setLayerType(int, android.graphics.Paint)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.LayerType" />
        <altmember cref="P:Android.Views.View.Alpha" />
      </Docs>
    </Member>
    <Member MemberName="SetMeasuredDimension">
      <MemberSignature Language="C#" Value="protected void SetMeasuredDimension (int measuredWidth, int measuredHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetMeasuredDimension(int32 measuredWidth, int32 measuredHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMeasuredDimension", "(II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="measuredWidth" Type="System.Int32" />
        <Parameter Name="measuredHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="measuredWidth">The measured width of this view.  May be a complex
 bit mask as defined by <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> and
 <c><see cref="F:Android.Views.View.MeasuredStateTooSmall" /></c>.</param>
        <param name="measuredHeight">The measured height of this view.  May be a complex
 bit mask as defined by <c><see cref="F:Android.Views.View.MeasuredSizeMask" /></c> and
 <c><see cref="F:Android.Views.View.MeasuredStateTooSmall" /></c>.
</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">This method must be called by <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c> to store the
 measured width and measured height. Failing to do so will trigger an
 exception at measurement time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setMeasuredDimension(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetMinimumHeight">
      <MemberSignature Language="C#" Value="public virtual void SetMinimumHeight (int minHeight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMinimumHeight(int32 minHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMinimumHeight", "(I)V", "GetSetMinimumHeight_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minHeight">The minimum height the view will try to be.</param>
        <summary>Sets the minimum height of the view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the minimum height of the view. It is not guaranteed the view will
 be able to achieve this minimum height (for example, if its parent layout
 constrains it with less available height).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setMinimumHeight(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.MinimumHeight" />
      </Docs>
    </Member>
    <Member MemberName="SetMinimumWidth">
      <MemberSignature Language="C#" Value="public virtual void SetMinimumWidth (int minWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMinimumWidth(int32 minWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMinimumWidth", "(I)V", "GetSetMinimumWidth_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minWidth">The minimum width the view will try to be.</param>
        <summary>Sets the minimum width of the view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the minimum width of the view. It is not guaranteed the view will
 be able to achieve this minimum width (for example, if its parent layout
 constrains it with less available width).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setMinimumWidth(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.MinimumWidth" />
      </Docs>
    </Member>
    <Member MemberName="SetOnApplyWindowInsetsListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnApplyWindowInsetsListener (Android.Views.View.IOnApplyWindowInsetsListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnApplyWindowInsetsListener(class Android.Views.View/IOnApplyWindowInsetsListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnApplyWindowInsetsListener", "(Landroid/view/View$OnApplyWindowInsetsListener;)V", "GetSetOnApplyWindowInsetsListener_Landroid_view_View_OnApplyWindowInsetsListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.View+IOnApplyWindowInsetsListener" />
      </Parameters>
      <Docs>
        <param name="listener">Listener to set</param>
        <summary>Set an <c><see cref="!:NoType:android/view/View$OnApplyWindowInsetsListener;Href=../../../reference/android/view/View.OnApplyWindowInsetsListener.html" /></c> to take over the policy for applying
 window insets to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set an <c><see cref="!:NoType:android/view/View$OnApplyWindowInsetsListener;Href=../../../reference/android/view/View.OnApplyWindowInsetsListener.html" /></c> to take over the policy for applying
 window insets to this view. The listener's
 <c><see cref="!:NoType:android/view/View$OnApplyWindowInsetsListener;Href=../../../reference/android/view/View.OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View,android.view.WindowInsets)" /></c>
 method will be called instead of the view's
 <c><see cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" /></c> method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.View.OnApplyWindowInsets(Android.Views.WindowInsets)" />
      </Docs>
    </Member>
    <Member MemberName="SetOnClickListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnClickListener (Android.Views.View.IOnClickListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnClickListener(class Android.Views.View/IOnClickListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnClickListener", "(Landroid/view/View$OnClickListener;)V", "GetSetOnClickListener_Landroid_view_View_OnClickListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnClickListener" />
      </Parameters>
      <Docs>
        <param name="l">The callback that will run</param>
        <summary>Register a callback to be invoked when this view is clicked.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when this view is clicked. If this view is not
 clickable, it becomes clickable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Clickable" />
      </Docs>
    </Member>
    <Member MemberName="SetOnCreateContextMenuListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnCreateContextMenuListener (Android.Views.View.IOnCreateContextMenuListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnCreateContextMenuListener(class Android.Views.View/IOnCreateContextMenuListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnCreateContextMenuListener", "(Landroid/view/View$OnCreateContextMenuListener;)V", "GetSetOnCreateContextMenuListener_Landroid_view_View_OnCreateContextMenuListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnCreateContextMenuListener" />
      </Parameters>
      <Docs>
        <param name="l">The callback that will run

</param>
        <summary>Register a callback to be invoked when the context menu for this view is
 being built.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the context menu for this view is
 being built. If this view is not long clickable, it becomes long clickable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnDragListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnDragListener (Android.Views.View.IOnDragListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDragListener(class Android.Views.View/IOnDragListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnDragListener", "(Landroid/view/View$OnDragListener;)V", "GetSetOnDragListener_Landroid_view_View_OnDragListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnDragListener" />
      </Parameters>
      <Docs>
        <param name="l">An implementation of <c><see cref="!:NoType:android/view/View$OnDragListener;Href=../../../reference/android/view/View.OnDragListener.html" /></c>.
</param>
        <summary>Register a drag event listener callback object for this View.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a drag event listener callback object for this View. The parameter is
 an implementation of <c><see cref="!:NoType:android/view/View$OnDragListener;Href=../../../reference/android/view/View.OnDragListener.html" /></c>. To send a drag event to a
 View, the system calls the
 <c><see cref="!:NoType:android/view/View$OnDragListener;Href=../../../reference/android/view/View.OnDragListener.html#onDrag(android.view.View,android.view.DragEvent)" /></c> method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnDragListener(android.view.View.OnDragListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetOnGenericMotionListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnGenericMotionListener (Android.Views.View.IOnGenericMotionListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnGenericMotionListener(class Android.Views.View/IOnGenericMotionListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnGenericMotionListener", "(Landroid/view/View$OnGenericMotionListener;)V", "GetSetOnGenericMotionListener_Landroid_view_View_OnGenericMotionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnGenericMotionListener" />
      </Parameters>
      <Docs>
        <param name="l">the generic motion listener to attach to this view
</param>
        <summary>Register a callback to be invoked when a generic motion event is sent to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a generic motion event is sent to this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnGenericMotionListener(android.view.View.OnGenericMotionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="SetOnHoverListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnHoverListener (Android.Views.View.IOnHoverListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnHoverListener(class Android.Views.View/IOnHoverListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnHoverListener", "(Landroid/view/View$OnHoverListener;)V", "GetSetOnHoverListener_Landroid_view_View_OnHoverListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnHoverListener" />
      </Parameters>
      <Docs>
        <param name="l">the hover listener to attach to this view
</param>
        <summary>Register a callback to be invoked when a hover event is sent to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a hover event is sent to this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnHoverListener(android.view.View.OnHoverListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetOnKeyListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnKeyListener (Android.Views.View.IOnKeyListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnKeyListener(class Android.Views.View/IOnKeyListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnKeyListener", "(Landroid/view/View$OnKeyListener;)V", "GetSetOnKeyListener_Landroid_view_View_OnKeyListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnKeyListener" />
      </Parameters>
      <Docs>
        <param name="l">the key listener to attach to this view
</param>
        <summary>Register a callback to be invoked when a hardware key is pressed in this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a hardware key is pressed in this view.
 Key presses in software input methods will generally not trigger the methods of
 this listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnKeyListener(android.view.View.OnKeyListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnLongClickListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnLongClickListener (Android.Views.View.IOnLongClickListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnLongClickListener(class Android.Views.View/IOnLongClickListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnLongClickListener", "(Landroid/view/View$OnLongClickListener;)V", "GetSetOnLongClickListener_Landroid_view_View_OnLongClickListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnLongClickListener" />
      </Parameters>
      <Docs>
        <param name="l">The callback that will run</param>
        <summary>Register a callback to be invoked when this view is clicked and held.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when this view is clicked and held. If this view is not
 long clickable, it becomes long clickable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnLongClickListener(android.view.View.OnLongClickListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.LongClickable" />
      </Docs>
    </Member>
    <Member MemberName="SetOnSystemUiVisibilityChangeListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnSystemUiVisibilityChangeListener (Android.Views.View.IOnSystemUiVisibilityChangeListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSystemUiVisibilityChangeListener(class Android.Views.View/IOnSystemUiVisibilityChangeListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnSystemUiVisibilityChangeListener", "(Landroid/view/View$OnSystemUiVisibilityChangeListener;)V", "GetSetOnSystemUiVisibilityChangeListener_Landroid_view_View_OnSystemUiVisibilityChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnSystemUiVisibilityChangeListener" />
      </Parameters>
      <Docs>
        <param name="l">The <c><see cref="!:NoType:android/view/View$OnSystemUiVisibilityChangeListener;Href=../../../reference/android/view/View.OnSystemUiVisibilityChangeListener.html" /></c> to receive callbacks.
</param>
        <summary>Set a listener to receive callbacks when the visibility of the system bar changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a listener to receive callbacks when the visibility of the system bar changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnSystemUiVisibilityChangeListener(android.view.View.OnSystemUiVisibilityChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetOnTouchListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnTouchListener (Android.Views.View.IOnTouchListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnTouchListener(class Android.Views.View/IOnTouchListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnTouchListener", "(Landroid/view/View$OnTouchListener;)V", "GetSetOnTouchListener_Landroid_view_View_OnTouchListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Views.View+IOnTouchListener" />
      </Parameters>
      <Docs>
        <param name="l">the touch listener to attach to this view
</param>
        <summary>Register a callback to be invoked when a touch event is sent to this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a touch event is sent to this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setOnTouchListener(android.view.View.OnTouchListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetPadding">
      <MemberSignature Language="C#" Value="public virtual void SetPadding (int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPadding(int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPadding", "(IIII)V", "GetSetPadding_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">the left padding in pixels</param>
        <param name="top">the top padding in pixels</param>
        <param name="right">the right padding in pixels</param>
        <param name="bottom">the bottom padding in pixels
</param>
        <summary>Sets the padding.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the padding. The view may add on the space required to display
 the scrollbars, depending on the style and visibility of the scrollbars.
 So the values returned from <c><see cref="P:Android.Views.View.PaddingLeft" /></c>, <c><see cref="P:Android.Views.View.PaddingTop" /></c>,
 <c><see cref="P:Android.Views.View.PaddingRight" /></c> and <c><see cref="P:Android.Views.View.PaddingBottom" /></c> may be different
 from the values set in this call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setPadding(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetPaddingRelative">
      <MemberSignature Language="C#" Value="public virtual void SetPaddingRelative (int start, int top, int end, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPaddingRelative(int32 start, int32 top, int32 end, int32 bottom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPaddingRelative", "(IIII)V", "GetSetPaddingRelative_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the start padding in pixels</param>
        <param name="top">the top padding in pixels</param>
        <param name="end">the end padding in pixels</param>
        <param name="bottom">the bottom padding in pixels
</param>
        <summary>Sets the relative padding.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the relative padding. The view may add on the space required to display
 the scrollbars, depending on the style and visibility of the scrollbars.
 So the values returned from <c><see cref="P:Android.Views.View.PaddingStart" /></c>, <c><see cref="P:Android.Views.View.PaddingTop" /></c>,
 <c><see cref="P:Android.Views.View.PaddingEnd" /></c> and <c><see cref="P:Android.Views.View.PaddingBottom" /></c> may be different
 from the values set in this call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setPaddingRelative(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SetScrollContainer">
      <MemberSignature Language="C#" Value="public virtual void SetScrollContainer (bool isScrollContainer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScrollContainer(bool isScrollContainer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setScrollContainer", "(Z)V", "GetSetScrollContainer_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isScrollContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isScrollContainer">To be added.</param>
        <summary>Change whether this view is one of the set of scrollable containers in
 its window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Change whether this view is one of the set of scrollable containers in
 its window.  This will be used to determine whether the window can
 resize or must pan when a soft input area is open -- scrollable
 containers allow the window to use resize mode since the container
 will appropriately shrink.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setScrollContainer(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetTag">
      <MemberSignature Language="C#" Value="public virtual void SetTag (int key, Java.Lang.Object tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTag(int32 key, class Java.Lang.Object tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTag", "(ILjava/lang/Object;)V", "GetSetTag_ILjava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
        <Parameter Name="tag" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key identifying the tag</param>
        <param name="tag">An Object to tag the view with</param>
        <summary>Sets a tag associated with this view and a key.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a tag associated with this view and a key. A tag can be used
 to mark a view in its hierarchy and does not have to be unique within
 the hierarchy. Tags can also be used to store data within a view
 without resorting to another data structure.

 The specified key should be an id declared in the resources of the
 application to ensure it is unique (see the <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/more-resources.html#Id">ID resource type</a></format>).
 Keys identified as belonging to
 the Android framework or not associated with any package will cause
 an <c><see cref="T:Java.Lang.IllegalArgumentException" /></c> to be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setTag(int, java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <exception cref="T:Java.Lang.IllegalArgumentException">If they specified key is not valid</exception>
        <altmember cref="P:Android.Views.View.Tag" />
        <altmember cref="M:Android.Views.View.GetTag(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetWillNotCacheDrawing">
      <MemberSignature Language="C#" Value="public virtual void SetWillNotCacheDrawing (bool willNotCacheDrawing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWillNotCacheDrawing(bool willNotCacheDrawing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWillNotCacheDrawing", "(Z)V", "GetSetWillNotCacheDrawing_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="willNotCacheDrawing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="willNotCacheDrawing">true if this view does not cache its
        drawing, false otherwise
</param>
        <summary>When a View's drawing cache is enabled, drawing is redirected to an
 offscreen bitmap.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a View's drawing cache is enabled, drawing is redirected to an
 offscreen bitmap. Some views, like an ImageView, must be able to
 bypass this mechanism if they already draw a single bitmap, to avoid
 unnecessary usage of the memory.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setWillNotCacheDrawing(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWillNotDraw">
      <MemberSignature Language="C#" Value="public virtual void SetWillNotDraw (bool willNotDraw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWillNotDraw(bool willNotDraw) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWillNotDraw", "(Z)V", "GetSetWillNotDraw_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="willNotDraw" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="willNotDraw">whether or not this View draw on its own
</param>
        <summary>If this view doesn't do any drawing on its own, set this flag to
 allow further optimizations.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If this view doesn't do any drawing on its own, set this flag to
 allow further optimizations. By default, this flag is not set on
 View, but could be set on some View subclasses such as ViewGroup.

 Typically, if you override <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>
 you should clear this flag.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setWillNotDraw(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetX">
      <MemberSignature Language="C#" Value="public virtual void SetX (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetX(float32 x) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setX", "(F)V", "GetSetX_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">The visual x position of this view, in pixels.
</param>
        <summary>Sets the visual x position of this view, in pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the visual x position of this view, in pixels. This is equivalent to setting the
 <c><see cref="P:Android.Views.View.TranslationX" /></c> property to be the difference between
 the x value passed in and the current <c><see cref="P:Android.Views.View.Left" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setX(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetY">
      <MemberSignature Language="C#" Value="public virtual void SetY (float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetY(float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setY", "(F)V", "GetSetY_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="y">The visual y position of this view, in pixels.
</param>
        <summary>Sets the visual y position of this view, in pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the visual y position of this view, in pixels. This is equivalent to setting the
 <c><see cref="P:Android.Views.View.TranslationY" /></c> property to be the difference between
 the y value passed in and the current <c><see cref="P:Android.Views.View.Top" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setY(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetZ">
      <MemberSignature Language="C#" Value="public virtual void SetZ (float z);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetZ(float32 z) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setZ", "(F)V", "GetSetZ_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="z" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="z">The visual z position of this view, in pixels.
</param>
        <summary>Sets the visual z position of this view, in pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the visual z position of this view, in pixels. This is equivalent to setting the
 <c><see cref="P:Android.Views.View.TranslationZ" /></c> property to be the difference between
 the x value passed in and the current <c><see cref="P:Android.Views.View.Elevation" /></c> property.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#setZ(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public virtual bool ShowContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showContextMenu", "()Z", "GetShowContextMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bring up the context menu for this view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Bring up the context menu for this view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#showContextMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SolidColor">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Color SolidColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.Color SolidColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSolidColor", "()I", "GetGetSolidColorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Override this if your view is known to always be drawn on top of a solid color background,
 and needs to draw fading edges.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this if your view is known to always be drawn on top of a solid color background,
 and needs to draw fading edges. Returning a non-zero color enables the view system to
 optimize the drawing of the fading edges. If you do return a non-zero color, the alpha
 should be set to 0xFF.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getSolidColor()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.VerticalFadingEdgeEnabled" />
        <altmember cref="P:Android.Views.View.HorizontalFadingEdgeEnabled" />
      </Docs>
    </Member>
    <Member MemberName="SoundEffectsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool SoundEffectsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SoundEffectsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSoundEffectsEnabled", "()Z", "GetIsSoundEffectsEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSoundEffectsEnabled", "(Z)V", "GetSetSoundEffectsEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isSoundEffectsEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setSoundEffectsEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set whether this view should have sound effects enabled for events such as
 clicking and touching.

 You may wish to disable sound effects for a view if you already play sounds,
 for instance, a dial key that plays dtmf tones.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.SoundEffectsEnabled" />
        <altmember cref="M:Android.Views.View.PlaySoundEffect(Android.Views.SoundEffects)" />
        <altmember cref="P:Android.Views.View.SoundEffectsEnabled" />
        <altmember cref="M:Android.Views.View.PlaySoundEffect(Android.Views.SoundEffects)" />
      </Docs>
    </Member>
    <Member MemberName="StartActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode StartActionMode (Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">Callback that will control the lifecycle of the action mode</param>
        <summary>Start an action mode with the default type <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start an action mode with the default type <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="T:Android.Views.ActionMode" />
        <altmember cref="M:Android.Views.View.StartActionMode(.ICallback, Android.Views.ActionModeType)" />
      </Docs>
    </Member>
    <Member MemberName="StartAnimation">
      <MemberSignature Language="C#" Value="public virtual void StartAnimation (Android.Views.Animations.Animation animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimation(class Android.Views.Animations.Animation animation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startAnimation", "(Landroid/view/animation/Animation;)V", "GetStartAnimation_Landroid_view_animation_Animation_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animation" Type="Android.Views.Animations.Animation" />
      </Parameters>
      <Docs>
        <param name="animation">the animation to start now
</param>
        <summary>Start the specified animation now.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Start the specified animation now.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#startAnimation(android.view.animation.Animation)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartDrag">
      <MemberSignature Language="C#" Value="public bool StartDrag (Android.Content.ClipData data, Android.Views.View.DragShadowBuilder shadowBuilder, Java.Lang.Object myLocalState, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartDrag(class Android.Content.ClipData data, class Android.Views.View/DragShadowBuilder shadowBuilder, class Java.Lang.Object myLocalState, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startDrag", "(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Android.Content.ClipData" />
        <Parameter Name="shadowBuilder" Type="Android.Views.View+DragShadowBuilder" />
        <Parameter Name="myLocalState" Type="Java.Lang.Object" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">A <c><see cref="T:Android.Content.ClipData" /></c> object pointing to the data to be
 transferred by the drag and drop operation.</param>
        <param name="shadowBuilder">A <c><see cref="!:NoType:android/view/View$DragShadowBuilder;Href=../../../reference/android/view/View.DragShadowBuilder.html" /></c> object for building the
 drag shadow.</param>
        <param name="myLocalState">An <c><see cref="T:Java.Lang.Object" /></c> containing local data about the drag and
 drop operation. This Object is put into every DragEvent object sent by the system during the
 current drag.
 <para tool="javadoc-to-mdoc">
 myLocalState is a lightweight mechanism for the sending information from the dragged View
 to the target Views. For example, it can contain flags that differentiate between a
 a copy operation and a move operation.
 </para></param>
        <param name="flags">Flags that control the drag and drop operation. No flags are currently defined,
 so the parameter should be set to 0.</param>
        <summary>Starts a drag and drop operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts a drag and drop operation. When your application calls this method, it passes a
 <c><see cref="!:NoType:android/view/View$DragShadowBuilder;Href=../../../reference/android/view/View.DragShadowBuilder.html" /></c> object to the system. The
 system calls this object's <c><see cref="!:NoType:android/view/View$DragShadowBuilder;Href=../../../reference/android/view/View.DragShadowBuilder.html#onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)" /></c>
 to get metrics for the drag shadow, and then calls the object's
 <c><see cref="!:NoType:android/view/View$DragShadowBuilder;Href=../../../reference/android/view/View.DragShadowBuilder.html#onDrawShadow(android.graphics.Canvas)" /></c> to draw the drag shadow itself.
 </para>
          <para tool="javadoc-to-mdoc">
  Once the system has the drag shadow, it begins the drag and drop operation by sending
  drag events to all the View objects in your application that are currently visible. It does
  this either by calling the View object's drag listener (an implementation of
  <c><see cref="!:NoType:android/view/View$OnDragListener;Href=../../../reference/android/view/View.OnDragListener.html#onDrag(android.view.View,android.view.DragEvent)" /></c> or by calling the
  View object's <c><see cref="M:Android.Views.View.OnDragEvent(Android.Views.DragEvent)" /></c> method.
  Both are passed a <c><see cref="T:Android.Views.DragEvent" /></c> object that has a
  <c><see cref="P:Android.Views.DragEvent.Action" /></c> value of
  <c><see cref="!:Android.Views.DragEvent.ACTION_DRAG_STARTED" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Your application can invoke startDrag() on any attached View object. The View object does not
 need to be the one used in <c><see cref="!:NoType:android/view/View$DragShadowBuilder;Href=../../../reference/android/view/View.DragShadowBuilder.html" /></c>, nor does it need to
 be related to the View the user selected for dragging.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#startDrag(android.content.ClipData, android.view.View.DragShadowBuilder, java.lang.Object, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartNestedScroll">
      <MemberSignature Language="C#" Value="public virtual bool StartNestedScroll (Android.Views.ScrollAxis axes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartNestedScroll(valuetype Android.Views.ScrollAxis axes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startNestedScroll", "(I)Z", "GetStartNestedScroll_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="axes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="axes">Flags consisting of a combination of <c><see cref="F:Android.Views.View.ScrollAxisHorizontal" /></c> and/or
             <c><see cref="F:Android.Views.View.ScrollAxisVertical" /></c>.</param>
        <summary>Begin a nestable scroll operation along the given axes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Begin a nestable scroll operation along the given axes.

 </para>
          <para tool="javadoc-to-mdoc">A view starting a nested scroll promises to abide by the following contract:</para>
          <para tool="javadoc-to-mdoc">The view will call startNestedScroll upon initiating a scroll operation. In the case
 of a touch scroll this corresponds to the initial <c><see cref="F:Android.Support.V4.View.MotionEventCompat.ActionPointerDown" tool="ReplaceLinkValue" /></c>.
 In the case of touch scrolling the nested scroll will be terminated automatically in
 the same manner as <c><see cref="M:Android.Views.IViewParent.RequestDisallowInterceptTouchEvent(System.Boolean)" /></c>.
 In the event of programmatic scrolling the caller must explicitly call
 <c><see cref="M:Android.Views.View.StopNestedScroll" /></c> to indicate the end of the nested scroll.</para>
          <para tool="javadoc-to-mdoc">If <c>startNestedScroll</c> returns true, a cooperative parent was found.
 If it returns false the caller may ignore the rest of this contract until the next scroll.
 Calling startNestedScroll while a nested scroll is already in progress will return true.</para>
          <para tool="javadoc-to-mdoc">At each incremental step of the scroll the caller should invoke
 <c><see cref="M:Android.Views.View.DispatchNestedPreScroll(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 once it has calculated the requested scrolling delta. If it returns true the nested scrolling
 parent at least partially consumed the scroll and the caller should adjust the amount it
 scrolls by.</para>
          <para tool="javadoc-to-mdoc">After applying the remainder of the scroll delta the caller should invoke
 <c><see cref="M:Android.Views.View.DispatchNestedScroll(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>, passing
 both the delta consumed and the delta unconsumed. A nested scrolling parent may treat
 these values differently. See <c><see cref="M:Android.Views.IViewParent.OnNestedScroll(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#startNestedScroll(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.View.StopNestedScroll" />
        <altmember cref="M:Android.Views.View.DispatchNestedPreScroll(System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.View.DispatchNestedScroll(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StateListAnimator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.StateListAnimator StateListAnimator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Animation.StateListAnimator StateListAnimator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStateListAnimator", "()Landroid/animation/StateListAnimator;", "GetGetStateListAnimatorHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setStateListAnimator", "(Landroid/animation/StateListAnimator;)V", "GetSetStateListAnimator_Landroid_animation_StateListAnimator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.StateListAnimator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current StateListAnimator if exists.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getStateListAnimator()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current StateListAnimator if exists.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setStateListAnimator(android.animation.StateListAnimator)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Attaches the provided StateListAnimator to this View.
 
 Any previously attached StateListAnimator will be detached.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.Views.View.StateListAnimator" />
      </Docs>
    </Member>
    <Member MemberName="StopNestedScroll">
      <MemberSignature Language="C#" Value="public virtual void StopNestedScroll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopNestedScroll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopNestedScroll", "()V", "GetStopNestedScrollHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stop a nested scroll in progress.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stop a nested scroll in progress.

 </para>
          <para tool="javadoc-to-mdoc">Calling this method when a nested scroll is not currently in progress is harmless.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#stopNestedScroll()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.View.StartNestedScroll(Android.Views.ScrollAxis)" />
      </Docs>
    </Member>
    <Member MemberName="SuggestedMinimumHeight">
      <MemberSignature Language="C#" Value="protected virtual int SuggestedMinimumHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SuggestedMinimumHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSuggestedMinimumHeight", "()I", "GetGetSuggestedMinimumHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the suggested minimum height that the view should use.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the suggested minimum height that the view should use. This
 returns the maximum of the view's minimum height
 and the background's minimum height
 (<c><see cref="P:Android.Graphics.Drawables.Drawable.MinimumHeight" /></c>).
 </para>
          <para tool="javadoc-to-mdoc">
 When being used in <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c>, the caller should still
 ensure the returned height is within the requirements of the parent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getSuggestedMinimumHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SuggestedMinimumWidth">
      <MemberSignature Language="C#" Value="protected virtual int SuggestedMinimumWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SuggestedMinimumWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSuggestedMinimumWidth", "()I", "GetGetSuggestedMinimumWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the suggested minimum width that the view should use.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the suggested minimum width that the view should use. This
 returns the maximum of the view's minimum width)
 and the background's minimum width
  (<c><see cref="P:Android.Graphics.Drawables.Drawable.MinimumWidth" /></c>).
 </para>
          <para tool="javadoc-to-mdoc">
 When being used in <c><see cref="M:Android.Views.View.OnMeasure(System.Int32,System.Int32)" /></c>, the caller should still
 ensure the returned width is within the requirements of the parent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getSuggestedMinimumWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagFullscreen">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagFullscreen = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagFullscreen = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_FULLSCREEN")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested to go
 into the normal fullscreen mode so that its content can take over the screen
 while still allowing the user to interact with the application.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested to go
 into the normal fullscreen mode so that its content can take over the screen
 while still allowing the user to interact with the application.

 </para>
          <para tool="javadoc-to-mdoc">This has the same visual effect as
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_FULLSCREEN" /></c>,
 meaning that non-critical screen decorations (such as the status bar) will be
 hidden while the user is in the View's window, focusing the experience on
 that content.  Unlike the window flag, if you are using ActionBar in
 overlay mode with <c><see cref="!:Android.Views.Window.FEATURE_ACTION_BAR_OVERLAY" /></c>, then enabling this flag will also
 hide the action bar.

 </para>
          <para tool="javadoc-to-mdoc">This approach to going fullscreen is best used over the window flag when
 it is a transient state -- that is, the application does this at certain
 points in its user interaction where it wants to allow the user to focus
 on content, but not as a continuous state.  For situations where the application
 would like to simply stay full screen the entire time (such as a game that
 wants to take over the screen), the
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_FULLSCREEN" /></c>
 is usually a better approach.  The state set here will be removed by the system
 in various situations (such as the user moving to another application) like
 the other system UI states.

 </para>
          <para tool="javadoc-to-mdoc">When using this flag, the application should provide some easy facility
 for the user to go out of it.  A common example would be in an e-book
 reader, where tapping on the screen brings back whatever screen and UI
 decorations that had been hidden while the user was immersed in reading
 the book.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_FULLSCREEN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagHideNavigation">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagHideNavigation = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagHideNavigation = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_HIDE_NAVIGATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested that the
 system navigation be temporarily hidden.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested that the
 system navigation be temporarily hidden.

 </para>
          <para tool="javadoc-to-mdoc">This is an even less obtrusive state than that called for by
 <c><see cref="F:Android.Views.View.SystemUiFlagLowProfile" /></c>; on devices that draw essential navigation controls
 (Home, Back, and the like) on screen, <c>SYSTEM_UI_FLAG_HIDE_NAVIGATION</c> will cause
 those to disappear. This is useful (in conjunction with the
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_FULLSCREEN" /></c> and
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_LAYOUT_IN_SCREEN" /></c>
 window flags) for displaying content using every last pixel on the display.

 </para>
          <para tool="javadoc-to-mdoc">There is a limitation: because navigation controls are so important, the least user
 interaction will cause them to reappear immediately.  When this happens, both
 this flag and <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> will be cleared automatically,
 so that both elements reappear at the same time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_HIDE_NAVIGATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagImmersive">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagImmersive = 2048;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagImmersive = (2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_IMMERSIVE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2048</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like to remain interactive when
 hiding the navigation bar with <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like to remain interactive when
 hiding the navigation bar with <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>.  If this flag is
 not set, <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c> will be force cleared by the system on any
 user interaction.
 </para>
          <para tool="javadoc-to-mdoc">Since this flag is a modifier for <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>, it only
 has an effect when used in combination with that flag.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagImmersiveSticky">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagImmersiveSticky = 4096;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagImmersiveSticky = (4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_IMMERSIVE_STICKY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like to remain interactive when
 hiding the status bar with <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> and/or hiding the navigation
 bar with <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like to remain interactive when
 hiding the status bar with <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> and/or hiding the navigation
 bar with <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>.  Use this flag to create an immersive
 experience while also hiding the system bars.  If this flag is not set,
 <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c> will be force cleared by the system on any user
 interaction, and <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> will be force-cleared by the system
 if the user swipes from the top of the screen.
 </para>
          <para tool="javadoc-to-mdoc">When system bars are hidden in immersive mode, they can be revealed temporarily with
 system gestures, such as swiping from the top of the screen.  These transient system bars
 will overlay app’s content, may have some degree of transparency, and will automatically
 hide after a short timeout.
 </para>
          <para tool="javadoc-to-mdoc">Since this flag is a modifier for <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> and
 <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>, it only has an effect when used in combination
 with one or both of those flags.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE_STICKY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagLayoutFullscreen">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagLayoutFullscreen = 1024;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagLayoutFullscreen = (1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like its window
 to be laid out as if it has requested
 <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c>, even if it currently hasn't.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like its window
 to be laid out as if it has requested
 <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c>, even if it currently hasn't.  This
 allows it to avoid artifacts when switching in and out of that mode, at
 the expense that some of its user interface may be covered by screen
 decorations when they are shown.  You can perform layout of your inner
 UI elements to account for non-fullscreen system UI through the
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> method.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagLayoutHideNavigation">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagLayoutHideNavigation = 512;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagLayoutHideNavigation = (512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like its window
 to be laid out as if it has requested
 <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>, even if it currently hasn't.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View would like its window
 to be laid out as if it has requested
 <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>, even if it currently hasn't.  This
 allows it to avoid artifacts when switching in and out of that mode, at
 the expense that some of its user interface may be covered by screen
 decorations when they are shown.  You can perform layout of your inner
 UI elements to account for the navigation system UI through the
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> method.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagLayoutStable">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagLayoutStable = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagLayoutStable = (256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_LAYOUT_STABLE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: When using other layout
 flags, we would like a stable view of the content insets given to
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: When using other layout
 flags, we would like a stable view of the content insets given to
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c>.  This means that the insets seen there
 will always represent the worst case that the application can expect
 as a continuous state.  In the stock Android UI this is the space for
 the system bar, nav bar, and status bar, but not more transient elements
 such as an input method.

 The stable layout your UI sees is based on the system UI modes you can
 switch to.  That is, if you specify <c><see cref="F:Android.Views.View.SystemUiFlagLayoutFullscreen" /></c>
 then you will get a stable layout for changes of the
 <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> mode; if you specify
 <c><see cref="F:Android.Views.View.SystemUiFlagLayoutFullscreen" /></c> and
 <c><see cref="F:Android.Views.View.SystemUiFlagLayoutHideNavigation" /></c>, then you can transition
 to <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c> and <c><see cref="F:Android.Views.View.SystemUiFlagHideNavigation" /></c>
 with a stable layout.  (Note that you should avoid using
 <c><see cref="F:Android.Views.View.SystemUiFlagLayoutHideNavigation" /></c> by itself.)

 If you have set the window flag <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_FULLSCREEN" /></c>
 to hide the status bar (instead of using <c><see cref="F:Android.Views.View.SystemUiFlagFullscreen" /></c>),
 then a hidden status bar will be considered a "stable" state for purposes
 here.  This allows your UI to continually hide the status bar, while still
 using the system UI flags to hide the action bar while still retaining
 a stable layout.  Note that changing the window fullscreen flag will never
 provide a stable layout for a clean transition.

 </para>
          <para tool="javadoc-to-mdoc">If you are using ActionBar in
 overlay mode with <c><see cref="!:Android.Views.Window.FEATURE_ACTION_BAR_OVERLAY" /></c>, this flag will also impact the
 insets it adds to those given to the application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_STABLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagLowProfile">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagLowProfile = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagLowProfile = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_LOW_PROFILE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested the
 system UI to enter an unobtrusive "low profile" mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has requested the
 system UI to enter an unobtrusive "low profile" mode.

 </para>
          <para tool="javadoc-to-mdoc">This is for use in games, book readers, video players, or any other
 "immersive" application where the usual system chrome is deemed too distracting.

 </para>
          <para tool="javadoc-to-mdoc">In low profile mode, the status bar and/or navigation icons may dim.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LOW_PROFILE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiFlagVisible">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiFlagVisible = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiFlagVisible = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_FLAG_VISIBLE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Special constant for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has
 requested the system UI (status bar) to be visible (the default).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Special constant for <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c>: View has
 requested the system UI (status bar) to be visible (the default).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_VISIBLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.View.SystemUiVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiLayoutFlags">
      <MemberSignature Language="C#" Value="public const Android.Views.SystemUiFlags SystemUiLayoutFlags = 1536;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.SystemUiFlags SystemUiLayoutFlags = (1536)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SYSTEM_UI_LAYOUT_FLAGS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.SystemUiFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1536</MemberValue>
      <Docs>
        <summary>Flags that can impact the layout in relation to system UI.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flags that can impact the layout in relation to system UI.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_LAYOUT_FLAGS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiVisibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.StatusBarVisibility SystemUiVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.StatusBarVisibility SystemUiVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSystemUiVisibility", "()I", "GetGetSystemUiVisibilityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSystemUiVisibility", "(I)V", "GetSetSystemUiVisibility_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.StatusBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the last <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c> that this view has requested.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getSystemUiVisibility()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the last <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c> that this view has requested.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Request that the visibility of the status bar or other screen/window
 decorations be changed.

 This method is used to put the over device UI into temporary modes
 where the user's attention is focused more on the application content,
 by dimming or hiding surrounding system affordances.  This is typically
 used in conjunction with <c><see cref="!:Android.Views.Window.FEATURE_ACTION_BAR_OVERLAY" /></c>, allowing the applications content
 to be placed behind the action bar (and with these flags other system
 affordances) so that smooth transitions between hiding and showing them
 can be done.

 Two representative examples of the use of system UI visibility is
 implementing a content browsing application (like a magazine reader)
 and a video playing application.

 The first code shows a typical implementation of a View in a content
 browsing application.  In this implementation, the application goes
 into a content-oriented mode by hiding the status bar and action bar,
 and putting the navigation elements into lights out mode.  The user can
 then interact with content while in this mode.  Such an application should
 provide an easy way for the user to toggle out of the mode (such as to
 check information in the status bar or access notifications).  In the
 implementation here, this is done simply by tapping on the content.

 <example><code lang="java">public static class Content extends ScrollView
        implements View.OnSystemUiVisibilityChangeListener, View.OnClickListener {
    TextView mText;
    TextView mTitleView;
    SeekBar mSeekView;
    boolean mNavVisible;
    int mBaseSystemUiVisibility = SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            | SYSTEM_UI_FLAG_LAYOUT_STABLE;
    int mLastSystemUiVis;

    Runnable mNavHider = new Runnable() {
        @Override public void run() {
            setNavVisibility(false);
        }
    };

    public Content(Context context, AttributeSet attrs) {
        super(context, attrs);

        mText = new TextView(context);
        mText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
        mText.setText(context.getString(R.string.alert_dialog_two_buttons2ultra_msg));
        mText.setClickable(false);
        mText.setOnClickListener(this);
        mText.setTextIsSelectable(true);
        addView(mText, new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        setOnSystemUiVisibilityChangeListener(this);
    }

    public void init(TextView title, SeekBar seek) {
        // This called by the containing activity to supply the surrounding
        // state of the content browser that it will interact with.
        mTitleView = title;
        mSeekView = seek;
        setNavVisibility(true);
    }

    @Override public void onSystemUiVisibilityChange(int visibility) {
        // Detect when we go out of low-profile mode, to also go out
        // of full screen.  We only do this when the low profile mode
        // is changing from its last state, and turning off.
        int diff = mLastSystemUiVis ^ visibility;
        mLastSystemUiVis = visibility;
        if ((diff&amp;SYSTEM_UI_FLAG_LOW_PROFILE) != 0
                &amp;&amp; (visibility&amp;SYSTEM_UI_FLAG_LOW_PROFILE) == 0) {
            setNavVisibility(true);
        }
    }

    @Override protected void onWindowVisibilityChanged(int visibility) {
        super.onWindowVisibilityChanged(visibility);

        // When we become visible, we show our navigation elements briefly
        // before hiding them.
        setNavVisibility(true);
        getHandler().postDelayed(mNavHider, 2000);
    }

    @Override protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);

        // When the user scrolls, we hide navigation elements.
        setNavVisibility(false);
    }

    @Override public void onClick(View v) {
        // When the user clicks, we toggle the visibility of navigation elements.
        int curVis = getSystemUiVisibility();
        setNavVisibility((curVis&amp;SYSTEM_UI_FLAG_LOW_PROFILE) != 0);
    }

    void setBaseSystemUiVisibility(int visibility) {
        mBaseSystemUiVisibility = visibility;
    }

    void setNavVisibility(boolean visible) {
        int newVis = mBaseSystemUiVisibility;
        if (!visible) {
            newVis |= SYSTEM_UI_FLAG_LOW_PROFILE | SYSTEM_UI_FLAG_FULLSCREEN;
        }
        final boolean changed = newVis == getSystemUiVisibility();

        // Unschedule any pending event to hide navigation if we are
        // changing the visibility, or making the UI visible.
        if (changed || visible) {
            Handler h = getHandler();
            if (h != null) {
                h.removeCallbacks(mNavHider);
            }
        }

        // Set the new desired visibility.
        setSystemUiVisibility(newVis);
        mTitleView.setVisibility(visible ? VISIBLE : INVISIBLE);
        mSeekView.setVisibility(visible ? VISIBLE : INVISIBLE);
    }
}</code></example>This second code sample shows a typical implementation of a View
 in a video playing application.  In this situation, while the video is
 playing the application would like to go into a complete full-screen mode,
 to use as much of the display as possible for the video.  When in this state
 the user can not interact with the application; the system intercepts
 touching on the screen to pop the UI out of full screen mode.  See
 <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> for a sample layout that goes with this code.

 <example><code lang="java">public static class Content extends ImageView implements
        View.OnSystemUiVisibilityChangeListener, View.OnClickListener,
        ActionBar.OnMenuVisibilityListener {
    Activity mActivity;
    TextView mTitleView;
    Button mPlayButton;
    SeekBar mSeekView;
    boolean mAddedMenuListener;
    boolean mMenusOpen;
    boolean mPaused;
    boolean mNavVisible;
    int mLastSystemUiVis;

    Runnable mNavHider = new Runnable() {
        @Override public void run() {
            setNavVisibility(false);
        }
    };

    public Content(Context context, AttributeSet attrs) {
        super(context, attrs);
        setOnSystemUiVisibilityChangeListener(this);
        setOnClickListener(this);
    }

    public void init(Activity activity, TextView title, Button playButton,
            SeekBar seek) {
        // This called by the containing activity to supply the surrounding
        // state of the video player that it will interact with.
        mActivity = activity;
        mTitleView = title;
        mPlayButton = playButton;
        mSeekView = seek;
        mPlayButton.setOnClickListener(this);
        setPlayPaused(true);
    }

    @Override protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        if (mActivity != null) {
            mAddedMenuListener = true;
            mActivity.getActionBar().addOnMenuVisibilityListener(this);
        }
    }

    @Override protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        if (mAddedMenuListener) {
            mActivity.getActionBar().removeOnMenuVisibilityListener(this);
        }
    }

    @Override public void onSystemUiVisibilityChange(int visibility) {
        // Detect when we go out of nav-hidden mode, to clear our state
        // back to having the full UI chrome up.  Only do this when
        // the state is changing and nav is no longer hidden.
        int diff = mLastSystemUiVis ^ visibility;
        mLastSystemUiVis = visibility;
        if ((diff&amp;SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0
                &amp;&amp; (visibility&amp;SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0) {
            setNavVisibility(true);
        }
    }

    @Override protected void onWindowVisibilityChanged(int visibility) {
        super.onWindowVisibilityChanged(visibility);

        // When we become visible or invisible, play is paused.
        setPlayPaused(true);
    }

    @Override public void onClick(View v) {
        if (v == mPlayButton) {
            // Clicking on the play/pause button toggles its state.
            setPlayPaused(!mPaused);
        } else {
            // Clicking elsewhere makes the navigation visible.
            setNavVisibility(true);
        }
    }

    @Override public void onMenuVisibilityChanged(boolean isVisible) {
        mMenusOpen = isVisible;
        setNavVisibility(true);
    }

    void setPlayPaused(boolean paused) {
        mPaused = paused;
        mPlayButton.setText(paused ? R.string.play : R.string.pause);
        setKeepScreenOn(!paused);
        setNavVisibility(true);
    }

    void setNavVisibility(boolean visible) {
        int newVis = SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | SYSTEM_UI_FLAG_LAYOUT_STABLE;
        if (!visible) {
            newVis |= SYSTEM_UI_FLAG_LOW_PROFILE | SYSTEM_UI_FLAG_FULLSCREEN
                    | SYSTEM_UI_FLAG_HIDE_NAVIGATION;
        }

        // If we are now visible, schedule a timer for us to go invisible.
        if (visible) {
            Handler h = getHandler();
            if (h != null) {
                h.removeCallbacks(mNavHider);
                if (!mMenusOpen &amp;&amp; !mPaused) {
                    // If the menus are open or play is paused, we will not auto-hide.
                    h.postDelayed(mNavHider, 3000);
                }
            }
        }

        // Set the new desired visibility.
        setSystemUiVisibility(newVis);
        mTitleView.setVisibility(visible ? VISIBLE : INVISIBLE);
        mPlayButton.setVisibility(visible ? VISIBLE : INVISIBLE);
        mSeekView.setVisibility(visible ? VISIBLE : INVISIBLE);
    }
}</code></example></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SystemUiVisibilityChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.SystemUiVisibilityChangeEventArgs&gt; SystemUiVisibilityChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/SystemUiVisibilityChangeEventArgs&gt; SystemUiVisibilityChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+SystemUiVisibilityChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTag", "()Ljava/lang/Object;", "GetGetTagHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTag", "(Ljava/lang/Object;)V", "GetSetTag_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns this view's tag.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTag()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns this view's tag.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTag(java.lang.Object)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the tag associated with this view. A tag can be used to mark
 a view in its hierarchy and does not have to be unique within the
 hierarchy. Tags can also be used to store data within a view without
 resorting to another data structure.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.Tag" />
        <altmember cref="M:Android.Views.View.GetTag(System.Int32)" />
        <altmember cref="P:Android.Views.View.Tag" />
        <altmember cref="M:Android.Views.View.SetTag(System.Int32, Java.Lang.Object)" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public virtual Android.Views.TextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextAlignment TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextAlignment", "()I", "GetGetTextAlignmentHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTextAlignment", "(I)V", "GetSetTextAlignment_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the resolved text alignment.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTextAlignment()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the resolved text alignment.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTextAlignment(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the text alignment.</para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentCenter">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentCenter = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentCenter = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_CENTER")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Center the paragraph, e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Center the paragraph, e.g. ALIGN_CENTER.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_CENTER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentGravity">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentGravity = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentGravity = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_GRAVITY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Default for the root view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default for the root view. The gravity determines the text alignment, ALIGN_NORMAL,
 ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s text direction.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_GRAVITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentInherit">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentInherit = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentInherit = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_INHERIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Default text alignment.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default text alignment. The text alignment of this View is inherited from its parent.
 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_INHERIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentResolvedDefault">
      <MemberSignature Language="C#" Value="public const int TextAlignmentResolvedDefault = 131072;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 TextAlignmentResolvedDefault = (131072)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_RESOLVED_DEFAULT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>131072</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentTextEnd">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentTextEnd = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentTextEnd = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_TEXT_END")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Align to the end of the paragraph, e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Align to the end of the paragraph, e.g. ALIGN_OPPOSITE.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_END" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentTextStart">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentTextStart = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentTextStart = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_TEXT_START")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Align to the start of the paragraph, e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Align to the start of the paragraph, e.g. ALIGN_NORMAL.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_START" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentViewEnd">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentViewEnd = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentViewEnd = (6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_VIEW_END")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
 layoutDirection is LTR, and ALIGN_LEFT otherwise.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
 layoutDirection is LTR, and ALIGN_LEFT otherwise.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_END" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentViewStart">
      <MemberSignature Language="C#" Value="public const Android.Views.TextAlignment TextAlignmentViewStart = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextAlignment TextAlignmentViewStart = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_ALIGNMENT_VIEW_START")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextAlignment enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
 layoutDirection is LTR, and ALIGN_RIGHT otherwise.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
 layoutDirection is LTR, and ALIGN_RIGHT otherwise.

 Use with <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_START" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirection">
      <MemberSignature Language="C#" Value="public virtual Android.Views.TextDirection TextDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextDirection TextDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextDirection", "()I", "GetGetTextDirectionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTextDirection", "(I)V", "GetSetTextDirection_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the resolved text direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTextDirection()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the resolved text direction.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTextDirection(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the text direction.</para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionAnyRtl">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionAnyRtl = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionAnyRtl = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_ANY_RTL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Text direction is using "any-RTL" algorithm.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is using "any-RTL" algorithm. The paragraph direction is RTL if it contains
 any strong RTL character, otherwise it is LTR if it contains any strong LTR characters.
 If there are neither, the paragraph direction is the view's resolved layout direction.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_ANY_RTL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionFirstStrong">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionFirstStrong = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionFirstStrong = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_FIRST_STRONG")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Text direction is using "first strong algorithm".</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is using "first strong algorithm". The first strong directional character
 determines the paragraph direction. If there is no strong directional character, the
 paragraph direction is the view's resolved layout direction.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionInherit">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionInherit = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionInherit = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_INHERIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Text direction is inherited through <c><see cref="T:Android.Views.ViewGroup" /></c></summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is inherited through <c><see cref="T:Android.Views.ViewGroup" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_INHERIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionLocale">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionLocale = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionLocale = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_LOCALE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Text direction is coming from the system Locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is coming from the system Locale.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LOCALE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionLtr">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionLtr = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionLtr = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_LTR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Text direction is forced to LTR.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is forced to LTR.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LTR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="TextDirectionRtl">
      <MemberSignature Language="C#" Value="public const Android.Views.TextDirection TextDirectionRtl = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.TextDirection TextDirectionRtl = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TEXT_DIRECTION_RTL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.TextDirection enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Text direction is forced to RTL.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Text direction is forced to RTL.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_RTL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTop", "()I", "GetGetTopHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTop", "(I)V", "GetSetTop_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Top position of this view relative to its parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTop()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Top position of this view relative to its parent.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTop(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the top position of this view relative to its parent. This method is meant to be called
 by the layout system and should not generally be called otherwise, because the property
 may be changed at any time by the layout.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TopFadingEdgeStrength">
      <MemberSignature Language="C#" Value="protected virtual float TopFadingEdgeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TopFadingEdgeStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTopFadingEdgeStrength", "()F", "GetGetTopFadingEdgeStrengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the strength, or intensity, of the top faded edge.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the strength, or intensity, of the top faded edge. The strength is
 a value between 0.0 (no fade) and 1.0 (full fade). The default implementation
 returns 0.0 or 1.0 but no value in between.

 Subclasses should override this method to provide a smoother fade transition
 when scrolling occurs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getTopFadingEdgeStrength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TopPaddingOffset">
      <MemberSignature Language="C#" Value="protected virtual int TopPaddingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopPaddingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTopPaddingOffset", "()I", "GetGetTopPaddingOffsetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount by which to extend the top fading region.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Amount by which to extend the top fading region. Called only when
 <c><see cref="P:Android.Views.View.IsPaddingOffsetRequired" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getTopPaddingOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 2" />
        <altmember cref="P:Android.Views.View.IsPaddingOffsetRequired" />
      </Docs>
    </Member>
    <Member MemberName="Touch">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.TouchEventArgs&gt; Touch;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/TouchEventArgs&gt; Touch" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Touchables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Views.View&gt; Touchables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; Touchables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTouchables", "()Ljava/util/ArrayList;", "GetGetTouchablesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Views.View&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Find and return all touchable views that are descendants of this view,
 possibly including this view if it is touchable itself.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Find and return all touchable views that are descendants of this view,
 possibly including this view if it is touchable itself.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getTouchables()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TouchDelegate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.TouchDelegate TouchDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.TouchDelegate TouchDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTouchDelegate", "()Landroid/view/TouchDelegate;", "GetGetTouchDelegateHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTouchDelegate", "(Landroid/view/TouchDelegate;)V", "GetSetTouchDelegate_Landroid_view_TouchDelegate_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TouchDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the TouchDelegate for this View.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTouchDelegate()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the TouchDelegate for this View.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTouchDelegate(android.view.TouchDelegate)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the TouchDelegate for this View.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TransitionName">
      <MemberSignature Language="C#" Value="public string TransitionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransitionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTransitionName", "()Ljava/lang/String;", "GetGetTransitionNameHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTransitionName", "(Ljava/lang/String;)V", "GetSetTransitionName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of the View to be used to identify Views in Transitions.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTransitionName()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the name of the View to be used to identify Views in Transitions.
 Names should be unique in the View hierarchy.

 </para>
          <para tool="javadoc-to-mdoc">This returns null if the View has not been given a name.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTransitionName(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the name of the View to be used to identify Views in Transitions.
 Names should be unique in the View hierarchy.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationX">
      <MemberSignature Language="C#" Value="public virtual float TranslationX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TranslationX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTranslationX", "()F", "GetGetTranslationXHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTranslationX", "(F)V", "GetSetTranslationX_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The horizontal location of this view relative to its <c><see cref="P:Android.Views.View.Left" /></c> position.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTranslationX()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The horizontal location of this view relative to its <c><see cref="P:Android.Views.View.Left" /></c> position.
 This position is post-layout, in addition to wherever the object's
 layout placed it.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTranslationX(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the horizontal location of this view relative to its <c><see cref="P:Android.Views.View.Left" /></c> position.
 This effectively positions the object post-layout, in addition to wherever the object's
 layout placed it.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="TranslationY">
      <MemberSignature Language="C#" Value="public virtual float TranslationY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TranslationY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTranslationY", "()F", "GetGetTranslationYHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTranslationY", "(F)V", "GetSetTranslationY_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The vertical location of this view relative to its <c><see cref="P:Android.Views.View.Top" /></c> position.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTranslationY()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The vertical location of this view relative to its <c><see cref="P:Android.Views.View.Top" /></c> position.
 This position is post-layout, in addition to wherever the object's
 layout placed it.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTranslationY(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the vertical location of this view relative to its <c><see cref="P:Android.Views.View.Top" /></c> position.
 This effectively positions the object post-layout, in addition to wherever the object's
 layout placed it.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="TranslationZ">
      <MemberSignature Language="C#" Value="public virtual float TranslationZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TranslationZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTranslationZ", "()F", "GetGetTranslationZHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTranslationZ", "(F)V", "GetSetTranslationZ_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The depth location of this view relative to its <c><see cref="P:Android.Views.View.Elevation" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getTranslationZ()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The depth location of this view relative to its <c><see cref="P:Android.Views.View.Elevation" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setTranslationZ(float)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the depth location of this view relative to its <c><see cref="P:Android.Views.View.Elevation" /></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleDrawable">
      <MemberSignature Language="C#" Value="public virtual void UnscheduleDrawable (Android.Graphics.Drawables.Drawable who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnscheduleDrawable(class Android.Graphics.Drawables.Drawable who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unscheduleDrawable", "(Landroid/graphics/drawable/Drawable;)V", "GetUnscheduleDrawable_Landroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="who">The Drawable to unschedule.</param>
        <summary tool="true">Unschedule any events associated with the given Drawable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unschedule any events associated with the given Drawable.  This can be
 used when selecting a new Drawable into a view, so that the previous
 one is completely unscheduled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.DrawableStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="UnscheduleDrawable">
      <MemberSignature Language="C#" Value="public virtual void UnscheduleDrawable (Android.Graphics.Drawables.Drawable who, Java.Lang.IRunnable what);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnscheduleDrawable(class Android.Graphics.Drawables.Drawable who, class Java.Lang.IRunnable what) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unscheduleDrawable", "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V", "GetUnscheduleDrawable_Landroid_graphics_drawable_Drawable_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="what" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="who">the recipient of the action</param>
        <param name="what">the action to cancel
</param>
        <summary>Cancels a scheduled action on a drawable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels a scheduled action on a drawable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnscheduleDrawable">
      <MemberSignature Language="C#" Value="public void UnscheduleDrawable (Android.Graphics.Drawables.Drawable who, Action what);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnscheduleDrawable(class Android.Graphics.Drawables.Drawable who, class System.Action what) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="what" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <param name="what">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyDrawable">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDrawable (Android.Graphics.Drawables.Drawable who);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDrawable(class Android.Graphics.Drawables.Drawable who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("verifyDrawable", "(Landroid/graphics/drawable/Drawable;)Z", "GetVerifyDrawable_Landroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="who">The Drawable to verify.  Return true if it is one you are
            displaying, else return the result of calling through to the
            super class.</param>
        <summary>If your view subclass is displaying its own Drawable objects, it should
 override this function and return true for any Drawable it is
 displaying.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">If your view subclass is displaying its own Drawable objects, it should
 override this function and return true for any Drawable it is
 displaying.  This allows animations for those drawables to be
 scheduled.

 </para>
          <para tool="javadoc-to-mdoc">Be sure to call through to the super class when overriding this
 function.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#verifyDrawable(android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.View.UnscheduleDrawable(Android.Graphics.Drawables.Drawable)" />
        <altmember cref="M:Android.Views.View.DrawableStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="VerticalFadingEdgeEnabled">
      <MemberSignature Language="C#" Value="public virtual bool VerticalFadingEdgeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VerticalFadingEdgeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isVerticalFadingEdgeEnabled", "()Z", "GetIsVerticalFadingEdgeEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVerticalFadingEdgeEnabled", "(Z)V", "GetSetVerticalFadingEdgeEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isVerticalFadingEdgeEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicate whether the vertical edges are faded when the view is
 scrolled horizontally.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setVerticalFadingEdgeEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Define whether the vertical edges should be faded when this view
 is scrolled vertically.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.VerticalFadingEdgeEnabled" />
        <altmember cref="P:Android.Views.View.VerticalFadingEdgeEnabled" />
      </Docs>
    </Member>
    <Member MemberName="VerticalFadingEdgeLength">
      <MemberSignature Language="C#" Value="public virtual int VerticalFadingEdgeLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VerticalFadingEdgeLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVerticalFadingEdgeLength", "()I", "GetGetVerticalFadingEdgeLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the size of the vertical faded edges used to indicate that more
 content in this view is visible.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the size of the vertical faded edges used to indicate that more
 content in this view is visible.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getVerticalFadingEdgeLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBarEnabled">
      <MemberSignature Language="C#" Value="public virtual bool VerticalScrollBarEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VerticalScrollBarEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isVerticalScrollBarEnabled", "()Z", "GetIsVerticalScrollBarEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVerticalScrollBarEnabled", "(Z)V", "GetSetVerticalScrollBarEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#isVerticalScrollBarEnabled()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Indicate whether the vertical scrollbar should be drawn or not. The
 scrollbar is not drawn by default.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setVerticalScrollBarEnabled(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">Define whether the vertical scrollbar should be drawn or not. The
 scrollbar is not drawn by default.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
        <altmember cref="P:Android.Views.View.VerticalScrollBarEnabled" />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollbarPosition">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ScrollbarPosition VerticalScrollbarPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ScrollbarPosition VerticalScrollbarPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVerticalScrollbarPosition", "()I", "GetGetVerticalScrollbarPositionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVerticalScrollbarPosition", "(I)V", "GetSetVerticalScrollbarPosition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollbarPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getVerticalScrollbarPosition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setVerticalScrollbarPosition(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the position of the vertical scroll bar. Should be one of
 <c><see cref="!:Android.Views.View.SCROLLBAR_POSITION_DEFAULT" /></c>, <c><see cref="!:Android.Views.View.SCROLLBAR_POSITION_LEFT" /></c> or
 <c><see cref="!:Android.Views.View.SCROLLBAR_POSITION_RIGHT" /></c>.</para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Views.View.VerticalScrollbarPosition" />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollbarWidth">
      <MemberSignature Language="C#" Value="public virtual int VerticalScrollbarWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VerticalScrollbarWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVerticalScrollbarWidth", "()I", "GetGetVerticalScrollbarWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the width of the vertical scrollbar.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the width of the vertical scrollbar.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getVerticalScrollbarWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ViewAttachedToWindow">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.ViewAttachedToWindowEventArgs&gt; ViewAttachedToWindow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/ViewAttachedToWindowEventArgs&gt; ViewAttachedToWindow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+ViewAttachedToWindowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewDetachedFromWindow">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.View.ViewDetachedFromWindowEventArgs&gt; ViewDetachedFromWindow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.View/ViewDetachedFromWindowEventArgs&gt; ViewDetachedFromWindow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.View+ViewDetachedFromWindowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewLogTag">
      <MemberSignature Language="C#" Value="protected const string ViewLogTag;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal string ViewLogTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIEW_LOG_TAG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The logging tag used by this class with android.util.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The logging tag used by this class with android.util.Log.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#VIEW_LOG_TAG" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ViewTreeObserver">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewTreeObserver ViewTreeObserver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.ViewTreeObserver ViewTreeObserver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getViewTreeObserver", "()Landroid/view/ViewTreeObserver;", "GetGetViewTreeObserverHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewTreeObserver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the ViewTreeObserver for this view's hierarchy.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the ViewTreeObserver for this view's hierarchy. The view tree
 observer can be used to get notifications when global events, like
 layout, happen.

 The returned ViewTreeObserver observer is not guaranteed to remain
 valid for the lifetime of this View. If the caller of this method keeps
 a long-lived reference to ViewTreeObserver, it should always check for
 the return value of <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getViewTreeObserver()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewStates Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ViewStates Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVisibility", "()I", "GetGetVisibilityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVisibility", "(I)V", "GetSetVisibility_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the visibility status for this view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#getVisibility()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the visibility status for this view.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/View.html#setVisibility(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the enabled state of this view.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the width of the your view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the width of the your view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WillNotCacheDrawing">
      <MemberSignature Language="C#" Value="public virtual bool WillNotCacheDrawing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WillNotCacheDrawing() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("willNotCacheDrawing", "()Z", "GetWillNotCacheDrawingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether or not this View can cache its drawing or not.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether or not this View can cache its drawing or not.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#willNotCacheDrawing()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WillNotDraw">
      <MemberSignature Language="C#" Value="public virtual bool WillNotDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WillNotDraw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("willNotDraw", "()Z", "GetWillNotDrawHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether or not this View draws on its own.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether or not this View draws on its own.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#willNotDraw()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WindowAttachCount">
      <MemberSignature Language="C#" Value="protected virtual int WindowAttachCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowAttachCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowAttachCount", "()I", "GetGetWindowAttachCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowAttachCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WindowFocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; WindowFocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; WindowFocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("WINDOW_FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the view's window has focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates the view's window has focus. States are used with
 <c><see cref="T:Android.Graphics.Drawables.Drawable" /></c> to change the drawing of the
 view depending on its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#WINDOW_FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.Drawables.Drawable" />
        <altmember cref="M:Android.Views.View.GetDrawableState" />
      </Docs>
    </Member>
    <Member MemberName="WindowId">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowId WindowId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.WindowId WindowId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowId", "()Landroid/view/WindowId;", "GetGetWindowIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the <c><see cref="T:Android.Views.WindowId" /></c> for the window this view is
 currently attached to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the <c><see cref="T:Android.Views.WindowId" /></c> for the window this view is
 currently attached to.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="WindowSystemUiVisibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.SystemUiFlags WindowSystemUiVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.SystemUiFlags WindowSystemUiVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowSystemUiVisibility", "()I", "GetGetWindowSystemUiVisibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SystemUiFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current system UI visibility that is currently set for
 the entire window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current system UI visibility that is currently set for
 the entire window.  This is the combination of the
 <c><see cref="P:Android.Views.View.SystemUiVisibility" /></c> values supplied by all of the
 views in the window.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowSystemUiVisibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="WindowToken">
      <MemberSignature Language="C#" Value="public virtual Android.OS.IBinder WindowToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.IBinder WindowToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowToken", "()Landroid/os/IBinder;", "GetGetWindowTokenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a unique token identifying the window this view is attached to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a unique token identifying the window this view is attached to.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowToken()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WindowVisibility">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewStates WindowVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ViewStates WindowVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowVisibility", "()I", "GetGetWindowVisibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current visibility of the window this view is attached to
 (either <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>, or <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current visibility of the window this view is attached to
 (either <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>, or <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#getWindowVisibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public static Android.Util.Property X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Property X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("X")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Property</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Property wrapper around the <c>x</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetX(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetX" /></c> methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">A Property wrapper around the <c>x</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetX(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetX" /></c> methods.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#X" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public static Android.Util.Property Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Property Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("Y")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Property</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Property wrapper around the <c>y</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetY(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetY" /></c> methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">A Property wrapper around the <c>y</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetY(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetY" /></c> methods.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#Y" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="Z">
      <MemberSignature Language="C#" Value="public static Android.Util.Property Z { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Property Z" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("Z")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Property</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Property wrapper around the <c>z</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetZ(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetZ" /></c> methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">A Property wrapper around the <c>z</c> functionality handled by the
 <c><see cref="M:Android.Views.View.SetZ(System.Single)" /></c> and <c><see cref="M:Android.Views.View.GetZ" /></c> methods.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#Z" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
