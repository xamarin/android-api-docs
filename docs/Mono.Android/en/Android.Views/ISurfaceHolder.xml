<Type Name="ISurfaceHolder" FullName="Android.Views.ISurfaceHolder">
  <TypeSignature Language="C#" Value="public interface ISurfaceHolder : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISurfaceHolder implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/SurfaceHolder", "", "Android.Views.ISurfaceHolderInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Abstract interface to someone holding a display surface.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Abstract interface to someone holding a display surface.  Allows you to
 control the surface size and format, edit the pixels in the surface, and
 monitor changes to the surface.  This interface is typically available
 through the <c><see cref="T:Android.Views.SurfaceView" /></c> class.
 
 </para>
      <para tool="javadoc-to-mdoc">When using this interface from a thread other than the one running
 its <c><see cref="T:Android.Views.SurfaceView" /></c>, you will want to carefully read the
 methods
 <c><see cref="M:Android.Views.ISurfaceHolder.LockCanvas" /></c> and <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="AddCallback">
      <MemberSignature Language="C#" Value="public void AddCallback (Android.Views.ISurfaceHolderCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCallback(class Android.Views.ISurfaceHolderCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addCallback", "(Landroid/view/SurfaceHolder$Callback;)V", "GetAddCallback_Landroid_view_SurfaceHolder_Callback_Handler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ISurfaceHolderCallback" />
      </Parameters>
      <Docs>
        <param name="callback">The new Callback interface.
</param>
        <summary>Add a Callback interface for this holder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a Callback interface for this holder.  There can several Callback
 interfaces associated with a holder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#addCallback(android.view.SurfaceHolder.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsCreating">
      <MemberSignature Language="C#" Value="public bool IsCreating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCreating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCreating", "()Z", "GetIsCreatingHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Use this method to find out if the surface is in the process of being
 created from Callback methods.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Use this method to find out if the surface is in the process of being
 created from Callback methods. This is intended to be used with
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceChanged(Android.Views.ISurfaceHolder,Android.Graphics.Format,Android.Graphics.Format,Android.Graphics.Format)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#isCreating()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockCanvas">
      <MemberSignature Language="C#" Value="public Android.Graphics.Canvas LockCanvas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Canvas LockCanvas() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockCanvas", "()Landroid/graphics/Canvas;", "GetLockCanvasHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Canvas</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Start editing the pixels in the surface.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start editing the pixels in the surface.  The returned Canvas can be used
 to draw into the surface's bitmap.  A null is returned if the surface has
 not been created or otherwise cannot be edited.  You will usually need
 to implement <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c>
 to find out when the Surface is available for use.
 
 </para>
          <para tool="javadoc-to-mdoc">The content of the Surface is never preserved between unlockCanvas() and
 lockCanvas(), for this reason, every pixel within the Surface area
 must be written. The only exception to this rule is when a dirty
 rectangle is specified, in which case, non-dirty pixels will be
 preserved.
 
 </para>
          <para tool="javadoc-to-mdoc">If you call this repeatedly when the Surface is not ready (before
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c> or after
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceDestroyed(Android.Views.ISurfaceHolder)" /></c>), your calls
 will be throttled to a slow rate in order to avoid consuming CPU.
 
 </para>
          <para tool="javadoc-to-mdoc">If null is not returned, this function internally holds a lock until
 the corresponding <c><see cref="M:Android.Views.ISurfaceHolder.UnlockCanvasAndPost(Android.Graphics.Canvas)" /></c> call, preventing
 <c><see cref="T:Android.Views.SurfaceView" /></c> from creating, destroying, or modifying the surface
 while it is being drawn.  This can be more convenient than accessing
 the Surface directly, as you do not need to do special synchronization
 with a drawing thread in <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceDestroyed(Android.Views.ISurfaceHolder)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockCanvas">
      <MemberSignature Language="C#" Value="public Android.Graphics.Canvas LockCanvas (Android.Graphics.Rect dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Canvas LockCanvas(class Android.Graphics.Rect dirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockCanvas", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;", "GetLockCanvas_Landroid_graphics_Rect_Handler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Canvas</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="dirty">Area of the Surface that will be modified.</param>
        <summary>Just like <c><see cref="M:Android.Views.ISurfaceHolder.LockCanvas" /></c> but allows specification of a dirty rectangle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Just like <c><see cref="M:Android.Views.ISurfaceHolder.LockCanvas" /></c> but allows specification of a dirty rectangle.
 Every
 pixel within that rectangle must be written; however pixels outside
 the dirty rectangle will be preserved by the next call to lockCanvas().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ISurfaceHolder.LockCanvas" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="public void RemoveCallback (Android.Views.ISurfaceHolderCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCallback(class Android.Views.ISurfaceHolderCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeCallback", "(Landroid/view/SurfaceHolder$Callback;)V", "GetRemoveCallback_Landroid_view_SurfaceHolder_Callback_Handler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ISurfaceHolderCallback" />
      </Parameters>
      <Docs>
        <param name="callback">The Callback interface to remove.
</param>
        <summary>Removes a previously added Callback interface from this holder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes a previously added Callback interface from this holder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#removeCallback(android.view.SurfaceHolder.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFixedSize">
      <MemberSignature Language="C#" Value="public void SetFixedSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFixedSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFixedSize", "(II)V", "GetSetFixedSize_IIHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The surface's width.</param>
        <param name="height">The surface's height.
</param>
        <summary>Make the surface a fixed size.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Make the surface a fixed size.  It will never change from this size.
 When working with a <c><see cref="T:Android.Views.SurfaceView" /></c>, this must be called from the
 same thread running the SurfaceView's window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#setFixedSize(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormat">
      <MemberSignature Language="C#" Value="public void SetFormat (Android.Graphics.Format format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormat(valuetype Android.Graphics.Format format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFormat", "(I)V", "GetSetFormat_IHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Graphics.Format">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A constant from PixelFormat.</param>
        <summary>Set the desired PixelFormat of the surface.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the desired PixelFormat of the surface.  The default is OPAQUE.
 When working with a <c><see cref="T:Android.Views.SurfaceView" /></c>, this must be called from the
 same thread running the SurfaceView's window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#setFormat(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
      </Docs>
    </Member>
    <Member MemberName="SetKeepScreenOn">
      <MemberSignature Language="C#" Value="public void SetKeepScreenOn (bool screenOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetKeepScreenOn(bool screenOn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setKeepScreenOn", "(Z)V", "GetSetKeepScreenOn_ZHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenOn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="screenOn">Set to true to force the screen to stay on, false
 to allow it to turn off.
</param>
        <summary>Enable or disable option to keep the screen turned on while this
 surface is displayed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enable or disable option to keep the screen turned on while this
 surface is displayed.  The default is false, allowing it to turn off.
 This is safe to call from any thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#setKeepScreenOn(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetSizeFromLayout">
      <MemberSignature Language="C#" Value="public void SetSizeFromLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSizeFromLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSizeFromLayout", "()V", "GetSetSizeFromLayoutHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allow the surface to resized based on layout of its container (this is
 the default).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Allow the surface to resized based on layout of its container (this is
 the default).  When this is enabled, you should monitor
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceChanged(Android.Views.ISurfaceHolder,Android.Graphics.Format,Android.Graphics.Format,Android.Graphics.Format)" /></c> for changes to the size of the surface.
 When working with a <c><see cref="T:Android.Views.SurfaceView" /></c>, this must be called from the
 same thread running the SurfaceView's window.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#setSizeFromLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetType">
      <MemberSignature Language="C#" Value="public void SetType (Android.Views.SurfaceType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetType(valuetype Android.Views.SurfaceType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setType", "(I)V", "GetSetType_IHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Views.SurfaceType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Sets the surface's type.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the surface's type.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#setType(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="C#" Value="public Android.Views.Surface Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Direct access to the surface object.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Direct access to the surface object.  The Surface may not always be
 available -- for example when using a <c><see cref="T:Android.Views.SurfaceView" /></c> the holder's
 Surface is not created until the view has been attached to the window
 manager and performed a layout in order to determine the dimensions
 and screen position of the Surface.    You will thus usually need
 to implement <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c>
 to find out when the Surface is available for use.
 
 </para>
          <para tool="javadoc-to-mdoc">Note that if you directly access the Surface from another thread,
 it is critical that you correctly implement
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c> and
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceDestroyed(Android.Views.ISurfaceHolder)" /></c> to ensure
 that thread only accesses the Surface while it is valid, and that the
 Surface does not get destroyed while the thread is using it.
 
 </para>
          <para tool="javadoc-to-mdoc">This method is intended to be used by frameworks which often need
 direct access to the Surface object (usually to pass it to native code).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#getSurface()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceFrame">
      <MemberSignature Language="C#" Value="public Android.Graphics.Rect SurfaceFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect SurfaceFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSurfaceFrame", "()Landroid/graphics/Rect;", "GetGetSurfaceFrameHandler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the current size of the surface.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current size of the surface.  Note: do not modify the
 returned Rect.  This is only safe to call from the thread of
 <c><see cref="T:Android.Views.SurfaceView" /></c>'s window, or while inside of
 <c><see cref="M:Android.Views.ISurfaceHolder.LockCanvas" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#getSurfaceFrame()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnlockCanvasAndPost">
      <MemberSignature Language="C#" Value="public void UnlockCanvasAndPost (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnlockCanvasAndPost(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlockCanvasAndPost", "(Landroid/graphics/Canvas;)V", "GetUnlockCanvasAndPost_Landroid_graphics_Canvas_Handler:Android.Views.ISurfaceHolderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The Canvas previously returned by lockCanvas().
</param>
        <summary>Finish editing pixels in the surface.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Finish editing pixels in the surface.  After this call, the surface's
 current pixels will be shown on the screen, but its content is lost,
 in particular there is no guarantee that the content of the Surface
 will remain unchanged when lockCanvas() is called again.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/SurfaceHolder.html#unlockCanvasAndPost(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ISurfaceHolder.LockCanvas" />
      </Docs>
    </Member>
  </Members>
</Type>
