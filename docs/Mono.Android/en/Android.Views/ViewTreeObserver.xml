<Type Name="ViewTreeObserver" FullName="Android.Views.ViewTreeObserver">
  <TypeSignature Language="C#" Value="public sealed class ViewTreeObserver : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ViewTreeObserver extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Views.ViewTreeObserver" />
  <TypeSignature Language="F#" Value="type ViewTreeObserver = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/ViewTreeObserver", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/ViewTreeObserver", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A view tree observer is used to register listeners that can be notified of global
            changes in the view tree.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/ViewTreeObserver" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="AddOnDrawListener">
      <MemberSignature Language="C#" Value="public void AddOnDrawListener (Android.Views.ViewTreeObserver.IOnDrawListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnDrawListener(class Android.Views.ViewTreeObserver/IOnDrawListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnDrawListener(Android.Views.ViewTreeObserver.IOnDrawListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnDrawListener : Android.Views.ViewTreeObserver.IOnDrawListener -&gt; unit" Usage="viewTreeObserver.AddOnDrawListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnDrawListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the view tree is about to be drawn.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnDrawListener(android.view.OnDrawListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnDrawListener(android.view.OnDrawListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnGlobalFocusChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnGlobalFocusChangeListener (Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnGlobalFocusChangeListener(class Android.Views.ViewTreeObserver/IOnGlobalFocusChangeListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnGlobalFocusChangeListener(Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnGlobalFocusChangeListener : Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener -&gt; unit" Usage="viewTreeObserver.AddOnGlobalFocusChangeListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnGlobalFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the focus state within the view tree changes.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnGlobalFocusChangeListener(android.view.OnGlobalFocusChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnGlobalFocusChangeListener(android.view.OnGlobalFocusChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnGlobalLayoutListener">
      <MemberSignature Language="C#" Value="public void AddOnGlobalLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnGlobalLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnGlobalLayoutListener(Android.Views.ViewTreeObserver.IOnGlobalLayoutListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnGlobalLayoutListener : Android.Views.ViewTreeObserver.IOnGlobalLayoutListener -&gt; unit" Usage="viewTreeObserver.AddOnGlobalLayoutListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the global layout state or the visibility of views
            within the view tree changes</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnGlobalLayoutListener(android.view.OnGlobalLayoutListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.OnGlobalLayoutListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnPreDrawListener">
      <MemberSignature Language="C#" Value="public void AddOnPreDrawListener (Android.Views.ViewTreeObserver.IOnPreDrawListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnPreDrawListener(class Android.Views.ViewTreeObserver/IOnPreDrawListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnPreDrawListener(Android.Views.ViewTreeObserver.IOnPreDrawListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnPreDrawListener : Android.Views.ViewTreeObserver.IOnPreDrawListener -&gt; unit" Usage="viewTreeObserver.AddOnPreDrawListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnPreDrawListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the view tree is about to be drawn</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnPreDrawListener(android.view.OnPreDrawListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnPreDrawListener(android.view.OnPreDrawListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnScrollChangedListener">
      <MemberSignature Language="C#" Value="public void AddOnScrollChangedListener (Android.Views.ViewTreeObserver.IOnScrollChangedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnScrollChangedListener(class Android.Views.ViewTreeObserver/IOnScrollChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnScrollChangedListener(Android.Views.ViewTreeObserver.IOnScrollChangedListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnScrollChangedListener : Android.Views.ViewTreeObserver.IOnScrollChangedListener -&gt; unit" Usage="viewTreeObserver.AddOnScrollChangedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnScrollChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when a view has been scrolled.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnScrollChangedListener(android.view.OnScrollChangedListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnScrollChangedListener(android.view.OnScrollChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnSystemGestureExclusionRectsChangedListener">
      <MemberSignature Language="C#" Value="public void AddOnSystemGestureExclusionRectsChangedListener (Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnSystemGestureExclusionRectsChangedListener(class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnSystemGestureExclusionRectsChangedListener(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="member this.AddOnSystemGestureExclusionRectsChangedListener : Java.Util.Functions.IConsumer -&gt; unit" Usage="viewTreeObserver.AddOnSystemGestureExclusionRectsChangedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="listener">listener to add</param>
        <summary>Add a listener to be notified when the tree's <i>transformed</i> gesture exclusion rects
            change.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer%3Cjava.util.List%3Candroid.graphics.Rect%3E%3E)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer&lt;java.util.List&lt;android.graphics.Rect&gt;&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnTouchModeChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnTouchModeChangeListener (Android.Views.ViewTreeObserver.IOnTouchModeChangeListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnTouchModeChangeListener(class Android.Views.ViewTreeObserver/IOnTouchModeChangeListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnTouchModeChangeListener(Android.Views.ViewTreeObserver.IOnTouchModeChangeListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnTouchModeChangeListener : Android.Views.ViewTreeObserver.IOnTouchModeChangeListener -&gt; unit" Usage="viewTreeObserver.AddOnTouchModeChangeListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnTouchModeChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the invoked when the touch mode changes.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnTouchModeChangeListener(android.view.OnTouchModeChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnTouchModeChangeListener(android.view.OnTouchModeChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnWindowAttachListener">
      <MemberSignature Language="C#" Value="public void AddOnWindowAttachListener (Android.Views.ViewTreeObserver.IOnWindowAttachListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnWindowAttachListener(class Android.Views.ViewTreeObserver/IOnWindowAttachListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnWindowAttachListener(Android.Views.ViewTreeObserver.IOnWindowAttachListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnWindowAttachListener : Android.Views.ViewTreeObserver.IOnWindowAttachListener -&gt; unit" Usage="viewTreeObserver.AddOnWindowAttachListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnWindowAttachListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the view hierarchy is attached to a window.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnWindowAttachListener(android.view.OnWindowAttachListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnWindowAttachListener(android.view.OnWindowAttachListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnWindowFocusChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnWindowFocusChangeListener (Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnWindowFocusChangeListener(class Android.Views.ViewTreeObserver/IOnWindowFocusChangeListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.AddOnWindowFocusChangeListener(Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener)" />
      <MemberSignature Language="F#" Value="member this.AddOnWindowFocusChangeListener : Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener -&gt; unit" Usage="viewTreeObserver.AddOnWindowFocusChangeListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnWindowFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the window focus state within the view tree changes.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#addOnWindowFocusChangeListener(android.view.OnWindowFocusChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.addOnWindowFocusChangeListener(android.view.OnWindowFocusChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="DispatchOnDraw">
      <MemberSignature Language="C#" Value="public void DispatchOnDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchOnDraw() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.DispatchOnDraw" />
      <MemberSignature Language="F#" Value="member this.DispatchOnDraw : unit -&gt; unit" Usage="viewTreeObserver.DispatchOnDraw " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchOnDraw", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchOnDraw", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that the drawing pass is about to start.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#dispatchOnDraw()" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.dispatchOnDraw()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DispatchOnGlobalLayout">
      <MemberSignature Language="C#" Value="public void DispatchOnGlobalLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchOnGlobalLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.DispatchOnGlobalLayout" />
      <MemberSignature Language="F#" Value="member this.DispatchOnGlobalLayout : unit -&gt; unit" Usage="viewTreeObserver.DispatchOnGlobalLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchOnGlobalLayout", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchOnGlobalLayout", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that a global layout happened.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#dispatchOnGlobalLayout()" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.dispatchOnGlobalLayout()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchOnPreDraw">
      <MemberSignature Language="C#" Value="public bool DispatchOnPreDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DispatchOnPreDraw() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.DispatchOnPreDraw" />
      <MemberSignature Language="F#" Value="member this.DispatchOnPreDraw : unit -&gt; bool" Usage="viewTreeObserver.DispatchOnPreDraw " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchOnPreDraw", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchOnPreDraw", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that the drawing pass is about to start.</summary>
        <returns>True if the current draw should be canceled and rescheduled, false otherwise.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#dispatchOnPreDraw()" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.dispatchOnPreDraw()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public event EventHandler Draw;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Draw" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.Draw" />
      <MemberSignature Language="F#" Value="member this.Draw : EventHandler " Usage="member this.Draw : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalFocusChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs&gt; GlobalFocusChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/GlobalFocusChangeEventArgs&gt; GlobalFocusChange" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.GlobalFocusChange" />
      <MemberSignature Language="F#" Value="member this.GlobalFocusChange : EventHandler&lt;Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs&gt; " Usage="member this.GlobalFocusChange : System.EventHandler&lt;Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+GlobalFocusChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalLayout">
      <MemberSignature Language="C#" Value="public event EventHandler GlobalLayout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GlobalLayout" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.GlobalLayout" />
      <MemberSignature Language="F#" Value="member this.GlobalLayout : EventHandler " Usage="member this.GlobalLayout : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewTreeObserver.IsAlive" />
      <MemberSignature Language="F#" Value="member this.IsAlive : bool" Usage="Android.Views.ViewTreeObserver.IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAlive", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isAlive", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this ViewTreeObserver is alive.</summary>
        <value>True if this object is alive and be used, false otherwise.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#isAlive()" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.isAlive()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewTreeObserver.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Views.ViewTreeObserver.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDraw">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.PreDrawEventArgs&gt; PreDraw;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/PreDrawEventArgs&gt; PreDraw" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.PreDraw" />
      <MemberSignature Language="F#" Value="member this.PreDraw : EventHandler&lt;Android.Views.ViewTreeObserver.PreDrawEventArgs&gt; " Usage="member this.PreDraw : System.EventHandler&lt;Android.Views.ViewTreeObserver.PreDrawEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+PreDrawEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterFrameCommitCallback">
      <MemberSignature Language="C#" Value="public void RegisterFrameCommitCallback (Java.Lang.IRunnable callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterFrameCommitCallback(class Java.Lang.IRunnable callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RegisterFrameCommitCallback(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="member this.RegisterFrameCommitCallback : Java.Lang.IRunnable -&gt; unit" Usage="viewTreeObserver.RegisterFrameCommitCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("registerFrameCommitCallback", "(Ljava/lang/Runnable;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerFrameCommitCallback", "(Ljava/lang/Runnable;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to invoke when the frame is committed.</param>
        <summary>Adds a frame commit callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#registerFrameCommitCallback(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.registerFrameCommitCallback(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGlobalOnLayoutListener">
      <MemberSignature Language="C#" Value="public void RemoveGlobalOnLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveGlobalOnLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveGlobalOnLayoutListener(Android.Views.ViewTreeObserver.IOnGlobalLayoutListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveGlobalOnLayoutListener : Android.Views.ViewTreeObserver.IOnGlobalLayoutListener -&gt; unit" Usage="viewTreeObserver.RemoveGlobalOnLayoutListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeGlobalOnLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeGlobalOnLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed global layout callback</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeGlobalOnLayoutListener(android.view.OnGlobalLayoutListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeGlobalOnLayoutListener(android.view.OnGlobalLayoutListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalLayoutListener(.IOnGlobalLayoutListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnDrawListener">
      <MemberSignature Language="C#" Value="public void RemoveOnDrawListener (Android.Views.ViewTreeObserver.IOnDrawListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnDrawListener(class Android.Views.ViewTreeObserver/IOnDrawListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnDrawListener(Android.Views.ViewTreeObserver.IOnDrawListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnDrawListener : Android.Views.ViewTreeObserver.IOnDrawListener -&gt; unit" Usage="viewTreeObserver.RemoveOnDrawListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnDrawListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed pre-draw callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnDrawListener(android.view.OnDrawListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnDrawListener(android.view.OnDrawListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnDrawListener(.IOnDrawListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnGlobalFocusChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnGlobalFocusChangeListener (Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnGlobalFocusChangeListener(class Android.Views.ViewTreeObserver/IOnGlobalFocusChangeListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnGlobalFocusChangeListener(Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnGlobalFocusChangeListener : Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener -&gt; unit" Usage="viewTreeObserver.RemoveOnGlobalFocusChangeListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed focus change callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnGlobalFocusChangeListener(android.view.OnGlobalFocusChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnGlobalFocusChangeListener(android.view.OnGlobalFocusChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalFocusChangeListener(.IOnGlobalFocusChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnGlobalLayoutListener">
      <MemberSignature Language="C#" Value="public void RemoveOnGlobalLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnGlobalLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnGlobalLayoutListener(Android.Views.ViewTreeObserver.IOnGlobalLayoutListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnGlobalLayoutListener : Android.Views.ViewTreeObserver.IOnGlobalLayoutListener -&gt; unit" Usage="viewTreeObserver.RemoveOnGlobalLayoutListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed global layout callback</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnGlobalLayoutListener(android.view.OnGlobalLayoutListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnGlobalLayoutListener(android.view.OnGlobalLayoutListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalLayoutListener(.IOnGlobalLayoutListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnPreDrawListener">
      <MemberSignature Language="C#" Value="public void RemoveOnPreDrawListener (Android.Views.ViewTreeObserver.IOnPreDrawListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnPreDrawListener(class Android.Views.ViewTreeObserver/IOnPreDrawListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnPreDrawListener(Android.Views.ViewTreeObserver.IOnPreDrawListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnPreDrawListener : Android.Views.ViewTreeObserver.IOnPreDrawListener -&gt; unit" Usage="viewTreeObserver.RemoveOnPreDrawListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnPreDrawListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed pre-draw callback</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnPreDrawListener(android.view.OnPreDrawListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnPreDrawListener(android.view.OnPreDrawListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnPreDrawListener(.IOnPreDrawListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnScrollChangedListener">
      <MemberSignature Language="C#" Value="public void RemoveOnScrollChangedListener (Android.Views.ViewTreeObserver.IOnScrollChangedListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnScrollChangedListener(class Android.Views.ViewTreeObserver/IOnScrollChangedListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnScrollChangedListener(Android.Views.ViewTreeObserver.IOnScrollChangedListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnScrollChangedListener : Android.Views.ViewTreeObserver.IOnScrollChangedListener -&gt; unit" Usage="viewTreeObserver.RemoveOnScrollChangedListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnScrollChangedListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed scroll-changed callback</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnScrollChangedListener(android.view.OnScrollChangedListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnScrollChangedListener(android.view.OnScrollChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnScrollChangedListener(.IOnScrollChangedListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnSystemGestureExclusionRectsChangedListener">
      <MemberSignature Language="C#" Value="public void RemoveOnSystemGestureExclusionRectsChangedListener (Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnSystemGestureExclusionRectsChangedListener(class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnSystemGestureExclusionRectsChangedListener(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnSystemGestureExclusionRectsChangedListener : Java.Util.Functions.IConsumer -&gt; unit" Usage="viewTreeObserver.RemoveOnSystemGestureExclusionRectsChangedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Unsubscribe the given listener from gesture exclusion rect changes.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer%3Cjava.util.List%3Candroid.graphics.Rect%3E%3E)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer&lt;java.util.List&lt;android.graphics.Rect&gt;&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnTouchModeChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnTouchModeChangeListener (Android.Views.ViewTreeObserver.IOnTouchModeChangeListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnTouchModeChangeListener(class Android.Views.ViewTreeObserver/IOnTouchModeChangeListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnTouchModeChangeListener(Android.Views.ViewTreeObserver.IOnTouchModeChangeListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnTouchModeChangeListener : Android.Views.ViewTreeObserver.IOnTouchModeChangeListener -&gt; unit" Usage="viewTreeObserver.RemoveOnTouchModeChangeListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnTouchModeChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed touch mode change callback</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnTouchModeChangeListener(android.view.OnTouchModeChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnTouchModeChangeListener(android.view.OnTouchModeChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnTouchModeChangeListener(.IOnTouchModeChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnWindowAttachListener">
      <MemberSignature Language="C#" Value="public void RemoveOnWindowAttachListener (Android.Views.ViewTreeObserver.IOnWindowAttachListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnWindowAttachListener(class Android.Views.ViewTreeObserver/IOnWindowAttachListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnWindowAttachListener(Android.Views.ViewTreeObserver.IOnWindowAttachListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnWindowAttachListener : Android.Views.ViewTreeObserver.IOnWindowAttachListener -&gt; unit" Usage="viewTreeObserver.RemoveOnWindowAttachListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnWindowAttachListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed window attach callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnWindowAttachListener(android.view.OnWindowAttachListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnWindowAttachListener(android.view.OnWindowAttachListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnWindowAttachListener(.IOnWindowAttachListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnWindowFocusChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnWindowFocusChangeListener (Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener? victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnWindowFocusChangeListener(class Android.Views.ViewTreeObserver/IOnWindowFocusChangeListener victim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.RemoveOnWindowFocusChangeListener(Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener)" />
      <MemberSignature Language="F#" Value="member this.RemoveOnWindowFocusChangeListener : Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener -&gt; unit" Usage="viewTreeObserver.RemoveOnWindowFocusChangeListener victim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnWindowFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed window focus change callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#removeOnWindowFocusChangeListener(android.view.OnWindowFocusChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.removeOnWindowFocusChangeListener(android.view.OnWindowFocusChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <see cref="P:Android.Views.ViewTreeObserver.IsAlive" /> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnWindowFocusChangeListener(.IOnWindowFocusChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScrollChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ScrollChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrollChanged" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.ScrollChanged" />
      <MemberSignature Language="F#" Value="member this.ScrollChanged : EventHandler " Usage="member this.ScrollChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewTreeObserver.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Views.ViewTreeObserver.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewTreeObserver.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Views.ViewTreeObserver.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchModeChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.TouchModeChangeEventArgs&gt; TouchModeChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/TouchModeChangeEventArgs&gt; TouchModeChange" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.TouchModeChange" />
      <MemberSignature Language="F#" Value="member this.TouchModeChange : EventHandler&lt;Android.Views.ViewTreeObserver.TouchModeChangeEventArgs&gt; " Usage="member this.TouchModeChange : System.EventHandler&lt;Android.Views.ViewTreeObserver.TouchModeChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+TouchModeChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterFrameCommitCallback">
      <MemberSignature Language="C#" Value="public bool UnregisterFrameCommitCallback (Java.Lang.IRunnable callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterFrameCommitCallback(class Java.Lang.IRunnable callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewTreeObserver.UnregisterFrameCommitCallback(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="member this.UnregisterFrameCommitCallback : Java.Lang.IRunnable -&gt; bool" Usage="viewTreeObserver.UnregisterFrameCommitCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterFrameCommitCallback", "(Ljava/lang/Runnable;)Z", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterFrameCommitCallback", "(Ljava/lang/Runnable;)Z", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to remove</param>
        <summary>Attempts to remove the given callback from the list of pending frame complete callbacks.</summary>
        <returns>Whether or not the callback was removed. If this returns true the callback will
                    not be invoked. If false is returned then the callback was either never added
                    or may already be pending execution and was unable to be removed</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewTreeObserver#unregisterFrameCommitCallback(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>android.view.ViewTreeObserver.unregisterFrameCommitCallback(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowAttached">
      <MemberSignature Language="C#" Value="public event EventHandler WindowAttached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WindowAttached" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.WindowAttached" />
      <MemberSignature Language="F#" Value="member this.WindowAttached : EventHandler " Usage="member this.WindowAttached : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowDetached">
      <MemberSignature Language="C#" Value="public event EventHandler WindowDetached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WindowDetached" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.WindowDetached" />
      <MemberSignature Language="F#" Value="member this.WindowDetached : EventHandler " Usage="member this.WindowDetached : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFocusChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs&gt; WindowFocusChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/WindowFocusChangeEventArgs&gt; WindowFocusChange" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewTreeObserver.WindowFocusChange" />
      <MemberSignature Language="F#" Value="member this.WindowFocusChange : EventHandler&lt;Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs&gt; " Usage="member this.WindowFocusChange : System.EventHandler&lt;Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+WindowFocusChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
