<Type Name="TextureView" FullName="Android.Views.TextureView">
  <TypeSignature Language="C#" Value="public class TextureView : Android.Views.View" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextureView extends Android.Views.View" />
  <TypeSignature Language="DocId" Value="T:Android.Views.TextureView" />
  <TypeSignature Language="F#" Value="type TextureView = class&#xA;    inherit View" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.View</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/TextureView", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/TextureView", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="14">
    <summary>A TextureView can be used to display a content stream, such as that
            coming from a camera preview, a video, or an OpenGL scene.</summary>
    <remarks>
      <para>A TextureView can be used to display a content stream, such as that
            coming from a camera preview, a video, or an OpenGL scene. The content stream
            can come from the application's process as well as a remote process.</para>
      <para>TextureView can only be used in a hardware accelerated window. When
            rendered in software, TextureView will draw nothing.</para>
      <para>&lt;b&gt;TextureView vs. SurfaceView Capabilities&lt;/b&gt;</para>
      <para>&lt;table&gt;
                &lt;tr&gt;
                  &lt;th&gt;&amp;nbsp;&lt;/th&gt;
                  &lt;th style="text-align: center;"&gt;TextureView&lt;/th&gt;
                  &lt;th style="text-align: center;"&gt;SurfaceView&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;Supports alpha&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;X&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;&amp;nbsp;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;Supports rotations&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;X&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;&amp;nbsp;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;Supports clipping&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;X&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;&amp;nbsp;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;HDR support&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;Limited (on Android T+)&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;Full&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;Renders DRM content&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td style="text-align: center;"&gt;X&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/table&gt;</para>
      <para>Unlike <c>SurfaceView</c>, TextureView does not create a separate
            window but behaves as a regular View. This key difference allows a
            TextureView to have translucency, arbitrary rotations, and complex
            clipping. For example, you can make a TextureView semi-translucent by
            calling <c>myView.setAlpha(0.5f)</c>.</para>
      <para>One implication of this integration of TextureView into the view
            hierarchy is that it may have slower performance than
            SurfaceView. TextureView contents must be copied, internally, from the
            underlying surface into the view displaying those contents. For
            that reason, &lt;b&gt;SurfaceView is recommended as a more general solution
            to problems requiring rendering to surfaces.&lt;/b&gt;</para>
      <para>Using a TextureView is simple: all you need to do is get its
            <c>SurfaceTexture</c>. The <c>SurfaceTexture</c> can then be used to
            render content. The following example demonstrates how to render a video
            into a TextureView:</para>
      <code lang="text/java">public class MyActivity extends Activity implements TextureView.SurfaceTextureListener {
                 private MediaPlayer mMediaPlayer;
                 private TextureView mTextureView;
            
                 protected void onCreate(Bundle savedInstanceState) {
                     super.onCreate(savedInstanceState);
            
                     mMediaPlayer = new MediaPlayer();
            
                     mTextureView = new TextureView(this);
                     mTextureView.setSurfaceTextureListener(this);
                     setContentView(mTextureView);
                 }
            
                 public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surfaceTexture,
                                                       int width, int height) {
                     AssetFileDescriptor fileDescriptor = // get file descriptor
                     mMediaPlayer.setDataSource(fileDescriptor);
                     mMediaPlayer.setSurface(new Surface(surfaceTexture));
                     mMediaPlayer.prepareAsync();
                     mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                         &amp;#64;Override
                         public void onPrepared(MediaPlayer mp) {
                             mMediaPlayer.start();
                         }
                     });
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                 }
            
                &amp;#64;Override
                public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surfaceTexture,
                                                        int width, int height) {
                    // Handle size change depending on media needs
                }
            
                &amp;#64;Override
                public boolean onSurfaceTextureDestroyed(@NonNull SurfaceTexture surfaceTexture) {
                    // Release unneeded resources
                    mMediaPlayer.stop();
                    mMediaPlayer.release();
                    return true;
                }
            
                &amp;#64;Override
                public void onSurfaceTextureUpdated(@NonNull SurfaceTexture surfaceTexture) {
                     // Invoked every time there's a new video frame
                }
            
             }
            </code>
      <para>Similarly, TextureView can supply the surface needed for GL rendering or
            camera previews. Camera2 APIs require the surface created by TextureView,
            although developers are recommended to use the CameraX APIs instead, for which
            PreviewView creates its own TextureView or SurfaceView internally.</para>
      <para>A TextureView's SurfaceTexture can be obtained either by invoking
            <c>#getSurfaceTexture()</c> or by using a <c>SurfaceTextureListener</c>.
            It is important to know that a SurfaceTexture is available only after the
            TextureView is attached to a window (and <c>#onAttachedToWindow()</c> has
            been invoked.) It is therefore highly recommended you use a listener to
            be notified when the SurfaceTexture becomes available.</para>
      <para>It is important to note that only one producer can use the TextureView.
            For instance, if you use a TextureView to display the camera preview, you
            cannot use <c>#lockCanvas()</c> to draw onto the TextureView at the same
            time.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/TextureView" title="Reference documentation">Java documentation for <code>android.view.TextureView</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureView (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.#ctor(Android.Content.Context)" />
      <MemberSignature Language="F#" Value="new Android.Views.TextureView : Android.Content.Context -&gt; Android.Views.TextureView" Usage="new Android.Views.TextureView context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">The context to associate this view with.</param>
        <summary>Creates a new TextureView.</summary>
        <remarks>
          <para>Creates a new TextureView.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#TextureView(android.content.Context)" title="Reference documentation">Java documentation for <code>android.view.TextureView.TextureView(android.content.Context)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureView (Android.Content.Context context, Android.Util.IAttributeSet? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)" />
      <MemberSignature Language="F#" Value="new Android.Views.TextureView : Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.TextureView" Usage="new Android.Views.TextureView (context, attrs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">The context to associate this view with.</param>
        <param name="attrs">The attributes of the XML tag that is inflating the view.</param>
        <summary>Creates a new TextureView.</summary>
        <remarks>
          <para>Creates a new TextureView.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#TextureView(android.content.Context,%20android.util.AttributeSet)" title="Reference documentation">Java documentation for <code>android.view.TextureView.TextureView(android.content.Context, android.util.AttributeSet)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextureView (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Views.TextureView : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Views.TextureView" Usage="new Android.Views.TextureView (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureView (Android.Content.Context context, Android.Util.IAttributeSet? attrs, int defStyleAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.#ctor(Android.Content.Context,Android.Util.IAttributeSet,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Views.TextureView : Android.Content.Context * Android.Util.IAttributeSet * int -&gt; Android.Views.TextureView" Usage="new Android.Views.TextureView (context, attrs, defStyleAttr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyleAttr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">The context to associate this view with.</param>
        <param name="attrs">The attributes of the XML tag that is inflating the view.</param>
        <param name="defStyleAttr">An attribute in the current theme that contains a
                   reference to a style resource that supplies default values for
                   the view. Can be 0 to not look for defaults.</param>
        <summary>Creates a new TextureView.</summary>
        <remarks>
          <para>Creates a new TextureView.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#TextureView(android.content.Context,%20android.util.AttributeSet,%20int)" title="Reference documentation">Java documentation for <code>android.view.TextureView.TextureView(android.content.Context, android.util.AttributeSet, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureView (Android.Content.Context context, Android.Util.IAttributeSet? attrs, int defStyleAttr, int defStyleRes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr, int32 defStyleRes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.#ctor(Android.Content.Context,Android.Util.IAttributeSet,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Views.TextureView : Android.Content.Context * Android.Util.IAttributeSet * int * int -&gt; Android.Views.TextureView" Usage="new Android.Views.TextureView (context, attrs, defStyleAttr, defStyleRes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyleAttr" Type="System.Int32" />
        <Parameter Name="defStyleRes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">The context to associate this view with.</param>
        <param name="attrs">The attributes of the XML tag that is inflating the view.</param>
        <param name="defStyleAttr">An attribute in the current theme that contains a
                   reference to a style resource that supplies default values for
                   the view. Can be 0 to not look for defaults.</param>
        <param name="defStyleRes">A resource identifier of a style resource that
                   supplies default values for the view, used only if
                   defStyleAttr is 0 or can not be found in the theme. Can be 0
                   to not look for defaults.</param>
        <summary>Creates a new TextureView.</summary>
        <remarks>
          <para>Creates a new TextureView.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#TextureView(android.content.Context,%20android.util.AttributeSet,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.TextureView.TextureView(android.content.Context, android.util.AttributeSet, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitmap">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Bitmap? Bitmap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Bitmap Bitmap" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.Bitmap" />
      <MemberSignature Language="F#" Value="member this.Bitmap : Android.Graphics.Bitmap" Usage="Android.Views.TextureView.Bitmap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getBitmap", "()Landroid/graphics/Bitmap;", "GetGetBitmapHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getBitmap", "()Landroid/graphics/Bitmap;", "GetGetBitmapHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c>android.graphics.Bitmap</c> representation of the content
            of the associated surface texture.</summary>
        <value>A valid <c>Bitmap.Config#ARGB_8888</c> bitmap, or null if the surface
                    texture is not available or the width &amp;lt;= 0 or the height &amp;lt;= 0</value>
        <remarks>
          <para>Returns a <c>android.graphics.Bitmap</c> representation of the content
            of the associated surface texture. If the surface texture is not available,
            this method returns null.</para>
          <para>The bitmap returned by this method uses the <c>Bitmap.Config#ARGB_8888</c>
            pixel format and its dimensions are the same as this view's.</para>
          <para>&lt;strong&gt;Do not&lt;/strong&gt; invoke this method from a drawing method
            (<c>#onDraw(android.graphics.Canvas)</c> for instance).</para>
          <para>If an error occurs during the copy, an empty bitmap will be returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getBitmap()" title="Reference documentation">Java documentation for <code>android.view.TextureView.getBitmap()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.TextureView.IsAvailable" />
        <altmember cref="M:Android.Views.TextureView.GetBitmap(Android.Graphics.Bitmap)" />
        <altmember cref="M:Android.Views.TextureView.GetBitmap(System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override sealed void Draw (Android.Graphics.Canvas? canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.Draw(Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="override this.Draw : Android.Graphics.Canvas -&gt; unit" Usage="textureView.Draw canvas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The Canvas to which the View is rendered.</param>
        <summary>Subclasses of TextureView cannot do their own rendering
            with the <c>Canvas</c> object.</summary>
        <remarks>
          <para>Subclasses of TextureView cannot do their own rendering
            with the <c>Canvas</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#draw(android.graphics.Canvas)" title="Reference documentation">Java documentation for <code>android.view.TextureView.draw(android.graphics.Canvas)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="GetBitmap">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Bitmap GetBitmap (Android.Graphics.Bitmap bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Bitmap GetBitmap(class Android.Graphics.Bitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.GetBitmap(Android.Graphics.Bitmap)" />
      <MemberSignature Language="F#" Value="abstract member GetBitmap : Android.Graphics.Bitmap -&gt; Android.Graphics.Bitmap&#xA;override this.GetBitmap : Android.Graphics.Bitmap -&gt; Android.Graphics.Bitmap" Usage="textureView.GetBitmap bitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBitmap", "(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;", "GetGetBitmap_Landroid_graphics_Bitmap_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBitmap", "(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;", "GetGetBitmap_Landroid_graphics_Bitmap_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to copy the content of the surface texture into,
                          cannot be null, all configurations are supported</param>
        <summary>Copies the content of this view's surface texture into the specified
            bitmap.</summary>
        <returns>The bitmap specified as a parameter</returns>
        <remarks>
          <para>Copies the content of this view's surface texture into the specified
            bitmap. If the surface texture is not available, the copy is not executed.
            The content of the surface texture will be scaled to fit exactly inside
            the specified bitmap.</para>
          <para>&lt;strong&gt;Do not&lt;/strong&gt; invoke this method from a drawing method
            (<c>#onDraw(android.graphics.Canvas)</c> for instance).</para>
          <para>If an error occurs, the bitmap is left unchanged.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getBitmap(android.graphics.Bitmap)" title="Reference documentation">Java documentation for <code>android.view.TextureView.getBitmap(android.graphics.Bitmap)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="T:Java.Lang.IllegalStateException">if the hardware rendering context cannot be
         acquired to capture the bitmap
</exception>
        <altmember cref="P:Android.Views.TextureView.IsAvailable" />
        <altmember cref="M:Android.Views.TextureView.GetBitmap(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.TextureView.Bitmap" />
      </Docs>
    </Member>
    <Member MemberName="GetBitmap">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Bitmap? GetBitmap (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Bitmap GetBitmap(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.GetBitmap(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetBitmap : int * int -&gt; Android.Graphics.Bitmap&#xA;override this.GetBitmap : int * int -&gt; Android.Graphics.Bitmap" Usage="textureView.GetBitmap (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBitmap", "(II)Landroid/graphics/Bitmap;", "GetGetBitmap_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBitmap", "(II)Landroid/graphics/Bitmap;", "GetGetBitmap_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width of the bitmap to create</param>
        <param name="height">The height of the bitmap to create</param>
        <summary>Returns a <c>android.graphics.Bitmap</c> representation of the content
            of the associated surface texture.</summary>
        <returns>A valid <c>Bitmap.Config#ARGB_8888</c> bitmap, or null if the surface
                    texture is not available or width is &amp;lt;= 0 or height is &amp;lt;= 0</returns>
        <remarks>
          <para>Returns a <c>android.graphics.Bitmap</c> representation of the content
            of the associated surface texture. If the surface texture is not available,
            this method returns null.</para>
          <para>The bitmap returned by this method uses the <c>Bitmap.Config#ARGB_8888</c>
            pixel format.</para>
          <para>&lt;strong&gt;Do not&lt;/strong&gt; invoke this method from a drawing method
            (<c>#onDraw(android.graphics.Canvas)</c> for instance).</para>
          <para>If an error occurs during the copy, an empty bitmap will be returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getBitmap(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.TextureView.getBitmap(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.TextureView.IsAvailable" />
        <altmember cref="M:Android.Views.TextureView.GetBitmap(Android.Graphics.Bitmap)" />
        <altmember cref="P:Android.Views.TextureView.Bitmap" />
      </Docs>
    </Member>
    <Member MemberName="GetTransform">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Matrix GetTransform (Android.Graphics.Matrix? transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Matrix GetTransform(class Android.Graphics.Matrix transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.GetTransform(Android.Graphics.Matrix)" />
      <MemberSignature Language="F#" Value="abstract member GetTransform : Android.Graphics.Matrix -&gt; Android.Graphics.Matrix&#xA;override this.GetTransform : Android.Graphics.Matrix -&gt; Android.Graphics.Matrix" Usage="textureView.GetTransform transform" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTransform", "(Landroid/graphics/Matrix;)Landroid/graphics/Matrix;", "GetGetTransform_Landroid_graphics_Matrix_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTransform", "(Landroid/graphics/Matrix;)Landroid/graphics/Matrix;", "GetGetTransform_Landroid_graphics_Matrix_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="Android.Graphics.Matrix" />
      </Parameters>
      <Docs>
        <param name="transform">The <c>Matrix</c> in which to copy the current
                   transform. Can be null.</param>
        <summary>Returns the transform associated with this texture view.</summary>
        <returns>The specified matrix if not null or a new <c>Matrix</c>
                    instance otherwise.</returns>
        <remarks>
          <para>Returns the transform associated with this texture view.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getTransform(android.graphics.Matrix)" title="Reference documentation">Java documentation for <code>android.view.TextureView.getTransform(android.graphics.Matrix)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.TextureView.SetTransform(Android.Graphics.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public virtual bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.IsAvailable" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Android.Views.TextureView.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAvailable", "()Z", "GetIsAvailableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isAvailable", "()Z", "GetIsAvailableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the <c>SurfaceTexture</c> associated with this
            TextureView is available for rendering.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns true if the <c>SurfaceTexture</c> associated with this
            TextureView is available for rendering. When this method returns
            true, <c>#getSurfaceTexture()</c> returns a valid surface texture.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#isAvailable()" title="Reference documentation">Java documentation for <code>android.view.TextureView.isAvailable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Views.TextureView.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockCanvas">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Canvas? LockCanvas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Canvas LockCanvas() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.LockCanvas" />
      <MemberSignature Language="F#" Value="abstract member LockCanvas : unit -&gt; Android.Graphics.Canvas&#xA;override this.LockCanvas : unit -&gt; Android.Graphics.Canvas" Usage="textureView.LockCanvas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lockCanvas", "()Landroid/graphics/Canvas;", "GetLockCanvasHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lockCanvas", "()Landroid/graphics/Canvas;", "GetLockCanvasHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Canvas</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start editing the pixels in the surface.</summary>
        <returns>A Canvas used to draw into the surface, or null if the surface cannot be locked for
            drawing (see <c>#isAvailable()</c>).</returns>
        <remarks>
          <para>Start editing the pixels in the surface.  The returned Canvas can be used
            to draw into the surface's bitmap.  A null is returned if the surface has
            not been created or otherwise cannot be edited. You will usually need
            to implement
            <c>SurfaceTextureListener#onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)</c>
            to find out when the Surface is available for use.</para>
          <para>The content of the Surface is never preserved between unlockCanvas()
            and lockCanvas(), for this reason, every pixel within the Surface area
            must be written. The only exception to this rule is when a dirty
            rectangle is specified, in which case, non-dirty pixels will be
            preserved.</para>
          <para>This method can only be used if the underlying surface is not already
            owned by another producer. For instance, if the TextureView is being used
            to render the camera's preview you cannot invoke this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#lockCanvas()" title="Reference documentation">Java documentation for <code>android.view.TextureView.lockCanvas()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.TextureView.LockCanvas(Android.Graphics.Rect)" />
        <altmember cref="M:Android.Views.TextureView.UnlockCanvasAndPost(Android.Graphics.Canvas)" />
      </Docs>
    </Member>
    <Member MemberName="LockCanvas">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Canvas? LockCanvas (Android.Graphics.Rect? dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Canvas LockCanvas(class Android.Graphics.Rect dirty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.LockCanvas(Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member LockCanvas : Android.Graphics.Rect -&gt; Android.Graphics.Canvas&#xA;override this.LockCanvas : Android.Graphics.Rect -&gt; Android.Graphics.Canvas" Usage="textureView.LockCanvas dirty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lockCanvas", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;", "GetLockCanvas_Landroid_graphics_Rect_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lockCanvas", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;", "GetLockCanvas_Landroid_graphics_Rect_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Canvas</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="dirty">Area of the surface that will be modified. If null the area of the entire
                         surface is used.</param>
        <summary>Just like <c>#lockCanvas()</c> but allows specification of a dirty
            rectangle.</summary>
        <returns>A Canvas used to draw into the surface, or null if the surface cannot be locked for
            drawing (see <c>#isAvailable()</c>).</returns>
        <remarks>
          <para>Just like <c>#lockCanvas()</c> but allows specification of a dirty
            rectangle. Every pixel within that rectangle must be written; however
            pixels outside the dirty rectangle will be preserved by the next call
            to lockCanvas().
            
            This method can return null if the underlying surface texture is not
            available (see <c>#isAvailable()</c> or if the surface texture is
            already connected to an image producer (for instance: the camera,
            OpenGL, a media player, etc.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#lockCanvas(android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.TextureView.lockCanvas(android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.TextureView.LockCanvas" />
        <altmember cref="M:Android.Views.TextureView.UnlockCanvasAndPost(Android.Graphics.Canvas)" />
        <altmember cref="P:Android.Views.TextureView.IsAvailable" />
      </Docs>
    </Member>
    <Member MemberName="OnDraw">
      <MemberSignature Language="C#" Value="protected override sealed void OnDraw (Android.Graphics.Canvas? canvas);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDraw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.OnDraw(Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="override this.OnDraw : Android.Graphics.Canvas -&gt; unit" Usage="textureView.OnDraw canvas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDraw", "(Landroid/graphics/Canvas;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onDraw", "(Landroid/graphics/Canvas;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The Canvas to which the View is rendered.</param>
        <summary>Subclasses of TextureView cannot do their own rendering
            with the <c>Canvas</c> object.</summary>
        <remarks>
          <para>Subclasses of TextureView cannot do their own rendering
            with the <c>Canvas</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#onDraw(android.graphics.Canvas)" title="Reference documentation">Java documentation for <code>android.view.TextureView.onDraw(android.graphics.Canvas)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetOpaque">
      <MemberSignature Language="C#" Value="public virtual void SetOpaque (bool opaque);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOpaque(bool opaque) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.SetOpaque(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetOpaque : bool -&gt; unit&#xA;override this.SetOpaque : bool -&gt; unit" Usage="textureView.SetOpaque opaque" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOpaque", "(Z)V", "GetSetOpaque_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOpaque", "(Z)V", "GetSetOpaque_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opaque" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="opaque">True if the content of this TextureView is opaque,
                          false otherwise</param>
        <summary>Indicates whether the content of this TextureView is opaque.</summary>
        <remarks>
          <para>Indicates whether the content of this TextureView is opaque. The
            content is assumed to be opaque by default.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#setOpaque(boolean)" title="Reference documentation">Java documentation for <code>android.view.TextureView.setOpaque(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetTransform">
      <MemberSignature Language="C#" Value="public virtual void SetTransform (Android.Graphics.Matrix? transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTransform(class Android.Graphics.Matrix transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.SetTransform(Android.Graphics.Matrix)" />
      <MemberSignature Language="F#" Value="abstract member SetTransform : Android.Graphics.Matrix -&gt; unit&#xA;override this.SetTransform : Android.Graphics.Matrix -&gt; unit" Usage="textureView.SetTransform transform" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTransform", "(Landroid/graphics/Matrix;)V", "GetSetTransform_Landroid_graphics_Matrix_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTransform", "(Landroid/graphics/Matrix;)V", "GetSetTransform_Landroid_graphics_Matrix_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="Android.Graphics.Matrix" />
      </Parameters>
      <Docs>
        <param name="transform">The transform to apply to the content of
                   this view. If null the transform will be set to identity.</param>
        <summary>Sets the transform to associate with this texture view.</summary>
        <remarks>
          <para>Sets the transform to associate with this texture view.
            The specified transform applies to the underlying surface
            texture and does not affect the size or position of the view
            itself, only of its content.</para>
          <para>Some transforms might prevent the content from drawing
            all the pixels contained within this view's bounds. In such
            situations, make sure this texture view is not marked opaque.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#setTransform(android.graphics.Matrix)" title="Reference documentation">Java documentation for <code>android.view.TextureView.setTransform(android.graphics.Matrix)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.TextureView.GetTransform(Android.Graphics.Matrix)" />
        <altmember cref="M:Android.Views.TextureView.SetOpaque(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceTexture">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.SurfaceTexture? SurfaceTexture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.SurfaceTexture SurfaceTexture" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.SurfaceTexture" />
      <MemberSignature Language="F#" Value="member this.SurfaceTexture : Android.Graphics.SurfaceTexture with get, set" Usage="Android.Views.TextureView.SurfaceTexture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSurfaceTexture", "()Landroid/graphics/SurfaceTexture;", "GetGetSurfaceTextureHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSurfaceTexture", "()Landroid/graphics/SurfaceTexture;", "GetGetSurfaceTextureHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setSurfaceTexture", "(Landroid/graphics/SurfaceTexture;)V", "GetSetSurfaceTexture_Landroid_graphics_SurfaceTexture_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setSurfaceTexture", "(Landroid/graphics/SurfaceTexture;)V", "GetSetSurfaceTexture_Landroid_graphics_SurfaceTexture_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.SurfaceTexture</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="surfaceTexture">The <c>SurfaceTexture</c> that the view should use.</param>
        <summary>Returns the <c>SurfaceTexture</c> used by this view. -or- Set the <c>SurfaceTexture</c> for this view to use.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns the <c>SurfaceTexture</c> used by this view. This method
            may return null if the view is not attached to a window or if the surface
            texture has not been initialized yet.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getSurfaceTexture()" title="Reference documentation">Java documentation for <code>android.view.TextureView.getSurfaceTexture()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the <c>SurfaceTexture</c> for this view to use. If a <c>SurfaceTexture</c> is already being used by this view, it is immediately
            released and not usable any more.  The <c>SurfaceTextureListener#onSurfaceTextureDestroyed</c> callback is &lt;b&gt;not&lt;/b&gt;
            called for the previous <c>SurfaceTexture</c>.  Similarly, the <c>SurfaceTextureListener#onSurfaceTextureAvailable</c> callback is &lt;b&gt;not&lt;/b&gt;
            called for the <c>SurfaceTexture</c> passed to setSurfaceTexture.
            
            The <c>SurfaceTexture</c> object must be detached from all OpenGL ES
            contexts prior to calling this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#setSurfaceTexture(android.graphics.SurfaceTexture)" title="Reference documentation">Java documentation for <code>android.view.TextureView.setSurfaceTexture(android.graphics.SurfaceTexture)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.TextureView.IsAvailable" />
        <altmember cref="M:Android.Graphics.SurfaceTexture.DetachFromGLContext" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceTextureAvailable">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.TextureView.SurfaceTextureAvailableEventArgs&gt; SurfaceTextureAvailable;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.TextureView/SurfaceTextureAvailableEventArgs&gt; SurfaceTextureAvailable" />
      <MemberSignature Language="DocId" Value="E:Android.Views.TextureView.SurfaceTextureAvailable" />
      <MemberSignature Language="F#" Value="member this.SurfaceTextureAvailable : EventHandler&lt;Android.Views.TextureView.SurfaceTextureAvailableEventArgs&gt; " Usage="member this.SurfaceTextureAvailable : System.EventHandler&lt;Android.Views.TextureView.SurfaceTextureAvailableEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.TextureView+SurfaceTextureAvailableEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SurfaceTextureDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.TextureView.SurfaceTextureDestroyedEventArgs&gt; SurfaceTextureDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.TextureView/SurfaceTextureDestroyedEventArgs&gt; SurfaceTextureDestroyed" />
      <MemberSignature Language="DocId" Value="E:Android.Views.TextureView.SurfaceTextureDestroyed" />
      <MemberSignature Language="F#" Value="member this.SurfaceTextureDestroyed : EventHandler&lt;Android.Views.TextureView.SurfaceTextureDestroyedEventArgs&gt; " Usage="member this.SurfaceTextureDestroyed : System.EventHandler&lt;Android.Views.TextureView.SurfaceTextureDestroyedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.TextureView+SurfaceTextureDestroyedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SurfaceTextureListener">
      <MemberSignature Language="C#" Value="public virtual Android.Views.TextureView.ISurfaceTextureListener? SurfaceTextureListener { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.TextureView/ISurfaceTextureListener SurfaceTextureListener" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.SurfaceTextureListener" />
      <MemberSignature Language="F#" Value="member this.SurfaceTextureListener : Android.Views.TextureView.ISurfaceTextureListener with get, set" Usage="Android.Views.TextureView.SurfaceTextureListener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSurfaceTextureListener", "()Landroid/view/TextureView$SurfaceTextureListener;", "GetGetSurfaceTextureListenerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSurfaceTextureListener", "()Landroid/view/TextureView$SurfaceTextureListener;", "GetGetSurfaceTextureListenerHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setSurfaceTextureListener", "(Landroid/view/TextureView$SurfaceTextureListener;)V", "GetSetSurfaceTextureListener_Landroid_view_TextureView_SurfaceTextureListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setSurfaceTextureListener", "(Landroid/view/TextureView$SurfaceTextureListener;)V", "GetSetSurfaceTextureListener_Landroid_view_TextureView_SurfaceTextureListener_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextureView+ISurfaceTextureListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>SurfaceTextureListener</c> currently associated with this
            texture view. -or- Sets the <c>SurfaceTextureListener</c> used to listen to surface
            texture events.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#getSurfaceTextureListener()" title="Reference documentation">Java documentation for <code>android.view.TextureView.getSurfaceTextureListener()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#setSurfaceTextureListener(android.view.SurfaceTextureListener)" title="Reference documentation">Java documentation for <code>android.view.TextureView.setSurfaceTextureListener(android.view.SurfaceTextureListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Views.TextureView.SurfaceTextureListener" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceTextureSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs&gt; SurfaceTextureSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.TextureView/SurfaceTextureSizeChangedEventArgs&gt; SurfaceTextureSizeChanged" />
      <MemberSignature Language="DocId" Value="E:Android.Views.TextureView.SurfaceTextureSizeChanged" />
      <MemberSignature Language="F#" Value="member this.SurfaceTextureSizeChanged : EventHandler&lt;Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs&gt; " Usage="member this.SurfaceTextureSizeChanged : System.EventHandler&lt;Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.TextureView+SurfaceTextureSizeChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SurfaceTextureUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.TextureView.SurfaceTextureUpdatedEventArgs&gt; SurfaceTextureUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.TextureView/SurfaceTextureUpdatedEventArgs&gt; SurfaceTextureUpdated" />
      <MemberSignature Language="DocId" Value="E:Android.Views.TextureView.SurfaceTextureUpdated" />
      <MemberSignature Language="F#" Value="member this.SurfaceTextureUpdated : EventHandler&lt;Android.Views.TextureView.SurfaceTextureUpdatedEventArgs&gt; " Usage="member this.SurfaceTextureUpdated : System.EventHandler&lt;Android.Views.TextureView.SurfaceTextureUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.TextureView+SurfaceTextureUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Views.TextureView.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Views.TextureView.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Views.TextureView.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockCanvasAndPost">
      <MemberSignature Language="C#" Value="public virtual void UnlockCanvasAndPost (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnlockCanvasAndPost(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.TextureView.UnlockCanvasAndPost(Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="abstract member UnlockCanvasAndPost : Android.Graphics.Canvas -&gt; unit&#xA;override this.UnlockCanvasAndPost : Android.Graphics.Canvas -&gt; unit" Usage="textureView.UnlockCanvasAndPost canvas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unlockCanvasAndPost", "(Landroid/graphics/Canvas;)V", "GetUnlockCanvasAndPost_Landroid_graphics_Canvas_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unlockCanvasAndPost", "(Landroid/graphics/Canvas;)V", "GetUnlockCanvasAndPost_Landroid_graphics_Canvas_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The Canvas previously returned by lockCanvas()</param>
        <summary>Finish editing pixels in the surface.</summary>
        <remarks>
          <para>Finish editing pixels in the surface. After this call, the surface's
            current pixels will be shown on the screen, but its content is lost,
            in particular there is no guarantee that the content of the Surface
            will remain unchanged when lockCanvas() is called again.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/TextureView#unlockCanvasAndPost(android.graphics.Canvas)" title="Reference documentation">Java documentation for <code>android.view.TextureView.unlockCanvasAndPost(android.graphics.Canvas)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.TextureView.LockCanvas" />
        <altmember cref="M:Android.Views.TextureView.LockCanvas(Android.Graphics.Rect)" />
      </Docs>
    </Member>
  </Members>
</Type>
