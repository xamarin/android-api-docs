<Type Name="Choreographer+IFrameCallback" FullName="Android.Views.Choreographer+IFrameCallback">
  <TypeSignature Language="VB.NET" Value="Public Interface Choreographer.IFrameCallback&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public: interface class Choreographer::IFrameCallback : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface Choreographer.IFrameCallback : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract beforefieldinit Choreographer/IFrameCallback implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.Choreographer.IFrameCallback" />
  <TypeSignature Language="F#" Value="type Choreographer.IFrameCallback = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/Choreographer$FrameCallback", "", "Android.Views.Choreographer/IFrameCallbackInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/Choreographer$FrameCallback", "", "Android.Views.Choreographer/IFrameCallbackInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implement this interface to receive a callback when a new display frame is
            being rendered.</summary>
    <remarks>
      <para>Implement this interface to receive a callback when a new display frame is
            being rendered.  The callback is invoked on the <c>Looper</c> thread to
            which the <c>Choreographer</c> is attached.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/Choreographer.FrameCallback" title="Reference documentation">Java documentation for <code>android.view.Choreographer.FrameCallback</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="DoFrame">
      <MemberSignature Language="VB.NET" Value="Public Sub DoFrame (frameTimeNanos As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoFrame(long frameTimeNanos);" />
      <MemberSignature Language="C#" Value="public void DoFrame (long frameTimeNanos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoFrame(int64 frameTimeNanos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.Choreographer.IFrameCallback.DoFrame(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member DoFrame : int64 -&gt; unit" Usage="iFrameCallback.DoFrame frameTimeNanos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("doFrame", "(J)V", "GetDoFrame_JHandler:Android.Views.Choreographer/IFrameCallbackInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("doFrame", "(J)V", "GetDoFrame_JHandler:Android.Views.Choreographer/IFrameCallbackInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frameTimeNanos" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="frameTimeNanos">The time in nanoseconds when the frame started being rendered,
            in the <c>System#nanoTime()</c> timebase.  Divide this value by <c>1000000</c>
            to convert it to the <c>SystemClock#uptimeMillis()</c> time base.</param>
        <summary>Called when a new display frame is being rendered.</summary>
        <remarks>
          <para>Called when a new display frame is being rendered.</para>
          <para>This method provides the time in nanoseconds when the frame started being rendered.
            The frame time provides a stable time base for synchronizing animations
            and drawing.  It should be used instead of <c>SystemClock#uptimeMillis()</c>
            or <c>System#nanoTime()</c> for animations and drawing in the UI.  Using the frame
            time helps to reduce inter-frame jitter because the frame time is fixed at the time
            the frame was scheduled to start, regardless of when the animations or drawing
            callback actually runs.  All callbacks that run as part of rendering a frame will
            observe the same frame time so using the frame time also helps to synchronize effects
            that are performed by different callbacks.</para>
          <para>Please note that the framework already takes care to process animations and
            drawing using the frame time as a stable time base.  Most applications should
            not need to use the frame time information directly.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/Choreographer.FrameCallback#doFrame(long)" title="Reference documentation">Java documentation for <code>android.view.Choreographer.FrameCallback.doFrame(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
