<Type Name="View+AccessibilityDelegate" FullName="Android.Views.View+AccessibilityDelegate">
  <TypeSignature Language="C#" Value="public class View.AccessibilityDelegate : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit View/AccessibilityDelegate extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/View$AccessibilityDelegate", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <format type="text/html">
        <h3>Developer Guides</h3>
      </format>
      <c>
        <example>
          <code lang="java">
 if (Build.VERSION.SDK_INT &gt;= 14) {
     // If the API version is equal of higher than the version in
     // which onInitializeAccessibilityNodeInfo was introduced we
     // register a delegate with a customized implementation.
     View view = findViewById(R.id.view_id);
     view.setAccessibilityDelegate(new AccessibilityDelegate() {
         public void onInitializeAccessibilityNodeInfo(View host,
                 AccessibilityNodeInfo info) {
             // Let the default implementation populate the info.
             super.onInitializeAccessibilityNodeInfo(host, info);
             // Set some other information.
             info.setEnabled(host.isEnabled());
         }
     });
 }
 </code>
        </example>
      </c>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Developer Guides</h3>
        </format>
        <c>
          <example>
            <code lang="java">
 if (Build.VERSION.SDK_INT &gt;= 14) {
     // If the API version is equal of higher than the version in
     // which onInitializeAccessibilityNodeInfo was introduced we
     // register a delegate with a customized implementation.
     View view = findViewById(R.id.view_id);
     view.setAccessibilityDelegate(new AccessibilityDelegate() {
         public void onInitializeAccessibilityNodeInfo(View host,
                 AccessibilityNodeInfo info) {
             // Let the default implementation populate the info.
             super.onInitializeAccessibilityNodeInfo(host, info);
             // Set some other information.
             info.setEnabled(host.isEnabled());
         }
     });
 }
 </code>
          </example>
        </c>
      </para>
      <para tool="javadoc-to-mdoc">
 This class represents a delegate that can be registered in a <c><see cref="T:Android.Views.View" /></c>
 to enhance accessibility support via composition rather via inheritance.
 It is specifically targeted to widget developers that extend basic View
 classes i.e. classes in package android.view, that would like their
 applications to be backwards compatible.
 </para>
      <para tool="javadoc-to-mdoc">For more information about making applications accessible, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/ui/accessibility/index.html">Accessibility</a></format>
 developer guide.</para>
      <para tool="javadoc-to-mdoc">
 A scenario in which a developer would like to use an accessibility delegate
 is overriding a method introduced in a later API version then the minimal API
 version supported by the application. For example, the method
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityNodeInfo(Android.Views.Accessibility.AccessibilityNodeInfo)" /></c> is not available
 in API version 4 when the accessibility APIs were first introduced. If a
 developer would like his application to run on API version 4 devices (assuming
 all other APIs used by the application are version 4 or lower) and take advantage
 of this method, instead of overriding the method which would break the application's
 backwards compatibility, he can override the corresponding method in this
 delegate and register the delegate in the target View if the API version of
 the system is high enough i.e. the API version is same or higher to the API
 version that introduced
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityNodeInfo(Android.Views.Accessibility.AccessibilityNodeInfo)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Here is an example implementation:
 </para>
      <para tool="javadoc-to-mdoc">
 This delegate contains methods that correspond to the accessibility methods
 in View. If a delegate has been specified the implementation in View hands
 off handling to the corresponding method in this delegate. The default
 implementation the delegate methods behaves exactly as the corresponding
 method in View for the case of no accessibility delegate been set. Hence,
 to customize the behavior of a View method, clients can override only the
 corresponding delegate method without altering the behavior of the rest
 accessibility related methods of the host view.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessibilityDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#View.AccessibilityDelegate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessibilityDelegate (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchPopulateAccessibilityEvent (Android.Views.View host, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchPopulateAccessibilityEvent(class Android.Views.View host, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="e">The event.</param>
        <summary>Dispatches an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to the host <c><see cref="T:Android.Views.View" /></c> first and then
 to its children for adding their text content to the event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dispatches an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> to the host <c><see cref="T:Android.Views.View" /></c> first and then
 to its children for adding their text content to the event.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityNodeProvider">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Accessibility.AccessibilityNodeProvider GetAccessibilityNodeProvider (Android.Views.View host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.Accessibility.AccessibilityNodeProvider GetAccessibilityNodeProvider(class Android.Views.View host) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAccessibilityNodeProvider", "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeProvider;", "GetGetAccessibilityNodeProvider_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Accessibility.AccessibilityNodeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <summary>Gets the provider for managing a virtual view hierarchy rooted at this View
 and reported to <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>s
 that explore the window content.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the provider for managing a virtual view hierarchy rooted at this View
 and reported to <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c>s
 that explore the window content.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="P:Android.Views.View.AccessibilityNodeProvider" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#getAccessibilityNodeProvider(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="OnInitializeAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void OnInitializeAccessibilityEvent (Android.Views.View host, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInitializeAccessibilityEvent(class Android.Views.View host, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInitializeAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V", "GetOnInitializeAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="e">The event to initialize.</param>
        <summary>Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> with information about the
 the host View which is the event source.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> with information about the
 the host View which is the event source.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.OnInitializeAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnInitializeAccessibilityNodeInfo">
      <MemberSignature Language="C#" Value="public virtual void OnInitializeAccessibilityNodeInfo (Android.Views.View host, Android.Views.Accessibility.AccessibilityNodeInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInitializeAccessibilityNodeInfo(class Android.Views.View host, class Android.Views.Accessibility.AccessibilityNodeInfo info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInitializeAccessibilityNodeInfo", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityNodeInfo;)V", "GetOnInitializeAccessibilityNodeInfo_Landroid_view_View_Landroid_view_accessibility_AccessibilityNodeInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="info" Type="Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="info">The instance to initialize.</param>
        <summary>Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> with information about the host view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initializes an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> with information about the host view.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.OnInitializeAccessibilityNodeInfo(Android.Views.Accessibility.AccessibilityNodeInfo)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.OnInitializeAccessibilityNodeInfo(Android.Views.Accessibility.AccessibilityNodeInfo)" />
      </Docs>
    </Member>
    <Member MemberName="OnPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void OnPopulateAccessibilityEvent (Android.Views.View host, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPopulateAccessibilityEvent(class Android.Views.View host, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPopulateAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V", "GetOnPopulateAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="e">The accessibility event which to populate.</param>
        <summary>Gives a chance to the host View to populate the accessibility event with its
 text content.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gives a chance to the host View to populate the accessibility event with its
 text content.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.OnPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.OnPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnRequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnRequestSendAccessibilityEvent (Android.Views.ViewGroup host, Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnRequestSendAccessibilityEvent(class Android.Views.ViewGroup host, class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRequestSendAccessibilityEvent", "(Landroid/view/ViewGroup;Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetOnRequestSendAccessibilityEvent_Landroid_view_ViewGroup_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called when a child of the host View has requested sending an
 <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and gives an opportunity to the parent (the host)
 to augment the event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child of the host View has requested sending an
 <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and gives an opportunity to the parent (the host)
 to augment the event.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.ViewGroup.OnRequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.ViewGroup.OnRequestSendAccessibilityEvent(Android.Views.View, Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="PerformAccessibilityAction">
      <MemberSignature Language="C#" Value="public virtual bool PerformAccessibilityAction (Android.Views.View host, Android.AccessibilityServices.GlobalAction action, Android.OS.Bundle args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformAccessibilityAction(class Android.Views.View host, valuetype Android.AccessibilityServices.GlobalAction action, class Android.OS.Bundle args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performAccessibilityAction", "(Landroid/view/View;ILandroid/os/Bundle;)Z", "GetPerformAccessibilityAction_Landroid_view_View_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="action" Type="Android.AccessibilityServices.GlobalAction">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <param name="action">The action to perform.</param>
        <param name="args">To be added.</param>
        <summary>Performs the specified accessibility action on the view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Performs the specified accessibility action on the view. For
 possible accessibility actions look at <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.PerformAccessibilityAction(Android.AccessibilityServices.GlobalAction,Android.OS.Bundle)" /></c> for the case of
  no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#performAccessibilityAction(android.view.View, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.PerformAccessibilityAction(Android.AccessibilityServices.GlobalAction, Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="SendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual void SendAccessibilityEvent (Android.Views.View host, Android.Views.Accessibility.EventTypes eventType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendAccessibilityEvent(class Android.Views.View host, valuetype Android.Views.Accessibility.EventTypes eventType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendAccessibilityEvent", "(Landroid/view/View;I)V", "GetSendAccessibilityEvent_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="eventType" Type="Android.Views.Accessibility.EventTypes">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="eventType">The type of the event to send.</param>
        <summary>Sends an accessibility event of the given type.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sends an accessibility event of the given type. If accessibility is not
 enabled this method has no effect.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as <c><see cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" /></c> for the case of no accessibility delegate
 been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEvent(android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.SendAccessibilityEvent(Android.Views.Accessibility.EventTypes)" />
      </Docs>
    </Member>
    <Member MemberName="SendAccessibilityEventUnchecked">
      <MemberSignature Language="C#" Value="public virtual void SendAccessibilityEventUnchecked (Android.Views.View host, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendAccessibilityEventUnchecked(class Android.Views.View host, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendAccessibilityEventUnchecked", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V", "GetSendAccessibilityEventUnchecked_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="host">The View hosting the delegate.</param>
        <param name="e">The event to send.</param>
        <summary>Sends an accessibility event.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sends an accessibility event. This method behaves exactly as
 <c><see cref="M:Android.Views.View.AccessibilityDelegate.SendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.EventTypes)" /></c> but takes as an argument an
 empty <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and does not perform a check whether
 accessibility is enabled.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation behaves as
 <c><see cref="M:Android.Views.View.SendAccessibilityEventUnchecked(Android.Views.Accessibility.AccessibilityEvent)" /></c> for
 the case of no accessibility delegate been set.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.View.SendAccessibilityEventUnchecked(Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
