<Type Name="WindowManagerFlags" FullName="Android.Views.WindowManagerFlags">
  <TypeSignature Language="C#" Value="public enum WindowManagerFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WindowManagerFlags extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Android.Views.WindowManagerFlags" />
  <TypeSignature Language="F#" Value="type WindowManagerFlags = " />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates values returned by  several types and taken as a parameter of  several types.</summary>
    <remarks>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowLockWhileScreenOn">
      <MemberSignature Language="C#" Value="AllowLockWhileScreenOn" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags AllowLockWhileScreenOn = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.AllowLockWhileScreenOn" />
      <MemberSignature Language="F#" Value="AllowLockWhileScreenOn = 1" Usage="Android.Views.WindowManagerFlags.AllowLockWhileScreenOn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: as long as this window is visible to the user, allow
  the lock screen to activate while the screen is on. 
  This can be used independently, or in combination with 
  <see cref="F:Android.Views.WindowManagerFlags.KeepScreenOn" /> and/or <see cref="F:Android.Views.WindowManagerFlags.ShowWhenLocked" /></para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AltFocusableIm">
      <MemberSignature Language="C#" Value="AltFocusableIm" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags AltFocusableIm = int32(131072)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.AltFocusableIm" />
      <MemberSignature Language="F#" Value="AltFocusableIm = 131072" Usage="Android.Views.WindowManagerFlags.AltFocusableIm" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_ALT_FOCUSABLE_IM")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>131072</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: invert the state of <see cref="F:Android.Views.WindowManagerFlags.NotFocusable" /> with
 respect to how this window interacts with the current method.  That
 is, if FLAG_NOT_FOCUSABLE is set and this flag is set, then the
 window will behave as if it needs to interact with the input method
 and thus be placed behind/away from it; if FLAG_NOT_FOCUSABLE is
 not set and this flag is set, then the window will behave as if it
 doesn't need to interact with the input method and can be placed
 to use more space and cover the input method.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BlurBehind">
      <MemberSignature Language="C#" Value="BlurBehind" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags BlurBehind = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.BlurBehind" />
      <MemberSignature Language="F#" Value="BlurBehind = 4" Usage="Android.Views.WindowManagerFlags.BlurBehind" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_BLUR_BEHIND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: blur everything behind this window.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DimBehind">
      <MemberSignature Language="C#" Value="DimBehind" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags DimBehind = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.DimBehind" />
      <MemberSignature Language="F#" Value="DimBehind = 2" Usage="Android.Views.WindowManagerFlags.DimBehind" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_DIM_BEHIND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: everything behind this window will be dimmed.
  Use <see cref="P:Android.Views.WindowManagerLayoutParams.DimAmount" /> to control the amount of dim. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissKeyguard">
      <MemberSignature Language="C#" Value="DismissKeyguard" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags DismissKeyguard = int32(4194304)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.DismissKeyguard" />
      <MemberSignature Language="F#" Value="DismissKeyguard = 4194304" Usage="Android.Views.WindowManagerFlags.DismissKeyguard" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_DISMISS_KEYGUARD")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4194304</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: when set the window will cause the keyguard to
 be dismissed, only if it is not a secure lock keyguard.  Because such
 a keyguard is not needed for security, it will never re-appear if
 the user navigates to another window (in contrast to
 <see cref="F:Android.Views.WindowManagerFlags.ShowWhenLocked" />, which will only temporarily
 hide both secure and non-secure keyguards but ensure they reappear
 when the user moves to another UI that doesn't hide them).
 If the keyguard is currently active and is secure (requires an
 unlock pattern) than the user will still need to confirm it before
 seeing this window, unless <see cref="F:Android.Views.WindowManagerFlags.ShowWhenLocked" /> has
 also been set.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dither">
      <MemberSignature Language="C#" Value="Dither" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags Dither = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.Dither" />
      <MemberSignature Language="F#" Value="Dither = 4096" Usage="Android.Views.WindowManagerFlags.Dither" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_DITHER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: turn on dithering when compositing this window to
  the screen.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawsSystemBarBackgrounds">
      <MemberSignature Language="C#" Value="DrawsSystemBarBackgrounds" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags DrawsSystemBarBackgrounds = int32(-2147483648)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.DrawsSystemBarBackgrounds" />
      <MemberSignature Language="F#" Value="DrawsSystemBarBackgrounds = -2147483648" Usage="Android.Views.WindowManagerFlags.DrawsSystemBarBackgrounds" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>-2147483648</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceNotFullscreen">
      <MemberSignature Language="C#" Value="ForceNotFullscreen" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags ForceNotFullscreen = int32(2048)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.ForceNotFullscreen" />
      <MemberSignature Language="F#" Value="ForceNotFullscreen = 2048" Usage="Android.Views.WindowManagerFlags.ForceNotFullscreen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_FORCE_NOT_FULLSCREEN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2048</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: override <see cref="F:Android.Views.WindowManagerFlags.Fullscreen" /> and force the
  screen decorations (such as the status bar) to be shown. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fullscreen">
      <MemberSignature Language="C#" Value="Fullscreen" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags Fullscreen = int32(1024)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.Fullscreen" />
      <MemberSignature Language="F#" Value="Fullscreen = 1024" Usage="Android.Views.WindowManagerFlags.Fullscreen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_FULLSCREEN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: hide all screen decorations (such as the status bar) while
 this window is displayed.  This allows the window to use the entire
 display space for itself -- the status bar will be hidden when
 an app window with this flag set is on the top layer. A fullscreen window
 will ignore a value of <see cref="F:Android.Views.SoftInput.AdjustResize" /> for the window's
 <see cref="P:Android.Views.WindowManagerLayoutParams.SoftInputMode" /> field; the window will stay fullscreen
 and will not resize.

 </para>
          <para tool="javadoc-to-mdoc">This flag can be controlled in your theme through the
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Attribute WindowFullScreen';scope=Xamarin" title="F:Android.Resource+Attribute.WindowFullScreen">F:Android.Resource+Attribute.WindowFullScreen</a></format> attribute; this attribute
 is automatically set for you in the standard fullscreen themes
 such as <see cref="F:Android.Resource.Style.ThemeNoTitleBarFullScreen" />,
 <see cref="F:Android.Resource.Style.ThemeBlackNoTitleBarFullScreen" />,
 <see cref="F:Android.Resource.Style.ThemeLightNoTitleBarFullScreen" />,
 <see cref="F:Android.Resource.Style.ThemeHoloNoActionBarFullscreen" />,
 <see cref="F:Android.Resource.Style.ThemeHoloLightNoActionBarFullscreen" />,
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>, and
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HardwareAccelerated">
      <MemberSignature Language="C#" Value="HardwareAccelerated" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags HardwareAccelerated = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.HardwareAccelerated" />
      <MemberSignature Language="F#" Value="HardwareAccelerated = 16777216" Usage="Android.Views.WindowManagerFlags.HardwareAccelerated" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_HARDWARE_ACCELERATED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">
            <sample external-id="677AB24B79A59E4E30148985A6E56194" />
          </para>
          <para tool="javadoc-to-mdoc">Indicates whether this window should be hardware accelerated.
 Requesting hardware acceleration does not guarantee it will happen.</para>
          <para tool="javadoc-to-mdoc">This flag can be controlled programmatically <i>only</i> to enable
 hardware acceleration. To enable hardware acceleration for a given
 window programmatically, do the following:</para>
          <para tool="javadoc-to-mdoc">It is important to remember that this flag <i>must</i>
 be set before setting the content view of your activity or dialog.</para>
          <para tool="javadoc-to-mdoc">This flag cannot be used to disable hardware acceleration after it
 was enabled in your manifest using
 <see cref="F:Android.Resource.Attribute.HardwareAccelerated" />. If you need to selectively
 and programmatically disable hardware acceleration (for automated testing
 for instance), make sure it is turned off in your manifest and enable it
 on your activity or dialog when you need it instead, using the method
 described above.</para>
          <para tool="javadoc-to-mdoc">This flag is automatically set by the system if the
 <see cref="F:Android.Resource.Attribute.HardwareAccelerated" />
 XML attribute is set to true on an activity or on the application.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCheekPresses">
      <MemberSignature Language="C#" Value="IgnoreCheekPresses" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags IgnoreCheekPresses = int32(32768)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.IgnoreCheekPresses" />
      <MemberSignature Language="F#" Value="IgnoreCheekPresses = 32768" Usage="Android.Views.WindowManagerFlags.IgnoreCheekPresses" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_IGNORE_CHEEK_PRESSES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>32768</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: intended for windows that will often be used when the user is
 holding the screen against their face, it will aggressively filter the event
 stream to prevent unintended presses in this situation that may not be
 desired for a particular window, when such an event stream is detected, the 
 application will receive a CANCEL motion event to indicate this so applications
 can handle this accordingly by taking no action on the event 
 until the finger is released. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepScreenOn">
      <MemberSignature Language="C#" Value="KeepScreenOn" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags KeepScreenOn = int32(128)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.KeepScreenOn" />
      <MemberSignature Language="F#" Value="KeepScreenOn = 128" Usage="Android.Views.WindowManagerFlags.KeepScreenOn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_KEEP_SCREEN_ON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: as long as this window is visible to the user, keep
  the device's screen turned on and bright. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttachedInDecor">
      <MemberSignature Language="C#" Value="LayoutAttachedInDecor" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LayoutAttachedInDecor = int32(1073741824)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LayoutAttachedInDecor" />
      <MemberSignature Language="F#" Value="LayoutAttachedInDecor = 1073741824" Usage="Android.Views.WindowManagerFlags.LayoutAttachedInDecor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LAYOUT_ATTACHED_IN_DECOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1073741824</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutInOverscan">
      <MemberSignature Language="C#" Value="LayoutInOverscan" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LayoutInOverscan = int32(33554432)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LayoutInOverscan" />
      <MemberSignature Language="F#" Value="LayoutInOverscan = 33554432" Usage="Android.Views.WindowManagerFlags.LayoutInOverscan" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LAYOUT_IN_OVERSCAN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>33554432</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: allow window contents to extend in to the screen's
 overscan area, if there is one.  The window should still correctly
 position its contents to take the overscan area into account.

 <sample external-id="869793DE5C9506FA1589925CEC92C6C1" /></para>
          <para tool="javadoc-to-mdoc">This flag can be controlled in your theme through the
 <see cref="F:Android.Resource.Attribute.WindowOverscan" /> attribute; this attribute
 is automatically set for you in the standard overscan themes
 such as
 <see cref="F:Android.Resource.Style.ThemeHoloNoActionBarOverscan" />,
 <see cref="F:Android.Resource.Style.ThemeHoloLightNoActionBarOverscan" />,
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>, and
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>.</para>
          <para tool="javadoc-to-mdoc">When this flag is enabled for a window, its normal content may be obscured
 to some degree by the overscan region of the display.  To ensure key parts of
 that content are visible to the user, you can use
 <see cref="M:Android.Views.View.SetFitsSystemWindows(System.Boolean)" />
 to set the point in the view hierarchy where the appropriate offsets should
 be applied.  (This can be done either by directly calling this function, using
 the <see cref="F:Android.Resource.Attribute.FitsSystemWindows" /> attribute in your view hierarchy,
 or implementing you own <see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /> method).</para>
          <para tool="javadoc-to-mdoc">This mechanism for positioning content elements is identical to its equivalent
 use with layout and <see cref="P:Android.Views.View.SystemUiVisibility" />; here is an example layout that will correctly
 position its UI elements with this overscan flag is set:</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutInScreen">
      <MemberSignature Language="C#" Value="LayoutInScreen" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LayoutInScreen = int32(256)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LayoutInScreen" />
      <MemberSignature Language="F#" Value="LayoutInScreen = 256" Usage="Android.Views.WindowManagerFlags.LayoutInScreen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LAYOUT_IN_SCREEN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: place the window within the entire screen, ignoring
  decorations around the border (such as the status bar).  The
  window must correctly position its contents to take the screen
  decoration into account.  This flag is normally set for you
  by Window as described in <see cref="M:Android.Views.Window.SetFlags(Android.Views.WindowManagerFlags,Android.Views.WindowManagerFlags)" />. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutInsetDecor">
      <MemberSignature Language="C#" Value="LayoutInsetDecor" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LayoutInsetDecor = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LayoutInsetDecor" />
      <MemberSignature Language="F#" Value="LayoutInsetDecor = 65536" Usage="Android.Views.WindowManagerFlags.LayoutInsetDecor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LAYOUT_INSET_DECOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: a special option only for use in combination with
 <see cref="F:Android.Views.WindowManagerFlags.LayoutInScreen" />.  When requesting layout in the
 screen your window may appear on top of or behind screen decorations
 such as the status bar.  By also including this flag, the window
 manager will report the inset rectangle needed to ensure your
 content is not covered by screen decorations.  This flag is normally
 set for you by Window as described in <see cref="M:Android.Views.Window.SetFlags(Android.Views.WindowManagerFlags,Android.Views.WindowManagerFlags)" />.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutNoLimits">
      <MemberSignature Language="C#" Value="LayoutNoLimits" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LayoutNoLimits = int32(512)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LayoutNoLimits" />
      <MemberSignature Language="F#" Value="LayoutNoLimits = 512" Usage="Android.Views.WindowManagerFlags.LayoutNoLimits" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LAYOUT_NO_LIMITS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: allow window to extend outside of the screen. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalFocusMode">
      <MemberSignature Language="C#" Value="LocalFocusMode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags LocalFocusMode = int32(268435456)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.LocalFocusMode" />
      <MemberSignature Language="F#" Value="LocalFocusMode = 268435456" Usage="Android.Views.WindowManagerFlags.LocalFocusMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_LOCAL_FOCUS_MODE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>268435456</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotFocusable">
      <MemberSignature Language="C#" Value="NotFocusable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags NotFocusable = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.NotFocusable" />
      <MemberSignature Language="F#" Value="NotFocusable = 8" Usage="Android.Views.WindowManagerFlags.NotFocusable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_NOT_FOCUSABLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">
            <see cref="F:Android.Views.WindowManagerFlags.NotTouchModal" />
          </para>
          <para tool="javadoc-to-mdoc">Setting this flag also implies that the window will not need to
 interact with
 a soft input method, so it will be Z-ordered and positioned 
 independently of any active input method (typically this means it
 gets Z-ordered on top of the input method, so it can use the full
 screen for its content and cover the input method if needed.  You
 can use <see cref="F:Android.Views.WindowManagerFlags.AltFocusableIm" /> to modify this behavior. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotTouchable">
      <MemberSignature Language="C#" Value="NotTouchable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags NotTouchable = int32(16)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.NotTouchable" />
      <MemberSignature Language="F#" Value="NotTouchable = 16" Usage="Android.Views.WindowManagerFlags.NotTouchable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_NOT_TOUCHABLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: this window can never receive touch events. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotTouchModal">
      <MemberSignature Language="C#" Value="NotTouchModal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags NotTouchModal = int32(32)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.NotTouchModal" />
      <MemberSignature Language="F#" Value="NotTouchModal = 32" Usage="Android.Views.WindowManagerFlags.NotTouchModal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_NOT_TOUCH_MODAL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: even when this window is focusable (its
 <see cref="F:Android.Views.WindowManagerFlags.NotFocusable" /> is not set), allow any pointer events
 outside of the window to be sent to the windows behind it.  Otherwise
 it will consume all pointer events itself, regardless of whether they
 are inside of the window. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scaled">
      <MemberSignature Language="C#" Value="Scaled" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags Scaled = int32(16384)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.Scaled" />
      <MemberSignature Language="F#" Value="Scaled = 16384" Usage="Android.Views.WindowManagerFlags.Scaled" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_SCALED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16384</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: a special mode where the layout parameters are used
 to perform scaling of the surface when it is composited to the
 screen. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Secure">
      <MemberSignature Language="C#" Value="Secure" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags Secure = int32(8192)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.Secure" />
      <MemberSignature Language="F#" Value="Secure = 8192" Usage="Android.Views.WindowManagerFlags.Secure" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_SECURE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8192</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">See <see cref="F:Android.Views.Display.FlagSecure" /> for more details about
 secure surfaces and secure displays.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowWallpaper">
      <MemberSignature Language="C#" Value="ShowWallpaper" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags ShowWallpaper = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.ShowWallpaper" />
      <MemberSignature Language="F#" Value="ShowWallpaper = 1048576" Usage="Android.Views.WindowManagerFlags.ShowWallpaper" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_SHOW_WALLPAPER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: ask that the system wallpaper be shown behind
 your window.  The window surface must be translucent to be able
 to actually see the wallpaper behind it; this flag just ensures
 that the wallpaper surface will be there if this window actually
 has translucent regions.

 </para>
          <para tool="javadoc-to-mdoc">This flag can be controlled in your theme through the
 <see cref="F:Android.Resource.Attribute.WindowShowWallpaper" /> attribute; this attribute
 is automatically set for you in the standard wallpaper themes
 such as <see cref="F:Android.Resource.Style.ThemeWallpaper" />,
 <see cref="F:Android.Resource.Style.ThemeWallpaperNoTitleBar" />,
 <see cref="F:Android.Resource.Style.ThemeWallpaperNoTitleBarFullscreen" />,
 <see cref="F:Android.Resource.Style.ThemeHoloWallpaper" />,
 <see cref="F:Android.Resource.Style.ThemeHoloWallpaperNoTitleBar" />,
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>, and
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='F:Android Resource+Style ThemeDeviceDefault';scope=Xamarin" title="F:Android.Resource+Style.ThemeDeviceDefault">F:Android.Resource+Style.ThemeDeviceDefault</a></format>.</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowWhenLocked">
      <MemberSignature Language="C#" Value="ShowWhenLocked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags ShowWhenLocked = int32(524288)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.ShowWhenLocked" />
      <MemberSignature Language="F#" Value="ShowWhenLocked = 524288" Usage="Android.Views.WindowManagerFlags.ShowWhenLocked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_SHOW_WHEN_LOCKED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>524288</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: special flag to let windows be shown when the screen
 is locked. This will let application windows take precedence over
 key guard or any other lock screens. Can be used with
 <see cref="F:Android.Views.WindowManagerFlags.KeepScreenOn" /> to turn screen on and display windows
 directly before showing the key guard window.  Can be used with
 <see cref="F:Android.Views.WindowManagerFlags.DismissKeyguard" /> to automatically fully dismisss
 non-secure keyguards.  This flag only applies to the top-most
 full-screen window.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitTouch">
      <MemberSignature Language="C#" Value="SplitTouch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags SplitTouch = int32(8388608)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.SplitTouch" />
      <MemberSignature Language="F#" Value="SplitTouch = 8388608" Usage="Android.Views.WindowManagerFlags.SplitTouch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_SPLIT_TOUCH")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8388608</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: when set the window will accept for touch events
 outside of its bounds to be sent to other windows that also
 support split touch.  When this flag is not set, the first pointer
 that goes down determines the window to which all subsequent touches
 go until all pointers go up.  When this flag is set, each pointer
 (not necessarily the first) that goes down determines the window
 to which all subsequent touches of that pointer will go until that
 pointer goes up thereby enabling touches with multiple pointers
 to be split across multiple windows.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchableWhenWaking">
      <MemberSignature Language="C#" Value="TouchableWhenWaking" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags TouchableWhenWaking = int32(64)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.TouchableWhenWaking" />
      <MemberSignature Language="F#" Value="TouchableWhenWaking = 64" Usage="Android.Views.WindowManagerFlags.TouchableWhenWaking" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: when set, if the device is asleep when the touch
 screen is pressed, you will receive this first touch event.  Usually
 the first touch event is consumed by the system since the user can
 not see what they are pressing on.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslucentNavigation">
      <MemberSignature Language="C#" Value="TranslucentNavigation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags TranslucentNavigation = int32(134217728)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.TranslucentNavigation" />
      <MemberSignature Language="F#" Value="TranslucentNavigation = 134217728" Usage="Android.Views.WindowManagerFlags.TranslucentNavigation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_TRANSLUCENT_NAVIGATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>134217728</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslucentStatus">
      <MemberSignature Language="C#" Value="TranslucentStatus" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags TranslucentStatus = int32(67108864)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.TranslucentStatus" />
      <MemberSignature Language="F#" Value="TranslucentStatus = 67108864" Usage="Android.Views.WindowManagerFlags.TranslucentStatus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_TRANSLUCENT_STATUS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>67108864</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TurnScreenOn">
      <MemberSignature Language="C#" Value="TurnScreenOn" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags TurnScreenOn = int32(2097152)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.TurnScreenOn" />
      <MemberSignature Language="F#" Value="TurnScreenOn = 2097152" Usage="Android.Views.WindowManagerFlags.TurnScreenOn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_TURN_SCREEN_ON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2097152</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: when set as a window is being added or made
 visible, once the window has been shown then the system will
 poke the power manager's user activity (as if the user had woken
 up the device) to turn the screen on. </para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchOutsideTouch">
      <MemberSignature Language="C#" Value="WatchOutsideTouch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.WindowManagerFlags WatchOutsideTouch = int32(262144)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.WindowManagerFlags.WatchOutsideTouch" />
      <MemberSignature Language="F#" Value="WatchOutsideTouch = 262144" Usage="Android.Views.WindowManagerFlags.WatchOutsideTouch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.IntDefinition(null, JniField="android/view/WindowManager$LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>262144</MemberValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Window flag: if you have set <see cref="F:Android.Views.WindowManagerFlags.NotTouchModal" />, you
 can set this flag to receive a single special MotionEvent with
 the action
 <see cref="F:Android.Views.MotionEventActions.Outside" /> for
 touches that occur outside of your window.  Note that you will not
 receive the full down/move/up gesture, only the location of the
 first down as an ACTION_OUTSIDE.
</para>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
