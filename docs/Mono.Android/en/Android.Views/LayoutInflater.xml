<Type Name="LayoutInflater" FullName="Android.Views.LayoutInflater">
  <TypeSignature Language="C#" Value="public abstract class LayoutInflater : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LayoutInflater extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/LayoutInflater", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Instantiates a layout XML file into its corresponding <c><see cref="T:Android.Views.View" /></c>
 objects.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Instantiates a layout XML file into its corresponding <c><see cref="T:Android.Views.View" /></c>
 objects. It is never used directly. Instead, use
 <c><see cref="P:Android.App.Activity.LayoutInflater" /></c> or
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c> to retrieve a standard LayoutInflater instance
 that is already hooked up to the current context and correctly configured
 for the device you are running on.  For example:

 <example><code lang="java">LayoutInflater inflater = (LayoutInflater)context.getSystemService
      (Context.LAYOUT_INFLATER_SERVICE);</code></example></para>
      <para tool="javadoc-to-mdoc">
 To create a new LayoutInflater with an additional <c><see cref="!:NoType:android/view/LayoutInflater$Factory;Href=../../../reference/android/view/LayoutInflater.Factory.html" /></c> for your
 own views, you can use <c><see cref="M:Android.Views.LayoutInflater.CloneInContext(Android.Content.Context)" /></c> to clone an existing
 ViewFactory, and then call <c><see cref="P:Android.Views.LayoutInflater.Factory" /></c> on it to include your
 Factory.
 
 </para>
      <para tool="javadoc-to-mdoc">
 For performance reasons, view inflation relies heavily on pre-processing of
 XML files that is done at build time. Therefore, it is not currently possible
 to use LayoutInflater with an XmlPullParser over a plain XML file at runtime;
 it only works with an XmlPullParser returned from a compiled resource
 (R.<i>something</i> file.)</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/LayoutInflater.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutInflater (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Create a new LayoutInflater instance associated with a particular Context.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new LayoutInflater instance associated with a particular Context.
 Applications will almost always want to use
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c> to retrieve
 the standard <c><see cref="F:Android.Content.Context.LayoutInflaterService" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#LayoutInflater(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutInflater (Android.Views.LayoutInflater original, Android.Content.Context newContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Android.Views.LayoutInflater original, class Android.Content.Context newContext) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/view/LayoutInflater;Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="original" Type="Android.Views.LayoutInflater" />
        <Parameter Name="newContext" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="original">To be added.</param>
        <param name="newContext">To be added.</param>
        <summary>Create a new LayoutInflater instance that is a copy of an existing
 LayoutInflater, optionally with its Context changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new LayoutInflater instance that is a copy of an existing
 LayoutInflater, optionally with its Context changed.  For use in
 implementing <c><see cref="M:Android.Views.LayoutInflater.CloneInContext(Android.Content.Context)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#LayoutInflater(android.view.LayoutInflater, android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutInflater (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneInContext">
      <MemberSignature Language="C#" Value="public abstract Android.Views.LayoutInflater CloneInContext (Android.Content.Context newContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.LayoutInflater CloneInContext(class Android.Content.Context newContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cloneInContext", "(Landroid/content/Context;)Landroid/view/LayoutInflater;", "GetCloneInContext_Landroid_content_Context_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newContext" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="newContext">The new Context to associate with the new LayoutInflater.
 May be the same as the original Context if desired.</param>
        <summary>Create a copy of the existing LayoutInflater object, with the copy
 pointing to a different Context than the original.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a copy of the existing LayoutInflater object, with the copy
 pointing to a different Context than the original.  This is used by
 <c><see cref="T:Android.Views.ContextThemeWrapper" /></c> to create a new LayoutInflater to go along
 with the new Context theme.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#cloneInContext(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the context we are running in, for access to resources, class
 loader, etc.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the context we are running in, for access to resources, class
 loader, etc.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#getContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="public Android.Views.View CreateView (string name, string prefix, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.View CreateView(string name, string prefix, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createView", "(Ljava/lang/String;Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/view/View;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="name">The full name of the class to be instantiated.</param>
        <param name="prefix">To be added.</param>
        <param name="attrs">The XML attributes supplied for this instance.</param>
        <summary>Low-level function for instantiating a view by name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Low-level function for instantiating a view by name. This attempts to
 instantiate a view class of the given <format type="text/html"><var>name</var></format> found in this
 LayoutInflater's ClassLoader.
 
 </para>
          <para tool="javadoc-to-mdoc">
 There are two things that can happen in an error case: either the
 exception describing the error will be thrown, or a null will be
 returned. You must deal with both possibilities -- the former will happen
 the first time createView() is called for a class of a particular name,
 the latter every time there-after for that class name.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#createView(java.lang.String, java.lang.String, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassNotFoundException" />
        <exception cref="T:Android.Views.InflateException" />
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public Android.Views.LayoutInflater.IFactory Factory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.LayoutInflater/IFactory Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFactory", "()Landroid/view/LayoutInflater$Factory;", "GetGetFactoryHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFactory", "(Landroid/view/LayoutInflater$Factory;)V", "GetSetFactory_Landroid_view_LayoutInflater_Factory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater+IFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current <c><see cref="!:NoType:android/view/LayoutInflater$Factory;Href=../../../reference/android/view/LayoutInflater.Factory.html" /></c> (or null).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#getFactory()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the current <c><see cref="!:NoType:android/view/LayoutInflater$Factory;Href=../../../reference/android/view/LayoutInflater.Factory.html" /></c> (or null). This is called on each element
 name. If the factory returns a View, add that to the hierarchy. If it
 returns null, proceed to call onCreateView(name).
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#setFactory(android.view.LayoutInflater.Factory)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Attach a custom Factory interface for creating views while using
 this LayoutInflater.  This must not be null, and can only be set once;
 after setting, you can not change the factory.  This is
 called on each element name as the xml is parsed. If the factory returns
 a View, that is added to the hierarchy. If it returns null, the next
 factory default <c><see cref="M:Android.Views.LayoutInflater.OnCreateView(Android.Views.View,System.String,System.String)" /></c> method is called.
 
 If you have an existing
 LayoutInflater and want to add your own factory to it, use
 <c><see cref="M:Android.Views.LayoutInflater.CloneInContext(Android.Content.Context)" /></c> to clone the existing instance and then you
 can use this function (once) on the returned new instance.  This will
 merge your own factory with whatever factory the original instance is
 using.
</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Factory2">
      <MemberSignature Language="C#" Value="public Android.Views.LayoutInflater.IFactory2 Factory2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.LayoutInflater/IFactory2 Factory2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFactory2", "()Landroid/view/LayoutInflater$Factory2;", "GetGetFactory2Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFactory2", "(Landroid/view/LayoutInflater$Factory2;)V", "GetSetFactory2_Landroid_view_LayoutInflater_Factory2_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater+IFactory2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#getFactory2()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the current <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html" /></c>.  Returns null if no factory is set
 or the set factory does not implement the <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html" /></c> interface.
 This is called on each element
 name. If the factory returns a View, add that to the hierarchy. If it
 returns null, proceed to call onCreateView(name).
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#setFactory2(android.view.LayoutInflater.Factory2)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Like <c><see cref="P:Android.Views.LayoutInflater.Factory" /></c>, but allows you to set a <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html" /></c>
 interface.
</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public virtual Android.Views.LayoutInflater.IFilter Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.LayoutInflater/IFilter Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFilter", "()Landroid/view/LayoutInflater$Filter;", "GetGetFilterHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFilter", "(Landroid/view/LayoutInflater$Filter;)V", "GetSetFilter_Landroid_view_LayoutInflater_Filter_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater+IFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#getFilter()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#setFilter(android.view.LayoutInflater.Filter)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the <c><see cref="!:NoType:android/view/LayoutInflater$Filter;Href=../../../reference/android/view/LayoutInflater.Filter.html" /></c> to by this LayoutInflater. If a view is attempted to be inflated
 which is not allowed by the <c><see cref="!:NoType:android/view/LayoutInflater$Filter;Href=../../../reference/android/view/LayoutInflater.Filter.html" /></c>, the <c><see cref="M:Android.Views.LayoutInflater.Inflate(System.Int32,Android.Views.ViewGroup)" /></c> call will
 throw an <c><see cref="T:Android.Views.InflateException" /></c>. This filter will replace any previous filter set on this
 LayoutInflater.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Android.Views.LayoutInflater From (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Views.LayoutInflater From(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("from", "(Landroid/content/Context;)Landroid/view/LayoutInflater;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Obtains the LayoutInflater from the given context.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains the LayoutInflater from the given context.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#from(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.Views.LayoutInflater FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Views.LayoutInflater FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View Inflate (int resource, Android.Views.ViewGroup root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View Inflate(int32 resource, class Android.Views.ViewGroup root) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inflate", "(ILandroid/view/ViewGroup;)Landroid/view/View;", "GetInflate_ILandroid_view_ViewGroup_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.Int32" />
        <Parameter Name="root" Type="Android.Views.ViewGroup" />
      </Parameters>
      <Docs>
        <param name="resource">ID for an XML layout resource to load (e.g.,
        <c>R.layout.main_page</c>)</param>
        <param name="root">Optional view to be the parent of the generated hierarchy.</param>
        <summary>Inflate a new view hierarchy from the specified xml resource.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflate a new view hierarchy from the specified xml resource. Throws
 <c><see cref="T:Android.Views.InflateException" /></c> if there is an error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int, android.view.ViewGroup)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View Inflate (System.Xml.XmlReader parser, Android.Views.ViewGroup root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View Inflate(class System.Xml.XmlReader parser, class Android.Views.ViewGroup root) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inflate", "(Lorg/xmlpull/v1/XmlPullParser;Landroid/view/ViewGroup;)Landroid/view/View;", "GetInflate_Lorg_xmlpull_v1_XmlPullParser_Landroid_view_ViewGroup_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Xml.XmlReader" />
        <Parameter Name="root" Type="Android.Views.ViewGroup" />
      </Parameters>
      <Docs>
        <param name="parser">XML dom node containing the description of the view
        hierarchy.</param>
        <param name="root">Optional view to be the parent of the generated hierarchy.</param>
        <summary>Inflate a new view hierarchy from the specified xml node.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflate a new view hierarchy from the specified xml node. Throws
 <c><see cref="T:Android.Views.InflateException" /></c> if there is an error. *
 </para>
          <para tool="javadoc-to-mdoc">
            <i>
              <i>Important</i>
            </i>   For performance
 reasons, view inflation relies heavily on pre-processing of XML files
 that is done at build time. Therefore, it is not currently possible to
 use LayoutInflater with an XmlPullParser over a plain XML file at runtime.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View Inflate (int resource, Android.Views.ViewGroup root, bool attachToRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View Inflate(int32 resource, class Android.Views.ViewGroup root, bool attachToRoot) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inflate", "(ILandroid/view/ViewGroup;Z)Landroid/view/View;", "GetInflate_ILandroid_view_ViewGroup_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.Int32" />
        <Parameter Name="root" Type="Android.Views.ViewGroup" />
        <Parameter Name="attachToRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="resource">ID for an XML layout resource to load (e.g.,
        <c>R.layout.main_page</c>)</param>
        <param name="root">Optional view to be the parent of the generated hierarchy (if
        <i>attachToRoot</i> is true), or else simply an object that
        provides a set of LayoutParams values for root of the returned
        hierarchy (if <i>attachToRoot</i> is false.)</param>
        <param name="attachToRoot">Whether the inflated hierarchy should be attached to
        the root parameter? If false, root is only used to create the
        correct subclass of LayoutParams for the root view in the XML.</param>
        <summary>Inflate a new view hierarchy from the specified xml resource.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflate a new view hierarchy from the specified xml resource. Throws
 <c><see cref="T:Android.Views.InflateException" /></c> if there is an error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int, android.view.ViewGroup, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View Inflate (System.Xml.XmlReader parser, Android.Views.ViewGroup root, bool attachToRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View Inflate(class System.Xml.XmlReader parser, class Android.Views.ViewGroup root, bool attachToRoot) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inflate", "(Lorg/xmlpull/v1/XmlPullParser;Landroid/view/ViewGroup;Z)Landroid/view/View;", "GetInflate_Lorg_xmlpull_v1_XmlPullParser_Landroid_view_ViewGroup_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Xml.XmlReader" />
        <Parameter Name="root" Type="Android.Views.ViewGroup" />
        <Parameter Name="attachToRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parser">XML dom node containing the description of the view
        hierarchy.</param>
        <param name="root">Optional view to be the parent of the generated hierarchy (if
        <i>attachToRoot</i> is true), or else simply an object that
        provides a set of LayoutParams values for root of the returned
        hierarchy (if <i>attachToRoot</i> is false.)</param>
        <param name="attachToRoot">Whether the inflated hierarchy should be attached to
        the root parameter? If false, root is only used to create the
        correct subclass of LayoutParams for the root view in the XML.</param>
        <summary>Inflate a new view hierarchy from the specified XML node.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflate a new view hierarchy from the specified XML node. Throws
 <c><see cref="T:Android.Views.InflateException" /></c> if there is an error.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>
              <i>Important</i>
            </i>   For performance
 reasons, view inflation relies heavily on pre-processing of XML files
 that is done at build time. Therefore, it is not currently possible to
 use LayoutInflater with an XmlPullParser over a plain XML file at runtime.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="protected virtual Android.Views.View OnCreateView (string name, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.View OnCreateView(string name, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateView", "(Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Ljava_lang_String_Landroid_util_AttributeSet_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="name">The fully qualified class name of the View to be create.</param>
        <param name="attrs">An AttributeSet of attributes to apply to the View.</param>
        <summary tool="true">This routine is responsible for creating the correct subclass of View
 given the xml element name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This routine is responsible for creating the correct subclass of View
 given the xml element name. Override it to handle custom view objects. If
 you override this in your subclass be sure to call through to
 super.onCreateView(name) for names you do not recognize.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#onCreateView(java.lang.String, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.Lang.ClassNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="protected virtual Android.Views.View OnCreateView (Android.Views.View parent, string name, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.View OnCreateView(class Android.Views.View parent, string name, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateView", "(Landroid/view/View;Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Landroid_view_View_Ljava_lang_String_Landroid_util_AttributeSet_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.View" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="parent">The future parent of the returned view.  <i>Note that
 this may be null.</i></param>
        <param name="name">The fully qualified class name of the View to be create.</param>
        <param name="attrs">An AttributeSet of attributes to apply to the View.</param>
        <summary>Version of <c><see cref="M:Android.Views.LayoutInflater.OnCreateView(System.String,Android.Util.IAttributeSet)" /></c> that also
 takes the future parent of the view being constructed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Views.LayoutInflater.OnCreateView(System.String,Android.Util.IAttributeSet)" /></c> that also
 takes the future parent of the view being constructed.  The default
 implementation simply calls <c><see cref="M:Android.Views.LayoutInflater.OnCreateView(System.String,Android.Util.IAttributeSet)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#onCreateView(android.view.View, java.lang.String, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.Lang.ClassNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
