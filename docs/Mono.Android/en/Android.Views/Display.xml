<Type Name="Display" FullName="Android.Views.Display">
  <TypeSignature Language="C#" Value="public class Display : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Display extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/Display", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Provides information about the size and density of a logical display.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides information about the size and density of a logical display.
 </para>
      <para tool="javadoc-to-mdoc">
 The display area is described in two different ways.
 <list type="bullet"><item><term>The application display area specifies the part of the display that may contain
 an application window, excluding the system decorations.  The application display area may
 be smaller than the real display area because the system subtracts the space needed
 for decor elements such as the status bar.  Use the following methods to query the
 application display area: <c><see cref="M:Android.Views.Display.GetSize(Android.Graphics.Point)" /></c>, <c><see cref="M:Android.Views.Display.GetRectSize(Android.Graphics.Rect)" /></c> and <c><see cref="M:Android.Views.Display.GetMetrics(Android.Util.DisplayMetrics)" /></c>.</term></item><item><term>The real display area specifies the part of the display that contains content
 including the system decorations.  Even so, the real display area may be smaller than the
 physical size of the display if the window manager is emulating a smaller display
 using (adb shell am display-size).  Use the following methods to query the
 real display area: <c><see cref="M:Android.Views.Display.GetRealSize(Android.Graphics.Point)" /></c>, <c><see cref="M:Android.Views.Display.GetRealMetrics(Android.Util.DisplayMetrics)" /></c>.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 A logical display does not necessarily represent a particular physical display device
 such as the built-in screen or an external monitor.  The contents of a logical
 display may be presented on one or more physical displays according to the devices
 that are currently attached and whether mirroring has been enabled.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/Display.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Display (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppVsyncOffsetNanos">
      <MemberSignature Language="C#" Value="public virtual long AppVsyncOffsetNanos { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AppVsyncOffsetNanos" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAppVsyncOffsetNanos", "()J", "GetGetAppVsyncOffsetNanosHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the app VSYNC offset, in nanoseconds.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the app VSYNC offset, in nanoseconds.  This is a positive value indicating
 the phase offset of the VSYNC events provided by Choreographer relative to the
 display refresh.  For example, if Choreographer reports that the refresh occurred
 at time N, it actually occurred at (N - appVsyncOffset).
 </para>
          <para tool="javadoc-to-mdoc">
 Apps generally do not need to be aware of this.  It's only useful for fine-grained
 A/V synchronization.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getAppVsyncOffsetNanos()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDisplay">
      <MemberSignature Language="C#" Value="public const int DefaultDisplay = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultDisplay = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DEFAULT_DISPLAY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>The default Display id, which is the id of the built-in primary display
 assuming there is one.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The default Display id, which is the id of the built-in primary display
 assuming there is one.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#DEFAULT_DISPLAY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DisplayId">
      <MemberSignature Language="C#" Value="public virtual int DisplayId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DisplayId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDisplayId", "()I", "GetGetDisplayIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display id.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the display id.
 </para>
          <para tool="javadoc-to-mdoc">
 Each logical display has a unique id.
 The default display has id <c><see cref="F:Android.Views.Display.DefaultDisplay" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getDisplayId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FlagPresentation">
      <MemberSignature Language="C#" Value="public const Android.Views.DisplayFlags FlagPresentation = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags FlagPresentation = (8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_PRESENTATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.DisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Display flag: Indicates that the display is a presentation display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display is a presentation display.
 </para>
          <para tool="javadoc-to-mdoc">
 This flag identifies secondary displays that are suitable for
 use as presentation displays such as HDMI or Wireless displays.  Applications
 may automatically project their content to presentation displays to provide
 richer second screen experiences.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#FLAG_PRESENTATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.Display.Flags" />
      </Docs>
    </Member>
    <Member MemberName="FlagPrivate">
      <MemberSignature Language="C#" Value="public const Android.Views.DisplayFlags FlagPrivate = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags FlagPrivate = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_PRIVATE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.DisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Display flag: Indicates that the display is private.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display is private.  Only the application that
 owns the display can create windows on it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#FLAG_PRIVATE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.Display.Flags" />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public virtual Android.Views.DisplayFlags Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.DisplayFlags Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFlags", "()I", "GetGetFlagsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a combination of flags that describe the capabilities of the display.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a combination of flags that describe the capabilities of the display.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getFlags()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="F:Android.Views.Display.FlagSupportsProtectedBuffers" />
        <altmember cref="F:Android.Views.Display.FlagSecure" />
        <altmember cref="F:Android.Views.Display.FlagPrivate" />
      </Docs>
    </Member>
    <Member MemberName="FlagSecure">
      <MemberSignature Language="C#" Value="public const Android.Views.DisplayFlags FlagSecure = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags FlagSecure = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_SECURE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.DisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Display flag: Indicates that the display has a secure video output and
 supports compositing secure surfaces.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display has a secure video output and
 supports compositing secure surfaces.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is set then the display device has a secure video output
 and is capable of showing secure surfaces.  It may also be capable of
 showing <c><see cref="F:Android.Views.Display.FlagSupportsProtectedBuffers" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is not set then the display device may not have a secure video
 output; the user may see a blank region on the screen instead of
 the contents of secure surfaces or protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 Secure surfaces are used to prevent content rendered into those surfaces
 by applications from appearing in screenshots or from being viewed
 on non-secure displays.  Protected buffers are used by secure video decoders
 for a similar purpose.
 </para>
          <para tool="javadoc-to-mdoc">
 An application creates a window with a secure surface by specifying the
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_SECURE" /></c> window flag.
 Likewise, an application creates a <c><see cref="T:Android.Views.SurfaceView" /></c> with a secure surface
 by calling <c><see cref="M:Android.Views.SurfaceView.SetSecure(System.Boolean)" /></c> before attaching the secure view to
 its containing window.
 </para>
          <para tool="javadoc-to-mdoc">
 An application can use the absence of this flag as a hint that it should not create
 secure surfaces or protected buffers on this display because the content may
 not be visible.  For example, if the flag is not set then the application may
 choose not to show content on this display, show an informative error message,
 select an alternate content stream or adopt a different strategy for decoding
 content that does not rely on secure surfaces or protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#FLAG_SECURE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.Views.Display.Flags" />
      </Docs>
    </Member>
    <Member MemberName="FlagSupportsProtectedBuffers">
      <MemberSignature Language="C#" Value="public const Android.Views.DisplayFlags FlagSupportsProtectedBuffers = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags FlagSupportsProtectedBuffers = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_SUPPORTS_PROTECTED_BUFFERS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.DisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Display flag: Indicates that the display supports compositing content
 that is stored in protected graphics buffers.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display supports compositing content
 that is stored in protected graphics buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is set then the display device supports compositing protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is not set then the display device may not support compositing
 protected buffers; the user may see a blank region on the screen instead of
 the protected content.
 </para>
          <para tool="javadoc-to-mdoc">
 Secure (DRM) video decoders may allocate protected graphics buffers to request that
 a hardware-protected path be provided between the video decoder and the external
 display sink.  If a hardware-protected path is not available, then content stored
 in protected graphics buffers may not be composited.
 </para>
          <para tool="javadoc-to-mdoc">
 An application can use the absence of this flag as a hint that it should not use protected
 buffers for this display because the content may not be visible.  For example,
 if the flag is not set then the application may choose not to show content on this
 display, show an informative error message, select an alternate content stream
 or adopt a different strategy for decoding content that does not rely on
 protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#FLAG_SUPPORTS_PROTECTED_BUFFERS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.Views.Display.Flags" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSizeRange">
      <MemberSignature Language="C#" Value="public virtual void GetCurrentSizeRange (Android.Graphics.Point outSmallestSize, Android.Graphics.Point outLargestSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCurrentSizeRange(class Android.Graphics.Point outSmallestSize, class Android.Graphics.Point outLargestSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCurrentSizeRange", "(Landroid/graphics/Point;Landroid/graphics/Point;)V", "GetGetCurrentSizeRange_Landroid_graphics_Point_Landroid_graphics_Point_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outSmallestSize" Type="Android.Graphics.Point" />
        <Parameter Name="outLargestSize" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="outSmallestSize">Filled in with the smallest width and height
 that the application will encounter, in pixels (not dp units).  The x
 (width) dimension here directly corresponds to
 <c><see cref="P:Android.Content.Res.Configuration.SmallestScreenWidthDp" /></c>, except the value here is in raw
 screen pixels rather than dp units.  Your application may of course
 still get smaller space yet if, for example, a soft keyboard is
 being displayed.</param>
        <param name="outLargestSize">Filled in with the largest width and height
 that the application will encounter, in pixels (not dp units).  Your
 application may of course still get larger space than this if,
 for example, screen decorations like the status bar are being hidden.
</param>
        <summary>Return the range of display sizes an application can expect to encounter
 under normal operation, as long as there is no physical change in screen
 size.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the range of display sizes an application can expect to encounter
 under normal operation, as long as there is no physical change in screen
 size.  This is basically the sizes you will see as the orientation
 changes, taking into account whatever screen decoration there is in
 each rotation.  For example, the status bar is always at the top of the
 screen, so it will reduce the height both in landscape and portrait, and
 the smallest height returned here will be the smaller of the two.

 This is intended for applications to get an idea of the range of sizes
 they will encounter while going through device rotations, to provide a
 stable UI through rotation.  The sizes here take into account all standard
 system decorations that reduce the size actually available to the
 application: the status bar, navigation bar, system bar, etc.  It does
 <i>not</i> take into account more transient elements like an IME
 soft keyboard.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getCurrentSizeRange(android.graphics.Point, android.graphics.Point)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetMetrics">
      <MemberSignature Language="C#" Value="public virtual void GetMetrics (Android.Util.DisplayMetrics outMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMetrics(class Android.Util.DisplayMetrics outMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMetrics", "(Landroid/util/DisplayMetrics;)V", "GetGetMetrics_Landroid_util_DisplayMetrics_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outMetrics" Type="Android.Util.DisplayMetrics" />
      </Parameters>
      <Docs>
        <param name="outMetrics">A <c><see cref="T:Android.Util.DisplayMetrics" /></c> object to receive the metrics.
</param>
        <summary>Gets display metrics that describe the size and density of this display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets display metrics that describe the size and density of this display.
 </para>
          <para tool="javadoc-to-mdoc">
 The size is adjusted based on the current rotation of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 The size returned by this method does not necessarily represent the
 actual raw size (native resolution) of the display.  The returned size may
 be adjusted to exclude certain system decor elements that are always visible.
 It may also be scaled to provide compatibility with older applications that
 were originally designed for smaller displays.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getMetrics(android.util.DisplayMetrics)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetRealMetrics">
      <MemberSignature Language="C#" Value="public virtual void GetRealMetrics (Android.Util.DisplayMetrics outMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetRealMetrics(class Android.Util.DisplayMetrics outMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRealMetrics", "(Landroid/util/DisplayMetrics;)V", "GetGetRealMetrics_Landroid_util_DisplayMetrics_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outMetrics" Type="Android.Util.DisplayMetrics" />
      </Parameters>
      <Docs>
        <param name="outMetrics">A <c><see cref="T:Android.Util.DisplayMetrics" /></c> object to receive the metrics.
</param>
        <summary>Gets display metrics based on the real size of this display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets display metrics based on the real size of this display.
 </para>
          <para tool="javadoc-to-mdoc">
 The size is adjusted based on the current rotation of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 The real size may be smaller than the physical size of the screen when the
 window manager is emulating a smaller display (using adb shell am display-size).
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetRealSize">
      <MemberSignature Language="C#" Value="public virtual void GetRealSize (Android.Graphics.Point outSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetRealSize(class Android.Graphics.Point outSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRealSize", "(Landroid/graphics/Point;)V", "GetGetRealSize_Landroid_graphics_Point_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outSize" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="outSize">Set to the real size of the display.
</param>
        <summary>Gets the real size of the display without subtracting any window decor or
 applying any compatibility scale factors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the real size of the display without subtracting any window decor or
 applying any compatibility scale factors.
 </para>
          <para tool="javadoc-to-mdoc">
 The size is adjusted based on the current rotation of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 The real size may be smaller than the physical size of the screen when the
 window manager is emulating a smaller display (using adb shell am display-size).
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getRealSize(android.graphics.Point)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetRectSize">
      <MemberSignature Language="C#" Value="public virtual void GetRectSize (Android.Graphics.Rect outSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetRectSize(class Android.Graphics.Rect outSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRectSize", "(Landroid/graphics/Rect;)V", "GetGetRectSize_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outSize" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="outSize">A <c><see cref="T:Android.Graphics.Rect" /></c> object to receive the size information.</param>
        <summary>Gets the size of the display as a rectangle, in pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the size of the display as a rectangle, in pixels.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getRectSize(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <altmember cref="M:Android.Views.Display.GetSize(Android.Graphics.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetSize">
      <MemberSignature Language="C#" Value="public virtual void GetSize (Android.Graphics.Point outSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetSize(class Android.Graphics.Point outSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSize", "(Landroid/graphics/Point;)V", "GetGetSize_Landroid_graphics_Point_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outSize" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="outSize">A <c><see cref="T:Android.Graphics.Point" /></c> object to receive the size information.
</param>
        <summary>Gets the size of the display, in pixels.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the size of the display, in pixels.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that this value should <i>not</i> be used for computing layouts,
 since a device will typically have screen decoration (such as a status bar)
 along the edges of the display that reduce the amount of application
 space available from the size returned here.  Layouts should instead use
 the window size.
 </para>
          <para tool="javadoc-to-mdoc">
 The size is adjusted based on the current rotation of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 The size returned by this method does not necessarily represent the
 actual raw size (native resolution) of the display.  The returned size may
 be adjusted to exclude certain system decoration elements that are always visible.
 It may also be scaled to provide compatibility with older applications that
 were originally designed for smaller displays.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getSize(android.graphics.Point)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedRefreshRates">
      <MemberSignature Language="C#" Value="public virtual float[] GetSupportedRefreshRates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32[] GetSupportedRefreshRates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSupportedRefreshRates", "()[F", "GetGetSupportedRefreshRatesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the supported refresh rates of this display in frames per second.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the supported refresh rates of this display in frames per second.
 </para>
          <para tool="javadoc-to-mdoc">
 This method only returns refresh rates for the display's default modes. For more options, use
 <c><see cref="M:Android.Views.Display.GetSupportedModes" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getSupportedRefreshRates()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public virtual int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isValid", "()Z", "GetIsValidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this display is still valid, false if the display has been removed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this display is still valid, false if the display has been removed.

 If the display is invalid, then the methods of this class will
 continue to report the most recently observed display information.
 However, it is unwise (and rather fruitless) to continue using a
 <c><see cref="T:Android.Views.Display" /></c> object after the display's demise.

 It's possible for a display that was previously invalid to become
 valid again if a display with the same id is reconnected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#isValid()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the display.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the name of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that some displays may be renamed by the user.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public virtual int Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOrientation", "()I", "GetGetOrientationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getOrientation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PixelFormat">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Format PixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.Format PixelFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPixelFormat", "()I", "GetGetPixelFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Format</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the pixel format of the display.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the pixel format of the display.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getPixelFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PresentationDeadlineNanos">
      <MemberSignature Language="C#" Value="public virtual long PresentationDeadlineNanos { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PresentationDeadlineNanos" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPresentationDeadlineNanos", "()J", "GetGetPresentationDeadlineNanosHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is how far in advance a buffer must be queued for presentation at
 a given time.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This is how far in advance a buffer must be queued for presentation at
 a given time.  If you want a buffer to appear on the screen at
 time N, you must submit the buffer before (N - presentationDeadline).
 </para>
          <para tool="javadoc-to-mdoc">
 The desired presentation time for GLES rendering may be set with
 <c><see cref="M:Android.Opengl.EGLExt.EglPresentationTimeANDROID(Android.Opengl.EGLDisplay,Android.Opengl.EGLSurface,Android.Opengl.EGLSurface)" /></c>.  For video decoding, use
 <c><see cref="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32,System.Int64)" /></c>.  Times are
 expressed in nanoseconds, using the system monotonic clock
 (<c><see cref="M:Java.Lang.JavaSystem.NanoTime" /></c>).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getPresentationDeadlineNanos()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshRate">
      <MemberSignature Language="C#" Value="public virtual float RefreshRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RefreshRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRefreshRate", "()F", "GetGetRefreshRateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the refresh rate of this display in frames per second.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the refresh rate of this display in frames per second.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getRefreshRate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual Android.Views.SurfaceOrientation Rotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.SurfaceOrientation Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRotation", "()I", "GetGetRotationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SurfaceOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rotation of the screen from its "natural" orientation.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the rotation of the screen from its "natural" orientation.
 The returned value may be <c><see cref="!:Android.Views.Surface.ROTATION_0" /></c>
 (no rotation), <c><see cref="!:Android.Views.Surface.ROTATION_90" /></c>,
 <c><see cref="!:Android.Views.Surface.ROTATION_180" /></c>, or
 <c><see cref="!:Android.Views.Surface.ROTATION_270" /></c>.  For
 example, if a device has a naturally tall screen, and the user has
 turned it on its side to go into a landscape orientation, the value
 returned here may be either <c><see cref="!:Android.Views.Surface.ROTATION_90" /></c>
 or <c><see cref="!:Android.Views.Surface.ROTATION_270" /></c> depending on
 the direction it was turned.  The angle is the rotation of the drawn
 graphics on the screen, which is the opposite direction of the physical
 rotation of the device.  For example, if the device is rotated 90
 degrees counter-clockwise, to compensate rendering will be rotated by
 90 degrees clockwise and thus the returned value here will be
 <c><see cref="!:Android.Views.Surface.ROTATION_90" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getRotation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual Android.Views.DisplayState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.DisplayState State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()I", "GetGetStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the state of the display, such as whether it is on or off.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the state of the display, such as whether it is on or off.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateDozing">
      <MemberSignature Language="C#" Value="public const int StateDozing = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 StateDozing = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STATE_DOZING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public virtual int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Display.html#getWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
