<Type Name="IEntityResolver2" FullName="Org.Xml.Sax.Ext.IEntityResolver2">
  <TypeSignature Language="VB.NET" Value="Public Interface IEntityResolver2&#xA;Implements IDisposable, IEntityResolver, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEntityResolver2 : IDisposable, Java::Interop::IJavaPeerable, Org::Xml::Sax::IEntityResolver" />
  <TypeSignature Language="C#" Value="public interface IEntityResolver2 : IDisposable, Java.Interop.IJavaPeerable, Org.Xml.Sax.IEntityResolver" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IEntityResolver2 implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Org.Xml.Sax.IEntityResolver, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Org.Xml.Sax.Ext.IEntityResolver2" />
  <TypeSignature Language="F#" Value="type IEntityResolver2 = interface&#xA;    interface IEntityResolver&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Xml.Sax.IEntityResolver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/xml/sax/ext/EntityResolver2", "", "Org.Xml.Sax.Ext.IEntityResolver2Invoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/xml/sax/ext/EntityResolver2", "", "Org.Xml.Sax.Ext.IEntityResolver2Invoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Extended interface for mapping external entity references to input
            sources, or providing a missing external subset.</summary>
    <remarks>
      <para>Extended interface for mapping external entity references to input
            sources, or providing a missing external subset.  The
            <c>XMLReader#setEntityResolver XMLReader.setEntityResolver()</c> method
            is used to provide implementations of this interface to parsers.
            When a parser uses the methods in this interface, the
            <c>EntityResolver2#resolveEntity EntityResolver2.resolveEntity()</c>
            method (in this interface) is used &lt;em&gt;instead of&lt;/em&gt; the older (SAX 1.0)
            <c>EntityResolver#resolveEntity EntityResolver.resolveEntity()</c> method.
            
            &lt;blockquote&gt;
            &lt;em&gt;This module, both source code and documentation, is in the
            Public Domain, and comes with &lt;strong&gt;NO WARRANTY&lt;/strong&gt;.&lt;/em&gt;
            &lt;/blockquote&gt;</para>
      <para>If a SAX application requires the customized handling which this
            interface defines for external entities, it must ensure that it uses
            an XMLReader with the
            &lt;em&gt;http://xml.org/sax/features/use-entity-resolver2&lt;/em&gt; feature flag
            set to &lt;em&gt;true&lt;/em&gt; (which is its default value when the feature is
            recognized).  If that flag is unrecognized, or its value is false,
            or the resolver does not implement this interface, then only the
            <c>EntityResolver</c> method will be used.</para>
      <para>That supports three categories of application that modify entity
            resolution.  &lt;em&gt;Old Style&lt;/em&gt; applications won't know about this interface;
            they will provide an EntityResolver.
            &lt;em&gt;Transitional Mode&lt;/em&gt; provide an EntityResolver2 and automatically
            get the benefit of its methods in any systems (parsers or other tools)
            supporting it, due to polymorphism.
            Both &lt;em&gt;Old Style&lt;/em&gt; and &lt;em&gt;Transitional Mode&lt;/em&gt; applications will
            work with any SAX2 parser.
            &lt;em&gt;New style&lt;/em&gt; applications will fail to run except on SAX2 parsers
            that support this particular feature.
            They will insist that feature flag have a value of "true", and the
            EntityResolver2 implementation they provide  might throw an exception
            if the original SAX 1.0 style entity resolution method is invoked.</para>
      <para>Added in SAX 2.0 (extensions 1.1 alpha).</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/xml/sax/ext/EntityResolver2" title="Reference documentation">Java documentation for <code>org.xml.sax.ext.EntityResolver2</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="GetExternalSubset">
      <MemberSignature Language="VB.NET" Value="Public Function GetExternalSubset (name As String, baseURI As String) As InputSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Org::Xml::Sax::InputSource ^ GetExternalSubset(System::String ^ name, System::String ^ baseURI);" />
      <MemberSignature Language="C#" Value="public Org.Xml.Sax.InputSource? GetExternalSubset (string? name, string? baseURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.Xml.Sax.InputSource GetExternalSubset(string name, string baseURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Ext.IEntityResolver2.GetExternalSubset(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetExternalSubset : string * string -&gt; Org.Xml.Sax.InputSource" Usage="iEntityResolver2.GetExternalSubset (name, baseURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getExternalSubset", "(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetGetExternalSubset_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.Ext.IEntityResolver2Invoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getExternalSubset", "(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetGetExternalSubset_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.Ext.IEntityResolver2Invoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.InputSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Identifies the document root element.  This name comes
               from a DOCTYPE declaration (where available) or from the actual
               root element.</param>
        <param name="baseURI">The document's base URI, serving as an additional
               hint for selecting the external subset.  This is always an absolute
               URI, unless it is null because the XMLReader was given an InputSource
               without one.</param>
        <summary>Allows applications to provide an external subset for documents
            that don't explicitly define one.</summary>
        <returns>An InputSource object describing the new external subset
               to be used by the parser, or null to indicate that no external
               subset is provided.</returns>
        <remarks>
          <para>Allows applications to provide an external subset for documents
            that don't explicitly define one.  Documents with DOCTYPE declarations
            that omit an external subset can thus augment the declarations
            available for validation, entity processing, and attribute processing
            (normalization, defaulting, and reporting types including ID).
            This augmentation is reported
            through the <c>LexicalHandler#startDTD startDTD()</c> method as if
            the document text had originally included the external subset;
            this callback is made before any internal subset data or errors
            are reported.&lt;/p&gt;</para>
          <para>This method can also be used with documents that have no DOCTYPE
            declaration.  When the root element is encountered,
            but no DOCTYPE declaration has been seen, this method is
            invoked.  If it returns a value for the external subset, that root
            element is declared to be the root element, giving the effect of
            splicing a DOCTYPE declaration at the end the prolog of a document
            that could not otherwise be valid.  The sequence of parser callbacks
            in that case logically resembles this:</para>
          <code lang="text/java">... comments and PIs from the prolog (as usual)
            startDTD ("rootName", source.getPublicId (), source.getSystemId ());
            startEntity ("[dtd]");
            ... declarations, comments, and PIs from the external subset
            endEntity ("[dtd]");
            endDTD ();
            ... then the rest of the document (as usual)
            startElement (..., "rootName", ...);
            </code>
          <para>Note that the InputSource gets no further resolution.
            Implementations of this method may wish to invoke
            <c>#resolveEntity resolveEntity()</c> to gain benefits such as use
            of local caches of DTD entities.  Also, this method will never be
            used by a (non-validating) processor that is not including external
            parameter entities.</para>
          <para>Uses for this method include facilitating data validation when
            interoperating with XML processors that would always require
            undesirable network accesses for external entities, or which for
            other reasons adopt a "no DTDs" policy.
            Non-validation motives include forcing documents to include DTDs so
            that attributes are handled consistently.
            For example, an XPath processor needs to know which attibutes have
            type "ID" before it can process a widely used type of reference.</para>
          <para>&lt;strong&gt;Warning:&lt;/strong&gt; Returning an external subset modifies
            the input document.  By providing definitions for general entities,
            it can make a malformed document appear to be well formed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/ext/EntityResolver2#getExternalSubset(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.ext.EntityResolver2.getExternalSubset(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly wrapping
    another exception.</exception>
        <exception cref="T:Java.IO.IOException">Probably indicating a failure to create
    a new InputStream or Reader, or an illegal URL.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="VB.NET" Value="Public Function ResolveEntity (name As String, publicId As String, baseURI As String, systemId As String) As InputSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Org::Xml::Sax::InputSource ^ ResolveEntity(System::String ^ name, System::String ^ publicId, System::String ^ baseURI, System::String ^ systemId);" />
      <MemberSignature Language="C#" Value="public Org.Xml.Sax.InputSource? ResolveEntity (string? name, string? publicId, string? baseURI, string? systemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.Xml.Sax.InputSource ResolveEntity(string name, string publicId, string baseURI, string systemId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Ext.IEntityResolver2.ResolveEntity(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ResolveEntity : string * string * string * string -&gt; Org.Xml.Sax.InputSource" Usage="iEntityResolver2.ResolveEntity (name, publicId, baseURI, systemId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolveEntity", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetResolveEntity_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.Ext.IEntityResolver2Invoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolveEntity", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetResolveEntity_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.Ext.IEntityResolver2Invoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.InputSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="baseURI" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Identifies the external entity being resolved.
               Either "[dtd]" for the external subset, or a name starting
               with "%" to indicate a parameter entity, or else the name of
               a general entity.  This is never null when invoked by a SAX2
               parser.</param>
        <param name="publicId">The public identifier of the external entity being
               referenced (normalized as required by the XML specification), or
               null if none was supplied.</param>
        <param name="baseURI">The URI with respect to which relative systemIDs
               are interpreted.  This is always an absolute URI, unless it is
               null (likely because the XMLReader was given an InputSource without
             one).  This URI is defined by the XML specification to be the one
               associated with the "&amp;lt;" starting the relevant declaration.</param>
        <param name="systemId">The system identifier of the external entity
               being referenced; either a relative or absolute URI.
             This is never null when invoked by a SAX2 parser; only declared
               entities, and any external subset, are resolved by such parsers.</param>
        <summary>Allows applications to map references to external entities into input
            sources, or tell the parser it should use conventional URI resolution.</summary>
        <returns>An InputSource object describing the new input source to
               be used by the parser.  Returning null directs the parser to
               resolve the system ID against the base URI and open a connection
               to resulting URI.</returns>
        <remarks>
          <para>Allows applications to map references to external entities into input
            sources, or tell the parser it should use conventional URI resolution.
            This method is only called for external entities which have been
            properly declared.
            This method provides more flexibility than the <c>EntityResolver</c>
            interface, supporting implementations of more complex catalogue
            schemes such as the one defined by the <see href="http://www.oasis-open.org/committees/entity/spec-2001-08-06.html">OASIS XML Catalogs</see> specification.&lt;/p&gt;</para>
          <para>Parsers configured to use this resolver method will call it
            to determine the input source to use for any external entity
            being included because of a reference in the XML text.
            That excludes the document entity, and any external entity returned
            by <c>#getExternalSubset getExternalSubset()</c>.
            When a (non-validating) processor is configured not to include
            a class of entities (parameter or general) through use of feature
            flags, this method is not invoked for such entities.</para>
          <para>Note that the entity naming scheme used here is the same one
            used in the <c>LexicalHandler</c>, or in the <c>org.xml.sax.ContentHandler#skippedEntity
                ContentHandler.skippedEntity()</c>
            method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/ext/EntityResolver2#resolveEntity(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.ext.EntityResolver2.resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly wrapping
    another exception.</exception>
        <exception cref="T:Java.IO.IOException">Probably indicating a failure to create
    a new InputStream or Reader, or an illegal URL.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
