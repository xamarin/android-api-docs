<Type Name="InputMethod+AccessibilityInputConnection" FullName="Android.AccessibilityServices.InputMethod+AccessibilityInputConnection">
  <TypeSignature Language="C#" Value="public sealed class InputMethod.AccessibilityInputConnection : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit InputMethod/AccessibilityInputConnection extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection" />
  <TypeSignature Language="F#" Value="type InputMethod.AccessibilityInputConnection = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/accessibilityservice/InputMethod$AccessibilityInputConnection", ApiSince=33, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/accessibilityservice/InputMethod$AccessibilityInputConnection", ApiSince=33, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This class provides the allowed list of <c>InputConnection</c> APIs for
            accessibility services.</summary>
    <remarks>
      <para>This class provides the allowed list of <c>InputConnection</c> APIs for
            accessibility services.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearMetaKeyStates">
      <MemberSignature Language="C#" Value="public void ClearMetaKeyStates (int states);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearMetaKeyStates(int32 states) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.ClearMetaKeyStates(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ClearMetaKeyStates : int -&gt; unit" Usage="accessibilityInputConnection.ClearMetaKeyStates states" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearMetaKeyStates", "(I)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearMetaKeyStates", "(I)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="states" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="states">The states to be cleared, may be one or more bits as
            per <c>KeyEvent#getMetaState() KeyEvent.getMetaState()</c>.</param>
        <summary>Clear the given meta key pressed states in the given input
            connection.</summary>
        <remarks>
          <para>Clear the given meta key pressed states in the given input
            connection.</para>
          <para>This can be used by the accessibility service to clear the meta key states set
            by a hardware keyboard with latched meta keys, if the editor
            keeps track of these.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#clearMetaKeyStates(int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.clearMetaKeyStates(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public void CommitText (Java.Lang.ICharSequence text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CommitText(class Java.Lang.ICharSequence text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.CommitText(Java.Lang.ICharSequence,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="member this.CommitText : Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; unit" Usage="accessibilityInputConnection.CommitText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
                   in Java characters. If &gt; 0, this is relative to the end
                   of the text - 1; if &lt;= 0, this is relative to the start
                   of the text. So a value of 1 will always advance the cursor
                   to the position after the full text being inserted. Note that
                   this means you can't position the cursor within the text,
                   because the editor can make modifications to the text
                   you are providing so it is not possible to correctly specify
                   locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>Commit text to the text box and set the new cursor position.</summary>
        <remarks>
          <para>Commit text to the text box and set the new cursor position. This method is
            used to allow the IME to provide extra information while setting up text.</para>
          <para>This method commits the contents of the currently composing text, and then
            moves the cursor according to <c>newCursorPosition</c>. If there
            is no composing text when this method is called, the new text is
            inserted at the cursor position, removing text inside the selection
            if any.</para>
          <para>Calling this method will cause the editor to call
            <c>#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current accessibility service after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the accessibility service by calling
            <c>InputMethodManager#updateSelection(android.view.View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#commitText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.commitText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public void CommitText (string text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CommitText(string text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.CommitText(System.String,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="member this.CommitText : string * int * Android.Views.InputMethods.TextAttribute -&gt; unit" Usage="accessibilityInputConnection.CommitText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
                   in Java characters. If &gt; 0, this is relative to the end
                   of the text - 1; if &lt;= 0, this is relative to the start
                   of the text. So a value of 1 will always advance the cursor
                   to the position after the full text being inserted. Note that
                   this means you can't position the cursor within the text,
                   because the editor can make modifications to the text
                   you are providing so it is not possible to correctly specify
                   locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>Commit text to the text box and set the new cursor position.</summary>
        <remarks>
          <para>Commit text to the text box and set the new cursor position. This method is
            used to allow the IME to provide extra information while setting up text.</para>
          <para>This method commits the contents of the currently composing text, and then
            moves the cursor according to <c>newCursorPosition</c>. If there
            is no composing text when this method is called, the new text is
            inserted at the cursor position, removing text inside the selection
            if any.</para>
          <para>Calling this method will cause the editor to call
            <c>#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current accessibility service after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the accessibility service by calling
            <c>InputMethodManager#updateSelection(android.view.View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#commitText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.commitText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSurroundingText">
      <MemberSignature Language="C#" Value="public void DeleteSurroundingText (int beforeLength, int afterLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteSurroundingText(int32 beforeLength, int32 afterLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.DeleteSurroundingText(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.DeleteSurroundingText : int * int -&gt; unit" Usage="accessibilityInputConnection.DeleteSurroundingText (beforeLength, afterLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deleteSurroundingText", "(II)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deleteSurroundingText", "(II)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeLength" Type="System.Int32" />
        <Parameter Name="afterLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The number of characters before the cursor to be deleted, in code
                   unit. If this is greater than the number of existing characters between the
                   beginning of the text and the cursor, then this method does not fail but deletes
                   all the characters in that range.</param>
        <param name="afterLength">The number of characters after the cursor to be deleted, in code unit.
                   If this is greater than the number of existing characters between the cursor and
                   the end of the text, then this method does not fail but deletes all the characters
                   in that range.</param>
        <summary>Delete &lt;var&gt;beforeLength&lt;/var&gt; characters of text before the
            current cursor position, and delete &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the current cursor position, excluding
            the selection.</summary>
        <remarks>
          <para>Delete &lt;var&gt;beforeLength&lt;/var&gt; characters of text before the
            current cursor position, and delete &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the current cursor position, excluding
            the selection. Before and after refer to the order of the
            characters in the string, not to their visual representation:
            this means you don't have to figure out the direction of the
            text and can just use the indices as-is.</para>
          <para>The lengths are supplied in Java chars, not in code points
            or in glyphs.</para>
          <para>Since this method only operates on text before and after the
            selection, it can't affect the contents of the selection. This
            may affect the composing span if the span includes characters
            that are to be deleted, but otherwise will not change it. If
            some characters in the composing span are deleted, the
            composing span will persist but get shortened by however many
            chars inside it have been removed.</para>
          <para>&lt;strong&gt;Accessibility service authors:&lt;/strong&gt; please be careful not to
            delete only half of a surrogate pair. Also take care not to
            delete more characters than are in the editor, as that may have
            ill effects on the application. Calling this method will cause
            the editor to call <c>InputMethod#onUpdateSelection(int, int, int, int, int, int)</c>
            on your service after the batch input is over.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can make a change
            to the text or change the selection position and use this
            method right away; you need to make sure the effects are
            consistent with the results of the latest edits. Also, although
            the IME should not send lengths bigger than the contents of the
            string, you should check the values for overflows and trim the
            indices to the size of the contents to avoid crashes. Since
            this changes the contents of the editor, you need to make the
            changes known to the input method by calling
            <c>InputMethodManager#updateSelection(android.view.View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#deleteSurroundingText(int,%20int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.deleteSurroundingText(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCursorCapsMode">
      <MemberSignature Language="C#" Value="public int GetCursorCapsMode (int reqModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCursorCapsMode(int32 reqModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.GetCursorCapsMode(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetCursorCapsMode : int -&gt; int" Usage="accessibilityInputConnection.GetCursorCapsMode reqModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCursorCapsMode", "(I)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCursorCapsMode", "(I)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reqModes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reqModes">The desired modes to retrieve, as defined by
            <c>android.text.TextUtils#getCapsMode TextUtils.getCapsMode</c>. These
            constants are defined so that you can simply pass the current
            <c>EditorInfo#inputType TextBoxAttribute.contentType</c> value
            directly in to here.</param>
        <summary>Retrieve the current capitalization mode in effect at the
            current cursor position in the text.</summary>
        <returns>the caps mode flags that are in effect at the current
            cursor position. See TYPE_TEXT_FLAG_CAPS_* in <c>android.text.InputType</c>.</returns>
        <remarks>
          <para>Retrieve the current capitalization mode in effect at the
            current cursor position in the text. See
            <c>android.text.TextUtils#getCapsMode TextUtils.getCapsMode</c>
            for more information.</para>
          <para>This method may fail either if the input connection has
            become invalid (such as its process crashing) or the client is
            taking too long to respond with the text (it is given a couple
            seconds to return). In either case, 0 is returned.</para>
          <para>This method does not affect the text in the editor in any
            way, nor does it affect the selection or composing spans.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can change the
            cursor position and use this method right away; you need to make
            sure the returned value is consistent with the results of the
            latest edits and changes to the cursor position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#getCursorCapsMode(int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.getCursorCapsMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSurroundingText">
      <MemberSignature Language="C#" Value="public Android.Views.InputMethods.SurroundingText? GetSurroundingText (int beforeLength, int afterLength, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.InputMethods.SurroundingText GetSurroundingText(int32 beforeLength, int32 afterLength, int32 flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.GetSurroundingText(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetSurroundingText : int * int * int -&gt; Android.Views.InputMethods.SurroundingText" Usage="accessibilityInputConnection.GetSurroundingText (beforeLength, afterLength, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSurroundingText", "(III)Landroid/view/inputmethod/SurroundingText;", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSurroundingText", "(III)Landroid/view/inputmethod/SurroundingText;", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.SurroundingText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeLength" Type="System.Int32" />
        <Parameter Name="afterLength" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The expected length of the text before the cursor.</param>
        <param name="afterLength">The expected length of the text after the cursor.</param>
        <param name="flags">Supplies additional options controlling how the text is returned. May be
                         either <c>0</c> or <c>InputConnection#GET_TEXT_WITH_STYLES</c>.</param>
        <summary>Gets the surrounding text around the current cursor, with &lt;var&gt;beforeLength&lt;/var&gt;
            characters of text before the cursor (start of the selection), &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the cursor (end of the selection), and all of the selected
            text.</summary>
        <returns>an <c>android.view.inputmethod.SurroundingText</c> object describing the
            surrounding text and state of selection, or null if the input connection is no longer
            valid, or the editor can't comply with the request for some reason, or the application
            does not implement this method. The length of the returned text might be less than the
            sum of &lt;var&gt;beforeLength&lt;/var&gt; and &lt;var&gt;afterLength&lt;/var&gt; .</returns>
        <remarks>
          <para>Gets the surrounding text around the current cursor, with &lt;var&gt;beforeLength&lt;/var&gt;
            characters of text before the cursor (start of the selection), &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the cursor (end of the selection), and all of the selected
            text. The range are for java characters, not glyphs that can be multiple characters.</para>
          <para>This method may fail either if the input connection has become invalid (such as its
            process crashing), or the client is taking too long to respond with the text (it is
            given a couple seconds to return), or the protocol is not supported. In any of these
            cases, null is returned.</para>
          <para>This method does not affect the text in the editor in any way, nor does it affect the
            selection or composing spans.</para>
          <para>If <c>InputConnection#GET_TEXT_WITH_STYLES</c> is supplied as flags, the editor
            should return a <c>android.text.Spanned</c> with all the spans set on the text.</para>
          <para>&lt;strong&gt;Accessibility service authors:&lt;/strong&gt; please consider this will trigger an
            IPC round-trip that will take some time. Assume this method consumes a lot of time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#getSurroundingText(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.getSurroundingText(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformContextMenuAction">
      <MemberSignature Language="C#" Value="public void PerformContextMenuAction (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformContextMenuAction(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.PerformContextMenuAction(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.PerformContextMenuAction : int -&gt; unit" Usage="accessibilityInputConnection.PerformContextMenuAction id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performContextMenuAction", "(I)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performContextMenuAction", "(I)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Perform a context menu action on the field.</summary>
        <remarks>
          <para>Perform a context menu action on the field. The given id may be one of:
            <c>android.R.id#selectAll</c>,
            <c>android.R.id#startSelectingText</c>, <c>android.R.id#stopSelectingText</c>,
            <c>android.R.id#cut</c>, <c>android.R.id#copy</c>,
            <c>android.R.id#paste</c>, <c>android.R.id#copyUrl</c>,
            or <c>android.R.id#switchInputMethod</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#performContextMenuAction(int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.performContextMenuAction(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformEditorAction">
      <MemberSignature Language="C#" Value="public void PerformEditorAction (int editorAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformEditorAction(int32 editorAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.PerformEditorAction(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.PerformEditorAction : int -&gt; unit" Usage="accessibilityInputConnection.PerformEditorAction editorAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performEditorAction", "(I)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performEditorAction", "(I)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorAction" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="editorAction">This must be one of the action constants for
            <c>EditorInfo#imeOptions EditorInfo.imeOptions</c>, such as
            <c>EditorInfo#IME_ACTION_GO EditorInfo.EDITOR_ACTION_GO</c>, or the value of
            <c>EditorInfo#actionId EditorInfo.actionId</c> if a custom action is available.</param>
        <summary>Have the editor perform an action it has said it can do.</summary>
        <remarks>
          <para>Have the editor perform an action it has said it can do.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#performEditorAction(int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.performEditorAction(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendKeyEvent">
      <MemberSignature Language="C#" Value="public void SendKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.SendKeyEvent(Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="member this.SendKeyEvent : Android.Views.KeyEvent -&gt; unit" Usage="accessibilityInputConnection.SendKeyEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <param name="event">The key event.</param>
        <summary>Send a key event to the process that is currently attached
            through this input connection.</summary>
        <remarks>
          <para>Send a key event to the process that is currently attached
            through this input connection. The event will be dispatched
            like a normal key event, to the currently focused view; this
            generally is the view that is providing this InputConnection,
            but due to the asynchronous nature of this protocol that can
            not be guaranteed and the focus may have changed by the time
            the event is received.</para>
          <para>This method can be used to send key events to the
            application. For example, an on-screen keyboard may use this
            method to simulate a hardware keyboard. There are three types
            of standard keyboards, numeric (12-key), predictive (20-key)
            and ALPHA (QWERTY). You can specify the keyboard type by
            specify the device id of the key event.</para>
          <para>You will usually want to set the flag
            <c>KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD</c>
            on all key event objects you give to this API; the flag will
            not be set for you.</para>
          <para>Note that it's discouraged to send such key events in normal
            operation; this is mainly for use with
            <c>android.text.InputType#TYPE_NULL</c> type text fields. Use
            the <c>#commitText</c> family of methods to send text to the
            application instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#sendKeyEvent(android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.sendKeyEvent(android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelection">
      <MemberSignature Language="C#" Value="public void SetSelection (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelection(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.SetSelection(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetSelection : int * int -&gt; unit" Usage="accessibilityInputConnection.SetSelection (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSelection", "(II)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSelection", "(II)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the selection should start.</param>
        <param name="end">the character index where the selection should end.</param>
        <summary>Set the selection of the text editor.</summary>
        <remarks>
          <para>Set the selection of the text editor. To set the cursor
            position, start and end should have the same value.</para>
          <para>Since this moves the cursor, calling this method will cause
            the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int,
            int,int, int)</c> on the current IME after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the input method by calling
            <c>InputMethodManager#updateSelection(android.view.View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>This has no effect on the composing region which must stay
            unchanged. The order of start and end is not important. In
            effect, the region from start to end and the region from end to
            start is the same. Editor authors, be ready to accept a start
            that is greater than end.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/accessibilityservice/InputMethod.AccessibilityInputConnection#setSelection(int,%20int)" title="Reference documentation">Java documentation for <code>android.accessibilityservice.InputMethod.AccessibilityInputConnection.setSelection(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.AccessibilityServices.InputMethod.AccessibilityInputConnection.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
