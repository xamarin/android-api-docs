<Type Name="IManagedClientConnection" FullName="Org.Apache.Http.Conn.IManagedClientConnection">
  <TypeSignature Language="C#" Value="public interface IManagedClientConnection : IDisposable, Org.Apache.Http.Conn.IConnectionReleaseTrigger, Org.Apache.Http.IHttpClientConnection, Org.Apache.Http.IHttpInetConnection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IManagedClientConnection implements class Android.Runtime.IJavaObject, class Org.Apache.Http.Conn.IConnectionReleaseTrigger, class Org.Apache.Http.IHttpClientConnection, class Org.Apache.Http.IHttpConnection, class Org.Apache.Http.IHttpInetConnection, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Org.Apache.Http.Conn.IConnectionReleaseTrigger</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Apache.Http.IHttpClientConnection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Apache.Http.IHttpInetConnection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/apache/http/conn/ManagedClientConnection", "", "Org.Apache.Http.Conn.IManagedClientConnectionInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A client-side connection with advanced connection logic.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A client-side connection with advanced connection logic.
 Instances are typically obtained from a connection manager.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="IsMarkedReusable">
      <MemberSignature Language="C#" Value="public bool IsMarkedReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkedReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMarkedReusable", "()Z", "GetIsMarkedReusableHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this connection is in a reusable communication state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this connection is in a reusable communication state.
 See <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.MarkReusable" /></c> and
 <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.UnmarkReusable" /></c> for details.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#isMarkedReusable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsSecure">
      <MemberSignature Language="C#" Value="public bool IsSecure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSecure", "()Z", "GetIsSecureHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this connection is secure.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this connection is secure.
 The return value is well-defined only while the connection is open.
 It may change even while the connection is open.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#isSecure()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayerProtocol">
      <MemberSignature Language="C#" Value="public void LayerProtocol (Org.Apache.Http.Protocol.IHttpContext context, Org.Apache.Http.Params.IHttpParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayerProtocol(class Org.Apache.Http.Protocol.IHttpContext context, class Org.Apache.Http.Params.IHttpParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("layerProtocol", "(Lorg/apache/http/protocol/HttpContext;Lorg/apache/http/params/HttpParams;)V", "GetLayerProtocol_Lorg_apache_http_protocol_HttpContext_Lorg_apache_http_params_HttpParams_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Org.Apache.Http.Protocol.IHttpContext" />
        <Parameter Name="params" Type="Org.Apache.Http.Params.IHttpParams" />
      </Parameters>
      <Docs>
        <param name="context">the context for layering on top of this connection</param>
        <param name="params">the parameters for layering on top of this connection</param>
        <summary>Layers a new protocol on top of a <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.TunnelTarget(System.Boolean,Org.Apache.Http.Params.IHttpParams)" /></c>
 connection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Layers a new protocol on top of a <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.TunnelTarget(System.Boolean,Org.Apache.Http.Params.IHttpParams)" /></c>
 connection. This is typically used to create a TLS/SSL connection
 through a proxy.
 The route is the one previously passed to <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.Open(Org.Apache.Http.Conn.Routing.HttpRoute,Org.Apache.Http.Protocol.IHttpContext,Org.Apache.Http.Protocol.IHttpContext)" /></c>.
 It is not guaranteed that the layered connection is
 <c><see cref="P:Org.Apache.Http.Conn.IManagedClientConnection.IsSecure" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">in case of a problem
</exception>
      </Docs>
    </Member>
    <Member MemberName="MarkReusable">
      <MemberSignature Language="C#" Value="public void MarkReusable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkReusable() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("markReusable", "()V", "GetMarkReusableHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks this connection as being in a reusable communication state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Marks this connection as being in a reusable communication state.
 The checkpoints for reuseable communication states (in the absence
 of pipelining) are before sending a request and after receiving
 the response in it's entirety.
 The connection will automatically clear the checkpoint when
 used for communication. A call to this method indicates that
 the next checkpoint has been reached.
 <format type="text/html"><br /></format>
 A reusable communication state is necessary but not sufficient
 for the connection to be reused.
 A <c><see cref="P:Org.Apache.Http.Conn.IManagedClientConnection.Route" /></c> mismatch, the connection being closed,
 or other circumstances might prevent reuse.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#markReusable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open (Org.Apache.Http.Conn.Routing.HttpRoute route, Org.Apache.Http.Protocol.IHttpContext context, Org.Apache.Http.Params.IHttpParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Open(class Org.Apache.Http.Conn.Routing.HttpRoute route, class Org.Apache.Http.Protocol.IHttpContext context, class Org.Apache.Http.Params.IHttpParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "(Lorg/apache/http/conn/routing/HttpRoute;Lorg/apache/http/protocol/HttpContext;Lorg/apache/http/params/HttpParams;)V", "GetOpen_Lorg_apache_http_conn_routing_HttpRoute_Lorg_apache_http_protocol_HttpContext_Lorg_apache_http_params_HttpParams_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Org.Apache.Http.Conn.Routing.HttpRoute" />
        <Parameter Name="context" Type="Org.Apache.Http.Protocol.IHttpContext" />
        <Parameter Name="params" Type="Org.Apache.Http.Params.IHttpParams" />
      </Parameters>
      <Docs>
        <param name="route">the route along which to open. It will be opened to
                  the first proxy if present, or directly to the target.</param>
        <param name="context">the context for opening this connection</param>
        <param name="params">the parameters for opening this connection</param>
        <summary>Opens this connection according to the given route.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Opens this connection according to the given route.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">in case of a problem
</exception>
      </Docs>
    </Member>
    <Member MemberName="Route">
      <MemberSignature Language="C#" Value="public Org.Apache.Http.Conn.Routing.HttpRoute Route { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Org.Apache.Http.Conn.Routing.HttpRoute Route" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRoute", "()Lorg/apache/http/conn/routing/HttpRoute;", "GetGetRouteHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Apache.Http.Conn.Routing.HttpRoute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the current route of this connection.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains the current route of this connection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#getRoute()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetIdleDuration">
      <MemberSignature Language="C#" Value="public void SetIdleDuration (long duration, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIdleDuration(int64 duration, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setIdleDuration", "(JLjava/util/concurrent/TimeUnit;)V", "GetSetIdleDuration_JLjava_util_concurrent_TimeUnit_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="duration">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>Sets the duration that this connection can remain idle before it is
 reused.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the duration that this connection can remain idle before it is
 reused. The connection should not be used again if this time elapses. The
 idle duration must be reset after each request sent over this connection.
 The elapsed time starts counting when the connection is released, which
 is typically after the headers (and any response body, if present) is
 fully consumed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#setIdleDuration(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SSLSession">
      <MemberSignature Language="C#" Value="public Javax.Net.Ssl.ISSLSession SSLSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.ISSLSession SSLSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSSLSession", "()Ljavax/net/ssl/SSLSession;", "GetGetSSLSessionHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.ISSLSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the SSL session of the underlying connection, if any.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains the SSL session of the underlying connection, if any.
 If this connection is open, and the underlying socket is an
 <c><see cref="T:Javax.Net.Ssl.SSLSocket" /></c>, the SSL session of
 that socket is obtained. This is a potentially blocking operation.
 <format type="text/html"><br /></format><format type="text/html"><b>Note:</b></format> Whether the underlying socket is an SSL socket
 can not necessarily be determined via <c><see cref="P:Org.Apache.Http.Conn.IManagedClientConnection.IsSecure" /></c>.
 Plain sockets may be considered secure, for example if they are
 connected to a known host in the same network segment.
 On the other hand, SSL sockets may be considered insecure,
 for example depending on the chosen cipher suite.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#getSSLSession()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Java.Lang.Object State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()Ljava/lang/Object;", "GetGetStateHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setState", "(Ljava/lang/Object;)V", "GetSetState_Ljava_lang_Object_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the state object associated with this connection.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#getState()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the state object associated with this connection.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#setState(java.lang.Object)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Assigns a state object to this connection. Connection managers may make 
 use of the connection state when allocating persistent connections.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TunnelProxy">
      <MemberSignature Language="C#" Value="public void TunnelProxy (Org.Apache.Http.HttpHost next, bool secure, Org.Apache.Http.Params.IHttpParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TunnelProxy(class Org.Apache.Http.HttpHost next, bool secure, class Org.Apache.Http.Params.IHttpParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tunnelProxy", "(Lorg/apache/http/HttpHost;ZLorg/apache/http/params/HttpParams;)V", "GetTunnelProxy_Lorg_apache_http_HttpHost_ZLorg_apache_http_params_HttpParams_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="Org.Apache.Http.HttpHost" />
        <Parameter Name="secure" Type="System.Boolean" />
        <Parameter Name="params" Type="Org.Apache.Http.Params.IHttpParams" />
      </Parameters>
      <Docs>
        <param name="next">the proxy to which the tunnel was established.
                  This is <format type="text/html"><i>not</i></format> the proxy <format type="text/html"><i>through</i></format> which
                  the tunnel was established, but the new end point
                  of the tunnel. The tunnel does <format type="text/html"><i>not</i></format> yet
                  reach to the target, use <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.TunnelTarget(System.Boolean,Org.Apache.Http.Params.IHttpParams)" /></c>
                  to indicate an end-to-end tunnel.</param>
        <param name="secure">
          <c>true</c> if the connection should be
                  considered secure, <c>false</c> otherwise</param>
        <param name="params">the parameters for tunnelling this connection</param>
        <summary>Indicates that a tunnel to an intermediate proxy has been established.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that a tunnel to an intermediate proxy has been established.
 This is used exclusively for so-called <format type="text/html"><i>proxy chains</i></format>, where
 a request has to pass through multiple proxies before reaching the
 target. In that case, all proxies but the last need to be tunnelled
 when establishing the connection. Tunnelling of the last proxy to the
 target is optional and would be indicated via <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.TunnelTarget(System.Boolean,Org.Apache.Http.Params.IHttpParams)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">in case of a problem
</exception>
      </Docs>
    </Member>
    <Member MemberName="TunnelTarget">
      <MemberSignature Language="C#" Value="public void TunnelTarget (bool secure, Org.Apache.Http.Params.IHttpParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TunnelTarget(bool secure, class Org.Apache.Http.Params.IHttpParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tunnelTarget", "(ZLorg/apache/http/params/HttpParams;)V", "GetTunnelTarget_ZLorg_apache_http_params_HttpParams_Handler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secure" Type="System.Boolean" />
        <Parameter Name="params" Type="Org.Apache.Http.Params.IHttpParams" />
      </Parameters>
      <Docs>
        <param name="secure">
          <c>true</c> if the tunnel should be considered
                  secure, <c>false</c> otherwise</param>
        <param name="params">the parameters for tunnelling this connection</param>
        <summary>Indicates that a tunnel to the target has been established.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that a tunnel to the target has been established.
 The route is the one previously passed to <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.Open(Org.Apache.Http.Conn.Routing.HttpRoute,Org.Apache.Http.Protocol.IHttpContext,Org.Apache.Http.Protocol.IHttpContext)" /></c>.
 Subsequently, <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.LayerProtocol(Org.Apache.Http.Protocol.IHttpContext,Org.Apache.Http.Params.IHttpParams)" /></c> can be called
 to layer the TLS/SSL protocol on top of the tunnelled connection.
 <format type="text/html"><br /></format><format type="text/html"><b>Note:</b></format> In HttpClient 3, a call to the corresponding method
 would automatically trigger the layering of the TLS/SSL protocol.
 This is not the case anymore, you can establish a tunnel without
 layering a new protocol over the connection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#tunnelTarget(boolean, org.apache.http.params.HttpParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">in case of a problem
</exception>
      </Docs>
    </Member>
    <Member MemberName="UnmarkReusable">
      <MemberSignature Language="C#" Value="public void UnmarkReusable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkReusable() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unmarkReusable", "()V", "GetUnmarkReusableHandler:Org.Apache.Http.Conn.IManagedClientConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks this connection as not being in a reusable state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Marks this connection as not being in a reusable state.
 This can be used immediately before releasing this connection
 to prevent it's reuse. Reasons for preventing reuse include
 error conditions and the evaluation of a
 <c><see cref="T:Org.Apache.Http.IConnectionReuseStrategy" /></c>.
 <format type="text/html"><br /></format><format type="text/html"><b>Note:</b></format>
 It is <format type="text/html"><i>not</i></format> necessary to call here before writing to
 or reading from this connection. Communication attempts will
 automatically unmark the state as non-reusable. It can then
 be switched back using <c><see cref="M:Org.Apache.Http.Conn.IManagedClientConnection.MarkReusable" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/apache/http/conn/ManagedClientConnection.html#unmarkReusable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
