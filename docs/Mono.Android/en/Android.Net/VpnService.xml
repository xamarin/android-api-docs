<Type Name="VpnService" FullName="Android.Net.VpnService">
  <TypeSignature Language="C#" Value="public class VpnService : Android.App.Service" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VpnService extends Android.App.Service" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Service</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/VpnService", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="14">
    <summary>VpnService is a base class for applications to extend and build their
 own VPN solutions.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">VpnService is a base class for applications to extend and build their
 own VPN solutions. In general, it creates a virtual network interface,
 configures addresses and routing rules, and returns a file descriptor
 to the application. Each read from the descriptor retrieves an outgoing
 packet which was routed to the interface. Each write to the descriptor
 injects an incoming packet just like it was received from the interface.
 The interface is running on Internet Protocol (IP), so packets are
 always started with IP headers. The application then completes a VPN
 connection by processing and exchanging packets with the remote server
 over a tunnel.

 </para>
      <para tool="javadoc-to-mdoc">Letting applications intercept packets raises huge security concerns.
 A VPN application can easily break the network. Besides, two of them may
 conflict with each other. The system takes several actions to address
 these issues. Here are some key points:
 <list type="bullet"><item><term>User action is required the first time an application creates a VPN
       connection.</term></item><item><term>There can be only one VPN connection running at the same time. The
       existing interface is deactivated when a new one is created.</term></item><item><term>A system-managed notification is shown during the lifetime of a
       VPN connection.</term></item><item><term>A system-managed dialog gives the information of the current VPN
       connection. It also provides a button to disconnect.</term></item><item><term>The network is restored automatically when the file descriptor is
       closed. It also covers the cases when a VPN application is crashed
       or killed by the system.</term></item></list></para>
      <para tool="javadoc-to-mdoc">There are two primary methods in this class: <c><see cref="M:Android.Net.VpnService.Prepare(Android.Content.Context)" /></c> and
 <c><see cref="!:NoType:android/net/VpnService$Builder;Href=../../../reference/android/net/VpnService.Builder.html#establish()" /></c>. The former deals with user action and stops
 the VPN connection created by another application. The latter creates
 a VPN interface using the parameters supplied to the <c><see cref="!:NoType:android/net/VpnService$Builder;Href=../../../reference/android/net/VpnService.Builder.html" /></c>.
 An application must call <c><see cref="M:Android.Net.VpnService.Prepare(Android.Content.Context)" /></c> to grant the right to use
 other methods in this class, and the right can be revoked at any time.
 Here are the general steps to create a VPN connection:
 <list type="number"><item><term>When the user presses the button to connect, call <c><see cref="M:Android.Net.VpnService.Prepare(Android.Content.Context)" /></c>
       and launch the returned intent, if non-null.</term></item><item><term>When the application becomes prepared, start the service.</term></item><item><term>Create a tunnel to the remote server and negotiate the network
       parameters for the VPN connection.</term></item><item><term>Supply those parameters to a <c><see cref="!:NoType:android/net/VpnService$Builder;Href=../../../reference/android/net/VpnService.Builder.html" /></c> and create a VPN
       interface by calling <c><see cref="!:NoType:android/net/VpnService$Builder;Href=../../../reference/android/net/VpnService.Builder.html#establish()" /></c>.</term></item><item><term>Process and exchange packets between the tunnel and the returned
       file descriptor.</term></item><item><term>When <c><see cref="M:Android.Net.VpnService.OnRevoke" /></c> is invoked, close the file descriptor and
       shut down the tunnel gracefully.</term></item></list></para>
      <para tool="javadoc-to-mdoc">Services extended this class need to be declared with appropriate
 permission and intent filter. Their access must be secured by
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BIND_VPN_SERVICE" /></c> permission, and
 their intent filter must match <c><see cref="F:Android.Net.VpnService.ServiceInterface" /></c> action. Here
 is an example of declaring a VPN service in <c>AndroidManifest.xml</c>:
 <example><code lang="xml">
 &lt;service android:name=".ExampleVpnService"
         android:permission="android.permission.BIND_VPN_SERVICE"&gt;
     &lt;intent-filter&gt;
         &lt;action android:name="android.net.VpnService"/&gt;
     &lt;/intent-filter&gt;
 &lt;/service&gt;</code></example></para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/net/VpnService$Builder;Href=../../../reference/android/net/VpnService.Builder.html" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/VpnService.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VpnService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#VpnService()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VpnService (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBind">
      <MemberSignature Language="C#" Value="public override Android.OS.IBinder OnBind (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.IBinder OnBind(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;", "GetOnBind_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent that was used to bind to this service,
 as given to <c><see cref="M:Android.Content.Context.BindService(Android.Content.Intent,Android.Content.IServiceConnection,Android.Content.IServiceConnection)" /></c>.  Note that any extras that were included with
 the Intent at that point will <i>not</i> be seen here.</param>
        <summary>Return the communication interface to the service.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the communication interface to the service. This method returns
 <c>null</c> on <c><see cref="T:Android.Content.Intent" /></c>s other than <c><see cref="F:Android.Net.VpnService.ServiceInterface" /></c>
 action. Applications overriding this method must identify the intent
 and return the corresponding interface accordingly.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#onBind(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.App.Service.OnBind(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="OnRevoke">
      <MemberSignature Language="C#" Value="public virtual void OnRevoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRevoke() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRevoke", "()V", "GetOnRevokeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked when the application is revoked.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invoked when the application is revoked. At this moment, the VPN
 interface is already deactivated by the system. The application should
 close the file descriptor and shut down gracefully. The default
 implementation of this method is calling <c><see cref="M:Android.App.Service.StopSelf" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Calls to this method may not happen on the main thread
 of the process.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#onRevoke()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Net.VpnService.Prepare(Android.Content.Context)" />
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public static Android.Content.Intent Prepare (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.Intent Prepare(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "(Landroid/content/Context;)Landroid/content/Intent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Prepare to establish a VPN connection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare to establish a VPN connection. This method returns <c>null</c>
 if the VPN application is already prepared or if the user has previously
 consented to the VPN application. Otherwise, it returns an
 <c><see cref="T:Android.Content.Intent" /></c> to a system activity. The application should launch the
 activity using <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> to get itself
 prepared. The activity may pop up a dialog to require user action, and
 the result will come back via its <c><see cref="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c>.
 If the result is <c><see cref="F:Android.App.Result.Ok" tool="ReplaceLinkValue" /></c>, the application becomes
 prepared and is granted to use other methods in this class.

 </para>
          <para tool="javadoc-to-mdoc">Only one application can be granted at the same time. The right
 is revoked when another application is granted. The application
 losing the right will be notified via its <c><see cref="M:Android.Net.VpnService.OnRevoke" /></c>. Unless
 it becomes prepared again, subsequent calls to other methods in this
 class will fail.

 </para>
          <para tool="javadoc-to-mdoc">The user may disable the VPN at any time while it is activated, in
 which case this method will return an intent the next time it is
 executed to obtain the user's consent again.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Net.VpnService.OnRevoke" />
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public virtual bool Protect (Java.Net.DatagramSocket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Protect(class Java.Net.DatagramSocket socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("protect", "(Ljava/net/DatagramSocket;)Z", "GetProtect_Ljava_net_DatagramSocket_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socket" Type="Java.Net.DatagramSocket" />
      </Parameters>
      <Docs>
        <param name="socket">To be added.</param>
        <summary tool="true">Convenience method to protect a <c><see cref="T:Java.Net.DatagramSocket" /></c> from VPN
 connections.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method to protect a <c><see cref="T:Java.Net.DatagramSocket" /></c> from VPN
 connections.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#protect(java.net.DatagramSocket)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Net.VpnService.Protect(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public virtual bool Protect (Java.Net.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Protect(class Java.Net.Socket socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("protect", "(Ljava/net/Socket;)Z", "GetProtect_Ljava_net_Socket_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socket" Type="Java.Net.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">To be added.</param>
        <summary>Convenience method to protect a <c><see cref="T:Java.Net.Socket" /></c> from VPN connections.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method to protect a <c><see cref="T:Java.Net.Socket" /></c> from VPN connections.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#protect(java.net.Socket)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Net.VpnService.Protect(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public virtual bool Protect (int socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Protect(int32 socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("protect", "(I)Z", "GetProtect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socket" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="socket">To be added.</param>
        <summary>Protect a socket from VPN connections.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Protect a socket from VPN connections. After protecting, data sent
 through this socket will go directly to the underlying network,
 so its traffic will not be forwarded through the VPN.
 This method is useful if some connections need to be kept
 outside of VPN. For example, a VPN tunnel should protect itself if its
 destination is covered by VPN routes. Otherwise its outgoing packets
 will be sent back to the VPN interface and cause an infinite loop. This
 method will fail if the application is not prepared or is revoked.

 </para>
          <para tool="javadoc-to-mdoc">The socket is NOT closed by this method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#protect(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ServiceInterface">
      <MemberSignature Language="C#" Value="public const string ServiceInterface;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ServiceInterface" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SERVICE_INTERFACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The action must be matched by the intent filter of this service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The action must be matched by the intent filter of this service. It also
 needs to require <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BIND_VPN_SERVICE" /></c>
 permission so that other applications cannot abuse it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/VpnService.html#SERVICE_INTERFACE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
