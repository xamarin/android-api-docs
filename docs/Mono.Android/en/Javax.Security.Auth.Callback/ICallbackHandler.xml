<Type Name="ICallbackHandler" FullName="Javax.Security.Auth.Callback.ICallbackHandler">
  <TypeSignature Language="C#" Value="public interface ICallbackHandler : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ICallbackHandler implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Javax.Security.Auth.Callback.ICallbackHandler" />
  <TypeSignature Language="F#" Value="type ICallbackHandler = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("javax/security/auth/callback/CallbackHandler", "", "Javax.Security.Auth.Callback.ICallbackHandlerInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("javax/security/auth/callback/CallbackHandler", "", "Javax.Security.Auth.Callback.ICallbackHandlerInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An application implements a <c>CallbackHandler</c> and passes
            it to underlying security services so that they may interact with
            the application to retrieve specific authentication data,
            such as usernames and passwords, or to display certain information,
            such as error and warning messages.</summary>
    <remarks>
      <para>An application implements a <c>CallbackHandler</c> and passes
            it to underlying security services so that they may interact with
            the application to retrieve specific authentication data,
            such as usernames and passwords, or to display certain information,
            such as error and warning messages.</para>
      <para>CallbackHandlers are implemented in an application-dependent fashion.
            For example, implementations for an application with a graphical user
            interface (GUI) may pop up windows to prompt for requested information
            or to display error messages.  An implementation may also choose to obtain
            requested information from an alternate source without asking the end user.</para>
      <para>Underlying security services make requests for different types
            of information by passing individual Callbacks to the
            <c>CallbackHandler</c>.  The <c>CallbackHandler</c>
            implementation decides how to retrieve and display information
            depending on the Callbacks passed to it.  For example,
            if the underlying service needs a username and password to
            authenticate a user, it uses a <c>NameCallback</c> and
            <c>PasswordCallback</c>.  The <c>CallbackHandler</c>
            can then choose to prompt for a username and password serially,
            or to prompt for both in a single window.</para>
      <para>A default <c>CallbackHandler</c> class implementation
            may be specified by setting the value of the
            <c>auth.login.defaultCallbackHandler</c> security property.</para>
      <para>If the security property is set to the fully qualified name of a
            <c>CallbackHandler</c> implementation class,
            then a <c>LoginContext</c> will load the specified
            <c>CallbackHandler</c> and pass it to the underlying LoginModules.
            The <c>LoginContext</c> only loads the default handler
            if it was not provided one.</para>
      <para>All default handler implementations must provide a public
            zero-argument constructor.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/javax/security/auth/callback/CallbackHandler" title="Reference documentation">Java documentation for <code>javax.security.auth.callback.CallbackHandler</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="HandleCallbacks">
      <MemberSignature Language="C#" Value="public void HandleCallbacks (Javax.Security.Auth.Callback.ICallback[]? callbacks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleCallbacks(class Javax.Security.Auth.Callback.ICallback[] callbacks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Security.Auth.Callback.ICallbackHandler.HandleCallbacks(Javax.Security.Auth.Callback.ICallback[])" />
      <MemberSignature Language="F#" Value="abstract member HandleCallbacks : Javax.Security.Auth.Callback.ICallback[] -&gt; unit" Usage="iCallbackHandler.HandleCallbacks callbacks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("handle", "([Ljavax/security/auth/callback/Callback;)V", "GetHandleCallbacks_arrayLjavax_security_auth_callback_Callback_Handler:Javax.Security.Auth.Callback.ICallbackHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("handle", "([Ljavax/security/auth/callback/Callback;)V", "GetHandleCallbacks_arrayLjavax_security_auth_callback_Callback_Handler:Javax.Security.Auth.Callback.ICallbackHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callbacks" Type="Javax.Security.Auth.Callback.ICallback[]" />
      </Parameters>
      <Docs>
        <param name="callbacks">an array of <c>Callback</c> objects provided
                     by an underlying security service which contains
                     the information requested to be retrieved or displayed.</param>
        <summary>Retrieve or display the information requested in the
            provided Callbacks.</summary>
        <remarks>
          <para>Retrieve or display the information requested in the
            provided Callbacks.</para>
          <para>The <c>handle</c> method implementation checks the
            instance(s) of the <c>Callback</c> object(s) passed in
            to retrieve or display the requested information.
            The following example is provided to help demonstrate what an
            <c>handle</c> method implementation might look like.
            This example code is for guidance only.  Many details,
            including proper error handling, are left out for simplicity.</para>
          <code lang="text/java">{@code
            public void handle(Callback[] callbacks)
            throws IOException, UnsupportedCallbackException {
            
              for (int i = 0; i &lt; callbacks.length; i++) {
                 if (callbacks[i] instanceof TextOutputCallback) {
            
                     // display the message according to the specified type
                     TextOutputCallback toc = (TextOutputCallback)callbacks[i];
                     switch (toc.getMessageType()) {
                     case TextOutputCallback.INFORMATION:
                         System.out.println(toc.getMessage());
                         break;
                     case TextOutputCallback.ERROR:
                         System.out.println("ERROR: " + toc.getMessage());
                         break;
                     case TextOutputCallback.WARNING:
                         System.out.println("WARNING: " + toc.getMessage());
                         break;
                     default:
                         throw new IOException("Unsupported message type: " +
                                             toc.getMessageType());
                     }
            
                 } else if (callbacks[i] instanceof NameCallback) {
            
                     // prompt the user for a username
                     NameCallback nc = (NameCallback)callbacks[i];
            
                     // ignore the provided defaultName
                     System.err.print(nc.getPrompt());
                     System.err.flush();
                     nc.setName((new BufferedReader
                             (new InputStreamReader(System.in))).readLine());
            
                 } else if (callbacks[i] instanceof PasswordCallback) {
            
                     // prompt the user for sensitive information
                     PasswordCallback pc = (PasswordCallback)callbacks[i];
                     System.err.print(pc.getPrompt());
                     System.err.flush();
                     pc.setPassword(readPassword(System.in));
            
                 } else {
                     throw new UnsupportedCallbackException
                             (callbacks[i], "Unrecognized Callback");
                 }
              }
            }
            
            // Reads user password from given input stream.
            private char[] readPassword(InputStream in) throws IOException {
               // insert code to read a user password from the input stream
            }
            }</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/security/auth/callback/CallbackHandler#handle(javax.security.auth.callback.Callback[])" title="Reference documentation">Java documentation for <code>javax.security.auth.callback.CallbackHandler.handle(javax.security.auth.callback.Callback[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O related error occurs</exception>
        <exception cref="T:Javax.Security.Auth.Callback.UnsupportedCallbackException">if the <c>CallbackHandler</c> is not able to handle a
             specific <c>Callback</c></exception>
      </Docs>
    </Member>
  </Members>
</Type>
