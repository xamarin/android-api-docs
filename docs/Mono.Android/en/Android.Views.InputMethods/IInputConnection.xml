<Type Name="IInputConnection" FullName="Android.Views.InputMethods.IInputConnection">
  <TypeSignature Language="C#" Value="public interface IInputConnection : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputConnection implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/inputmethod/InputConnection", "", "Android.Views.InputMethods.IInputConnectionInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The InputConnection interface is the communication channel from an
 <c><see cref="T:Android.Views.InputMethods.InputMethod" /></c> back to the application that is receiving its
 input.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The InputConnection interface is the communication channel from an
 <c><see cref="T:Android.Views.InputMethods.InputMethod" /></c> back to the application that is receiving its
 input. It is used to perform such things as reading text around the
 cursor, committing text to the text box, and sending raw key events
 to the application.

 <format type="text/html"><h3>Implementing an IME or an editor</h3></format><format type="text/html"><h3>Cursors, selections and compositions</h3></format></para>
      <para tool="javadoc-to-mdoc">Applications should never directly implement this interface, but
 instead subclass from <c><see cref="T:Android.Views.InputMethods.BaseInputConnection" /></c>. This will ensure
 that the application does not break when new methods are added to
 the interface.</para>
      <para tool="javadoc-to-mdoc">Text input is the result of the synergy of two essential components:
 an Input Method Engine (IME) and an editor. The IME can be a
 software keyboard, a handwriting interface, an emoji palette, a
 speech-to-text engine, and so on. There are typically several IMEs
 installed on any given Android device. In Android, IMEs extend
 <c><see cref="T:Android.InputMethodServices.InputMethodService" /></c>.
 For more information about how to create an IME, see the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/text/creating-input-method.html">
 Creating an input method</a></format> guide.

 The editor is the component that receives text and displays it.
 Typically, this is an <c><see cref="T:Android.Widget.EditText" /></c> instance, but
 some applications may choose to implement their own editor for
 various reasons. This is a large and complicated task, and an
 application that does this needs to make sure the behavior is
 consistent with standard EditText behavior in Android. An editor
 needs to interact with the IME, receiving commands through
 this InputConnection interface, and sending commands through
 <c><see cref="T:Android.Views.InputMethods.InputMethodManager" /></c>. An editor
 should start by implementing
 <c><see cref="M:Android.Views.View.OnCreateInputConnection(Android.Views.InputMethods.EditorInfo)" /></c>
 to return its own input connection.</para>
      <para tool="javadoc-to-mdoc">If you are implementing your own IME, you will need to call the
 methods in this interface to interact with the application. Be sure
 to test your IME with a wide range of applications, including
 browsers and rich text editors, as some may have peculiarities you
 need to deal with. Remember your IME may not be the only source of
 changes on the text, and try to be as conservative as possible in
 the data you send and as liberal as possible in the data you
 receive.</para>
      <para tool="javadoc-to-mdoc">If you are implementing your own editor, you will probably need
 to provide your own subclass of <c><see cref="T:Android.Views.InputMethods.BaseInputConnection" /></c> to
 answer to the commands from IMEs. Please be sure to test your
 editor with as many IMEs as you can as their behavior can vary a
 lot. Also be sure to test with various languages, including CJK
 languages and right-to-left languages like Arabic, as these may
 have different input requirements. When in doubt about the
 behavior you should adopt for a particular call, please mimic the
 default TextView implementation in the latest Android version, and
 if you decide to drift from it, please consider carefully that
 inconsistencies in text editor behavior is almost universally felt
 as a bad thing by users.</para>
      <para tool="javadoc-to-mdoc">In Android, the cursor and the selection are one and the same
 thing. A "cursor" is just the special case of a zero-sized
 selection. As such, this documentation uses them
 interchangeably. Any method acting "before the cursor" would act
 before the start of the selection if there is one, and any method
 acting "after the cursor" would act after the end of the
 selection.</para>
      <para tool="javadoc-to-mdoc">An editor needs to be able to keep track of a currently
 "composing" region, like the standard edition widgets do. The
 composition is marked in a specific style: see
 <c><see cref="!:Android.Text.ISpanned.SPAN_COMPOSING" /></c>. IMEs use this to help
 the user keep track of what part of the text they are currently
 focusing on, and interact with the editor using
 <c><see cref="!:Android.Views.InputMethods.InputConnection.setComposingText(java.lang.CharSequence,int)" /></c>,
 <c><see cref="!:Android.Views.InputMethods.InputConnection.setComposingRegion(int,int)" /></c> and
 <c><see cref="M:Android.Views.InputMethods.BaseInputConnection.FinishComposingText" tool="ReplaceLinkValue" /></c>.
 The composing region and the selection are completely independent
 of each other, and the IME may use them however they see fit.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="BeginBatchEdit">
      <MemberSignature Language="C#" Value="public bool BeginBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginBatchEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginBatchEdit", "()Z", "GetBeginBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are starting a batch of editor
 operations.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tell the editor that you are starting a batch of editor
 operations. The editor will try to avoid sending you updates
 about its state until <c><see cref="!:Android.Views.InputMethods.InputConnection.endBatchEdit()" /></c> is called. Batch
 edits nest.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> use this to avoid getting
 calls to
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 corresponding to intermediate state. Also, use this to avoid
 flickers that may arise from displaying intermediate state. Be
 sure to call <c><see cref="!:Android.Views.InputMethods.InputConnection.endBatchEdit()" /></c> for each call to this, or
 you may block updates in the editor.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> while a batch edit is in
 progress, take care not to send updates to the input method and
 not to update the display. IMEs use this intensively to this
 effect. Also please note that batch edits need to nest
 correctly.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#beginBatchEdit()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ClearMetaKeyStates">
      <MemberSignature Language="C#" Value="public bool ClearMetaKeyStates (Android.Views.MetaKeyStates states);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearMetaKeyStates(valuetype Android.Views.MetaKeyStates states) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearMetaKeyStates", "(I)Z", "GetClearMetaKeyStates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="states" Type="Android.Views.MetaKeyStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="states">The states to be cleared, may be one or more bits as
 per <c><see cref="P:Android.Views.KeyEvent.MetaState" /></c>.</param>
        <summary>Clear the given meta key pressed states in the given input
 connection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Clear the given meta key pressed states in the given input
 connection.

 </para>
          <para tool="javadoc-to-mdoc">This can be used by the IME to clear the meta key states set
 by a hardware keyboard with latched meta keys, if the editor
 keeps track of these.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#clearMetaKeyStates(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitCompletion">
      <MemberSignature Language="C#" Value="public bool CommitCompletion (Android.Views.InputMethods.CompletionInfo text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCompletion(class Android.Views.InputMethods.CompletionInfo text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)Z", "GetCommitCompletion_Landroid_view_inputmethod_CompletionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Android.Views.InputMethods.CompletionInfo" />
      </Parameters>
      <Docs>
        <param name="text">The committed completion.</param>
        <summary>Commit a completion the user has selected from the possible ones
 previously reported to <c><see cref="M:Android.Views.InputMethods.IInputMethodSession.DisplayCompletions(Android.Views.InputMethods.CompletionInfo[])" /></c> or
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.DisplayCompletions(Android.Views.View,Android.Views.InputMethods.CompletionInfo[])" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Commit a completion the user has selected from the possible ones
 previously reported to <c><see cref="M:Android.Views.InputMethods.IInputMethodSession.DisplayCompletions(Android.Views.InputMethods.CompletionInfo[])" /></c> or
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.DisplayCompletions(Android.Views.View,Android.Views.InputMethods.CompletionInfo[])" /></c>.
 This will result in the same behavior as if the user had
 selected the completion from the actual UI. In all other
 respects, this behaves like <c><see cref="!:Android.Views.InputMethods.InputConnection.commitText(java.lang.CharSequence,int)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> please take care to send the
 same object that you received through
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnDisplayCompletions(Android.Views.InputMethods.CompletionInfo[])" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> if you never call
 <c><see cref="M:Android.Views.InputMethods.IInputMethodSession.DisplayCompletions(Android.Views.InputMethods.CompletionInfo[])" /></c> or
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.DisplayCompletions(Android.Views.View,Android.Views.InputMethods.CompletionInfo[])" /></c> then
 a well-behaved IME should never call this on your input
 connection, but be ready to deal with misbehaving IMEs without
 crashing.</para>
          <para tool="javadoc-to-mdoc">Calling this method (with a valid <c><see cref="T:Android.Views.InputMethods.CompletionInfo" /></c> object)
 will cause the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on the current IME after the batch input is over.
 <i>Editor authors</i>, for this to happen you need to
 make the changes known to the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitCompletion(android.view.inputmethod.CompletionInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitCorrection">
      <MemberSignature Language="C#" Value="public bool CommitCorrection (Android.Views.InputMethods.CorrectionInfo correctionInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCorrection(class Android.Views.InputMethods.CorrectionInfo correctionInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)Z", "GetCommitCorrection_Landroid_view_inputmethod_CorrectionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correctionInfo" Type="Android.Views.InputMethods.CorrectionInfo" />
      </Parameters>
      <Docs>
        <param name="correctionInfo">Detailed information about the correction.</param>
        <summary>Commit a correction automatically performed on the raw user's input.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Commit a correction automatically performed on the raw user's input. A
 typical example would be to correct typos using a dictionary.

 </para>
          <para tool="javadoc-to-mdoc">Calling this method will cause the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on the current IME after the batch input is over.
 <i>Editor authors</i>, for this to happen you need to
 make the changes known to the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitCorrection(android.view.inputmethod.CorrectionInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public bool CommitText (Java.Lang.ICharSequence text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;I)Z", "GetCommitText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
        in Java characters. If &gt; 0, this is relative to the end
        of the text - 1; if &lt;= 0, this is relative to the start
        of the text. So a value of 1 will always advance the cursor
        to the position after the full text being inserted. Note that
        this means you can't position the cursor within the text,
        because the editor can make modifications to the text
        you are providing so it is not possible to correctly specify
        locations there.</param>
        <summary>Commit text to the text box and set the new cursor position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Commit text to the text box and set the new cursor position.

 </para>
          <para tool="javadoc-to-mdoc">This method removes the contents of the currently composing
 text and replaces it with the passed CharSequence, and then
 moves the cursor according to <c>newCursorPosition</c>. If there
 is no composing text when this method is called, the new text is
 inserted at the cursor position, removing text inside the selection
 if any. This behaves like calling
 <c><see cref="!:Android.Views.InputMethods.InputConnection.setComposingText(java.lang.CharSequence,int)" /></c>
 then <c><see cref="M:Android.Views.InputMethods.BaseInputConnection.FinishComposingText" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">Calling this method will cause the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on the current IME after the batch input is over.
 <i>Editor authors</i>, for this to happen you need to
 make the changes known to the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitText(java.lang.CharSequence, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DeleteSurroundingText">
      <MemberSignature Language="C#" Value="public bool DeleteSurroundingText (int beforeLength, int afterLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteSurroundingText(int32 beforeLength, int32 afterLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteSurroundingText", "(II)Z", "GetDeleteSurroundingText_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftLength" Type="System.Int32" />
        <Parameter Name="rightLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The number of characters to be deleted before the
        current cursor position.</param>
        <param name="afterLength">The number of characters to be deleted after the
        current cursor position.</param>
        <summary>Delete <format type="text/html"><var>beforeLength</var></format> characters of text before the
 current cursor position, and delete <format type="text/html"><var>afterLength</var></format>
 characters of text after the current cursor position, excluding
 the selection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Delete <format type="text/html"><var>beforeLength</var></format> characters of text before the
 current cursor position, and delete <format type="text/html"><var>afterLength</var></format>
 characters of text after the current cursor position, excluding
 the selection. Before and after refer to the order of the
 characters in the string, not to their visual representation:
 this means you don't have to figure out the direction of the
 text and can just use the indices as-is.

 </para>
          <para tool="javadoc-to-mdoc">The lengths are supplied in Java chars, not in code points
 or in glyphs.</para>
          <para tool="javadoc-to-mdoc">Since this method only operates on text before and after the
 selection, it can't affect the contents of the selection. This
 may affect the composing span if the span includes characters
 that are to be deleted, but otherwise will not change it. If
 some characters in the composing span are deleted, the
 composing span will persist but get shortened by however many
 chars inside it have been removed.</para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> please be careful not to
 delete only half of a surrogate pair. Also take care not to
 delete more characters than are in the editor, as that may have
 ill effects on the application. Calling this method will cause
 the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on your service after the batch input is over.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful of race
 conditions in implementing this call. An IME can make a change
 to the text or change the selection position and use this
 method right away; you need to make sure the effects are
 consistent with the results of the latest edits. Also, although
 the IME should not send lengths bigger than the contents of the
 string, you should check the values for overflows and trim the
 indices to the size of the contents to avoid crashes. Since
 this changes the contents of the editor, you need to make the
 changes known to the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#deleteSurroundingText(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="EndBatchEdit">
      <MemberSignature Language="C#" Value="public bool EndBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndBatchEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endBatchEdit", "()Z", "GetEndBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are done with a batch edit previously
 initiated with <c><see cref="!:Android.Views.InputMethods.InputConnection.beginBatchEdit()" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tell the editor that you are done with a batch edit previously
 initiated with <c><see cref="!:Android.Views.InputMethods.InputConnection.beginBatchEdit()" /></c>. This ends the latest
 batch only.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> make sure you call this
 exactly once for each call to <c><see cref="!:Android.Views.InputMethods.InputConnection.beginBatchEdit()" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful about
 batch edit nesting. Updates still to be held back until the end
 of the last batch edit.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#endBatchEdit()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="FinishComposingText">
      <MemberSignature Language="C#" Value="public bool FinishComposingText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FinishComposingText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishComposingText", "()Z", "GetFinishComposingTextHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Have the text editor finish whatever composing text is
 currently active.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Have the text editor finish whatever composing text is
 currently active. This simply leaves the text as-is, removing
 any special composing styling or other state that was around
 it. The cursor position remains unchanged.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> be aware that this call may be
 expensive with some editors.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please note that the cursor
 may be anywhere in the contents when this is called, including
 in the middle of the composing span or in a completely
 unrelated place. It must not move.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#finishComposingText()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetCursorCapsMode">
      <MemberSignature Language="C#" Value="public Android.Text.CapitalizationMode GetCursorCapsMode (Android.Text.CapitalizationMode reqModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Text.CapitalizationMode GetCursorCapsMode(valuetype Android.Text.CapitalizationMode reqModes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCursorCapsMode", "(I)I", "GetGetCursorCapsMode_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.CapitalizationMode</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reqModes" Type="Android.Text.CapitalizationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reqModes">The desired modes to retrieve, as defined by
 <c><see cref="M:Android.Text.TextUtils.GetCapsMode(Java.Lang.ICharSequence,System.Int32,System.Int32)" /></c>. These
 constants are defined so that you can simply pass the current
 <c><see cref="P:Android.Views.InputMethods.EditorInfo.InputType" /></c> value
 directly in to here.</param>
        <summary>Retrieve the current capitalization mode in effect at the
 current cursor position in the text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current capitalization mode in effect at the
 current cursor position in the text. See
 <c><see cref="M:Android.Text.TextUtils.GetCapsMode(Java.Lang.ICharSequence,System.Int32,System.Int32)" /></c>
 for more information.

 </para>
          <para tool="javadoc-to-mdoc">This method may fail either if the input connection has
 become invalid (such as its process crashing) or the client is
 taking too long to respond with the text (it is given a couple
 seconds to return). In either case, 0 is returned.</para>
          <para tool="javadoc-to-mdoc">This method does not affect the text in the editor in any
 way, nor does it affect the selection or composing spans.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful of race
 conditions in implementing this call. An IME can change the
 cursor position and use this method right away; you need to make
 sure the returned value is consistent with the results of the
 latest edits and changes to the cursor position.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getCursorCapsMode(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetExtractedText">
      <MemberSignature Language="C#" Value="public Android.Views.InputMethods.ExtractedText GetExtractedText (Android.Views.InputMethods.ExtractedTextRequest request, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.ExtractedText GetExtractedText(class Android.Views.InputMethods.ExtractedTextRequest request, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExtractedText", "(Landroid/view/inputmethod/ExtractedTextRequest;I)Landroid/view/inputmethod/ExtractedText;", "GetGetExtractedText_Landroid_view_inputmethod_ExtractedTextRequest_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.ExtractedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Views.InputMethods.ExtractedTextRequest" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">Description of how the text should be returned.
 <c><see cref="T:Android.Views.InputMethods.ExtractedTextRequest" /></c></param>
        <param name="flags">Additional options to control the client, either 0 or
 <c><see cref="F:Android.Views.InputMethods.InputConnection.GetExtractedTextMonitor" /></c>.</param>
        <summary>Retrieve the current text in the input connection's editor, and
 monitor for any changes to it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current text in the input connection's editor, and
 monitor for any changes to it. This function returns with the
 current text, and optionally the input connection can send
 updates to the input method when its text changes.

 </para>
          <para tool="javadoc-to-mdoc">This method may fail either if the input connection has
 become invalid (such as its process crashing) or the client is
 taking too long to respond with the text (it is given a couple
 seconds to return). In either case, null is returned.</para>
          <para tool="javadoc-to-mdoc">Editor authors: as a general rule, try to comply with the
 fields in <c>request</c> for how many chars to return,
 but if performance or convenience dictates otherwise, please
 feel free to do what is most appropriate for your case. Also,
 if the
 <c><see cref="F:Android.Views.InputMethods.InputConnection.GetExtractedTextMonitor" /></c> flag is set, you should be
 calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateExtractedText(Android.Views.View,System.Int32,System.Int32)" /></c>
 whenever you call
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getExtractedText(android.view.inputmethod.ExtractedTextRequest, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTextFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetSelectedTextFormatted (Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetSelectedTextFormatted(valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSelectedText", "(I)Ljava/lang/CharSequence;", "GetGetSelectedText_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Gets the selected text, if any.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the selected text, if any.

 </para>
          <para tool="javadoc-to-mdoc">This method may fail if either the input connection has
 become invalid (such as its process crashing) or the client is
 taking too long to respond with the text (it is given a couple
 of seconds to return). In either case, null is returned.</para>
          <para tool="javadoc-to-mdoc">This method must not cause any changes in the editor's
 state.</para>
          <para tool="javadoc-to-mdoc">If <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c> is supplied as flags, the
 editor should return a <c><see cref="T:Android.Text.SpannableString" /></c>
 with all the spans set on the text.</para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> please consider this will
 trigger an IPC round-trip that will take some time. Assume this
 method consumes a lot of time.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful of race
 conditions in implementing this call. An IME can make a change
 to the text or change the selection position and use this
 method right away; you need to make sure the returned value is
 consistent with the results of the latest edits.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getSelectedText(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetTextAfterCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetTextAfterCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextAfterCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTextAfterCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextAfterCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text.</param>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Get <format type="text/html"><var>n</var></format> characters of text after the current cursor
 position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get <format type="text/html"><var>n</var></format> characters of text after the current cursor
 position.

 </para>
          <para tool="javadoc-to-mdoc">This method may fail either if the input connection has
 become invalid (such as its process crashing) or the client is
 taking too long to respond with the text (it is given a couple
 seconds to return). In either case, null is returned.

 </para>
          <para tool="javadoc-to-mdoc">This method does not affect the text in the editor in any
 way, nor does it affect the selection or composing spans.</para>
          <para tool="javadoc-to-mdoc">If <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c> is supplied as flags, the
 editor should return a <c><see cref="T:Android.Text.SpannableString" /></c>
 with all the spans set on the text.</para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> please consider this will
 trigger an IPC round-trip that will take some time. Assume this
 method consumes a lot of time.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful of race
 conditions in implementing this call. An IME can make a change
 to the text and use this method right away; you need to make
 sure the returned value is consistent with the result of the
 latest edits. Also, you may return less than n characters if performance
 dictates so, but keep in mind IMEs are relying on this for many
 functions: you should not, for example, limit the returned value to
 the current line, and specifically do not return 0 characters unless
 the cursor is really at the end of the text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getTextAfterCursor(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTextBeforeCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetTextBeforeCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextBeforeCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTextBeforeCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextBeforeCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text.</param>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Get <format type="text/html"><var>n</var></format> characters of text before the current cursor
 position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get <format type="text/html"><var>n</var></format> characters of text before the current cursor
 position.

 </para>
          <para tool="javadoc-to-mdoc">This method may fail either if the input connection has
 become invalid (such as its process crashing) or the editor is
 taking too long to respond with the text (it is given a couple
 seconds to return). In either case, null is returned. This
 method does not affect the text in the editor in any way, nor
 does it affect the selection or composing spans.</para>
          <para tool="javadoc-to-mdoc">If <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c> is supplied as flags, the
 editor should return a <c><see cref="T:Android.Text.SpannableString" /></c>
 with all the spans set on the text.</para>
          <para tool="javadoc-to-mdoc">
            <i>IME authors:</i> please consider this will
 trigger an IPC round-trip that will take some time. Assume this
 method consumes a lot of time. Also, please keep in mind the
 Editor may choose to return less characters than requested even
 if they are available for performance reasons.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please be careful of race
 conditions in implementing this call. An IME can make a change
 to the text and use this method right away; you need to make
 sure the returned value is consistent with the result of the
 latest edits. Also, you may return less than n characters if performance
 dictates so, but keep in mind IMEs are relying on this for many
 functions: you should not, for example, limit the returned value to
 the current line, and specifically do not return 0 characters unless
 the cursor is really at the start of the text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getTextBeforeCursor(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformContextMenuAction">
      <MemberSignature Language="C#" Value="public bool PerformContextMenuAction (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformContextMenuAction(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performContextMenuAction", "(I)Z", "GetPerformContextMenuAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Perform a context menu action on the field.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform a context menu action on the field. The given id may be one of:
 <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#selectAll" /></c>,
 <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#startSelectingText" /></c>, <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#stopSelectingText" /></c>,
 <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#cut" /></c>, <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#copy" /></c>,
 <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#paste" /></c>, <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#copyUrl" /></c>,
 or <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#switchInputMethod" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performContextMenuAction(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformEditorAction">
      <MemberSignature Language="C#" Value="public bool PerformEditorAction (Android.Views.InputMethods.ImeAction editorAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformEditorAction(valuetype Android.Views.InputMethods.ImeAction editorAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performEditorAction", "(I)Z", "GetPerformEditorAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorAction" Type="Android.Views.InputMethods.ImeAction">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="editorAction">This must be one of the action constants for
 <c><see cref="P:Android.Views.InputMethods.EditorInfo.ImeOptions" /></c>, such as
 <c><see cref="!:Android.Views.InputMethods.EditorInfo.IME_ACTION_GO" /></c>.</param>
        <summary>Have the editor perform an action it has said it can do.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Have the editor perform an action it has said it can do.

 </para>
          <para tool="javadoc-to-mdoc">This is typically used by IMEs when the user presses the key
 associated with the action.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performEditorAction(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformPrivateCommand">
      <MemberSignature Language="C#" Value="public bool PerformPrivateCommand (string action, Android.OS.Bundle data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformPrivateCommand(string action, class Android.OS.Bundle data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performPrivateCommand", "(Ljava/lang/String;Landroid/os/Bundle;)Z", "GetPerformPrivateCommand_Ljava_lang_String_Landroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="data" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="action">Name of the command to be performed. This <i>must</i>
 be a scoped name, i.e. prefixed with a package name you own, so that
 different developers will not create conflicting commands.</param>
        <param name="data">Any data to include with the command.</param>
        <summary>API to send private commands from an input method to its
 connected editor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">API to send private commands from an input method to its
 connected editor. This can be used to provide domain-specific
 features that are only known between certain input methods and
 their clients. Note that because the InputConnection protocol
 is asynchronous, you have no way to get a result back or know
 if the client understood the command; you can use the
 information in <c><see cref="T:Android.Views.InputMethods.EditorInfo" /></c> to determine if a client
 supports a particular command.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performPrivateCommand(java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ReportFullscreenMode">
      <MemberSignature Language="C#" Value="public bool ReportFullscreenMode (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReportFullscreenMode(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reportFullscreenMode", "(Z)Z", "GetReportFullscreenMode_ZHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">To be added.</param>
        <summary>Called by the IME to tell the client when it switches between
 fullscreen and normal modes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the IME to tell the client when it switches between
 fullscreen and normal modes. This will normally be called for
 you by the standard implementation of
 <c><see cref="T:Android.InputMethodServices.InputMethodService" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#reportFullscreenMode(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestCursorUpdates">
      <MemberSignature Language="C#" Value="public bool RequestCursorUpdates (int cursorUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestCursorUpdates(int32 cursorUpdateMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestCursorUpdates", "(I)Z", "GetRequestCursorUpdates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorUpdateMode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cursorUpdateMode">
          <c>
            <see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_IMMEDIATE" />
          </c> and/or
 <c><see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_MONITOR" /></c>. Pass <c>0</c> to disable the effect of
 <c><see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_MONITOR" /></c>.</param>
        <summary>Called by the input method to ask the editor for calling back
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateCursorAnchorInfo(Android.Views.View,Android.Views.InputMethods.CursorAnchorInfo)" /></c> to
 notify cursor/anchor locations.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the input method to ask the editor for calling back
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateCursorAnchorInfo(Android.Views.View,Android.Views.InputMethods.CursorAnchorInfo)" /></c> to
 notify cursor/anchor locations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#requestCursorUpdates(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendKeyEvent">
      <MemberSignature Language="C#" Value="public bool SendKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SendKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetSendKeyEvent_Landroid_view_KeyEvent_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <summary>Send a key event to the process that is currently attached
 through this input connection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Send a key event to the process that is currently attached
 through this input connection. The event will be dispatched
 like a normal key event, to the currently focused view; this
 generally is the view that is providing this InputConnection,
 but due to the asynchronous nature of this protocol that can
 not be guaranteed and the focus may have changed by the time
 the event is received.

 </para>
          <para tool="javadoc-to-mdoc">This method can be used to send key events to the
 application. For example, an on-screen keyboard may use this
 method to simulate a hardware keyboard. There are three types
 of standard keyboards, numeric (12-key), predictive (20-key)
 and ALPHA (QWERTY). You can specify the keyboard type by
 specify the device id of the key event.</para>
          <para tool="javadoc-to-mdoc">You will usually want to set the flag
 <c><see cref="!:Android.Views.KeyEvent.FLAG_SOFT_KEYBOARD" /></c>
 on all key event objects you give to this API; the flag will
 not be set for you.</para>
          <para tool="javadoc-to-mdoc">Note that it's discouraged to send such key events in normal
 operation; this is mainly for use with
 <c><see cref="!:Android.Text.IInputType.TYPE_NULL" /></c> type text fields. Use
 the <c><see cref="!:Android.Views.InputMethods.InputConnection.commitText(java.lang.CharSequence,int)" /></c> family of methods to send text to the
 application instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#sendKeyEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingRegion">
      <MemberSignature Language="C#" Value="public bool SetComposingRegion (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingRegion(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setComposingRegion", "(II)Z", "GetSetComposingRegion_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the position in the text at which the composing region begins</param>
        <param name="end">the position in the text at which the composing region ends</param>
        <summary>Mark a certain region of text as composing text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark a certain region of text as composing text. If there was a
 composing region, the characters are left as they were and the
 composing span removed, as if <c><see cref="M:Android.Views.InputMethods.BaseInputConnection.FinishComposingText" tool="ReplaceLinkValue" /></c>
 has been called. The default style for composing text is used.

 </para>
          <para tool="javadoc-to-mdoc">The passed indices are clipped to the contents bounds. If
 the resulting region is zero-sized, no region is marked and the
 effect is the same as that of calling <c><see cref="M:Android.Views.InputMethods.BaseInputConnection.FinishComposingText" tool="ReplaceLinkValue" /></c>.
 The order of start and end is not important. In effect, the
 region from start to end and the region from end to start is
 the same. Editor authors, be ready to accept a start that is
 greater than end.</para>
          <para tool="javadoc-to-mdoc">Since this does not change the contents of the text, editors should not call
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> and
 IMEs should not receive
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">This has no impact on the cursor/selection position. It may
 result in the cursor being anywhere inside or outside the
 composing region, including cases where the selection and the
 composing region overlap partially or entirely.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingRegion(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingText">
      <MemberSignature Language="C#" Value="public bool SetComposingText (Java.Lang.ICharSequence text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;I)Z", "GetSetComposingText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The composing text with styles if necessary. If no style
        object attached to the text, the default style for composing text
        is used. See <c><see cref="T:Android.Text.ISpanned" /></c> for how to attach style
        object to the text. <c><see cref="T:Android.Text.SpannableString" /></c> and
        <c><see cref="T:Android.Text.SpannableStringBuilder" /></c> are two
        implementations of the interface <c><see cref="T:Android.Text.ISpanned" /></c>.</param>
        <param name="newCursorPosition">The new cursor position around the text. If
        &gt; 0, this is relative to the end of the text - 1; if &lt;= 0, this
        is relative to the start of the text. So a value of 1 will
        always advance you to the position after the full text being
        inserted. Note that this means you can't position the cursor
        within the text, because the editor can make modifications to
        the text you are providing so it is not possible to correctly
        specify locations there.</param>
        <summary>Replace the currently composing text with the given text, and
 set the new cursor position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Replace the currently composing text with the given text, and
 set the new cursor position. Any composing text set previously
 will be removed automatically.

 </para>
          <para tool="javadoc-to-mdoc">If there is any composing span currently active, all
 characters that it comprises are removed. The passed text is
 added in its place, and a composing span is added to this
 text. If there is no composing span active, the passed text is
 added at the cursor position (removing selected characters
 first if any), and a composing span is added on the new text.
 Finally, the cursor is moved to the location specified by
 <c>newCursorPosition</c>.</para>
          <para tool="javadoc-to-mdoc">This is usually called by IMEs to add or remove or change
 characters in the composing span. Calling this method will
 cause the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on the current IME after the batch input is over.</para>
          <para tool="javadoc-to-mdoc">
            <i>Editor authors:</i> please keep in mind the
 text may be very similar or completely different than what was
 in the composing span at call time, or there may not be a
 composing span at all. Please note that although it's not
 typical use, the string may be empty. Treat this normally,
 replacing the currently composing text with an empty string.
 Also, be careful with the cursor position. IMEs rely on this
 working exactly as described above. Since this changes the
 contents of the editor, you need to make the changes known to
 the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress. Note that this method can set the cursor position
 on either edge of the composing text or entirely outside it,
 but the IME may also go on to move the cursor position to
 within the composing text in a subsequent call so you should
 make no assumption at all: the composing text and the selection
 are entirely independent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingText(java.lang.CharSequence, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetSelection">
      <MemberSignature Language="C#" Value="public bool SetSelection (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetSelection(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSelection", "(II)Z", "GetSetSelection_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the selection should start.</param>
        <param name="end">the character index where the selection should end.</param>
        <summary>Set the selection of the text editor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the selection of the text editor. To set the cursor
 position, start and end should have the same value.

 </para>
          <para tool="javadoc-to-mdoc">Since this moves the cursor, calling this method will cause
 the editor to call
 <c><see cref="M:Android.InputMethodServices.InputMethodService.OnUpdateSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 on the current IME after the batch input is over.
 <i>Editor authors</i>, for this to happen you need to
 make the changes known to the input method by calling
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateSelection(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>,
 but be careful to wait until the batch edit is over if one is
 in progress.</para>
          <para tool="javadoc-to-mdoc">This has no effect on the composing region which must stay
 unchanged. The order of start and end is not important. In
 effect, the region from start to end and the region from end to
 start is the same. Editor authors, be ready to accept a start
 that is greater than end.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setSelection(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
