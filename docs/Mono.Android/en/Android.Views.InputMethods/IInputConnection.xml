<Type Name="IInputConnection" FullName="Android.Views.InputMethods.IInputConnection">
  <TypeSignature Language="C#" Value="public interface IInputConnection : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IInputConnection implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.InputMethods.IInputConnection" />
  <TypeSignature Language="F#" Value="type IInputConnection = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/inputmethod/InputConnection", "", "Android.Views.InputMethods.IInputConnectionInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/inputmethod/InputConnection", "", "Android.Views.InputMethods.IInputConnectionInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The InputConnection interface is the communication channel from an
            <c>InputMethod</c> back to the application that is receiving its
            input.</summary>
    <remarks>
      <para>The InputConnection interface is the communication channel from an
            <c>InputMethod</c> back to the application that is receiving its
            input. It is used to perform such things as reading text around the
            cursor, committing text to the text box, and sending raw key events
            to the application.</para>
      <para>Starting from API Level <c>android.os.Build.VERSION_CODES#N</c>,
            the system can deal with the situation where the application directly
            implements this class but one or more of the following methods are
            not implemented.</para>
      <para>&lt;ul&gt;
                &lt;li&gt;<c>#getSelectedText(int)</c>, which was introduced in
                <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>.&lt;/li&gt;
                &lt;li&gt;<c>#setComposingRegion(int, int)</c>, which was introduced
                in <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>.&lt;/li&gt;
                &lt;li&gt;<c>#commitCorrection(CorrectionInfo)</c>, which was introduced
                in <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>.&lt;/li&gt;
                &lt;li&gt;<c>#requestCursorUpdates(int)</c>, which was introduced in
                <c>android.os.Build.VERSION_CODES#LOLLIPOP</c>.&lt;/li&gt;
                &lt;li&gt;<c>#deleteSurroundingTextInCodePoints(int, int)</c>, which
                was introduced in <c>android.os.Build.VERSION_CODES#N</c>.&lt;/li&gt;
                &lt;li&gt;<c>#getHandler()</c>, which was introduced in
                <c>android.os.Build.VERSION_CODES#N</c>.&lt;/li&gt;
                &lt;li&gt;<c>#closeConnection()</c>, which was introduced in
                <c>android.os.Build.VERSION_CODES#N</c>.&lt;/li&gt;
                &lt;li&gt;<c>#commitContent(InputContentInfo, int, Bundle)</c>, which was
                introduced in <c>android.os.Build.VERSION_CODES#N_MR1</c>.&lt;/li&gt;
            &lt;/ul&gt;
            
            &lt;h3&gt;Implementing an IME or an editor&lt;/h3&gt;</para>
      <para>Text input is the result of the synergy of two essential components:
            an Input Method Engine (IME) and an editor. The IME can be a
            software keyboard, a handwriting interface, an emoji palette, a
            speech-to-text engine, and so on. There are typically several IMEs
            installed on any given Android device. In Android, IMEs extend
            <c>android.inputmethodservice.InputMethodService</c>.
            For more information about how to create an IME, see the
            <see href="https://developer.android.com/guide/topics/text/creating-input-method.html">
            Creating an input method</see> guide.
            
            The editor is the component that receives text and displays it.
            Typically, this is an <c>android.widget.EditText</c> instance, but
            some applications may choose to implement their own editor for
            various reasons. This is a large and complicated task, and an
            application that does this needs to make sure the behavior is
            consistent with standard EditText behavior in Android. An editor
            needs to interact with the IME, receiving commands through
            this InputConnection interface, and sending commands through
            <c>android.view.inputmethod.InputMethodManager</c>. An editor
            should start by implementing
            <c>android.view.View#onCreateInputConnection(EditorInfo)</c>
            to return its own input connection.</para>
      <para>If you are implementing your own IME, you will need to call the
            methods in this interface to interact with the application. Be sure
            to test your IME with a wide range of applications, including
            browsers and rich text editors, as some may have peculiarities you
            need to deal with. Remember your IME may not be the only source of
            changes on the text, and try to be as conservative as possible in
            the data you send and as liberal as possible in the data you
            receive.</para>
      <para>If you are implementing your own editor, you will probably need
            to provide your own subclass of <c>BaseInputConnection</c> to
            answer to the commands from IMEs. Please be sure to test your
            editor with as many IMEs as you can as their behavior can vary a
            lot. Also be sure to test with various languages, including CJK
            languages and right-to-left languages like Arabic, as these may
            have different input requirements. When in doubt about the
            behavior you should adopt for a particular call, please mimic the
            default TextView implementation in the latest Android version, and
            if you decide to drift from it, please consider carefully that
            inconsistencies in text editor behavior is almost universally felt
            as a bad thing by users.</para>
      <para>&lt;h3&gt;Cursors, selections and compositions&lt;/h3&gt;</para>
      <para>In Android, the cursor and the selection are one and the same
            thing. A "cursor" is just the special case of a zero-sized
            selection. As such, this documentation uses them
            interchangeably. Any method acting "before the cursor" would act
            before the start of the selection if there is one, and any method
            acting "after the cursor" would act after the end of the
            selection.</para>
      <para>An editor needs to be able to keep track of a currently
            "composing" region, like the standard edition widgets do. The
            composition is marked in a specific style: see
            <c>android.text.Spanned#SPAN_COMPOSING</c>. IMEs use this to help
            the user keep track of what part of the text they are currently
            focusing on, and interact with the editor using
            <c>InputConnection#setComposingText(CharSequence, int)</c>,
            <c>InputConnection#setComposingRegion(int, int)</c> and
            <c>InputConnection#finishComposingText()</c>.
            The composing region and the selection are completely independent
            of each other, and the IME may use them however they see fit.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="BeginBatchEdit">
      <MemberSignature Language="C#" Value="public bool BeginBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginBatchEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.BeginBatchEdit" />
      <MemberSignature Language="F#" Value="abstract member BeginBatchEdit : unit -&gt; bool" Usage="iInputConnection.BeginBatchEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("beginBatchEdit", "()Z", "GetBeginBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("beginBatchEdit", "()Z", "GetBeginBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are starting a batch of editor
            operations.</summary>
        <returns>true if a batch edit is now in progress, false otherwise. Since
            this method starts a batch edit, that means it will always return true
            unless the input connection is no longer valid.</returns>
        <remarks>
          <para>Tell the editor that you are starting a batch of editor
            operations. The editor will try to avoid sending you updates
            about its state until <c>#endBatchEdit</c> is called. Batch
            edits nest.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; use this to avoid getting
            calls to
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> corresponding to intermediate state. Also, use this to avoid
            flickers that may arise from displaying intermediate state. Be
            sure to call <c>#endBatchEdit</c> for each call to this, or
            you may block updates in the editor.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; while a batch edit is in
            progress, take care not to send updates to the input method and
            not to update the display. IMEs use this intensively to this
            effect. Also please note that batch edits need to nest
            correctly.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#beginBatchEdit()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.beginBatchEdit()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ClearMetaKeyStates">
      <MemberSignature Language="C#" Value="public bool ClearMetaKeyStates (Android.Views.MetaKeyStates states);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearMetaKeyStates(valuetype Android.Views.MetaKeyStates states) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.ClearMetaKeyStates(Android.Views.MetaKeyStates)" />
      <MemberSignature Language="F#" Value="abstract member ClearMetaKeyStates : Android.Views.MetaKeyStates -&gt; bool" Usage="iInputConnection.ClearMetaKeyStates states" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearMetaKeyStates", "(I)Z", "GetClearMetaKeyStates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearMetaKeyStates", "(I)Z", "GetClearMetaKeyStates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="states" Type="Android.Views.MetaKeyStates">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="states">The states to be cleared, may be one or more bits as
            per <c>KeyEvent#getMetaState() KeyEvent.getMetaState()</c>.</param>
        <summary>Clear the given meta key pressed states in the given input
            connection.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Clear the given meta key pressed states in the given input
            connection.</para>
          <para>This can be used by the IME to clear the meta key states set
            by a hardware keyboard with latched meta keys, if the editor
            keeps track of these.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#clearMetaKeyStates(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.clearMetaKeyStates(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CloseConnection">
      <MemberSignature Language="C#" Value="public void CloseConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseConnection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CloseConnection" />
      <MemberSignature Language="F#" Value="abstract member CloseConnection : unit -&gt; unit" Usage="iInputConnection.CloseConnection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("closeConnection", "()V", "GetCloseConnectionHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("closeConnection", "()V", "GetCloseConnectionHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system up to only once to notify that the system is about to invalidate
            connection between the input method and the application.</summary>
        <remarks>
          <para>Called by the system up to only once to notify that the system is about to invalidate
            connection between the input method and the application.</para>
          <para>&lt;strong&gt;Editor authors&lt;/strong&gt;: You can clear all the nested batch edit right now and
            you no longer need to handle subsequent callbacks on this connection, including
            <c>#beginBatchEdit()</c>}.  Note that although the system tries to call this method whenever
            possible, there may be a chance that this method is not called in some exceptional
            situations.</para>
          <para>Note: This does nothing when called from input methods.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#closeConnection()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.closeConnection()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitCompletion">
      <MemberSignature Language="C#" Value="public bool CommitCompletion (Android.Views.InputMethods.CompletionInfo? text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCompletion(class Android.Views.InputMethods.CompletionInfo text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitCompletion(Android.Views.InputMethods.CompletionInfo)" />
      <MemberSignature Language="F#" Value="abstract member CommitCompletion : Android.Views.InputMethods.CompletionInfo -&gt; bool" Usage="iInputConnection.CommitCompletion text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)Z", "GetCommitCompletion_Landroid_view_inputmethod_CompletionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)Z", "GetCommitCompletion_Landroid_view_inputmethod_CompletionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Android.Views.InputMethods.CompletionInfo" />
      </Parameters>
      <Docs>
        <param name="text">The committed completion.</param>
        <summary>Commit a completion the user has selected from the possible ones
            previously reported to <c>InputMethodSession#displayCompletions
            InputMethodSession#displayCompletions(CompletionInfo[])</c> or
            <c>InputMethodManager#displayCompletions
            InputMethodManager#displayCompletions(View, CompletionInfo[])</c>.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Commit a completion the user has selected from the possible ones
            previously reported to <c>InputMethodSession#displayCompletions
            InputMethodSession#displayCompletions(CompletionInfo[])</c> or
            <c>InputMethodManager#displayCompletions
            InputMethodManager#displayCompletions(View, CompletionInfo[])</c>.
            This will result in the same behavior as if the user had
            selected the completion from the actual UI. In all other
            respects, this behaves like <c>#commitText(CharSequence, int)</c>.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please take care to send the
            same object that you received through
            <c>android.inputmethodservice.InputMethodService#onDisplayCompletions(CompletionInfo[])</c>.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; if you never call
            <c>InputMethodSession#displayCompletions(CompletionInfo[])</c> or
            <c>InputMethodManager#displayCompletions(View, CompletionInfo[])</c> then
            a well-behaved IME should never call this on your input
            connection, but be ready to deal with misbehaving IMEs without
            crashing.</para>
          <para>Calling this method (with a valid <c>CompletionInfo</c> object)
            will cause the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current IME after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitCompletion(android.view.inputmethod.CompletionInfo)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitCompletion(android.view.inputmethod.CompletionInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitContent">
      <MemberSignature Language="C#" Value="public bool CommitContent (Android.Views.InputMethods.InputContentInfo inputContentInfo, Android.Views.InputMethods.InputContentFlags flags, Android.OS.Bundle? opts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitContent(class Android.Views.InputMethods.InputContentInfo inputContentInfo, valuetype Android.Views.InputMethods.InputContentFlags flags, class Android.OS.Bundle opts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitContent(Android.Views.InputMethods.InputContentInfo,Android.Views.InputMethods.InputContentFlags,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member CommitContent : Android.Views.InputMethods.InputContentInfo * Android.Views.InputMethods.InputContentFlags * Android.OS.Bundle -&gt; bool" Usage="iInputConnection.CommitContent (inputContentInfo, flags, opts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitContent", "(Landroid/view/inputmethod/InputContentInfo;ILandroid/os/Bundle;)Z", "GetCommitContent_Landroid_view_inputmethod_InputContentInfo_ILandroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=25)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitContent", "(Landroid/view/inputmethod/InputContentInfo;ILandroid/os/Bundle;)Z", "GetCommitContent_Landroid_view_inputmethod_InputContentInfo_ILandroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=25)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android25.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android25.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputContentInfo" Type="Android.Views.InputMethods.InputContentInfo" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.InputContentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="opts" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="inputContentInfo">Content to be inserted.</param>
        <param name="flags">
          <c>#INPUT_CONTENT_GRANT_READ_URI_PERMISSION</c> if the content provider
            allows <c>android.R.styleable#AndroidManifestProvider_grantUriPermissions
            grantUriPermissions</c> or <c>0</c> if the application does not need to call
            <c>InputContentInfo#requestPermission()</c>.</param>
        <param name="opts">optional bundle data. This can be <c>null</c>.</param>
        <summary>Called by the input method to commit content such as a PNG image to the editor.</summary>
        <returns>
          <c>true</c> if this request is accepted by the application, whether the request
            is already handled or still being handled in background, <c>false</c> otherwise.</returns>
        <remarks>
          <para>Called by the input method to commit content such as a PNG image to the editor.</para>
          <para>In order to avoid a variety of compatibility issues, this focuses on a simple use case,
            where editors and IMEs are expected to work cooperatively as follows:</para>
          <para>&lt;ul&gt;
                &lt;li&gt;Editor must keep <c>EditorInfo#contentMimeTypes</c> equal to <c>null</c> if it does
                not support this method at all.&lt;/li&gt;
                &lt;li&gt;Editor can ignore this request when the MIME type specified in
                <c>inputContentInfo</c> does not match any of <c>EditorInfo#contentMimeTypes</c>.
                &lt;/li&gt;
                &lt;li&gt;Editor can ignore the cursor position when inserting the provided content.&lt;/li&gt;
                &lt;li&gt;Editor can return <c>true</c> asynchronously, even before it starts loading the
                content.&lt;/li&gt;
                &lt;li&gt;Editor should provide a way to delete the content inserted by this method or to
                revert the effect caused by this method.&lt;/li&gt;
                &lt;li&gt;IME should not call this method when there is any composing text, in case calling
                this method causes a focus change.&lt;/li&gt;
                &lt;li&gt;IME should grant a permission for the editor to read the content. See
                <c>EditorInfo#packageName</c> about how to obtain the package name of the editor.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitContent(android.view.inputmethod.InputContentInfo,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitContent(android.view.inputmethod.InputContentInfo, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitCorrection">
      <MemberSignature Language="C#" Value="public bool CommitCorrection (Android.Views.InputMethods.CorrectionInfo? correctionInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCorrection(class Android.Views.InputMethods.CorrectionInfo correctionInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitCorrection(Android.Views.InputMethods.CorrectionInfo)" />
      <MemberSignature Language="F#" Value="abstract member CommitCorrection : Android.Views.InputMethods.CorrectionInfo -&gt; bool" Usage="iInputConnection.CommitCorrection correctionInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)Z", "GetCommitCorrection_Landroid_view_inputmethod_CorrectionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)Z", "GetCommitCorrection_Landroid_view_inputmethod_CorrectionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correctionInfo" Type="Android.Views.InputMethods.CorrectionInfo" />
      </Parameters>
      <Docs>
        <param name="correctionInfo">Detailed information about the correction.</param>
        <summary>Commit a correction automatically performed on the raw user's input.</summary>
        <returns>
          <c>true</c> on success, <c>false</c> if the input connection is no longer valid.
                    Since Android <c>android.os.Build.VERSION_CODES#N</c> until
                    <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned <c>false</c> when
                    the target application does not implement this method.</returns>
        <remarks>
          <para>Commit a correction automatically performed on the raw user's input. A
            typical example would be to correct typos using a dictionary.</para>
          <para>Calling this method will cause the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current IME after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitCorrection(android.view.inputmethod.CorrectionInfo)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitCorrection(android.view.inputmethod.CorrectionInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public bool CommitText (Java.Lang.ICharSequence? text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitText(Java.Lang.ICharSequence,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member CommitText : Java.Lang.ICharSequence * int -&gt; bool" Usage="iInputConnection.CommitText (text, newCursorPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;I)Z", "GetCommitText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;I)Z", "GetCommitText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
                   in Java characters. If &gt; 0, this is relative to the end
                   of the text - 1; if &lt;= 0, this is relative to the start
                   of the text. So a value of 1 will always advance the cursor
                   to the position after the full text being inserted. Note that
                   this means you can't position the cursor within the text,
                   because the editor can make modifications to the text
                   you are providing so it is not possible to correctly specify
                   locations there.</param>
        <summary>Commit text to the text box and set the new cursor position.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Commit text to the text box and set the new cursor position.</para>
          <para>This method removes the contents of the currently composing
            text and replaces it with the passed CharSequence, and then
            moves the cursor according to <c>newCursorPosition</c>. If there
            is no composing text when this method is called, the new text is
            inserted at the cursor position, removing text inside the selection
            if any. This behaves like calling
            <c>#setComposingText(CharSequence, int) setComposingText(text, newCursorPosition)</c>
            then <c>#finishComposingText()</c>.</para>
          <para>Calling this method will cause the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current IME after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitText(java.lang.CharSequence,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public virtual bool CommitText (Java.Lang.ICharSequence text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitText(class Java.Lang.ICharSequence text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitText(Java.Lang.ICharSequence,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member CommitText : Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.CommitText : Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.CommitText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetCommitText_Ljava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetCommitText_Ljava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
                   in Java characters. If &gt; 0, this is relative to the end
                   of the text - 1; if &lt;= 0, this is relative to the start
                   of the text. So a value of 1 will always advance the cursor
                   to the position after the full text being inserted. Note that
                   this means you can't position the cursor within the text,
                   because the editor can make modifications to the text
                   you are providing so it is not possible to correctly specify
                   locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>The variant of <c>InputConnection#commitText(CharSequence, int)</c>.</summary>
        <returns>true on success, false if the input connection is no longer</returns>
        <remarks>
          <para>The variant of <c>InputConnection#commitText(CharSequence, int)</c>. This method is
            used to allow the IME to provide extra information while setting up text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public virtual bool CommitText (string text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitText(string text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.CommitText(System.String,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member CommitText : string * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.CommitText : string * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.CommitText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
                   in Java characters. If &gt; 0, this is relative to the end
                   of the text - 1; if &lt;= 0, this is relative to the start
                   of the text. So a value of 1 will always advance the cursor
                   to the position after the full text being inserted. Note that
                   this means you can't position the cursor within the text,
                   because the editor can make modifications to the text
                   you are providing so it is not possible to correctly specify
                   locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>The variant of <c>InputConnection#commitText(CharSequence, int)</c>.</summary>
        <returns>true on success, false if the input connection is no longer</returns>
        <remarks>
          <para>The variant of <c>InputConnection#commitText(CharSequence, int)</c>. This method is
            used to allow the IME to provide extra information while setting up text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#commitText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSurroundingText">
      <MemberSignature Language="C#" Value="public bool DeleteSurroundingText (int beforeLength, int afterLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteSurroundingText(int32 beforeLength, int32 afterLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.DeleteSurroundingText(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSurroundingText : int * int -&gt; bool" Usage="iInputConnection.DeleteSurroundingText (beforeLength, afterLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deleteSurroundingText", "(II)Z", "GetDeleteSurroundingText_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deleteSurroundingText", "(II)Z", "GetDeleteSurroundingText_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeLength" Type="System.Int32" />
        <Parameter Name="afterLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The number of characters before the cursor to be deleted, in code unit.
                   If this is greater than the number of existing characters between the beginning of the
                   text and the cursor, then this method does not fail but deletes all the characters in
                   that range.</param>
        <param name="afterLength">The number of characters after the cursor to be deleted, in code unit.
                   If this is greater than the number of existing characters between the cursor and
                   the end of the text, then this method does not fail but deletes all the characters in
                   that range.</param>
        <summary>Delete &lt;var&gt;beforeLength&lt;/var&gt; characters of text before the
            current cursor position, and delete &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the current cursor position, excluding
            the selection.</summary>
        <returns>true on success, false if the input connection is no longer valid.</returns>
        <remarks>
          <para>Delete &lt;var&gt;beforeLength&lt;/var&gt; characters of text before the
            current cursor position, and delete &lt;var&gt;afterLength&lt;/var&gt;
            characters of text after the current cursor position, excluding
            the selection. Before and after refer to the order of the
            characters in the string, not to their visual representation:
            this means you don't have to figure out the direction of the
            text and can just use the indices as-is.</para>
          <para>The lengths are supplied in Java chars, not in code points
            or in glyphs.</para>
          <para>Since this method only operates on text before and after the
            selection, it can't affect the contents of the selection. This
            may affect the composing span if the span includes characters
            that are to be deleted, but otherwise will not change it. If
            some characters in the composing span are deleted, the
            composing span will persist but get shortened by however many
            chars inside it have been removed.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please be careful not to
            delete only half of a surrogate pair. Also take care not to
            delete more characters than are in the editor, as that may have
            ill effects on the application. Calling this method will cause
            the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on your service after the batch input is over.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can make a change
            to the text or change the selection position and use this
            method right away; you need to make sure the effects are
            consistent with the results of the latest edits. Also, although
            the IME should not send lengths bigger than the contents of the
            string, you should check the values for overflows and trim the
            indices to the size of the contents to avoid crashes. Since
            this changes the contents of the editor, you need to make the
            changes known to the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#deleteSurroundingText(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.deleteSurroundingText(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DeleteSurroundingTextInCodePoints">
      <MemberSignature Language="C#" Value="public bool DeleteSurroundingTextInCodePoints (int beforeLength, int afterLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteSurroundingTextInCodePoints(int32 beforeLength, int32 afterLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.DeleteSurroundingTextInCodePoints(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSurroundingTextInCodePoints : int * int -&gt; bool" Usage="iInputConnection.DeleteSurroundingTextInCodePoints (beforeLength, afterLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deleteSurroundingTextInCodePoints", "(II)Z", "GetDeleteSurroundingTextInCodePoints_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deleteSurroundingTextInCodePoints", "(II)Z", "GetDeleteSurroundingTextInCodePoints_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeLength" Type="System.Int32" />
        <Parameter Name="afterLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The number of characters before the cursor to be deleted, in code points.
                   If this is greater than the number of existing characters between the beginning of the
                   text and the cursor, then this method does not fail but deletes all the characters in
                   that range.</param>
        <param name="afterLength">The number of characters after the cursor to be deleted, in code points.
                   If this is greater than the number of existing characters between the cursor and
                   the end of the text, then this method does not fail but deletes all the characters in
                   that range.</param>
        <summary>A variant of <c>#deleteSurroundingText(int, int)</c>.</summary>
        <returns>
          <c>true</c> on success, <c>false</c> if the input connection is no longer valid.
                    Before Android <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned
                    <c>false</c> when the target application does not implement this method.</returns>
        <remarks>
          <para>A variant of <c>#deleteSurroundingText(int, int)</c>. Major differences are:
            
            &lt;ul&gt;
                &lt;li&gt;The lengths are supplied in code points, not in Java chars or in glyphs.&lt;/&gt;
                &lt;li&gt;This method does nothing if there are one or more invalid surrogate pairs in the
                requested range.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; In addition to the requirement in
            <c>#deleteSurroundingText(int, int)</c>, make sure to do nothing when one ore more invalid
            surrogate pairs are found in the requested range.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#deleteSurroundingTextInCodePoints(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.deleteSurroundingTextInCodePoints(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatchEdit">
      <MemberSignature Language="C#" Value="public bool EndBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndBatchEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.EndBatchEdit" />
      <MemberSignature Language="F#" Value="abstract member EndBatchEdit : unit -&gt; bool" Usage="iInputConnection.EndBatchEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("endBatchEdit", "()Z", "GetEndBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("endBatchEdit", "()Z", "GetEndBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are done with a batch edit previously initiated with
            <c>#beginBatchEdit()</c>.</summary>
        <returns>For editor authors, you must return <c>true</c> if a batch edit is still in progress
                    after closing the latest one (in other words, if the nesting count is still a
                    positive number). Return <c>false</c> otherwise.  For IME authors, you will
                    always receive <c>true</c> as long as the request was sent to the editor, and
                    receive <c>false</c> only if the input connection is no longer valid.</returns>
        <remarks>
          <para>Tell the editor that you are done with a batch edit previously initiated with
            <c>#beginBatchEdit()</c>. This ends the latest batch only.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; make sure you call this exactly once for each call to
            <c>#beginBatchEdit()</c>.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful about batch edit nesting. Updates still
            to be held back until the end of the last batch edit.  In case you are delegating this API
            call to the one obtained from
            <c>android.widget.EditText#onCreateInputConnection(EditorInfo)</c>, there was an off-by-one
            that had returned <c>true</c> when its nested batch edit count becomes <c>0</c> as a result
            of invoking this API.  This bug is fixed in <c>android.os.Build.VERSION_CODES#TIRAMISU</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#endBatchEdit()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.endBatchEdit()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="FinishComposingText">
      <MemberSignature Language="C#" Value="public bool FinishComposingText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FinishComposingText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.FinishComposingText" />
      <MemberSignature Language="F#" Value="abstract member FinishComposingText : unit -&gt; bool" Usage="iInputConnection.FinishComposingText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishComposingText", "()Z", "GetFinishComposingTextHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishComposingText", "()Z", "GetFinishComposingTextHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Have the text editor finish whatever composing text is
            currently active.</summary>
        <returns>true on success, false if the input connection
            is no longer valid.</returns>
        <remarks>
          <para>Have the text editor finish whatever composing text is
            currently active. This simply leaves the text as-is, removing
            any special composing styling or other state that was around
            it. The cursor position remains unchanged.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; be aware that this call may be
            expensive with some editors.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please note that the cursor
            may be anywhere in the contents when this is called, including
            in the middle of the composing span or in a completely
            unrelated place. It must not move.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#finishComposingText()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.finishComposingText()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetCursorCapsMode">
      <MemberSignature Language="C#" Value="public Android.Text.CapitalizationMode GetCursorCapsMode (Android.Text.CapitalizationMode reqModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Text.CapitalizationMode GetCursorCapsMode(valuetype Android.Text.CapitalizationMode reqModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetCursorCapsMode(Android.Text.CapitalizationMode)" />
      <MemberSignature Language="F#" Value="abstract member GetCursorCapsMode : Android.Text.CapitalizationMode -&gt; Android.Text.CapitalizationMode" Usage="iInputConnection.GetCursorCapsMode reqModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCursorCapsMode", "(I)I", "GetGetCursorCapsMode_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCursorCapsMode", "(I)I", "GetGetCursorCapsMode_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.CapitalizationMode</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reqModes" Type="Android.Text.CapitalizationMode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reqModes">The desired modes to retrieve, as defined by
            <c>android.text.TextUtils#getCapsMode TextUtils.getCapsMode</c>. These
            constants are defined so that you can simply pass the current
            <c>EditorInfo#inputType TextBoxAttribute.contentType</c> value
            directly in to here.</param>
        <summary>Retrieve the current capitalization mode in effect at the
            current cursor position in the text.</summary>
        <returns>the caps mode flags that are in effect at the current
            cursor position. See TYPE_TEXT_FLAG_CAPS_* in <c>android.text.InputType</c>.</returns>
        <remarks>
          <para>Retrieve the current capitalization mode in effect at the
            current cursor position in the text. See
            <c>android.text.TextUtils#getCapsMode TextUtils.getCapsMode</c>
            for more information.</para>
          <para>This method may fail either if the input connection has
            become invalid (such as its process crashing) or the client is
            taking too long to respond with the text (it is given a couple
            seconds to return). In either case, 0 is returned.</para>
          <para>This method does not affect the text in the editor in any
            way, nor does it affect the selection or composing spans.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can change the
            cursor position and use this method right away; you need to make
            sure the returned value is consistent with the results of the
            latest edits and changes to the cursor position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getCursorCapsMode(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getCursorCapsMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetExtractedText">
      <MemberSignature Language="C#" Value="public Android.Views.InputMethods.ExtractedText? GetExtractedText (Android.Views.InputMethods.ExtractedTextRequest? request, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.ExtractedText GetExtractedText(class Android.Views.InputMethods.ExtractedTextRequest request, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetExtractedText(Android.Views.InputMethods.ExtractedTextRequest,Android.Views.InputMethods.GetTextFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetExtractedText : Android.Views.InputMethods.ExtractedTextRequest * Android.Views.InputMethods.GetTextFlags -&gt; Android.Views.InputMethods.ExtractedText" Usage="iInputConnection.GetExtractedText (request, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getExtractedText", "(Landroid/view/inputmethod/ExtractedTextRequest;I)Landroid/view/inputmethod/ExtractedText;", "GetGetExtractedText_Landroid_view_inputmethod_ExtractedTextRequest_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getExtractedText", "(Landroid/view/inputmethod/ExtractedTextRequest;I)Landroid/view/inputmethod/ExtractedText;", "GetGetExtractedText_Landroid_view_inputmethod_ExtractedTextRequest_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.ExtractedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Views.InputMethods.ExtractedTextRequest" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">Description of how the text should be returned.
            <c>android.view.inputmethod.ExtractedTextRequest</c></param>
        <param name="flags">Additional options to control the client, either <c>0</c> or
            <c>#GET_EXTRACTED_TEXT_MONITOR</c>.</param>
        <summary>Retrieve the current text in the input connection's editor, and
            monitor for any changes to it.</summary>
        <returns>an <c>android.view.inputmethod.ExtractedText</c>
            object describing the state of the text view and containing the
            extracted text itself, or null if the input connection is no
            longer valid of the editor can't comply with the request for
            some reason.</returns>
        <remarks>
          <para>Retrieve the current text in the input connection's editor, and
            monitor for any changes to it. This function returns with the
            current text, and optionally the input connection can send
            updates to the input method when its text changes.</para>
          <para>This method may fail either if the input connection has
            become invalid (such as its process crashing) or the client is
            taking too long to respond with the text (it is given a couple
            seconds to return). In either case, null is returned.</para>
          <para>Editor authors: as a general rule, try to comply with the
            fields in <c>request</c> for how many chars to return,
            but if performance or convenience dictates otherwise, please
            feel free to do what is most appropriate for your case. Also,
            if the
            <c>#GET_EXTRACTED_TEXT_MONITOR</c> flag is set, you should be
            calling
            <c>InputMethodManager#updateExtractedText(View, int, ExtractedText)</c>
            whenever you call
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getExtractedText(android.view.inputmethod.ExtractedTextRequest,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getExtractedText(android.view.inputmethod.ExtractedTextRequest, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTextFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence? GetSelectedTextFormatted (Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetSelectedTextFormatted(valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetSelectedTextFormatted(Android.Views.InputMethods.GetTextFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetSelectedTextFormatted : Android.Views.InputMethods.GetTextFlags -&gt; Java.Lang.ICharSequence" Usage="iInputConnection.GetSelectedTextFormatted flags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSelectedText", "(I)Ljava/lang/CharSequence;", "GetGetSelectedText_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSelectedText", "(I)Ljava/lang/CharSequence;", "GetGetSelectedText_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">Supplies additional options controlling how the text is
            returned. May be either <c>0</c> or <c>#GET_TEXT_WITH_STYLES</c>.</param>
        <summary>Gets the selected text, if any.</summary>
        <returns>the text that is currently selected, if any, or <c>null</c> if no text is selected.</returns>
        <remarks>
          <para>Gets the selected text, if any.</para>
          <para>This method may fail if either the input connection has
            become invalid (such as its process crashing) or the client is
            taking too long to respond with the text (it is given a couple
            of seconds to return). In either case, null is returned.</para>
          <para>This method must not cause any changes in the editor's
            state.</para>
          <para>If <c>#GET_TEXT_WITH_STYLES</c> is supplied as flags, the
            editor should return a <c>android.text.SpannableString</c>
            with all the spans set on the text.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please consider this will
            trigger an IPC round-trip that will take some time. Assume this
            method consumes a lot of time. If you are using this to get the
            initial text around the cursor, you may consider using
            <c>EditorInfo#getInitialTextBeforeCursor(int, int)</c>,
            <c>EditorInfo#getInitialSelectedText(int)</c>, and
            <c>EditorInfo#getInitialTextAfterCursor(int, int)</c> to prevent IPC costs.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can make a change
            to the text or change the selection position and use this
            method right away; you need to make sure the returned value is
            consistent with the results of the latest edits.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getSelectedText(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getSelectedText(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetSurroundingText">
      <MemberSignature Language="C#" Value="public virtual Android.Views.InputMethods.SurroundingText? GetSurroundingText (int beforeLength, int afterLength, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.SurroundingText GetSurroundingText(int32 beforeLength, int32 afterLength, int32 flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetSurroundingText(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetSurroundingText : int * int * int -&gt; Android.Views.InputMethods.SurroundingText&#xA;override this.GetSurroundingText : int * int * int -&gt; Android.Views.InputMethods.SurroundingText" Usage="iInputConnection.GetSurroundingText (beforeLength, afterLength, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSurroundingText", "(III)Landroid/view/inputmethod/SurroundingText;", "GetGetSurroundingText_IIIHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSurroundingText", "(III)Landroid/view/inputmethod/SurroundingText;", "GetGetSurroundingText_IIIHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.SurroundingText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeLength" Type="System.Int32" />
        <Parameter Name="afterLength" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Int32">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.IntDef(Fields=new System.String[] { "GetTextWithStyles" }, Flag=true, Type="Android.Views.InputMethods.IInputConnection")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.IntDef(Fields=new System.String[] { "GetTextWithStyles" }, Flag=true, Type="Android.Views.InputMethods.IInputConnection")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="beforeLength">The expected length of the text before the cursor.</param>
        <param name="afterLength">The expected length of the text after the cursor.</param>
        <param name="flags">Supplies additional options controlling how the text is returned. May be either
                         <c>0</c> or <c>#GET_TEXT_WITH_STYLES</c>.</param>
        <summary>Gets the surrounding text around the current cursor, with &lt;var&gt;beforeLength&lt;/var&gt; characters
            of text before the cursor (start of the selection), &lt;var&gt;afterLength&lt;/var&gt; characters of text
            after the cursor (end of the selection), and all of the selected text.</summary>
        <returns>an <c>android.view.inputmethod.SurroundingText</c> object describing the surrounding
            text and state of selection, or null if the input connection is no longer valid, or the
            editor can't comply with the request for some reason, or the application does not implement
            this method. The length of the returned text might be less than the sum of
            &lt;var&gt;beforeLength&lt;/var&gt; and &lt;var&gt;afterLength&lt;/var&gt; .</returns>
        <remarks>
          <para>Gets the surrounding text around the current cursor, with &lt;var&gt;beforeLength&lt;/var&gt; characters
            of text before the cursor (start of the selection), &lt;var&gt;afterLength&lt;/var&gt; characters of text
            after the cursor (end of the selection), and all of the selected text. The range are for java
            characters, not glyphs that can be multiple characters.</para>
          <para>This method may fail either if the input connection has become invalid (such as its
            process crashing), or the client is taking too long to respond with the text (it is given a
            couple seconds to return), or the protocol is not supported. In any of these cases, null is
            returned.</para>
          <para>This method does not affect the text in the editor in any way, nor does it affect the
            selection or composing spans.</para>
          <para>If <c>#GET_TEXT_WITH_STYLES</c> is supplied as flags, the editor should return a
            <c>android.text.Spanned</c> with all the spans set on the text.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please consider this will trigger an IPC round-trip that
            will take some time. Assume this method consumes a lot of time. If you are using this to get
            the initial surrounding text around the cursor, you may consider using
            <c>EditorInfo#getInitialTextBeforeCursor(int, int)</c>,
            <c>EditorInfo#getInitialSelectedText(int)</c>, and
            <c>EditorInfo#getInitialTextAfterCursor(int, int)</c> to prevent IPC costs.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getSurroundingText(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getSurroundingText(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextAfterCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence? GetTextAfterCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextAfterCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetTextAfterCursorFormatted(System.Int32,Android.Views.InputMethods.GetTextFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetTextAfterCursorFormatted : int * Android.Views.InputMethods.GetTextFlags -&gt; Java.Lang.ICharSequence" Usage="iInputConnection.GetTextAfterCursorFormatted (n, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTextAfterCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextAfterCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTextAfterCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextAfterCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text. This must be non-negative.</param>
        <param name="flags">Supplies additional options controlling how the text is
            returned. May be either <c>0</c> or <c>#GET_TEXT_WITH_STYLES</c>.</param>
        <summary>Get &lt;var&gt;n&lt;/var&gt; characters of text after the current cursor
            position.</summary>
        <returns>the text after the cursor position; the length of the
            returned text might be less than &lt;var&gt;n&lt;/var&gt;.</returns>
        <remarks>
          <para>Get &lt;var&gt;n&lt;/var&gt; characters of text after the current cursor
            position.</para>
          <para>This method may fail either if the input connection has
            become invalid (such as its process crashing) or the client is
            taking too long to respond with the text (it is given a couple
            seconds to return). In either case, null is returned.</para>
          <para>This method does not affect the text in the editor in any
            way, nor does it affect the selection or composing spans.</para>
          <para>If <c>#GET_TEXT_WITH_STYLES</c> is supplied as flags, the
            editor should return a <c>android.text.SpannableString</c>
            with all the spans set on the text.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please consider this will
            trigger an IPC round-trip that will take some time. Assume this
            method consumes a lot of time. If you are using this to get the
            initial text around the cursor, you may consider using
            <c>EditorInfo#getInitialTextBeforeCursor(int, int)</c>,
            <c>EditorInfo#getInitialSelectedText(int)</c>, and
            <c>EditorInfo#getInitialTextAfterCursor(int, int)</c> to prevent IPC costs.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can make a change
            to the text and use this method right away; you need to make
            sure the returned value is consistent with the result of the
            latest edits. Also, you may return less than n characters if performance
            dictates so, but keep in mind IMEs are relying on this for many
            functions: you should not, for example, limit the returned value to
            the current line, and specifically do not return 0 characters unless
            the cursor is really at the end of the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getTextAfterCursor(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getTextAfterCursor(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTextBeforeCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence? GetTextBeforeCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextBeforeCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.GetTextBeforeCursorFormatted(System.Int32,Android.Views.InputMethods.GetTextFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBeforeCursorFormatted : int * Android.Views.InputMethods.GetTextFlags -&gt; Java.Lang.ICharSequence" Usage="iInputConnection.GetTextBeforeCursorFormatted (n, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTextBeforeCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextBeforeCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTextBeforeCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextBeforeCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text. This must be non-negative.</param>
        <param name="flags">Supplies additional options controlling how the text is
            returned. May be either <c>0</c> or <c>#GET_TEXT_WITH_STYLES</c>.</param>
        <summary>Get &lt;var&gt;n&lt;/var&gt; characters of text before the current cursor
            position.</summary>
        <returns>the text before the cursor position; the length of the
            returned text might be less than &lt;var&gt;n&lt;/var&gt;.</returns>
        <remarks>
          <para>Get &lt;var&gt;n&lt;/var&gt; characters of text before the current cursor
            position.</para>
          <para>This method may fail either if the input connection has
            become invalid (such as its process crashing) or the editor is
            taking too long to respond with the text (it is given a couple
            seconds to return). In either case, null is returned. This
            method does not affect the text in the editor in any way, nor
            does it affect the selection or composing spans.</para>
          <para>If <c>#GET_TEXT_WITH_STYLES</c> is supplied as flags, the
            editor should return a <c>android.text.SpannableString</c>
            with all the spans set on the text.</para>
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; please consider this will
            trigger an IPC round-trip that will take some time. Assume this
            method consumes a lot of time. Also, please keep in mind the
            Editor may choose to return less characters than requested even
            if they are available for performance reasons. If you are using
            this to get the initial text around the cursor, you may consider
            using <c>EditorInfo#getInitialTextBeforeCursor(int, int)</c>,
            <c>EditorInfo#getInitialSelectedText(int)</c>, and
            <c>EditorInfo#getInitialTextAfterCursor(int, int)</c> to prevent IPC costs.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please be careful of race
            conditions in implementing this call. An IME can make a change
            to the text and use this method right away; you need to make
            sure the returned value is consistent with the result of the
            latest edits. Also, you may return less than n characters if performance
            dictates so, but keep in mind IMEs are relying on this for many
            functions: you should not, for example, limit the returned value to
            the current line, and specifically do not return 0 characters unless
            the cursor is really at the start of the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#getTextBeforeCursor(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.getTextBeforeCursor(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Android.OS.Handler? Handler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Handler Handler" />
      <MemberSignature Language="DocId" Value="P:Android.Views.InputMethods.IInputConnection.Handler" />
      <MemberSignature Language="F#" Value="member this.Handler : Android.OS.Handler" Usage="Android.Views.InputMethods.IInputConnection.Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHandler", "()Landroid/os/Handler;", "GetGetHandlerHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHandler", "()Landroid/os/Handler;", "GetGetHandlerHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Handler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformContextMenuAction">
      <MemberSignature Language="C#" Value="public bool PerformContextMenuAction (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformContextMenuAction(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PerformContextMenuAction(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member PerformContextMenuAction : int -&gt; bool" Usage="iInputConnection.PerformContextMenuAction id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performContextMenuAction", "(I)Z", "GetPerformContextMenuAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performContextMenuAction", "(I)Z", "GetPerformContextMenuAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Perform a context menu action on the field.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Perform a context menu action on the field. The given id may be one of:
            <c>android.R.id#selectAll</c>,
            <c>android.R.id#startSelectingText</c>, <c>android.R.id#stopSelectingText</c>,
            <c>android.R.id#cut</c>, <c>android.R.id#copy</c>,
            <c>android.R.id#paste</c>, <c>android.R.id#copyUrl</c>,
            or <c>android.R.id#switchInputMethod</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#performContextMenuAction(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.performContextMenuAction(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformEditorAction">
      <MemberSignature Language="C#" Value="public bool PerformEditorAction (Android.Views.InputMethods.ImeAction editorAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformEditorAction(valuetype Android.Views.InputMethods.ImeAction editorAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PerformEditorAction(Android.Views.InputMethods.ImeAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformEditorAction : Android.Views.InputMethods.ImeAction -&gt; bool" Usage="iInputConnection.PerformEditorAction editorAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performEditorAction", "(I)Z", "GetPerformEditorAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performEditorAction", "(I)Z", "GetPerformEditorAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorAction" Type="Android.Views.InputMethods.ImeAction">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="editorAction">This must be one of the action constants for
            <c>EditorInfo#imeOptions EditorInfo.imeOptions</c>, such as
            <c>EditorInfo#IME_ACTION_GO EditorInfo.EDITOR_ACTION_GO</c>, or the value of
            <c>EditorInfo#actionId EditorInfo.actionId</c> if a custom action is available.</param>
        <summary>Have the editor perform an action it has said it can do.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Have the editor perform an action it has said it can do.</para>
          <para>This is typically used by IMEs when the user presses the key
            associated with the action.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#performEditorAction(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.performEditorAction(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformHandwritingGesture">
      <MemberSignature Language="C#" Value="public virtual void PerformHandwritingGesture (Android.Views.InputMethods.HandwritingGesture gesture, Java.Util.Concurrent.IExecutor? executor, Java.Util.Functions.IIntConsumer? consumer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformHandwritingGesture(class Android.Views.InputMethods.HandwritingGesture gesture, class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IIntConsumer consumer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PerformHandwritingGesture(Android.Views.InputMethods.HandwritingGesture,Java.Util.Concurrent.IExecutor,Java.Util.Functions.IIntConsumer)" />
      <MemberSignature Language="F#" Value="abstract member PerformHandwritingGesture : Android.Views.InputMethods.HandwritingGesture * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IIntConsumer -&gt; unit&#xA;override this.PerformHandwritingGesture : Android.Views.InputMethods.HandwritingGesture * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IIntConsumer -&gt; unit" Usage="iInputConnection.PerformHandwritingGesture (gesture, executor, consumer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performHandwritingGesture", "(Landroid/view/inputmethod/HandwritingGesture;Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V", "GetPerformHandwritingGesture_Landroid_view_inputmethod_HandwritingGesture_Ljava_util_concurrent_Executor_Ljava_util_function_IntConsumer_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performHandwritingGesture", "(Landroid/view/inputmethod/HandwritingGesture;Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V", "GetPerformHandwritingGesture_Landroid_view_inputmethod_HandwritingGesture_Ljava_util_concurrent_Executor_Ljava_util_function_IntConsumer_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gesture" Type="Android.Views.InputMethods.HandwritingGesture" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="consumer" Type="Java.Util.Functions.IIntConsumer" />
      </Parameters>
      <Docs>
        <param name="gesture">the gesture to perform</param>
        <param name="executor">The executor to run the callback on.</param>
        <param name="consumer">if the caller passes a non-null consumer, the editor must invoke this
            with one of <c>#HANDWRITING_GESTURE_RESULT_UNKNOWN</c>,
            <c>#HANDWRITING_GESTURE_RESULT_SUCCESS</c>, <c>#HANDWRITING_GESTURE_RESULT_FAILED</c>,
            <c>#HANDWRITING_GESTURE_RESULT_CANCELLED</c>, <c>#HANDWRITING_GESTURE_RESULT_FALLBACK</c>,
            <c>#HANDWRITING_GESTURE_RESULT_UNSUPPORTED</c> after applying the <c>gesture</c> has
            completed. Will be invoked on the given <c>Executor</c>.
            Default implementation provides a callback to <c>IntConsumer</c> with
            <c>#HANDWRITING_GESTURE_RESULT_UNSUPPORTED</c>.</param>
        <summary>Perform a handwriting gesture on text.</summary>
        <remarks>
          <para>Perform a handwriting gesture on text.</para>
          <para>Note: A supported gesture <c>EditorInfo#getSupportedHandwritingGestures()</c> may not
            have preview supported <c>EditorInfo#getSupportedHandwritingGesturePreviews()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#performHandwritingGesture(android.view.inputmethod.HandwritingGesture,%20java.util.concurrent.Executor,%20java.util.function.IntConsumer)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.performHandwritingGesture(android.view.inputmethod.HandwritingGesture, java.util.concurrent.Executor, java.util.function.IntConsumer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformPrivateCommand">
      <MemberSignature Language="C#" Value="public bool PerformPrivateCommand (string? action, Android.OS.Bundle? data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformPrivateCommand(string action, class Android.OS.Bundle data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PerformPrivateCommand(System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member PerformPrivateCommand : string * Android.OS.Bundle -&gt; bool" Usage="iInputConnection.PerformPrivateCommand (action, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performPrivateCommand", "(Ljava/lang/String;Landroid/os/Bundle;)Z", "GetPerformPrivateCommand_Ljava_lang_String_Landroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performPrivateCommand", "(Ljava/lang/String;Landroid/os/Bundle;)Z", "GetPerformPrivateCommand_Ljava_lang_String_Landroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="data" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="action">Name of the command to be performed. This &lt;em&gt;must&lt;/em&gt;
            be a scoped name, i.e. prefixed with a package name you own, so that
            different developers will not create conflicting commands.</param>
        <param name="data">Any data to include with the command.</param>
        <summary>API to send private commands from an input method to its
            connected editor.</summary>
        <returns>true if the command was sent (whether or not the
            associated editor understood it), false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>API to send private commands from an input method to its
            connected editor. This can be used to provide domain-specific
            features that are only known between certain input methods and
            their clients. Note that because the InputConnection protocol
            is asynchronous, you have no way to get a result back or know
            if the client understood the command; you can use the
            information in <c>EditorInfo</c> to determine if a client
            supports a particular command.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand(java.lang.String,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.performPrivateCommand(java.lang.String, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformSpellCheck">
      <MemberSignature Language="C#" Value="public virtual bool PerformSpellCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformSpellCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PerformSpellCheck" />
      <MemberSignature Language="F#" Value="abstract member PerformSpellCheck : unit -&gt; bool&#xA;override this.PerformSpellCheck : unit -&gt; bool" Usage="iInputConnection.PerformSpellCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("performSpellCheck", "()Z", "GetPerformSpellCheckHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("performSpellCheck", "()Z", "GetPerformSpellCheckHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Have the editor perform spell checking for the full content.</summary>
        <returns>For editor authors, the return value will always be ignored. For IME authors, this
                    method returns true if the spell check request was sent (whether or not the
                    associated editor supports spell checking), false if the input connection is no
                    longer valid.</returns>
        <remarks>
          <para>Have the editor perform spell checking for the full content.</para>
          <para>The editor can ignore this method call if it does not support spell checking.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#performSpellCheck()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.performSpellCheck()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewHandwritingGesture">
      <MemberSignature Language="C#" Value="public virtual bool PreviewHandwritingGesture (Android.Views.InputMethods.PreviewableHandwritingGesture gesture, Android.OS.CancellationSignal? cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreviewHandwritingGesture(class Android.Views.InputMethods.PreviewableHandwritingGesture gesture, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.PreviewHandwritingGesture(Android.Views.InputMethods.PreviewableHandwritingGesture,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member PreviewHandwritingGesture : Android.Views.InputMethods.PreviewableHandwritingGesture * Android.OS.CancellationSignal -&gt; bool&#xA;override this.PreviewHandwritingGesture : Android.Views.InputMethods.PreviewableHandwritingGesture * Android.OS.CancellationSignal -&gt; bool" Usage="iInputConnection.PreviewHandwritingGesture (gesture, cancellationSignal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("previewHandwritingGesture", "(Landroid/view/inputmethod/PreviewableHandwritingGesture;Landroid/os/CancellationSignal;)Z", "GetPreviewHandwritingGesture_Landroid_view_inputmethod_PreviewableHandwritingGesture_Landroid_os_CancellationSignal_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("previewHandwritingGesture", "(Landroid/view/inputmethod/PreviewableHandwritingGesture;Landroid/os/CancellationSignal;)Z", "GetPreviewHandwritingGesture_Landroid_view_inputmethod_PreviewableHandwritingGesture_Landroid_os_CancellationSignal_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gesture" Type="Android.Views.InputMethods.PreviewableHandwritingGesture" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="gesture">the gesture to preview. Preview support for a gesture (regardless of whether
             implemented by editor) can be determined if gesture subclasses
             <c>PreviewableHandwritingGesture</c>. Supported previewable gestures include
             <c>SelectGesture</c>, <c>SelectRangeGesture</c>, <c>DeleteGesture</c> and
             <c>DeleteRangeGesture</c>.</param>
        <param name="cancellationSignal">signal to cancel an ongoing preview.</param>
        <summary>Preview a handwriting gesture on text.</summary>
        <returns>true on successfully sending command to Editor, false if not implemented by editor or
            the input connection is no longer valid or preview was cancelled with
            <c>CancellationSignal</c>.</returns>
        <remarks>
          <para>Preview a handwriting gesture on text.
            Provides a real-time preview for a gesture to user for an ongoing gesture. e.g. as user
            begins to draw a circle around text, resulting selection <c>SelectGesture</c> is previewed
            while stylus is moving over applicable text.</para>
          <para>Note: A supported gesture <c>EditorInfo#getSupportedHandwritingGestures()</c> might not
            have preview supported <c>EditorInfo#getSupportedHandwritingGesturePreviews()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#previewHandwritingGesture(android.view.inputmethod.PreviewableHandwritingGesture,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.previewHandwritingGesture(android.view.inputmethod.PreviewableHandwritingGesture, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public virtual bool ReplaceText (int start, int end, Java.Lang.ICharSequence text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReplaceText(int32 start, int32 end, class Java.Lang.ICharSequence text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.ReplaceText(System.Int32,System.Int32,Java.Lang.ICharSequence,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceText : int * int * Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.ReplaceText : int * int * Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.ReplaceText (start, end, text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replaceText", "(IILjava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetReplaceText_IILjava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replaceText", "(IILjava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetReplaceText_IILjava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the replacement should start.</param>
        <param name="end">the character index where the replacement should end.</param>
        <param name="newCursorPosition">the new cursor position around the text. If &gt; 0, this is relative to
                the end of the text - 1; if &lt;= 0, this is relative to the start of the text. So a value
                of 1 will always advance you to the position after the full text being inserted. Note
                that this means you can't position the cursor within the text.</param>
        <param name="text">the text to replace. This may include styles.</param>
        <param name="textAttribute">The extra information about the text. This value may be null.</param>
        <summary>Replace the specific range in the editor with suggested text.</summary>
        <returns>
          <c>true</c> if the replace command was sent to the associated editor (regardless of
                whether the replacement is success or not), <c>false</c> otherwise.</returns>
        <remarks>
          <para>Replace the specific range in the editor with suggested text.</para>
          <para>This method finishes whatever composing text is currently active and leaves the text
            as-it, replaces the specific range of text with the passed CharSequence, and then moves the
            cursor according to <c>newCursorPosition</c>. This behaves like calling <c>#finishComposingText()</c>, <c>#setSelection(int, int) setSelection(start, end)</c>, and then
            <c>#commitText(CharSequence, int, TextAttribute) commitText(text, newCursorPosition,
            textAttribute)</c>.</para>
          <para>Similar to <c>#setSelection(int, int)</c>, the order of start and end is not important.
            In effect, the region from start to end and the region from end to start is the same. Editor
            authors, be ready to accept a start that is greater than end.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#replaceText(int,%20int,%20java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.replaceText(int, int, java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public virtual bool ReplaceText (int start, int end, string text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReplaceText(int32 start, int32 end, string text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.ReplaceText(System.Int32,System.Int32,System.String,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceText : int * int * string * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.ReplaceText : int * int * string * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.ReplaceText (start, end, text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the replacement should start.</param>
        <param name="end">the character index where the replacement should end.</param>
        <param name="newCursorPosition">the new cursor position around the text. If &gt; 0, this is relative to
                the end of the text - 1; if &lt;= 0, this is relative to the start of the text. So a value
                of 1 will always advance you to the position after the full text being inserted. Note
                that this means you can't position the cursor within the text.</param>
        <param name="text">the text to replace. This may include styles.</param>
        <param name="textAttribute">The extra information about the text. This value may be null.</param>
        <summary>Replace the specific range in the editor with suggested text.</summary>
        <returns>
          <c>true</c> if the replace command was sent to the associated editor (regardless of
                whether the replacement is success or not), <c>false</c> otherwise.</returns>
        <remarks>
          <para>Replace the specific range in the editor with suggested text.</para>
          <para>This method finishes whatever composing text is currently active and leaves the text
            as-it, replaces the specific range of text with the passed CharSequence, and then moves the
            cursor according to <c>newCursorPosition</c>. This behaves like calling <c>#finishComposingText()</c>, <c>#setSelection(int, int) setSelection(start, end)</c>, and then
            <c>#commitText(CharSequence, int, TextAttribute) commitText(text, newCursorPosition,
            textAttribute)</c>.</para>
          <para>Similar to <c>#setSelection(int, int)</c>, the order of start and end is not important.
            In effect, the region from start to end and the region from end to start is the same. Editor
            authors, be ready to accept a start that is greater than end.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#replaceText(int,%20int,%20java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.replaceText(int, int, java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportFullscreenMode">
      <MemberSignature Language="C#" Value="public bool ReportFullscreenMode (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReportFullscreenMode(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.ReportFullscreenMode(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ReportFullscreenMode : bool -&gt; bool" Usage="iInputConnection.ReportFullscreenMode enabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reportFullscreenMode", "(Z)Z", "GetReportFullscreenMode_ZHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reportFullscreenMode", "(Z)Z", "GetReportFullscreenMode_ZHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">To be added.</param>
        <summary>Called back when the connected IME switches between fullscreen and normal modes.</summary>
        <returns>For editor authors, the return value will always be ignored. For IME authors, this
                    always returns <c>true</c> on <c>android.os.Build.VERSION_CODES#N_MR1</c> and prior
                    devices and <c>false</c> on <c>android.os.Build.VERSION_CODES#O</c> and later
                    devices.</returns>
        <remarks>
          <para>Called back when the connected IME switches between fullscreen and normal modes.</para>
          <para />
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; There is a bug on
            <c>android.os.Build.VERSION_CODES#O</c> and later devices that this method is called back
            on the main thread even when <c>#getHandler()</c> is overridden.  This bug is fixed in
            <c>android.os.Build.VERSION_CODES#TIRAMISU</c>.</para>
          <para />
          <para>&lt;strong&gt;IME authors:&lt;/strong&gt; On <c>android.os.Build.VERSION_CODES#O</c> and later
            devices, input methods are no longer allowed to directly call this method at any time.
            To signal this event in the target application, input methods should always call
            <c>InputMethodService#updateFullscreenMode()</c> instead. This approach should work on API
            <c>android.os.Build.VERSION_CODES#N_MR1</c> and prior devices.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#reportFullscreenMode(boolean)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.reportFullscreenMode(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestCursorUpdates">
      <MemberSignature Language="C#" Value="public bool RequestCursorUpdates (int cursorUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestCursorUpdates(int32 cursorUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.RequestCursorUpdates(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member RequestCursorUpdates : int -&gt; bool" Usage="iInputConnection.RequestCursorUpdates cursorUpdateMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestCursorUpdates", "(I)Z", "GetRequestCursorUpdates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestCursorUpdates", "(I)Z", "GetRequestCursorUpdates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorUpdateMode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cursorUpdateMode">any combination of update modes and filters:
            <c>#CURSOR_UPDATE_IMMEDIATE</c>, <c>#CURSOR_UPDATE_MONITOR</c>, and data filters:
            <c>#CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS</c>, <c>#CURSOR_UPDATE_FILTER_EDITOR_BOUNDS</c>,
            <c>#CURSOR_UPDATE_FILTER_INSERTION_MARKER</c>,
            <c>#CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS</c>,
            <c>#CURSOR_UPDATE_FILTER_TEXT_APPEARANCE</c>.
            Pass <c>0</c> to disable them. However, if an unknown flag is provided, request will be
            rejected and method will return <c>false</c>.</param>
        <summary>Called by the input method to ask the editor for calling back
            <c>InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)</c> to
            notify cursor/anchor locations.</summary>
        <returns>
          <c>true</c> if the request is scheduled. <c>false</c> to indicate that when the
                    application will not call <c>InputMethodManager#updateCursorAnchorInfo(
                    android.view.View, CursorAnchorInfo)</c>.
                    Since Android <c>android.os.Build.VERSION_CODES#N</c> until
                    <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned <c>false</c> when
                    the target application does not implement this method.</returns>
        <remarks>
          <para>Called by the input method to ask the editor for calling back
            <c>InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)</c> to
            notify cursor/anchor locations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#requestCursorUpdates(int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.requestCursorUpdates(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestCursorUpdates">
      <MemberSignature Language="C#" Value="public virtual bool RequestCursorUpdates (int cursorUpdateMode, int cursorUpdateFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestCursorUpdates(int32 cursorUpdateMode, int32 cursorUpdateFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.RequestCursorUpdates(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member RequestCursorUpdates : int * int -&gt; bool&#xA;override this.RequestCursorUpdates : int * int -&gt; bool" Usage="iInputConnection.RequestCursorUpdates (cursorUpdateMode, cursorUpdateFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestCursorUpdates", "(II)Z", "GetRequestCursorUpdates_IIHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestCursorUpdates", "(II)Z", "GetRequestCursorUpdates_IIHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorUpdateMode" Type="System.Int32">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.IntDef(Fields=new System.String[] { "", "" }, Flag=true, Type="")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.IntDef(Fields=new System.String[] { "", "" }, Flag=true, Type="")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cursorUpdateFilter" Type="System.Int32">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.IntDef(Fields=new System.String[] { "CursorUpdateFilterEditorBounds", "CursorUpdateFilterCharacterBounds", "CursorUpdateFilterInsertionMarker", "CursorUpdateFilterVisibleLineBounds", "CursorUpdateFilterTextAppearance" }, Flag=true, Type="Android.Views.InputMethods.IInputConnection")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.IntDef(Fields=new System.String[] { "CursorUpdateFilterEditorBounds", "CursorUpdateFilterCharacterBounds", "CursorUpdateFilterInsertionMarker", "CursorUpdateFilterVisibleLineBounds", "CursorUpdateFilterTextAppearance" }, Flag=true, Type="Android.Views.InputMethods.IInputConnection")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cursorUpdateMode">combination of update modes:
            <c>#CURSOR_UPDATE_IMMEDIATE</c>, <c>#CURSOR_UPDATE_MONITOR</c></param>
        <param name="cursorUpdateFilter">any combination of data filters:
            <c>#CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS</c>, <c>#CURSOR_UPDATE_FILTER_EDITOR_BOUNDS</c>,
            <c>#CURSOR_UPDATE_FILTER_INSERTION_MARKER</c>,
            <c>#CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS</c>,
            <c>#CURSOR_UPDATE_FILTER_TEXT_APPEARANCE</c>.
            
            &lt;p&gt;Pass <c>0</c> to disable them. However, if an unknown flag is provided, request will be
            rejected and method will return <c>false</c>.&lt;/p&gt;</param>
        <summary>Called by the input method to ask the editor for calling back
            <c>InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)</c> to
            notify cursor/anchor locations.</summary>
        <returns>
          <c>true</c> if the request is scheduled. <c>false</c> to indicate that when the
                    application will not call <c>InputMethodManager#updateCursorAnchorInfo(
                    android.view.View, CursorAnchorInfo)</c>.
                    Since Android <c>android.os.Build.VERSION_CODES#N</c> until
                    <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned <c>false</c> when
                    the target application does not implement this method.</returns>
        <remarks>
          <para>Called by the input method to ask the editor for calling back
            <c>InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)</c> to
            notify cursor/anchor locations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#requestCursorUpdates(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.requestCursorUpdates(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestTextBoundsInfo">
      <MemberSignature Language="C#" Value="public virtual void RequestTextBoundsInfo (Android.Graphics.RectF bounds, Java.Util.Concurrent.IExecutor executor, Java.Util.Functions.IConsumer consumer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTextBoundsInfo(class Android.Graphics.RectF bounds, class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IConsumer consumer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.RequestTextBoundsInfo(Android.Graphics.RectF,Java.Util.Concurrent.IExecutor,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member RequestTextBoundsInfo : Android.Graphics.RectF * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.RequestTextBoundsInfo : Android.Graphics.RectF * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit" Usage="iInputConnection.RequestTextBoundsInfo (bounds, executor, consumer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestTextBoundsInfo", "(Landroid/graphics/RectF;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetRequestTextBoundsInfo_Landroid_graphics_RectF_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestTextBoundsInfo", "(Landroid/graphics/RectF;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetRequestTextBoundsInfo_Landroid_graphics_RectF_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.RectF" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="consumer" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="bounds">the interested area where the text bounds are requested, in the screen
                         coordinates.</param>
        <param name="executor">the executor to run the callback.</param>
        <param name="consumer">the callback invoked by editor to return the result. It must return a
                            non-null object.</param>
        <summary>Called by input method to request the <c>TextBoundsInfo</c> for a range of text which is
            covered by or in vicinity of the given <c>bounds</c>.</summary>
        <remarks>
          <para>Called by input method to request the <c>TextBoundsInfo</c> for a range of text which is
            covered by or in vicinity of the given <c>bounds</c>. It can be used as a supplementary
            method to implement the handwriting gesture API -
            <c>#performHandwritingGesture(HandwritingGesture, Executor, IntConsumer)</c>.</para>
          <para>&lt;strong&gt;Editor authors&lt;/strong&gt;: It's preferred that the editor returns a
            <c>TextBoundsInfo</c> of all the text lines whose bounds intersect with the given
            <c>bounds</c>.</para>
          <para>&lt;strong&gt;IME authors&lt;/strong&gt;: This method is expensive when the text is long. Please
            consider that both the text bounds computation and IPC round-trip to send the data are time
            consuming. It's preferable to only request text bounds in smaller areas.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#requestTextBoundsInfo(android.graphics.RectF,%20java.util.concurrent.Executor,%20java.util.function.Consumer%3Candroid.view.inputmethod.TextBoundsInfoResult%3E)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.requestTextBoundsInfo(android.graphics.RectF, java.util.concurrent.Executor, java.util.function.Consumer&lt;android.view.inputmethod.TextBoundsInfoResult&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendKeyEvent">
      <MemberSignature Language="C#" Value="public bool SendKeyEvent (Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SendKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SendKeyEvent(Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member SendKeyEvent : Android.Views.KeyEvent -&gt; bool" Usage="iInputConnection.SendKeyEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetSendKeyEvent_Landroid_view_KeyEvent_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetSendKeyEvent_Landroid_view_KeyEvent_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <param name="event">The key event.</param>
        <summary>Send a key event to the process that is currently attached
            through this input connection.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Send a key event to the process that is currently attached
            through this input connection. The event will be dispatched
            like a normal key event, to the currently focused view; this
            generally is the view that is providing this InputConnection,
            but due to the asynchronous nature of this protocol that can
            not be guaranteed and the focus may have changed by the time
            the event is received.</para>
          <para>This method can be used to send key events to the
            application. For example, an on-screen keyboard may use this
            method to simulate a hardware keyboard. There are three types
            of standard keyboards, numeric (12-key), predictive (20-key)
            and ALPHA (QWERTY). You can specify the keyboard type by
            specify the device id of the key event.</para>
          <para>You will usually want to set the flag
            <c>KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD</c>
            on all key event objects you give to this API; the flag will
            not be set for you.</para>
          <para>Note that it's discouraged to send such key events in normal
            operation; this is mainly for use with
            <c>android.text.InputType#TYPE_NULL</c> type text fields. Use
            the <c>#commitText</c> family of methods to send text to the
            application instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#sendKeyEvent(android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.sendKeyEvent(android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingRegion">
      <MemberSignature Language="C#" Value="public bool SetComposingRegion (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingRegion(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetComposingRegion(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetComposingRegion : int * int -&gt; bool" Usage="iInputConnection.SetComposingRegion (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setComposingRegion", "(II)Z", "GetSetComposingRegion_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setComposingRegion", "(II)Z", "GetSetComposingRegion_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the position in the text at which the composing region begins</param>
        <param name="end">the position in the text at which the composing region ends</param>
        <summary>Mark a certain region of text as composing text.</summary>
        <returns>
          <c>true</c> on success, <c>false</c> if the input connection is no longer valid.
                    Since Android <c>android.os.Build.VERSION_CODES#N</c> until
                    <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned <c>false</c> when
                    the target application does not implement this method.</returns>
        <remarks>
          <para>Mark a certain region of text as composing text. If there was a
            composing region, the characters are left as they were and the
            composing span removed, as if <c>#finishComposingText()</c>
            has been called. The default style for composing text is used.</para>
          <para>The passed indices are clipped to the contents bounds. If
            the resulting region is zero-sized, no region is marked and the
            effect is the same as that of calling <c>#finishComposingText()</c>.
            The order of start and end is not important. In effect, the
            region from start to end and the region from end to start is
            the same. Editor authors, be ready to accept a start that is
            greater than end.</para>
          <para>Since this does not change the contents of the text, editors should not call
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c> and
            IMEs should not receive
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c>.</para>
          <para>This has no impact on the cursor/selection position. It may
            result in the cursor being anywhere inside or outside the
            composing region, including cases where the selection and the
            composing region overlap partially or entirely.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setComposingRegion(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setComposingRegion(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingRegion">
      <MemberSignature Language="C#" Value="public virtual bool SetComposingRegion (int start, int end, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingRegion(int32 start, int32 end, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetComposingRegion(System.Int32,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member SetComposingRegion : int * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.SetComposingRegion : int * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.SetComposingRegion (start, end, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setComposingRegion", "(IILandroid/view/inputmethod/TextAttribute;)Z", "GetSetComposingRegion_IILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setComposingRegion", "(IILandroid/view/inputmethod/TextAttribute;)Z", "GetSetComposingRegion_IILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="start">the position in the text at which the composing region begins</param>
        <param name="end">the position in the text at which the composing region ends</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>The variant of <c>InputConnection#setComposingRegion(int, int)</c>.</summary>
        <returns>
          <c>true</c> on success, <c>false</c> if the input connection is no longer valid.
                    Since Android <c>android.os.Build.VERSION_CODES#N</c> until
                    <c>android.os.Build.VERSION_CODES#TIRAMISU</c>, this API returned <c>false</c> when
                    the target application does not implement this method.</returns>
        <remarks>
          <para>The variant of <c>InputConnection#setComposingRegion(int, int)</c>. This method is
            used to allow the IME to provide extra information while setting up text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setComposingRegion(int,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setComposingRegion(int, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetComposingText">
      <MemberSignature Language="C#" Value="public bool SetComposingText (Java.Lang.ICharSequence? text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetComposingText(Java.Lang.ICharSequence,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetComposingText : Java.Lang.ICharSequence * int -&gt; bool" Usage="iInputConnection.SetComposingText (text, newCursorPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;I)Z", "GetSetComposingText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;I)Z", "GetSetComposingText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The composing text with styles if necessary. If no style
                   object attached to the text, the default style for composing text
                   is used. See <c>android.text.Spanned</c> for how to attach style
                   object to the text. <c>android.text.SpannableString</c> and
                   <c>android.text.SpannableStringBuilder</c> are two
                   implementations of the interface <c>android.text.Spanned</c>.</param>
        <param name="newCursorPosition">The new cursor position around the text. If
                   &gt; 0, this is relative to the end of the text - 1; if &lt;= 0, this
                   is relative to the start of the text. So a value of 1 will
                   always advance you to the position after the full text being
                   inserted. Note that this means you can't position the cursor
                   within the text, because the editor can make modifications to
                   the text you are providing so it is not possible to correctly
                   specify locations there.</param>
        <summary>Replace the currently composing text with the given text, and
            set the new cursor position.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Replace the currently composing text with the given text, and
            set the new cursor position. Any composing text set previously
            will be removed automatically.</para>
          <para>If there is any composing span currently active, all
            characters that it comprises are removed. The passed text is
            added in its place, and a composing span is added to this
            text. If there is no composing span active, the passed text is
            added at the cursor position (removing selected characters
            first if any), and a composing span is added on the new text.
            Finally, the cursor is moved to the location specified by
            <c>newCursorPosition</c>.</para>
          <para>This is usually called by IMEs to add or remove or change
            characters in the composing span. Calling this method will
            cause the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current IME after the batch input is over.</para>
          <para>&lt;strong&gt;Editor authors:&lt;/strong&gt; please keep in mind the
            text may be very similar or completely different than what was
            in the composing span at call time, or there may not be a
            composing span at all. Please note that although it's not
            typical use, the string may be empty. Treat this normally,
            replacing the currently composing text with an empty string.
            Also, be careful with the cursor position. IMEs rely on this
            working exactly as described above. Since this changes the
            contents of the editor, you need to make the changes known to
            the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress. Note that this method can set the cursor position
            on either edge of the composing text or entirely outside it,
            but the IME may also go on to move the cursor position to
            within the composing text in a subsequent call so you should
            make no assumption at all: the composing text and the selection
            are entirely independent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setComposingText(java.lang.CharSequence,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setComposingText(java.lang.CharSequence, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingText">
      <MemberSignature Language="C#" Value="public virtual bool SetComposingText (Java.Lang.ICharSequence text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingText(class Java.Lang.ICharSequence text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetComposingText(Java.Lang.ICharSequence,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member SetComposingText : Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.SetComposingText : Java.Lang.ICharSequence * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.SetComposingText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetSetComposingText_Ljava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;ILandroid/view/inputmethod/TextAttribute;)Z", "GetSetComposingText_Ljava_lang_CharSequence_ILandroid_view_inputmethod_TextAttribute_Handler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The composing text with styles if necessary. If no style
                   object attached to the text, the default style for composing text
                   is used. See <c>android.text.Spanned</c> for how to attach style
                   object to the text. <c>android.text.SpannableString</c> and
                   <c>android.text.SpannableStringBuilder</c> are two
                   implementations of the interface <c>android.text.Spanned</c>.</param>
        <param name="newCursorPosition">The new cursor position around the text. If
                   &gt; 0, this is relative to the end of the text - 1; if &lt;= 0, this
                   is relative to the start of the text. So a value of 1 will
                   always advance you to the position after the full text being
                   inserted. Note that this means you can't position the cursor
                   within the text, because the editor can make modifications to
                   the text you are providing so it is not possible to correctly
                   specify locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>The variant of <c>#setComposingText(CharSequence, int)</c>.</summary>
        <returns>true on success, false if the input connection is no longer</returns>
        <remarks>
          <para>The variant of <c>#setComposingText(CharSequence, int)</c>. This method is
            used to allow the IME to provide extra information while setting up composing text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setComposingText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setComposingText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetComposingText">
      <MemberSignature Language="C#" Value="public virtual bool SetComposingText (string text, int newCursorPosition, Android.Views.InputMethods.TextAttribute? textAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingText(string text, int32 newCursorPosition, class Android.Views.InputMethods.TextAttribute textAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetComposingText(System.String,System.Int32,Android.Views.InputMethods.TextAttribute)" />
      <MemberSignature Language="F#" Value="abstract member SetComposingText : string * int * Android.Views.InputMethods.TextAttribute -&gt; bool&#xA;override this.SetComposingText : string * int * Android.Views.InputMethods.TextAttribute -&gt; bool" Usage="iInputConnection.SetComposingText (text, newCursorPosition, textAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
        <Parameter Name="textAttribute" Type="Android.Views.InputMethods.TextAttribute" />
      </Parameters>
      <Docs>
        <param name="text">The composing text with styles if necessary. If no style
                   object attached to the text, the default style for composing text
                   is used. See <c>android.text.Spanned</c> for how to attach style
                   object to the text. <c>android.text.SpannableString</c> and
                   <c>android.text.SpannableStringBuilder</c> are two
                   implementations of the interface <c>android.text.Spanned</c>.</param>
        <param name="newCursorPosition">The new cursor position around the text. If
                   &gt; 0, this is relative to the end of the text - 1; if &lt;= 0, this
                   is relative to the start of the text. So a value of 1 will
                   always advance you to the position after the full text being
                   inserted. Note that this means you can't position the cursor
                   within the text, because the editor can make modifications to
                   the text you are providing so it is not possible to correctly
                   specify locations there.</param>
        <param name="textAttribute">The extra information about the text.</param>
        <summary>The variant of <c>#setComposingText(CharSequence, int)</c>.</summary>
        <returns>true on success, false if the input connection is no longer</returns>
        <remarks>
          <para>The variant of <c>#setComposingText(CharSequence, int)</c>. This method is
            used to allow the IME to provide extra information while setting up composing text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setComposingText(java.lang.CharSequence,%20int,%20android.view.inputmethod.TextAttribute)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setComposingText(java.lang.CharSequence, int, android.view.inputmethod.TextAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImeConsumesInput">
      <MemberSignature Language="C#" Value="public virtual bool SetImeConsumesInput (bool imeConsumesInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetImeConsumesInput(bool imeConsumesInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetImeConsumesInput(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetImeConsumesInput : bool -&gt; bool&#xA;override this.SetImeConsumesInput : bool -&gt; bool" Usage="iInputConnection.SetImeConsumesInput imeConsumesInput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setImeConsumesInput", "(Z)Z", "GetSetImeConsumesInput_ZHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setImeConsumesInput", "(Z)Z", "GetSetImeConsumesInput_ZHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imeConsumesInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="imeConsumesInput">
          <c>true</c> when the IME is consuming input and the cursor should be
            hidden, <c>false</c> when input to the editor resumes and the cursor should be shown again.</param>
        <summary>Called by the input method to indicate that it consumes all input for itself, or no longer
            does so.</summary>
        <returns>For editor authors, the return value will always be ignored. For IME authors, this
                    method returns <c>true</c> if the request was sent (whether or not the associated
                    editor does something based on this request), <c>false</c> if the input connection
                    is no longer valid.</returns>
        <remarks>
          <para>Called by the input method to indicate that it consumes all input for itself, or no longer
            does so.</para>
          <para>Editors should reflect that they are not receiving input by hiding the cursor if
            <c>imeConsumesInput</c> is <c>true</c>, and resume showing the cursor if it is
            <c>false</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setImeConsumesInput(boolean)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setImeConsumesInput(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelection">
      <MemberSignature Language="C#" Value="public bool SetSelection (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetSelection(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.SetSelection(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetSelection : int * int -&gt; bool" Usage="iInputConnection.SetSelection (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSelection", "(II)Z", "GetSetSelection_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSelection", "(II)Z", "GetSetSelection_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the selection should start.</param>
        <param name="end">the character index where the selection should end.</param>
        <summary>Set the selection of the text editor.</summary>
        <returns>true on success, false if the input connection is no longer
            valid.</returns>
        <remarks>
          <para>Set the selection of the text editor. To set the cursor
            position, start and end should have the same value.</para>
          <para>Since this moves the cursor, calling this method will cause
            the editor to call
            <c>android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int,
            int, int)</c> on the current IME after the batch input is over.
            &lt;strong&gt;Editor authors&lt;/strong&gt;, for this to happen you need to
            make the changes known to the input method by calling
            <c>InputMethodManager#updateSelection(View, int, int, int, int)</c>,
            but be careful to wait until the batch edit is over if one is
            in progress.</para>
          <para>This has no effect on the composing region which must stay
            unchanged. The order of start and end is not important. In
            effect, the region from start to end and the region from end to
            start is the same. Editor authors, be ready to accept a start
            that is greater than end.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#setSelection(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.setSelection(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="TakeSnapshot">
      <MemberSignature Language="C#" Value="public virtual Android.Views.InputMethods.TextSnapshot? TakeSnapshot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.TextSnapshot TakeSnapshot() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.InputMethods.IInputConnection.TakeSnapshot" />
      <MemberSignature Language="F#" Value="abstract member TakeSnapshot : unit -&gt; Android.Views.InputMethods.TextSnapshot&#xA;override this.TakeSnapshot : unit -&gt; Android.Views.InputMethods.TextSnapshot" Usage="iInputConnection.TakeSnapshot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("takeSnapshot", "()Landroid/view/inputmethod/TextSnapshot;", "GetTakeSnapshotHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("takeSnapshot", "()Landroid/view/inputmethod/TextSnapshot;", "GetTakeSnapshotHandler:Android.Views.InputMethods.IInputConnection, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.TextSnapshot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system when it needs to take a snapshot of multiple text-related data in an
            atomic manner.</summary>
        <returns>
          <c>null</c> if <c>TextSnapshot</c> is unavailable and/or this API is called from
                    IMEs.</returns>
        <remarks>
          <para>Called by the system when it needs to take a snapshot of multiple text-related data in an
            atomic manner.</para>
          <para>&lt;strong&gt;Editor authors&lt;/strong&gt;: Supporting this method is strongly encouraged. Atomically
            taken <c>TextSnapshot</c> is going to be really helpful for the system when optimizing IPCs
            in a safe and deterministic manner.  Return <c>null</c> if an atomically taken
            <c>TextSnapshot</c> is unavailable.  The system continues supporting such a scenario
            gracefully.</para>
          <para>&lt;strong&gt;IME authors&lt;/strong&gt;: Currently IMEs cannot call this method directly and always
            receive <c>null</c> as the result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection#takeSnapshot()" title="Reference documentation">Java documentation for <code>android.view.inputmethod.InputConnection.takeSnapshot()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
