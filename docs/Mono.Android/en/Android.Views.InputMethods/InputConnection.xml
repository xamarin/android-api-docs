<Type Name="InputConnection" FullName="Android.Views.InputMethods.InputConnection">
  <TypeSignature Language="C#" Value="public abstract class InputConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InputConnection extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/inputmethod/InputConnection")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The InputConnection interface is the communication channel from an
 <c><see cref="T:Android.Views.InputMethods.InputMethod" /></c> back to the application that is receiving its
 input.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The InputConnection interface is the communication channel from an
 <c><see cref="T:Android.Views.InputMethods.InputMethod" /></c> back to the application that is receiving its
 input. It is used to perform such things as reading text around the
 cursor, committing text to the text box, and sending raw key events
 to the application.

 <format type="text/html"><h3>Implementing an IME or an editor</h3></format><format type="text/html"><h3>Cursors, selections and compositions</h3></format></para>
      <para tool="javadoc-to-mdoc">Applications should never directly implement this interface, but
 instead subclass from <c><see cref="T:Android.Views.InputMethods.BaseInputConnection" /></c>. This will ensure
 that the application does not break when new methods are added to
 the interface.</para>
      <para tool="javadoc-to-mdoc">Text input is the result of the synergy of two essential components:
 an Input Method Engine (IME) and an editor. The IME can be a
 software keyboard, a handwriting interface, an emoji palette, a
 speech-to-text engine, and so on. There are typically several IMEs
 installed on any given Android device. In Android, IMEs extend
 <c><see cref="T:Android.InputMethodServices.InputMethodService" /></c>.
 For more information about how to create an IME, see the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/text/creating-input-method.html">
 Creating an input method</a></format> guide.

 The editor is the component that receives text and displays it.
 Typically, this is an <c><see cref="T:Android.Widget.EditText" /></c> instance, but
 some applications may choose to implement their own editor for
 various reasons. This is a large and complicated task, and an
 application that does this needs to make sure the behavior is
 consistent with standard EditText behavior in Android. An editor
 needs to interact with the IME, receiving commands through
 this InputConnection interface, and sending commands through
 <c><see cref="T:Android.Views.InputMethods.InputMethodManager" /></c>. An editor
 should start by implementing
 <c><see cref="M:Android.Views.View.OnCreateInputConnection(Android.Views.InputMethods.EditorInfo)" /></c>
 to return its own input connection.</para>
      <para tool="javadoc-to-mdoc">If you are implementing your own IME, you will need to call the
 methods in this interface to interact with the application. Be sure
 to test your IME with a wide range of applications, including
 browsers and rich text editors, as some may have peculiarities you
 need to deal with. Remember your IME may not be the only source of
 changes on the text, and try to be as conservative as possible in
 the data you send and as liberal as possible in the data you
 receive.</para>
      <para tool="javadoc-to-mdoc">If you are implementing your own editor, you will probably need
 to provide your own subclass of <c><see cref="T:Android.Views.InputMethods.BaseInputConnection" /></c> to
 answer to the commands from IMEs. Please be sure to test your
 editor with as many IMEs as you can as their behavior can vary a
 lot. Also be sure to test with various languages, including CJK
 languages and right-to-left languages like Arabic, as these may
 have different input requirements. When in doubt about the
 behavior you should adopt for a particular call, please mimic the
 default TextView implementation in the latest Android version, and
 if you decide to drift from it, please consider carefully that
 inconsistencies in text editor behavior is almost universally felt
 as a bad thing by users.</para>
      <para tool="javadoc-to-mdoc">In Android, the cursor and the selection are one and the same
 thing. A "cursor" is just the special case of a zero-sized
 selection. As such, this documentation uses them
 interchangeably. Any method acting "before the cursor" would act
 before the start of the selection if there is one, and any method
 acting "after the cursor" would act after the end of the
 selection.</para>
      <para tool="javadoc-to-mdoc">An editor needs to be able to keep track of a currently
 "composing" region, like the standard edition widgets do. The
 composition is marked in a specific style: see
 <c><see cref="!:Android.Text.ISpanned.SPAN_COMPOSING" /></c>. IMEs use this to help
 the user keep track of what part of the text they are currently
 focusing on, and interact with the editor using
 <c><see cref="!:Android.Views.InputMethods.InputConnection.setComposingText(java.lang.CharSequence,int)" /></c>,
 <c><see cref="!:Android.Views.InputMethods.InputConnection.setComposingRegion(int,int)" /></c> and
 <c><see cref="M:Android.Views.InputMethods.BaseInputConnection.FinishComposingText" tool="ReplaceLinkValue" /></c>.
 The composing region and the selection are completely independent
 of each other, and the IME may use them however they see fit.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="GetExtractedTextMonitor">
      <MemberSignature Language="C#" Value="public const Android.Views.InputMethods.TextExtractFlags GetExtractedTextMonitor = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.InputMethods.TextExtractFlags GetExtractedTextMonitor = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GET_EXTRACTED_TEXT_MONITOR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.InputMethods.TextExtractFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.TextExtractFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="!:Android.Views.InputMethods.InputConnection.getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)" /></c> to indicate you
 would like to receive updates when the extracted text changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="!:Android.Views.InputMethods.InputConnection.getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)" /></c> to indicate you
 would like to receive updates when the extracted text changes.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#GET_EXTRACTED_TEXT_MONITOR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTextWithStyles">
      <MemberSignature Language="C#" Value="public const Android.Views.InputMethods.GetTextFlags GetTextWithStyles = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.InputMethods.GetTextFlags GetTextWithStyles = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GET_TEXT_WITH_STYLES")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.InputMethods.GetTextFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.GetTextFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="!:Android.Views.InputMethods.InputConnection.getTextAfterCursor(int,int)" /></c> and
 <c><see cref="!:Android.Views.InputMethods.InputConnection.getTextBeforeCursor(int,int)" /></c> to have style information returned
 along with the text.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="!:Android.Views.InputMethods.InputConnection.getTextAfterCursor(int,int)" /></c> and
 <c><see cref="!:Android.Views.InputMethods.InputConnection.getTextBeforeCursor(int,int)" /></c> to have style information returned
 along with the text. If not set, <c><see cref="!:Android.Views.InputMethods.InputConnection.getTextAfterCursor(int,int)" /></c>
 sends only the raw text, without style or other spans. If set,
 it may return a complex CharSequence of both text and style
 spans. <i>Editor authors</i>: you should strive to
 send text with styles if possible, but it is not required.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/inputmethod/InputConnection.html#GET_TEXT_WITH_STYLES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
