<Type Name="CameraManager" FullName="Android.Hardware.Camera2.CameraManager">
  <TypeSignature Language="C#" Value="public sealed class CameraManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CameraManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/CameraManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>
      <sample external-id="C417FB2BFB9C24C3D8FBE3D1F89BF3C2" />
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <sample external-id="C417FB2BFB9C24C3D8FBE3D1F89BF3C2" />
      </para>
      <para tool="javadoc-to-mdoc">A system service manager for detecting, characterizing, and connecting to
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>.</para>
      <para tool="javadoc-to-mdoc">You can get an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>.</para>
      <para tool="javadoc-to-mdoc">For more details about communicating with camera devices, read the Camera
 developer guide or the <c><see cref="N:Android.Hardware.Camera2" /></c>
 package documentation.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCameraCharacteristics">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.CameraCharacteristics GetCameraCharacteristics (string cameraId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.CameraCharacteristics GetCameraCharacteristics(string cameraId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCameraCharacteristics", "(Ljava/lang/String;)Landroid/hardware/camera2/CameraCharacteristics;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraCharacteristics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cameraId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cameraId">The id of the camera device to query</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Query the capabilities of a camera device. These capabilities are
 immutable for a given camera.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraCharacteristics(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the cameraId does not match any
         known camera device.</exception>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device has been disconnected.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraManager.GetCameraIdList" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.SetCameraDisabled(Android.Content.ComponentName, System.Boolean)" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="GetCameraIdList">
      <MemberSignature Language="C#" Value="public string[] GetCameraIdList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetCameraIdList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCameraIdList", "()[Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the list of currently connected camera devices by identifier, including
 cameras that may be in use by other camera API clients.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the list of currently connected camera devices by identifier, including
 cameras that may be in use by other camera API clients.

 </para>
          <para tool="javadoc-to-mdoc">Non-removable cameras use integers starting at 0 for their
 identifiers, while removable cameras have a unique identifier for each
 individual device, even if they are the same model.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraIdList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException" />
      </Docs>
    </Member>
    <Member MemberName="OpenCamera">
      <MemberSignature Language="C#" Value="public void OpenCamera (string cameraId, Android.Hardware.Camera2.CameraDevice.StateCallback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenCamera(string cameraId, class Android.Hardware.Camera2.CameraDevice/StateCallback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openCamera", "(Ljava/lang/String;Landroid/hardware/camera2/CameraDevice$StateCallback;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cameraId" Type="System.String" />
        <Parameter Name="callback" Type="Android.Hardware.Camera2.CameraDevice+StateCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="cameraId">The unique identifier of the camera device to open</param>
        <param name="callback">The callback which is invoked once the camera is opened</param>
        <param name="handler">The handler on which the callback should be invoked, or
             <c>null</c> to use the current thread's <c><see cref="T:Android.OS.Looper" /></c>.</param>
        <summary>Open a connection to a camera with the given ID.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Open a connection to a camera with the given ID.

 <!--
 <p>Since the camera device will be opened asynchronously, any asynchronous operations done
 on the returned CameraDevice instance will be queued up until the device startup has
 completed and the callback's <code><a href="../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onOpened(android.hardware.camera2.CameraDevice)">onOpened</a></code> method is
 called. The pending operations are then processed in order.</p>
  --></para>
          <para tool="javadoc-to-mdoc">Use <c><see cref="M:Android.Hardware.Camera2.CameraManager.GetCameraIdList" /></c> to get the list of available camera
 devices. Note that even if an id is listed, open may fail if the device
 is disconnected between the calls to <c><see cref="M:Android.Hardware.Camera2.CameraManager.GetCameraIdList" /></c> and
 <c><see cref="M:Android.Hardware.Camera2.CameraManager.OpenCamera(System.String,.StateCallback,.StateCallback)" /></c>, or if a higher-priority camera API client begins using the
 camera device.</para>
          <para tool="javadoc-to-mdoc">As of API level 23, devices for which the
 <c><see cref="!:NoType:android/hardware/camera2/CameraManager$AvailabilityCallback;Href=../../../../reference/android/hardware/camera2/CameraManager.AvailabilityCallback.html#onCameraUnavailable(java.lang.String)" /></c> callback has been called due to the
 device being in use by a lower-priority, background camera API client can still potentially
 be opened by calling this method when the calling camera API client has a higher priority
 than the current camera API client using this device.  In general, if the top, foreground
 activity is running within your application process, your process will be given the highest
 priority when accessing the camera, and this method will succeed even if the camera device is
 in use by another camera API client. Any lower-priority application that loses control of the
 camera in this way will receive an
 <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onDisconnected(android.hardware.camera2.CameraDevice)" /></c> callback.</para>
          <para tool="javadoc-to-mdoc">Once the camera is successfully opened, <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onOpened(android.hardware.camera2.CameraDevice)" /></c> will
 be invoked with the newly opened <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>. The camera device can then be set up
 for operation by calling <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c> and
 <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureRequest(Android.Hardware.Camera2.CameraTemplate)" /></c></para>
          <para tool="javadoc-to-mdoc">If the camera becomes disconnected during initialization
 after this function call returns,
 <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onDisconnected(android.hardware.camera2.CameraDevice)" /></c> with a
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c> in the disconnected state (and
 <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onOpened(android.hardware.camera2.CameraDevice)" /></c> will be skipped).</para>
          <para tool="javadoc-to-mdoc">If opening the camera device fails, then the device callback's
 <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onError(android.hardware.camera2.CameraDevice,int)" /></c> method will be called, and subsequent
 calls on the camera device will throw a <c><see cref="T:Android.Hardware.Camera2.CameraAccessException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera(java.lang.String, android.hardware.camera2.CameraDevice.StateCallback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera is disabled by device policy,
 has been disconnected, or is being used by a higher-priority camera API client.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if cameraId or the callback was null,
 or the cameraId does not match any currently or previously available
 camera device.</exception>
        <exception cref="T:Java.Lang.SecurityException">if the application does not have permission to
 access the camera</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraManager.GetCameraIdList" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.SetCameraDisabled(Android.Content.ComponentName, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAvailabilityCallback">
      <MemberSignature Language="C#" Value="public void RegisterAvailabilityCallback (Android.Hardware.Camera2.CameraManager.AvailabilityCallback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterAvailabilityCallback(class Android.Hardware.Camera2.CameraManager/AvailabilityCallback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerAvailabilityCallback", "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Hardware.Camera2.CameraManager+AvailabilityCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="callback">the new callback to send camera availability notices to</param>
        <param name="handler">The handler on which the callback should be invoked, or <c>null</c> to use
             the current thread's <c><see cref="T:Android.OS.Looper" /></c>.</param>
        <summary>Register a callback to be notified about camera device availability.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be notified about camera device availability.

 </para>
          <para tool="javadoc-to-mdoc">Registering the same callback again will replace the handler with the
 new one provided.</para>
          <para tool="javadoc-to-mdoc">The first time a callback is registered, it is immediately called
 with the availability status of all currently known camera devices.</para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="!:NoType:android/hardware/camera2/CameraManager$AvailabilityCallback;Href=../../../../reference/android/hardware/camera2/CameraManager.AvailabilityCallback.html#onCameraUnavailable(java.lang.String)" />
            </c> will be called whenever a camera
 device is opened by any camera API client. As of API level 23, other camera API clients may
 still be able to open such a camera device, evicting the existing client if they have higher
 priority than the existing client of a camera device. See open() for more details.</para>
          <para tool="javadoc-to-mdoc">Since this callback will be registered with the camera service, remember to unregister it
 once it is no longer needed; otherwise the callback will continue to receive events
 indefinitely and it may prevent other resources from being released. Specifically, the
 callbacks will be invoked independently of the general activity lifecycle and independently
 of the state of individual CameraManager instances.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the handler is <c>null</c> but the current thread has
             no looper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAvailabilityCallback">
      <MemberSignature Language="C#" Value="public void UnregisterAvailabilityCallback (Android.Hardware.Camera2.CameraManager.AvailabilityCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterAvailabilityCallback(class Android.Hardware.Camera2.CameraManager/AvailabilityCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterAvailabilityCallback", "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Hardware.Camera2.CameraManager+AvailabilityCallback" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to remove from the notification list
</param>
        <summary>Remove a previously-added callback; the callback will no longer receive connection and
 disconnection callbacks.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously-added callback; the callback will no longer receive connection and
 disconnection callbacks.

 </para>
          <para tool="javadoc-to-mdoc">Removing a callback that isn't registered has no effect.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
