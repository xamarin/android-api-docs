<Type Name="CameraCaptureSession" FullName="Android.Hardware.Camera2.CameraCaptureSession">
  <TypeSignature Language="C#" Value="public abstract class CameraCaptureSession : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IAutoCloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CameraCaptureSession extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IAutoCloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Hardware.Camera2.CameraCaptureSession" />
  <TypeSignature Language="F#" Value="type CameraCaptureSession = class&#xA;    inherit Object&#xA;    interface IAutoCloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IAutoCloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/CameraCaptureSession", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A configured capture session for a <c>CameraDevice</c>, used for capturing images from the
            camera or reprocessing images captured from the camera in the same session previously.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CameraCaptureSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CameraCaptureSession (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Hardware.Camera2.CameraCaptureSession : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Hardware.Camera2.CameraCaptureSession" Usage="new Android.Hardware.Camera2.CameraCaptureSession (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortCaptures">
      <MemberSignature Language="C#" Value="public abstract void AbortCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AbortCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      <MemberSignature Language="F#" Value="abstract member AbortCaptures : unit -&gt; unit" Usage="cameraCaptureSession.AbortCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("abortCaptures", "()V", "GetAbortCapturesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discard all captures currently pending and in-progress as fast as possible.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public abstract int Capture (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Capture(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member Capture : Android.Hardware.Camera2.CaptureRequest * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.Capture (request, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("capture", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCapture_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the settings for this capture</param>
        <param name="listener">The callback object to notify once this request has been
            processed. If null, no metadata will be produced for this capture,
            although image data will still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Submit a request for an image to be captured by the camera device.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the request targets no Surfaces or Surfaces that are not
                                  configured as outputs for this session; or the request
                                  targets a set of Surfaces that cannot be submitted
                                  simultaneously in a reprocessable capture session; or a
                                  reprocess capture request is submitted in a
                                  non-reprocessable capture session; or the reprocess capture
                                  request was created with a <see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /> from
                                  a different session; or the capture targets a Surface in
                                  the middle of being <see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />; or the
                                  handler is null, the listener is not null, and the calling
                                  thread has no looper.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="CaptureBurst">
      <MemberSignature Language="C#" Value="public abstract int CaptureBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureBurst(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member CaptureBurst : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.CaptureBurst (requests, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCaptureBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">the list of settings for this burst capture</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the burst has been processed. If null, no metadata will be
            produced for any requests in this burst, although image data will still
            be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Submit a list of requests to be captured in sequence as a burst.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureBurstRequests">
      <MemberSignature Language="C#" Value="public virtual int CaptureBurstRequests (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureBurstRequests(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureBurstRequests(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="requests">the list of settings for this burst capture</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the burst has been processed.</param>
        <summary>Submit a list of requests to be captured in sequence as a burst.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureSingleRequest">
      <MemberSignature Language="C#" Value="public virtual int CaptureSingleRequest (Android.Hardware.Camera2.CaptureRequest request, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureSingleRequest(class Android.Hardware.Camera2.CaptureRequest request, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureSingleRequest(Android.Hardware.Camera2.CaptureRequest,Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureSingleRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureSingleRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="request">the settings for this capture</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify once this request has been
            processed.</param>
        <summary>Submit a request for an image to be captured by the camera device.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="cameraCaptureSession.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close this capture session asynchronously.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAutoCloseable.Close</InterfaceMember>
      </Implements>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public abstract Android.Hardware.Camera2.CameraDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Hardware.Camera2.CameraDevice Device" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Android.Hardware.Camera2.CameraDevice" Usage="Android.Hardware.Camera2.CameraCaptureSession.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDevice", "()Landroid/hardware/camera2/CameraDevice;", "GetGetDeviceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the camera device that this session is created for.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeOutputConfigurations">
      <MemberSignature Language="C#" Value="public abstract void FinalizeOutputConfigurations (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt; outputConfigs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeOutputConfigurations(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.Params.OutputConfiguration&gt; outputConfigs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.FinalizeOutputConfigurations(System.Collections.Generic.IList{Android.Hardware.Camera2.Params.OutputConfiguration})" />
      <MemberSignature Language="F#" Value="abstract member FinalizeOutputConfigurations : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt; -&gt; unit" Usage="cameraCaptureSession.FinalizeOutputConfigurations outputConfigs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finalizeOutputConfigurations", "(Ljava/util/List;)V", "GetFinalizeOutputConfigurations_Ljava_util_List_Handler", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputConfigs" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt;" />
      </Parameters>
      <Docs>
        <param name="outputConfigs">a list of <c>OutputConfiguration OutputConfigurations</c> that
                       have had <c>OutputConfiguration#addSurface addSurface</c> invoked with a valid
                       output Surface after <c>CameraDevice#createCaptureSessionByOutputConfigurations</c>.</param>
        <summary>Finalize the output configurations that now have their deferred and/or extra Surfaces
            included.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputSurface">
      <MemberSignature Language="C#" Value="public abstract Android.Views.Surface InputSurface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface InputSurface" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.InputSurface" />
      <MemberSignature Language="F#" Value="member this.InputSurface : Android.Views.Surface" Usage="Android.Hardware.Camera2.CameraCaptureSession.InputSurface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInputSurface", "()Landroid/view/Surface;", "GetGetInputSurfaceHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReprocessable">
      <MemberSignature Language="C#" Value="public abstract bool IsReprocessable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReprocessable" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.IsReprocessable" />
      <MemberSignature Language="F#" Value="member this.IsReprocessable : bool" Usage="Android.Hardware.Camera2.CameraCaptureSession.IsReprocessable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isReprocessable", "()Z", "GetIsReprocessableHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Hardware.Camera2.CameraCaptureSession.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public abstract void Prepare (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="abstract member Prepare : Android.Views.Surface -&gt; unit" Usage="cameraCaptureSession.Prepare surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "(Landroid/view/Surface;)V", "GetPrepare_Landroid_view_Surface_Handler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingBurst">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingBurst(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeatingBurst : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.SetRepeatingBurst (requests, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeatingBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">the list of requests to cycle through indefinitely</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the repeating bursts has finished processing. If null, no
            metadata will be produced for this stream of requests, although image
            data will still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Request endlessly repeating capture of a sequence of images by this
            capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingBurstRequests">
      <MemberSignature Language="C#" Value="public virtual int SetRepeatingBurstRequests (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingBurstRequests(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingBurstRequests(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeatingBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetRepeatingBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="requests">the list of requests to cycle through indefinitely</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the repeating bursts has finished processing.</param>
        <summary>Request endlessly repeating capture of a sequence of images by this
            capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingRequest">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingRequest (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingRequest(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeatingRequest : Android.Hardware.Camera2.CaptureRequest * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.SetRepeatingRequest (request, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the request to repeat indefinitely</param>
        <param name="listener">The callback object to notify every time the
            request finishes processing. If null, no metadata will be
            produced for this stream of requests, although image data will
            still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Request endlessly repeating capture of images by this capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">If the request references no Surfaces or references Surfaces
                                  that are not currently configured as outputs; or the request
                                  is a reprocess capture request; or the capture targets a
                                  Surface in the middle of being <see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />; or
                                  the handler is null, the listener is not null, and the
                                  calling thread has no looper; or no requests were passed in.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="SetSingleRepeatingRequest">
      <MemberSignature Language="C#" Value="public virtual int SetSingleRepeatingRequest (Android.Hardware.Camera2.CaptureRequest request, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetSingleRepeatingRequest(class Android.Hardware.Camera2.CaptureRequest request, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetSingleRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSingleRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetSingleRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="request">the request to repeat indefinitely</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify every time the
            request finishes processing.</param>
        <summary>Request endlessly repeating capture of images by this capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRepeating">
      <MemberSignature Language="C#" Value="public abstract void StopRepeating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopRepeating() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" />
      <MemberSignature Language="F#" Value="abstract member StopRepeating : unit -&gt; unit" Usage="cameraCaptureSession.StopRepeating " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopRepeating", "()V", "GetStopRepeatingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel any ongoing repeating capture set by either
            <c>#setRepeatingRequest setRepeatingRequest</c> or
            <c>#setRepeatingBurst</c>.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsOfflineProcessing">
      <MemberSignature Language="C#" Value="public virtual bool SupportsOfflineProcessing (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsOfflineProcessing(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SupportsOfflineProcessing(Android.Views.Surface)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("supportsOfflineProcessing", "(Landroid/view/Surface;)Z", "GetSupportsOfflineProcessing_Landroid_view_Surface_Handler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">An input/output surface that was used to create this session or the result of
                           <c>#getInputSurface</c>.</param>
        <summary>Query whether a given Surface is able to support offline mode.</summary>
        <returns>
          <c>true</c> if the surface can support offline mode and can be passed as argument to
                    <c>#switchToOffline</c>. <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchToOffline">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Camera2.CameraOfflineSession SwitchToOffline (System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt; offlineSurfaces, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Camera2.CameraOfflineSession SwitchToOffline(class System.Collections.Generic.ICollection`1&lt;class Android.Views.Surface&gt; offlineSurfaces, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraOfflineSession/CameraOfflineSessionCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SwitchToOffline(System.Collections.Generic.ICollection{Android.Views.Surface},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("switchToOffline", "(Ljava/util/Collection;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraOfflineSession$CameraOfflineSessionCallback;)Landroid/hardware/camera2/CameraOfflineSession;", "GetSwitchToOffline_Ljava_util_Collection_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraOfflineSession_CameraOfflineSessionCallback_Handler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraOfflineSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offlineSurfaces" Type="System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraOfflineSession+CameraOfflineSessionCallback" />
      </Parameters>
      <Docs>
        <param name="offlineSurfaces">Client-specified collection of input/output camera registered surfaces
                                   that need to be switched to offline mode along with their pending
                                   capture requests. Do note that not all camera registered
                                   surfaces can be switched to offline mode. Offline processing
                                   support for individual surfaces can be queried using
                                   <c>#supportsOfflineProcessing</c>. Additionally offline mode
                                   switches are not available for shared surfaces
                                   <c>OutputConfiguration#enableSurfaceSharing</c> and surfaces
                                   as part of a surface group.</param>
        <param name="executor">The executor which will be used for invoking the offline callback listener.</param>
        <param name="listener">The callback object to notify for offline session events.</param>
        <summary>Switch the current capture session and a given set of registered camera surfaces
            to offline processing mode.</summary>
        <returns>camera offline session which in case of successful offline switch will move in ready
                    state after clients receive <c>CameraOfflineSessionCallback#onReady</c>. In case the
                    offline switch was not successful clients will receive respective
                    <c>CameraOfflineSessionCallback#onSwitchFailed</c> notification.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Hardware.Camera2.CameraCaptureSession.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Hardware.Camera2.CameraCaptureSession.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateOutputConfiguration">
      <MemberSignature Language="C#" Value="public virtual void UpdateOutputConfiguration (Android.Hardware.Camera2.Params.OutputConfiguration config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateOutputConfiguration(class Android.Hardware.Camera2.Params.OutputConfiguration config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.UpdateOutputConfiguration(Android.Hardware.Camera2.Params.OutputConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("updateOutputConfiguration", "(Landroid/hardware/camera2/params/OutputConfiguration;)V", "GetUpdateOutputConfiguration_Landroid_hardware_camera2_params_OutputConfiguration_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="Android.Hardware.Camera2.Params.OutputConfiguration" />
      </Parameters>
      <Docs>
        <param name="config">Modified output configuration.</param>
        <summary>Update <c>OutputConfiguration</c> after configuration finalization see
            <c>#finalizeOutputConfigurations</c>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
