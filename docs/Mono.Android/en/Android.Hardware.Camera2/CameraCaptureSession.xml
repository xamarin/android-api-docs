<Type Name="CameraCaptureSession" FullName="Android.Hardware.Camera2.CameraCaptureSession">
  <TypeSignature Language="C#" Value="public abstract class CameraCaptureSession : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IAutoCloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CameraCaptureSession extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IAutoCloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Hardware.Camera2.CameraCaptureSession" />
  <TypeSignature Language="F#" Value="type CameraCaptureSession = class&#xA;    inherit Object&#xA;    interface IAutoCloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IAutoCloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/hardware/camera2/CameraCaptureSession", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/hardware/camera2/CameraCaptureSession", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A configured capture session for a <c>CameraDevice</c>, used for capturing images from the
            camera or reprocessing images captured from the camera in the same session previously.</summary>
    <remarks>
      <para>A configured capture session for a <c>CameraDevice</c>, used for capturing images from the
            camera or reprocessing images captured from the camera in the same session previously.</para>
      <para>A CameraCaptureSession is created by providing a set of target output surfaces to
            <c>CameraDevice#createCaptureSession createCaptureSession</c>, or by providing an
            <c>android.hardware.camera2.params.InputConfiguration</c> and a set of target output surfaces to
            <c>CameraDevice#createReprocessableCaptureSession createReprocessableCaptureSession</c> for a
            reprocessable capture session. Once created, the session is active until a new session is
            created by the camera device, or the camera device is closed.</para>
      <para>All capture sessions can be used for capturing images from the camera but only reprocessable
            capture sessions can reprocess images captured from the camera in the same session previously.</para>
      <para>Creating a session is an expensive operation and can take several hundred milliseconds, since
            it requires configuring the camera device's internal pipelines and allocating memory buffers for
            sending images to the desired targets. Therefore the setup is done asynchronously, and
            <c>CameraDevice#createCaptureSession createCaptureSession</c> and
            <c>CameraDevice#createReprocessableCaptureSession createReprocessableCaptureSession</c> will
            send the ready-to-use CameraCaptureSession to the provided listener's
            <c>CameraCaptureSession.StateCallback#onConfigured onConfigured</c> callback. If configuration
            cannot be completed, then the
            <c>CameraCaptureSession.StateCallback#onConfigureFailed onConfigureFailed</c> is called, and the
            session will not become active.</para>
      <para>&lt;!--</para>
      <para>Any capture requests (repeating or non-repeating) submitted before the session is ready will
            be queued up and will begin capture once the session becomes ready. In case the session cannot be
            configured and <c>StateCallback#onConfigureFailed onConfigureFailed</c> is called, all queued
            capture requests are discarded.</para>
      <para>--&gt;</para>
      <para>If a new session is created by the camera device, then the previous session is closed, and its
            associated <c>StateCallback#onClosed onClosed</c> callback will be invoked.  All
            of the session methods will throw an IllegalStateException if called once the session is
            closed.</para>
      <para>A closed session clears any repeating requests (as if <c>#stopRepeating</c> had been called),
            but will still complete all of its in-progress capture requests as normal, before a newly
            created session takes over and reconfigures the camera device.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CameraCaptureSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CameraCaptureSession (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Hardware.Camera2.CameraCaptureSession : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Hardware.Camera2.CameraCaptureSession" Usage="new Android.Hardware.Camera2.CameraCaptureSession (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortCaptures">
      <MemberSignature Language="C#" Value="public abstract void AbortCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AbortCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      <MemberSignature Language="F#" Value="abstract member AbortCaptures : unit -&gt; unit" Usage="cameraCaptureSession.AbortCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("abortCaptures", "()V", "GetAbortCapturesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("abortCaptures", "()V", "GetAbortCapturesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discard all captures currently pending and in-progress as fast as possible.</summary>
        <remarks>
          <para>Discard all captures currently pending and in-progress as fast as possible.</para>
          <para>The camera device will discard all of its current work as fast as possible. Some in-flight
            captures may complete successfully and call <c>CaptureCallback#onCaptureCompleted</c>, while
            others will trigger their <c>CaptureCallback#onCaptureFailed</c> callbacks. If a repeating
            request or a repeating burst is set, it will be cleared.</para>
          <para>This method is the fastest way to switch the camera device to a new session with
            <c>CameraDevice#createCaptureSession</c> or
            <c>CameraDevice#createReprocessableCaptureSession</c>, at the cost of discarding in-progress
            work. It must be called before the new session is created. Once all pending requests are
            either completed or thrown away, the <c>StateCallback#onReady</c> callback will be called,
            if the session has not been closed. Otherwise, the <c>StateCallback#onClosed</c>
            callback will be fired when a new session is created by the camera device.</para>
          <para>Cancelling will introduce at least a brief pause in the stream of data from the camera
            device, since once the camera device is emptied, the first new request has to make it through
            the entire camera pipeline before new output buffers are produced.</para>
          <para>This means that using <c>abortCaptures()</c> to simply remove pending requests is not
            recommended; it's best used for quickly switching output configurations, or for cancelling
            long in-progress requests (such as a multi-second capture).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#abortCaptures()" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.abortCaptures()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public abstract int Capture (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Capture(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member Capture : Android.Hardware.Camera2.CaptureRequest * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.Capture (request, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("capture", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCapture_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("capture", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCapture_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the settings for this capture</param>
        <param name="listener">The callback object to notify once this request has been
            processed. If null, no metadata will be produced for this capture,
            although image data will still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Submit a request for an image to be captured by the camera device.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#capture(android.hardware.camera2.CaptureRequest,%20android.hardware.camera2.CaptureCallback,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureCallback, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the request targets no Surfaces or Surfaces that are not
                                  configured as outputs for this session; or the request
                                  targets a set of Surfaces that cannot be submitted
                                  simultaneously in a reprocessable capture session; or a
                                  reprocess capture request is submitted in a
                                  non-reprocessable capture session; or the reprocess capture
                                  request was created with a <see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /> from
                                  a different session; or the capture targets a Surface in
                                  the middle of being <see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />; or the
                                  handler is null, the listener is not null, and the calling
                                  thread has no looper.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="CaptureBurst">
      <MemberSignature Language="C#" Value="public abstract int CaptureBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureBurst(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member CaptureBurst : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.CaptureBurst (requests, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("captureBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCaptureBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("captureBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCaptureBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">the list of settings for this burst capture</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the burst has been processed. If null, no metadata will be
            produced for any requests in this burst, although image data will still
            be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Submit a list of requests to be captured in sequence as a burst.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#captureBurst(java.util.List,%20android.hardware.camera2.CaptureCallback,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.captureBurst(java.util.List, android.hardware.camera2.CaptureCallback, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureBurstRequests">
      <MemberSignature Language="C#" Value="public virtual int CaptureBurstRequests (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureBurstRequests(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureBurstRequests(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member CaptureBurstRequests : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int&#xA;override this.CaptureBurstRequests : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int" Usage="cameraCaptureSession.CaptureBurstRequests (requests, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("captureBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("captureBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="requests">the list of settings for this burst capture</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the burst has been processed.</param>
        <summary>Submit a list of requests to be captured in sequence as a burst.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#captureBurstRequests(java.util.List,%20java.util.concurrent.Executor,%20android.hardware.camera2.CaptureCallback)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CaptureCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureSingleRequest">
      <MemberSignature Language="C#" Value="public virtual int CaptureSingleRequest (Android.Hardware.Camera2.CaptureRequest request, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureSingleRequest(class Android.Hardware.Camera2.CaptureRequest request, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.CaptureSingleRequest(Android.Hardware.Camera2.CaptureRequest,Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member CaptureSingleRequest : Android.Hardware.Camera2.CaptureRequest * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int&#xA;override this.CaptureSingleRequest : Android.Hardware.Camera2.CaptureRequest * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int" Usage="cameraCaptureSession.CaptureSingleRequest (request, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("captureSingleRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureSingleRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("captureSingleRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetCaptureSingleRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="request">the settings for this capture</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify once this request has been
            processed.</param>
        <summary>Submit a request for an image to be captured by the camera device.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#captureSingleRequest(android.hardware.camera2.CaptureRequest,%20java.util.concurrent.Executor,%20android.hardware.camera2.CaptureCallback)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CaptureCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="cameraCaptureSession.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAutoCloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close this capture session asynchronously.</summary>
        <remarks>
          <para>Close this capture session asynchronously.</para>
          <para>Closing a session frees up the target output Surfaces of the session for reuse with either
            a new session, or to other APIs that can draw to Surfaces.</para>
          <para>Note that for common usage scenarios like creating a new session or closing the camera
            device, it is faster to call respective APIs directly (see below for more details) without
            calling into this method. This API is only useful when application wants to unconfigure the
            camera but keep the device open for later use.</para>
          <para>Creating a new capture session with <c>CameraDevice#createCaptureSession</c>
            will close any existing capture session automatically, and call the older session listener's
            <c>StateCallback#onClosed</c> callback. Using <c>CameraDevice#createCaptureSession</c>
            directly without closing is the recommended approach for quickly switching to a new session,
            since unchanged target outputs can be reused more efficiently.</para>
          <para>Closing the device with <c>CameraDevice#close</c> directly without calling this API is
            also recommended for quickly closing the camera.</para>
          <para>Once a session is closed, all methods on it will throw an IllegalStateException, and any
            repeating requests or bursts are stopped (as if <c>#stopRepeating()</c> was called).
            However, any in-progress capture requests submitted to the session will be completed as
            normal; once all captures have completed and the session has been torn down,
            <c>StateCallback#onClosed</c> will be called.</para>
          <para>Closing a session is idempotent; closing more than once has no effect.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#close()" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public abstract Android.Hardware.Camera2.CameraDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Hardware.Camera2.CameraDevice Device" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Android.Hardware.Camera2.CameraDevice" Usage="Android.Hardware.Camera2.CameraCaptureSession.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDevice", "()Landroid/hardware/camera2/CameraDevice;", "GetGetDeviceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDevice", "()Landroid/hardware/camera2/CameraDevice;", "GetGetDeviceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the camera device that this session is created for.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeOutputConfigurations">
      <MemberSignature Language="C#" Value="public abstract void FinalizeOutputConfigurations (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt;? outputConfigs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeOutputConfigurations(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.Params.OutputConfiguration&gt; outputConfigs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.FinalizeOutputConfigurations(System.Collections.Generic.IList{Android.Hardware.Camera2.Params.OutputConfiguration})" />
      <MemberSignature Language="F#" Value="abstract member FinalizeOutputConfigurations : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt; -&gt; unit" Usage="cameraCaptureSession.FinalizeOutputConfigurations outputConfigs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finalizeOutputConfigurations", "(Ljava/util/List;)V", "GetFinalizeOutputConfigurations_Ljava_util_List_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finalizeOutputConfigurations", "(Ljava/util/List;)V", "GetFinalizeOutputConfigurations_Ljava_util_List_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputConfigs" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.Params.OutputConfiguration&gt;" />
      </Parameters>
      <Docs>
        <param name="outputConfigs">a list of <c>OutputConfiguration OutputConfigurations</c> that
                       have had <c>OutputConfiguration#addSurface addSurface</c> invoked with a valid
                       output Surface after <c>CameraDevice#createCaptureSessionByOutputConfigurations</c>.</param>
        <summary>Finalize the output configurations that now have their deferred and/or extra Surfaces
            included.</summary>
        <remarks>
          <para>Finalize the output configurations that now have their deferred and/or extra Surfaces
            included.</para>
          <para>For camera use cases where a preview and other output configurations need to be
            configured, it can take some time for the preview Surface to be ready. For example, if the
            preview Surface is obtained from <c>android.view.SurfaceView</c>, the SurfaceView will only
            be ready after the UI layout is done, potentially delaying camera startup.</para>
          <para>To speed up camera startup time, the application can configure the
            <c>CameraCaptureSession</c> with the eventual preview size (via
            <c>OutputConfiguration#OutputConfiguration(Size,Class) a deferred OutputConfiguration</c>),
            and defer the preview output configuration until the Surface is ready. After the
            <c>CameraCaptureSession</c> is created successfully with this deferred output and other
            normal outputs, the application can start submitting requests as long as they do not include
            deferred output Surfaces. Once a deferred Surface is ready, the application can add the
            Surface to the deferred output configuration with the
            <c>OutputConfiguration#addSurface</c> method, and then update the deferred output
            configuration via this method, before it can submit capture requests with this output
            target.</para>
          <para>This function can also be called in case where multiple surfaces share the same
            OutputConfiguration, and one of the surfaces becomes available after the <c>CameraCaptureSession</c> is created. In that case, the application must first create the
            OutputConfiguration with the available Surface, then enable further surface sharing via
            <c>OutputConfiguration#enableSurfaceSharing</c>, before creating the CameraCaptureSession.
            After the CameraCaptureSession is created, and once the extra Surface becomes available, the
            application must then call <c>OutputConfiguration#addSurface</c> before finalizing the
            configuration with this method.</para>
          <para>If the provided OutputConfigurations are unchanged from session creation, this function
            call has no effect. This function must only be called once for a particular output
            configuration.</para>
          <para>The output Surfaces included by this list of
            <c>OutputConfiguration OutputConfigurations</c> can be used as <c>CaptureRequest</c>
            targets as soon as this call returns.</para>
          <para>This method is not supported by
            <c>CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY</c>-level devices.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#finalizeOutputConfigurations(java.util.List%3Candroid.hardware.camera2.params.OutputConfiguration%3E)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.finalizeOutputConfigurations(java.util.List&lt;android.hardware.camera2.params.OutputConfiguration&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputSurface">
      <MemberSignature Language="C#" Value="public abstract Android.Views.Surface? InputSurface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface InputSurface" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.InputSurface" />
      <MemberSignature Language="F#" Value="member this.InputSurface : Android.Views.Surface" Usage="Android.Hardware.Camera2.CameraCaptureSession.InputSurface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getInputSurface", "()Landroid/view/Surface;", "GetGetInputSurfaceHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getInputSurface", "()Landroid/view/Surface;", "GetGetInputSurfaceHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReprocessable">
      <MemberSignature Language="C#" Value="public abstract bool IsReprocessable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReprocessable" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.IsReprocessable" />
      <MemberSignature Language="F#" Value="member this.IsReprocessable : bool" Usage="Android.Hardware.Camera2.CameraCaptureSession.IsReprocessable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isReprocessable", "()Z", "GetIsReprocessableHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isReprocessable", "()Z", "GetIsReprocessableHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Hardware.Camera2.CameraCaptureSession.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public abstract void Prepare (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="abstract member Prepare : Android.Views.Surface -&gt; unit" Usage="cameraCaptureSession.Prepare surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prepare", "(Landroid/view/Surface;)V", "GetPrepare_Landroid_view_Surface_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prepare", "(Landroid/view/Surface;)V", "GetPrepare_Landroid_view_Surface_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">the output Surface for which buffers should be pre-allocated. Must be one of
            the output Surfaces used to create this session.</param>
        <summary>Pre-allocate all buffers for an output Surface.</summary>
        <remarks>
          <para>Pre-allocate all buffers for an output Surface.</para>
          <para>Normally, the image buffers for a given output Surface are allocated on-demand,
            to minimize startup latency and memory overhead.</para>
          <para>However, in some cases, it may be desirable for the buffers to be allocated before
            any requests targeting the Surface are actually submitted to the device. Large buffers
            may take some time to allocate, which can result in delays in submitting requests until
            sufficient buffers are allocated to reach steady-state behavior. Such delays can cause
            bursts to take longer than desired, or cause skips or stutters in preview output.</para>
          <para>The prepare() method can be used to perform this preallocation. It may only be called for
            a given output Surface before that Surface is used as a target for a request. The number of
            buffers allocated is the sum of the count needed by the consumer providing the output
            Surface, and the maximum number needed by the camera device to fill its pipeline. Since this
            may be a larger number than what is actually required for steady-state operation, using
            prepare may result in higher memory consumption than the normal on-demand behavior results
            in. Prepare() will also delay the time to first output to a given Surface, in exchange for
            smoother frame rate once the allocation is complete.</para>
          <para>For example, an application that creates an
            <c>android.media.ImageReader#newInstance ImageReader</c> with a maxImages argument of 10,
            but only uses 3 simultaneous Images at once would normally only cause those 3 images to be
            allocated (plus what is needed by the camera device for smooth operation).  But using
            prepare() on the ImageReader Surface will result in all 10 Images being allocated. So
            applications using this method should take care to request only the number of buffers
            actually necessary for their application.</para>
          <para>If the same output Surface is used in consecutive sessions (without closing the first
            session explicitly), then its already-allocated buffers are carried over, and if it was
            used as a target of a capture request in the first session, prepare cannot be called on it
            in the second session.</para>
          <para>Once allocation is complete, <c>StateCallback#onSurfacePrepared</c> will be invoked with
            the Surface provided to this method. Between the prepare call and the onSurfacePrepared call,
            the Surface provided to prepare must not be used as a target of a CaptureRequest submitted
            to this session.</para>
          <para>Note that if 2 surfaces share the same stream via <c>OutputConfiguration#enableSurfaceSharing</c> and <c>OutputConfiguration#addSurface</c>,
            prepare() only needs to be called on one surface, and <c>StateCallback#onSurfacePrepared</c> will be triggered for both surfaces.</para>
          <para>
            <c>android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY</c>
            devices cannot pre-allocate output buffers; for those devices,
            <c>StateCallback#onSurfacePrepared</c> will be immediately called, and no preallocation is
            done.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#prepare(android.view.Surface)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.prepare(android.view.Surface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingBurst">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingBurst(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeatingBurst : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.SetRepeatingBurst (requests, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRepeatingBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRepeatingBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">the list of requests to cycle through indefinitely</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the repeating bursts has finished processing. If null, no
            metadata will be produced for this stream of requests, although image
            data will still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Request endlessly repeating capture of a sequence of images by this
            capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#setRepeatingBurst(java.util.List,%20android.hardware.camera2.CaptureCallback,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.setRepeatingBurst(java.util.List, android.hardware.camera2.CaptureCallback, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingBurstRequests">
      <MemberSignature Language="C#" Value="public virtual int SetRepeatingBurstRequests (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingBurstRequests(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingBurstRequests(System.Collections.Generic.IList{Android.Hardware.Camera2.CaptureRequest},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeatingBurstRequests : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int&#xA;override this.SetRepeatingBurstRequests : System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int" Usage="cameraCaptureSession.SetRepeatingBurstRequests (requests, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRepeatingBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetRepeatingBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRepeatingBurstRequests", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetRepeatingBurstRequests_Ljava_util_List_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="requests">the list of requests to cycle through indefinitely</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify each time one of the
            requests in the repeating bursts has finished processing.</param>
        <summary>Request endlessly repeating capture of a sequence of images by this
            capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#setRepeatingBurstRequests(java.util.List,%20java.util.concurrent.Executor,%20android.hardware.camera2.CaptureCallback)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CaptureCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingRequest">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingRequest (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingRequest(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeatingRequest : Android.Hardware.Camera2.CaptureRequest * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback * Android.OS.Handler -&gt; int" Usage="cameraCaptureSession.SetRepeatingRequest (request, listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the request to repeat indefinitely</param>
        <param name="listener">The callback object to notify every time the
            request finishes processing. If null, no metadata will be
            produced for this stream of requests, although image data will
            still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
            <c>null</c> to use the current thread's <c>android.os.Looper
            looper</c>.</param>
        <summary>Request endlessly repeating capture of images by this capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#setRepeatingRequest(android.hardware.camera2.CaptureRequest,%20android.hardware.camera2.CaptureCallback,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureCallback, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">If the request references no Surfaces or references Surfaces
                                  that are not currently configured as outputs; or the request
                                  is a reprocess capture request; or the capture targets a
                                  Surface in the middle of being <see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" />; or
                                  the handler is null, the listener is not null, and the
                                  calling thread has no looper; or no requests were passed in.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="SetSingleRepeatingRequest">
      <MemberSignature Language="C#" Value="public virtual int SetSingleRepeatingRequest (Android.Hardware.Camera2.CaptureRequest request, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetSingleRepeatingRequest(class Android.Hardware.Camera2.CaptureRequest request, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SetSingleRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetSingleRepeatingRequest : Android.Hardware.Camera2.CaptureRequest * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int&#xA;override this.SetSingleRepeatingRequest : Android.Hardware.Camera2.CaptureRequest * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback -&gt; int" Usage="cameraCaptureSession.SetSingleRepeatingRequest (request, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSingleRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetSingleRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSingleRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;)I", "GetSetSingleRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
      </Parameters>
      <Docs>
        <param name="request">the request to repeat indefinitely</param>
        <param name="executor">the executor which will be used for invoking the listener.</param>
        <param name="listener">The callback object to notify every time the
            request finishes processing.</param>
        <summary>Request endlessly repeating capture of images by this capture session.</summary>
        <returns>int A unique capture sequence ID used by
                        <c>CaptureCallback#onCaptureSequenceCompleted</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,%20java.util.concurrent.Executor,%20android.hardware.camera2.CaptureCallback)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CaptureCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRepeating">
      <MemberSignature Language="C#" Value="public abstract void StopRepeating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopRepeating() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" />
      <MemberSignature Language="F#" Value="abstract member StopRepeating : unit -&gt; unit" Usage="cameraCaptureSession.StopRepeating " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stopRepeating", "()V", "GetStopRepeatingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stopRepeating", "()V", "GetStopRepeatingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel any ongoing repeating capture set by either
            <c>#setRepeatingRequest setRepeatingRequest</c> or
            <c>#setRepeatingBurst</c>.</summary>
        <remarks>
          <para>Cancel any ongoing repeating capture set by either
            <c>#setRepeatingRequest setRepeatingRequest</c> or
            <c>#setRepeatingBurst</c>. Has no effect on requests submitted through
            <c>#capture capture</c> or <c>#captureBurst captureBurst</c>.</para>
          <para>Any currently in-flight captures will still complete, as will any burst that is
            mid-capture. To ensure that the device has finished processing all of its capture requests
            and is in ready state, wait for the <c>StateCallback#onReady</c> callback after
            calling this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#stopRepeating()" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.stopRepeating()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsOfflineProcessing">
      <MemberSignature Language="C#" Value="public virtual bool SupportsOfflineProcessing (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsOfflineProcessing(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SupportsOfflineProcessing(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="abstract member SupportsOfflineProcessing : Android.Views.Surface -&gt; bool&#xA;override this.SupportsOfflineProcessing : Android.Views.Surface -&gt; bool" Usage="cameraCaptureSession.SupportsOfflineProcessing surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("supportsOfflineProcessing", "(Landroid/view/Surface;)Z", "GetSupportsOfflineProcessing_Landroid_view_Surface_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("supportsOfflineProcessing", "(Landroid/view/Surface;)Z", "GetSupportsOfflineProcessing_Landroid_view_Surface_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">An input/output surface that was used to create this session or the result of
                           <c>#getInputSurface</c>.</param>
        <summary>Query whether a given Surface is able to support offline mode.</summary>
        <returns>
          <c>true</c> if the surface can support offline mode and can be passed as argument to
                    <c>#switchToOffline</c>. <c>false</c> otherwise.</returns>
        <remarks>
          <para>Query whether a given Surface is able to support offline mode.</para>
          <para>Surfaces that support offline mode can be passed as arguments to <c>#switchToOffline</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#supportsOfflineProcessing(android.view.Surface)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.supportsOfflineProcessing(android.view.Surface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchToOffline">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Camera2.CameraOfflineSession? SwitchToOffline (System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt; offlineSurfaces, Java.Util.Concurrent.IExecutor executor, Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Camera2.CameraOfflineSession SwitchToOffline(class System.Collections.Generic.ICollection`1&lt;class Android.Views.Surface&gt; offlineSurfaces, class Java.Util.Concurrent.IExecutor executor, class Android.Hardware.Camera2.CameraOfflineSession/CameraOfflineSessionCallback listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.SwitchToOffline(System.Collections.Generic.ICollection{Android.Views.Surface},Java.Util.Concurrent.IExecutor,Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback)" />
      <MemberSignature Language="F#" Value="abstract member SwitchToOffline : System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback -&gt; Android.Hardware.Camera2.CameraOfflineSession&#xA;override this.SwitchToOffline : System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt; * Java.Util.Concurrent.IExecutor * Android.Hardware.Camera2.CameraOfflineSession.CameraOfflineSessionCallback -&gt; Android.Hardware.Camera2.CameraOfflineSession" Usage="cameraCaptureSession.SwitchToOffline (offlineSurfaces, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("switchToOffline", "(Ljava/util/Collection;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraOfflineSession$CameraOfflineSessionCallback;)Landroid/hardware/camera2/CameraOfflineSession;", "GetSwitchToOffline_Ljava_util_Collection_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraOfflineSession_CameraOfflineSessionCallback_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("switchToOffline", "(Ljava/util/Collection;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraOfflineSession$CameraOfflineSessionCallback;)Landroid/hardware/camera2/CameraOfflineSession;", "GetSwitchToOffline_Ljava_util_Collection_Ljava_util_concurrent_Executor_Landroid_hardware_camera2_CameraOfflineSession_CameraOfflineSessionCallback_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraOfflineSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offlineSurfaces" Type="System.Collections.Generic.ICollection&lt;Android.Views.Surface&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraOfflineSession+CameraOfflineSessionCallback" />
      </Parameters>
      <Docs>
        <param name="offlineSurfaces">Client-specified collection of input/output camera registered surfaces
                                   that need to be switched to offline mode along with their pending
                                   capture requests. Do note that not all camera registered
                                   surfaces can be switched to offline mode. Offline processing
                                   support for individual surfaces can be queried using
                                   <c>#supportsOfflineProcessing</c>. Additionally offline mode
                                   switches are not available for shared surfaces
                                   <c>OutputConfiguration#enableSurfaceSharing</c> and surfaces
                                   as part of a surface group.</param>
        <param name="executor">The executor which will be used for invoking the offline callback listener.</param>
        <param name="listener">The callback object to notify for offline session events.</param>
        <summary>Switch the current capture session and a given set of registered camera surfaces
            to offline processing mode.</summary>
        <returns>camera offline session which in case of successful offline switch will move in ready
                    state after clients receive <c>CameraOfflineSessionCallback#onReady</c>. In case the
                    offline switch was not successful clients will receive respective
                    <c>CameraOfflineSessionCallback#onSwitchFailed</c> notification.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#switchToOffline(java.util.Collection,%20java.util.concurrent.Executor,%20android.hardware.camera2.CameraOfflineSessionCallback)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.switchToOffline(java.util.Collection, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSessionCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Hardware.Camera2.CameraCaptureSession.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.CameraCaptureSession.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Hardware.Camera2.CameraCaptureSession.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateOutputConfiguration">
      <MemberSignature Language="C#" Value="public virtual void UpdateOutputConfiguration (Android.Hardware.Camera2.Params.OutputConfiguration? config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateOutputConfiguration(class Android.Hardware.Camera2.Params.OutputConfiguration config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.CameraCaptureSession.UpdateOutputConfiguration(Android.Hardware.Camera2.Params.OutputConfiguration)" />
      <MemberSignature Language="F#" Value="abstract member UpdateOutputConfiguration : Android.Hardware.Camera2.Params.OutputConfiguration -&gt; unit&#xA;override this.UpdateOutputConfiguration : Android.Hardware.Camera2.Params.OutputConfiguration -&gt; unit" Usage="cameraCaptureSession.UpdateOutputConfiguration config" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("updateOutputConfiguration", "(Landroid/hardware/camera2/params/OutputConfiguration;)V", "GetUpdateOutputConfiguration_Landroid_hardware_camera2_params_OutputConfiguration_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("updateOutputConfiguration", "(Landroid/hardware/camera2/params/OutputConfiguration;)V", "GetUpdateOutputConfiguration_Landroid_hardware_camera2_params_OutputConfiguration_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="Android.Hardware.Camera2.Params.OutputConfiguration" />
      </Parameters>
      <Docs>
        <param name="config">Modified output configuration.</param>
        <summary>Update <c>OutputConfiguration</c> after configuration finalization see
            <c>#finalizeOutputConfigurations</c>.</summary>
        <remarks>
          <para>Update <c>OutputConfiguration</c> after configuration finalization see
            <c>#finalizeOutputConfigurations</c>.</para>
          <para>Any <c>OutputConfiguration</c> that has been modified via calls to
            <c>OutputConfiguration#addSurface</c> or <c>OutputConfiguration#removeSurface</c> must be
            updated. After the update call returns without throwing exceptions any newly added surfaces
            can be referenced in subsequent capture requests.</para>
          <para>Surfaces that get removed must not be part of any active repeating or single/burst
            request or have any pending results. Consider updating any repeating requests first via
            <c>#setRepeatingRequest</c> or <c>#setRepeatingBurst</c> and then wait for the last frame
            number when the sequence completes <c>CaptureCallback#onCaptureSequenceCompleted</c>
            before calling updateOutputConfiguration to remove a previously active Surface.</para>
          <para>Surfaces that get added must not be part of any other registered
            <c>OutputConfiguration</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.CameraCaptureSession.updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
