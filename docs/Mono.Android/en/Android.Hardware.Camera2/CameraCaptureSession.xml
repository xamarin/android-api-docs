<Type Name="CameraCaptureSession" FullName="Android.Hardware.Camera2.CameraCaptureSession">
  <TypeSignature Language="C#" Value="public abstract class CameraCaptureSession : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CameraCaptureSession extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/CameraCaptureSession", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A configured capture session for a <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>, used for capturing images from the
 camera or reprocessing images captured from the camera in the same session previously.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A configured capture session for a <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>, used for capturing images from the
 camera or reprocessing images captured from the camera in the same session previously.

 <!--
 <p>Any capture requests (repeating or non-repeating) submitted before the session is ready will
 be queued up and will begin capture once the session becomes ready. In case the session cannot be
 configured and <code><a href="../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onConfigureFailed(android.hardware.camera2.CameraCaptureSession)">onConfigureFailed</a></code> is called, all queued
 capture requests are discarded.</p>
 --></para>
      <para tool="javadoc-to-mdoc">A CameraCaptureSession is created by providing a set of target output surfaces to
 <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c>, or by providing an
 <c><see cref="T:Android.Hardware.Camera2.Params.InputConfiguration" /></c> and a set of target output surfaces to
 <c><see cref="!:Android.Hardware.Camera2.CameraDevice.createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List&lt;android.view.Surface&gt;,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)" /></c> for a
 reprocessable capture session. Once created, the session is active until a new session is
 created by the camera device, or the camera device is closed.</para>
      <para tool="javadoc-to-mdoc">All capture sessions can be used for capturing images from the camera but only reprocessable
 capture sessions can reprocess images captured from the camera in the same session previously.
 </para>
      <para tool="javadoc-to-mdoc">Creating a session is an expensive operation and can take several hundred milliseconds, since
 it requires configuring the camera device's internal pipelines and allocating memory buffers for
 sending images to the desired targets. Therefore the setup is done asynchronously, and
 <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c> and
 <c><see cref="!:Android.Hardware.Camera2.CameraDevice.createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List&lt;android.view.Surface&gt;,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)" /></c> will
 send the ready-to-use CameraCaptureSession to the provided listener's
 <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onConfigured(android.hardware.camera2.CameraCaptureSession)" /></c> callback. If configuration
 cannot be completed, then the
 <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onConfigureFailed(android.hardware.camera2.CameraCaptureSession)" /></c> is called, and the
 session will not become active.</para>
      <para tool="javadoc-to-mdoc">If a new session is created by the camera device, then the previous session is closed, and its
 associated <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onClosed(android.hardware.camera2.CameraCaptureSession)" /></c> callback will be invoked.  All
 of the session methods will throw an IllegalStateException if called once the session is
 closed.</para>
      <para tool="javadoc-to-mdoc">A closed session clears any repeating requests (as if <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" /></c> had been called),
 but will still complete all of its in-progress capture requests as normal, before a newly
 created session takes over and reconfigures the camera device.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CameraCaptureSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#CameraCaptureSession()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CameraCaptureSession (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortCaptures">
      <MemberSignature Language="C#" Value="public abstract void AbortCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AbortCaptures() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("abortCaptures", "()V", "GetAbortCapturesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discard all captures currently pending and in-progress as fast as possible.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Discard all captures currently pending and in-progress as fast as possible.

 </para>
          <para tool="javadoc-to-mdoc">The camera device will discard all of its current work as fast as possible. Some in-flight
 captures may complete successfully and call <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$CaptureCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html#onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)" /></c>, while
 others will trigger their <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$CaptureCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html#onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)" /></c> callbacks. If a repeating
 request or a repeating burst is set, it will be cleared.</para>
          <para tool="javadoc-to-mdoc">This method is the fastest way to switch the camera device to a new session with
 <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c> or
 <c><see cref="!:Android.Hardware.Camera2.CameraDevice.createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List&lt;android.view.Surface&gt;,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)" /></c>, at the cost of discarding in-progress
 work. It must be called before the new session is created. Once all pending requests are
 either completed or thrown away, the <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onReady(android.hardware.camera2.CameraCaptureSession)" /></c> callback will be called,
 if the session has not been closed. Otherwise, the <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onClosed(android.hardware.camera2.CameraCaptureSession)" /></c>
 callback will be fired when a new session is created by the camera device.</para>
          <para tool="javadoc-to-mdoc">Cancelling will introduce at least a brief pause in the stream of data from the camera
 device, since once the camera device is emptied, the first new request has to make it through
 the entire camera pipeline before new output buffers are produced.</para>
          <para tool="javadoc-to-mdoc">This means that using <c>abortCaptures()</c> to simply remove pending requests is not
 recommended; it's best used for quickly switching output configurations, or for cancelling
 long in-progress requests (such as a multi-second capture).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#abortCaptures()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public abstract int Capture (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Capture(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("capture", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCapture_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the settings for this capture</param>
        <param name="listener">The callback object to notify once this request has been
 processed. If null, no metadata will be produced for this capture,
 although image data will still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
 <c>null</c> to use the current thread's <c><see cref="T:Android.OS.Looper" /></c>.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Submit a request for an image to be captured by the camera device.</para>
          <para tool="javadoc-to-mdoc">The request defines all the parameters for capturing the single image,
 including sensor, lens, flash, and post-processing settings.</para>
          <para tool="javadoc-to-mdoc">Each request will produce one <c><see cref="T:Android.Hardware.Camera2.CaptureResult" /></c> and produce new frames for one or more
 target Surfaces, set with the CaptureRequest builder's
 <c><see cref="!:NoType:android/hardware/camera2/CaptureRequest$Builder;Href=../../../../reference/android/hardware/camera2/CaptureRequest.Builder.html#addTarget(android.view.Surface)" /></c> method. The target surfaces (set with
 <c><see cref="!:NoType:android/hardware/camera2/CaptureRequest$Builder;Href=../../../../reference/android/hardware/camera2/CaptureRequest.Builder.html#addTarget(android.view.Surface)" /></c>) must be a subset of the surfaces provided when this
 capture session was created.</para>
          <para tool="javadoc-to-mdoc">Multiple regular and reprocess requests can be in progress at once. If there are only
 regular requests or reprocess requests in progress, they are processed in first-in,
 first-out order. If there are both regular and reprocess requests in progress, regular
 requests are processed in first-in, first-out order and reprocess requests are processed in
 first-in, first-out order, respectively. However, the processing order of a regular request
 and a reprocess request in progress is not specified. In other words, a regular request
 will always be processed before regular requets that are submitted later. A reprocess request
 will always be processed before reprocess requests that are submitted later. However, a
 regular request may not be processed before reprocess requests that are submitted later.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Requests submitted through this method have higher priority than
 those submitted through <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> or
 <c><see cref="!:Android.Hardware.Camera2.CameraCaptureSession.setRepeatingBurst(java.util.List&lt;android.hardware.camera2.CaptureRequest&gt;,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)" /></c>, and will be processed as soon as the current
 repeat/repeatBurst processing completes.</para>
          <para tool="javadoc-to-mdoc">All capture sessions can be used for capturing images from the camera but only capture
 sessions created by
 <c><see cref="!:Android.Hardware.Camera2.CameraDevice.createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List&lt;android.view.Surface&gt;,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)" /></c>
 can submit reprocess capture requests. Submitting a reprocess request to a regular capture
 session will result in an <c><see cref="T:Java.Lang.IllegalArgumentException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession.CaptureCallback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the request targets no Surfaces or Surfaces that are not
                                  configured as outputs for this session; or the request
                                  targets a set of Surfaces that cannot be submitted
                                  simultaneously in a reprocessable capture session; or a
                                  reprocess capture request is submitted in a
                                  non-reprocessable capture session; or the reprocess capture
                                  request was created with a <c><see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /></c> from
                                  a different session; or the capture targets a Surface in
                                  the middle of being <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" /></c>; or the
                                  handler is null, the listener is not null, and the calling
                                  thread has no looper.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="CaptureBurst">
      <MemberSignature Language="C#" Value="public abstract int CaptureBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CaptureBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetCaptureBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">To be added.</param>
        <param name="listener">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close this capture session asynchronously.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Close this capture session asynchronously.

 </para>
          <para tool="javadoc-to-mdoc">Closing a session frees up the target output Surfaces of the session for reuse with either
 a new session, or to other APIs that can draw to Surfaces.</para>
          <para tool="javadoc-to-mdoc">Note that creating a new capture session with <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c>
 will close any existing capture session automatically, and call the older session listener's
 <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onClosed(android.hardware.camera2.CameraCaptureSession)" /></c> callback. Using <c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c>
 directly without closing is the recommended approach for quickly switching to a new session,
 since unchanged target outputs can be reused more efficiently.</para>
          <para tool="javadoc-to-mdoc">Once a session is closed, all methods on it will throw an IllegalStateException, and any
 repeating requests or bursts are stopped (as if <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" /></c> was called).
 However, any in-progress capture requests submitted to the session will be completed as
 normal; once all captures have completed and the session has been torn down,
 <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onClosed(android.hardware.camera2.CameraCaptureSession)" /></c> will be called.</para>
          <para tool="javadoc-to-mdoc">Closing a session is idempotent; closing more than once has no effect.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public abstract Android.Hardware.Camera2.CameraDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Hardware.Camera2.CameraDevice Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDevice", "()Landroid/hardware/camera2/CameraDevice;", "GetGetDeviceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CameraDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the camera device that this session is created for.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the camera device that this session is created for.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#getDevice()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingBurst">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingBurst (System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt; requests, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingBurst(class System.Collections.Generic.IList`1&lt;class Android.Hardware.Camera2.CaptureRequest&gt; requests, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeatingBurst", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingBurst_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requests" Type="System.Collections.Generic.IList&lt;Android.Hardware.Camera2.CaptureRequest&gt;" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="requests">To be added.</param>
        <param name="listener">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRepeatingRequest">
      <MemberSignature Language="C#" Value="public abstract int SetRepeatingRequest (Android.Hardware.Camera2.CaptureRequest request, Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetRepeatingRequest(class Android.Hardware.Camera2.CaptureRequest request, class Android.Hardware.Camera2.CameraCaptureSession/CaptureCallback listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeatingRequest", "(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)I", "GetSetRepeatingRequest_Landroid_hardware_camera2_CaptureRequest_Landroid_hardware_camera2_CameraCaptureSession_CaptureCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Hardware.Camera2.CaptureRequest" />
        <Parameter Name="listener" Type="Android.Hardware.Camera2.CameraCaptureSession+CaptureCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="request">the request to repeat indefinitely</param>
        <param name="listener">The callback object to notify every time the
 request finishes processing. If null, no metadata will be
 produced for this stream of requests, although image data will
 still be produced.</param>
        <param name="handler">the handler on which the listener should be invoked, or
 <c>null</c> to use the current thread's <c><see cref="T:Android.OS.Looper" /></c>.</param>
        <summary>Request endlessly repeating capture of images by this capture session.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request endlessly repeating capture of images by this capture session.

 </para>
          <para tool="javadoc-to-mdoc">With this method, the camera device will continually capture images
 using the settings in the provided <c><see cref="T:Android.Hardware.Camera2.CaptureRequest" /></c>, at the maximum
 rate possible.</para>
          <para tool="javadoc-to-mdoc">Repeating requests are a simple way for an application to maintain a
 preview or other continuous stream of frames, without having to
 continually submit identical requests through <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Repeat requests have lower priority than those submitted
 through <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> or <c><see cref="!:Android.Hardware.Camera2.CameraCaptureSession.captureBurst(java.util.List&lt;android.hardware.camera2.CaptureRequest&gt;,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)" /></c>, so if
 <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> is called when a repeating request is active, the
 capture request will be processed before any further repeating
 requests are processed.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">To stop the repeating capture, call <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" /></c>. Calling
 <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" /></c> will also clear the request.</para>
          <para tool="javadoc-to-mdoc">Calling this method will replace any earlier repeating request or
 burst set up by this method or <c><see cref="!:Android.Hardware.Camera2.CameraCaptureSession.setRepeatingBurst(java.util.List&lt;android.hardware.camera2.CaptureRequest&gt;,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)" /></c>, although any
 in-progress burst will be completed before the new repeat request will be
 used.</para>
          <para tool="javadoc-to-mdoc">This method does not support reprocess capture requests because each reprocess
 <c><see cref="T:Android.Hardware.Camera2.CaptureRequest" /></c> must be created from the <c><see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /></c> that matches
 the input image to be reprocessed. This is either the <c><see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /></c> of capture
 that is sent for reprocessing, or one of the <c><see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /></c>
 of a set of captures, when data from the whole set is combined by the application into a
 single reprocess input image. The request must be capturing images from the camera. If a
 reprocess capture request is submitted, this method will throw IllegalArgumentException.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession.CaptureCallback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">If the request references no Surfaces or references Surfaces
                                  that are not currently configured as outputs; or the request
                                  is a reprocess capture request; or the capture targets a
                                  Surface in the middle of being <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Prepare(Android.Views.Surface)" /></c>; or
                                  the handler is null, the listener is not null, and the
                                  calling thread has no looper; or no requests were passed in.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.StopRepeating" />
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" />
      </Docs>
    </Member>
    <Member MemberName="StopRepeating">
      <MemberSignature Language="C#" Value="public abstract void StopRepeating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopRepeating() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopRepeating", "()V", "GetStopRepeatingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Cancel any ongoing repeating capture set by either
 <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> or
 <c><see cref="!:Android.Hardware.Camera2.CameraCaptureSession.setRepeatingBurst(java.util.List&lt;android.hardware.camera2.CaptureRequest&gt;,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)" /></c>. Has no effect on requests submitted through
 <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> or <c><see cref="!:Android.Hardware.Camera2.CameraCaptureSession.captureBurst(java.util.List&lt;android.hardware.camera2.CaptureRequest&gt;,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Any currently in-flight captures will still complete, as will any burst that is
 mid-capture. To ensure that the device has finished processing all of its capture requests
 and is in ready state, wait for the <c><see cref="!:NoType:android/hardware/camera2/CameraCaptureSession$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onReady(android.hardware.camera2.CameraCaptureSession)" /></c> callback after
 calling this method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html#stopRepeating()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if this session is no longer active, either because the session
                               was explicitly closed, a new session has been created
                               or the camera device has been closed.</exception>
        <altmember cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest, .CaptureCallback, .CaptureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
