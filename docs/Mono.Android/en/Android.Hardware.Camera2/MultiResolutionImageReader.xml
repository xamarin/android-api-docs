<Type Name="MultiResolutionImageReader" FullName="Android.Hardware.Camera2.MultiResolutionImageReader">
  <TypeSignature Language="C#" Value="public class MultiResolutionImageReader : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IAutoCloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MultiResolutionImageReader extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IAutoCloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Hardware.Camera2.MultiResolutionImageReader" />
  <TypeSignature Language="F#" Value="type MultiResolutionImageReader = class&#xA;    inherit Object&#xA;    interface IAutoCloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IAutoCloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/hardware/camera2/MultiResolutionImageReader", ApiSince=31, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/hardware/camera2/MultiResolutionImageReader", ApiSince=31, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The MultiResolutionImageReader class wraps a group of <c>ImageReader ImageReaders</c> with
            the same format and different sizes, source camera Id, or camera sensor modes.</summary>
    <remarks>
      <para>The MultiResolutionImageReader class wraps a group of <c>ImageReader ImageReaders</c> with
            the same format and different sizes, source camera Id, or camera sensor modes.</para>
      <para>The main use case of this class is for a
            <c>CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA logical
            multi-camera</c> or an ultra high resolution sensor camera to output variable-size images. For a
            logical multi-camera which implements optical zoom, different physical cameras may have different
            maximum resolutions. As a result, when the camera device switches between physical cameras
            depending on zoom ratio, the maximum resolution for a particular format may change. For an
            ultra high resolution sensor camera, the camera device may deem it better or worse to run in
            maximum resolution mode / default mode depending on lighting conditions. So the application may
            choose to let the camera device decide on its behalf.</para>
      <para>MultiResolutionImageReader should be used for a camera device only if the camera device
            supports multi-resolution output stream by advertising the specified output format in <c>CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP</c>.</para>
      <para>To acquire images from the MultiResolutionImageReader, the application must use the
            <c>ImageReader</c> object passed by
            <c>ImageReader.OnImageAvailableListener#onImageAvailable</c> callback to call
            <c>ImageReader#acquireNextImage</c> or <c>ImageReader#acquireLatestImage</c>. The application
            must not use the <c>ImageReader</c> passed by an <c>ImageReader.OnImageAvailableListener#onImageAvailable</c> callback to acquire future images
            because future images may originate from a different <c>ImageReader</c> contained within the
            <c>MultiResolutionImageReader</c>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MultiResolutionImageReader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Hardware.Camera2.MultiResolutionImageReader : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Hardware.Camera2.MultiResolutionImageReader" Usage="new Android.Hardware.Camera2.MultiResolutionImageReader (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">To be added.</param>
        <param name="transfer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MultiResolutionImageReader (System.Collections.Generic.ICollection&lt;Android.Hardware.Camera2.Params.MultiResolutionStreamInfo&gt; streams, int format, int maxImages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.ICollection`1&lt;class Android.Hardware.Camera2.Params.MultiResolutionStreamInfo&gt; streams, int32 format, int32 maxImages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.#ctor(System.Collections.Generic.ICollection{Android.Hardware.Camera2.Params.MultiResolutionStreamInfo},System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Hardware.Camera2.MultiResolutionImageReader : System.Collections.Generic.ICollection&lt;Android.Hardware.Camera2.Params.MultiResolutionStreamInfo&gt; * int * int -&gt; Android.Hardware.Camera2.MultiResolutionImageReader" Usage="new Android.Hardware.Camera2.MultiResolutionImageReader (streams, format, maxImages)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/util/Collection;II)V", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/util/Collection;II)V", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streams" Type="System.Collections.Generic.ICollection&lt;Android.Hardware.Camera2.Params.MultiResolutionStreamInfo&gt;" />
        <Parameter Name="format" Type="System.Int32">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.IntDef(Fields=new System.String[] { "Unknown" }, Type="Android.Graphics.ImageFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.IntDef(Fields=new System.String[] { "Unknown" }, Type="Android.Graphics.ImageFormat")&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.IntDef(Fields=new System.String[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" }, Type="")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.IntDef(Fields=new System.String[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" }, Type="")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxImages" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streams">The group of multi-resolution stream info, which is used to create
                       a multi-resolution reader containing a number of ImageReader objects. Each
                       ImageReader object represents a multi-resolution stream in the group.</param>
        <param name="format">The format of the Image that this multi-resolution reader will produce.
                       This must be one of the <c>android.graphics.ImageFormat</c> or
                       <c>android.graphics.PixelFormat</c> constants. Note that not all formats are
                       supported, like ImageFormat.NV21. The supported multi-resolution
                       reader format can be queried by <c>android.hardware.camera2.params.MultiResolutionStreamConfigurationMap#getOutputFormats</c>.</param>
        <param name="maxImages">The maximum number of images the user will want to
                       access simultaneously. This should be as small as possible to
                       limit memory use. Once maxImages images are obtained by the
                       user from any given internal ImageReader, one of them has to be released before
                       a new Image will become available for access through the ImageReader's
                       <c>ImageReader#acquireLatestImage()</c> or
                       <c>ImageReader#acquireNextImage()</c>. Must be greater than 0.</param>
        <summary>Create a new multi-resolution reader based on a group of camera stream properties returned
            by a camera device.</summary>
        <remarks>
          <para>Create a new multi-resolution reader based on a group of camera stream properties returned
            by a camera device.</para>
          <para>The valid size and formats depend on the camera characteristics.
            <c>MultiResolutionImageReader</c> for an image format is supported by the camera device if
            the format is in the supported multi-resolution output stream formats returned by
            <c>android.hardware.camera2.params.MultiResolutionStreamConfigurationMap#getOutputFormats</c>.
            If the image format is supported, the <c>MultiResolutionImageReader</c> object can be
            created with the <c>streams</c> objects returned by
            <c>android.hardware.camera2.params.MultiResolutionStreamConfigurationMap#getOutputInfo</c>.</para>
          <para>The <c>maxImages</c> parameter determines the maximum number of
            <c>Image</c> objects that can be acquired from each of the <c>ImageReader</c>
            within the <c>MultiResolutionImageReader</c>. However, requesting more buffers will
            use up more memory, so it is important to use only the minimum number necessary. The
            application is strongly recommended to acquire no more than <c>maxImages</c> images
            from all of the internal ImageReader objects combined. By keeping track of the number of
            acquired images for the MultiResolutionImageReader, the application doesn't need to do the
            bookkeeping for each internal ImageReader returned from <c>ImageReader.OnImageAvailableListener#onImageAvailable onImageAvailable</c> callback.</para>
          <para>Unlike the normal ImageReader, the MultiResolutionImageReader has a more complex
            configuration sequence. Instead of passing the same surface to OutputConfiguration and
            CaptureRequest, the
            <c>android.hardware.camera2.params.OutputConfiguration#createInstancesForMultiResolutionOutput</c>
            call needs to be used to create the OutputConfigurations for session creation, and then
            <c>#getSurface</c> is used to get <c>CaptureRequest.Builder#addTarget the target for
            CaptureRequest</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader#MultiResolutionImageReader(java.util.Collection%3Candroid.hardware.camera2.params.MultiResolutionStreamInfo%3E,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader.MultiResolutionImageReader(java.util.Collection&lt;android.hardware.camera2.params.MultiResolutionStreamInfo&gt;, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="multiResolutionImageReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAutoCloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.Flush" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="multiResolutionImageReader.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("flush", "()V", "GetFlushHandler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("flush", "()V", "GetFlushHandler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush pending images from all internal ImageReaders</summary>
        <remarks>
          <para>Flush pending images from all internal ImageReaders</para>
          <para>Acquire and close pending images from all internal ImageReaders. This has the same
            effect as calling acquireLatestImage() on all internal ImageReaders, and closing all
            latest images.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader#flush()" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader.flush()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStreamInfoForImageReader">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Camera2.Params.MultiResolutionStreamInfo GetStreamInfoForImageReader (Android.Media.ImageReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Camera2.Params.MultiResolutionStreamInfo GetStreamInfoForImageReader(class Android.Media.ImageReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.GetStreamInfoForImageReader(Android.Media.ImageReader)" />
      <MemberSignature Language="F#" Value="abstract member GetStreamInfoForImageReader : Android.Media.ImageReader -&gt; Android.Hardware.Camera2.Params.MultiResolutionStreamInfo&#xA;override this.GetStreamInfoForImageReader : Android.Media.ImageReader -&gt; Android.Hardware.Camera2.Params.MultiResolutionStreamInfo" Usage="multiResolutionImageReader.GetStreamInfoForImageReader reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getStreamInfoForImageReader", "(Landroid/media/ImageReader;)Landroid/hardware/camera2/params/MultiResolutionStreamInfo;", "GetGetStreamInfoForImageReader_Landroid_media_ImageReader_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getStreamInfoForImageReader", "(Landroid/media/ImageReader;)Landroid/hardware/camera2/params/MultiResolutionStreamInfo;", "GetGetStreamInfoForImageReader_Landroid_media_ImageReader_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.Params.MultiResolutionStreamInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Android.Media.ImageReader" />
      </Parameters>
      <Docs>
        <param name="reader">An internal ImageReader within <c>MultiResolutionImageReader</c>.</param>
        <summary>Get the MultiResolutionStreamInfo describing the ImageReader an image originates from</summary>
        <returns>The stream info describing the internal <c>ImageReader</c>.</returns>
        <remarks>
          <para>Get the MultiResolutionStreamInfo describing the ImageReader an image originates from</para>
          <para>An image from a <c>MultiResolutionImageReader</c> is produced from one of the underlying
            <c>ImageReader</c>s. This function returns the <c>MultiResolutionStreamInfo</c> to describe
            the property for that <c>ImageReader</c>, such as width, height, and physical camera Id.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader#getStreamInfoForImageReader(android.media.ImageReader)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader.getStreamInfoForImageReader(android.media.ImageReader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.MultiResolutionImageReader.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Hardware.Camera2.MultiResolutionImageReader.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnImageAvailableListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnImageAvailableListener (Android.Media.ImageReader.IOnImageAvailableListener? listener, Java.Util.Concurrent.IExecutor? executor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnImageAvailableListener(class Android.Media.ImageReader/IOnImageAvailableListener listener, class Java.Util.Concurrent.IExecutor executor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Camera2.MultiResolutionImageReader.SetOnImageAvailableListener(Android.Media.ImageReader.IOnImageAvailableListener,Java.Util.Concurrent.IExecutor)" />
      <MemberSignature Language="F#" Value="abstract member SetOnImageAvailableListener : Android.Media.ImageReader.IOnImageAvailableListener * Java.Util.Concurrent.IExecutor -&gt; unit&#xA;override this.SetOnImageAvailableListener : Android.Media.ImageReader.IOnImageAvailableListener * Java.Util.Concurrent.IExecutor -&gt; unit" Usage="multiResolutionImageReader.SetOnImageAvailableListener (listener, executor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnImageAvailableListener", "(Landroid/media/ImageReader$OnImageAvailableListener;Ljava/util/concurrent/Executor;)V", "GetSetOnImageAvailableListener_Landroid_media_ImageReader_OnImageAvailableListener_Ljava_util_concurrent_Executor_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnImageAvailableListener", "(Landroid/media/ImageReader$OnImageAvailableListener;Ljava/util/concurrent/Executor;)V", "GetSetOnImageAvailableListener_Landroid_media_ImageReader_OnImageAvailableListener_Ljava_util_concurrent_Executor_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.ImageReader+IOnImageAvailableListener" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be run.</param>
        <param name="executor">The executor which will be used when invoking the callback.</param>
        <summary>Set onImageAvailableListener callback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader#setOnImageAvailableListener(android.media.OnImageAvailableListener,%20java.util.concurrent.Executor)" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader.setOnImageAvailableListener(android.media.OnImageAvailableListener, java.util.concurrent.Executor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Surface Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface Surface" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.MultiResolutionImageReader.Surface" />
      <MemberSignature Language="F#" Value="member this.Surface : Android.Views.Surface" Usage="Android.Hardware.Camera2.MultiResolutionImageReader.Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the surface that is used as a target for <c>CaptureRequest</c></summary>
        <value>a <c>Surface</c> to use as the target for a capture request.</value>
        <remarks>
          <para>Get the surface that is used as a target for <c>CaptureRequest</c></para>
          <para>The application must use the surface returned by this function as a target for
            <c>CaptureRequest</c>. The camera device makes the decision on which internal
            <c>ImageReader</c> will receive the output image.</para>
          <para>Please note that holding on to the Surface objects returned by this method is not enough
            to keep their parent MultiResolutionImageReaders from being reclaimed. In that sense, a
            Surface acts like a <c>java.lang.ref.WeakReference weak reference</c> to the
            MultiResolutionImageReader that provides it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/camera2/MultiResolutionImageReader#getSurface()" title="Reference documentation">Java documentation for <code>android.hardware.camera2.MultiResolutionImageReader.getSurface()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.MultiResolutionImageReader.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Hardware.Camera2.MultiResolutionImageReader.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Camera2.MultiResolutionImageReader.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Hardware.Camera2.MultiResolutionImageReader.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
