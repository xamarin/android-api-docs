<Type Name="CameraDevice" FullName="Android.Hardware.Camera2.CameraDevice">
  <TypeSignature Language="C#" Value="public abstract class CameraDevice : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CameraDevice extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/CameraDevice", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">The CameraDevice class is a representation of a single camera connected to an
 Android device, allowing for fine-grain control of image capture and
 post-processing at high frame rates.</para>
      <para tool="javadoc-to-mdoc">Your application must declare the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#CAMERA" /></c> permission in its manifest
 in order to access camera devices.</para>
      <para tool="javadoc-to-mdoc">A given camera device may provide support at one of two levels: limited or
 full. If a device only supports the limited level, then Camera2 exposes a
 feature set that is roughly equivalent to the older
 <c><see cref="T:Android.Hardware.Camera" /></c> API, although with a cleaner and more
 efficient interface.  Devices that implement the full level of support
 provide substantially improved capabilities over the older camera
 API. Applications that target the limited level devices will run unchanged on
 the full-level devices; if your application requires a full-level device for
 proper operation, declare the "android.hardware.camera2.full" feature in your
 manifest.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:Android.Hardware.Camera2.CameraManager.OpenCamera(System.String,.StateCallback,.StateCallback)" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#CAMERA" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/camera2/CameraDevice.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CameraDevice (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close the connection to this camera device as quickly as possible.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Close the connection to this camera device as quickly as possible.

 </para>
          <para tool="javadoc-to-mdoc">Immediately after this call, all calls to the camera device or active session interface
 will throw a <c><see cref="T:Java.Lang.IllegalStateException" /></c>, except for calls to close(). Once the device has
 fully shut down, the <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onClosed(android.hardware.camera2.CameraDevice)" /></c> callback will be called, and the camera
 is free to be re-opened.</para>
          <para tool="javadoc-to-mdoc">Immediately after this call, besides the final <c><see cref="!:NoType:android/hardware/camera2/CameraDevice$StateCallback;Href=../../../../reference/android/hardware/camera2/CameraDevice.StateCallback.html#onClosed(android.hardware.camera2.CameraDevice)" /></c> calls, no
 further callbacks from the device or the active session will occur, and any remaining
 submitted capture requests will be discarded, as if
 <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.AbortCaptures" /></c> had been called, except that no success or failure
 callbacks will be invoked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCaptureRequest">
      <MemberSignature Language="C#" Value="public abstract Android.Hardware.Camera2.CaptureRequest.Builder CreateCaptureRequest (Android.Hardware.Camera2.CameraTemplate templateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Camera2.CaptureRequest/Builder CreateCaptureRequest(valuetype Android.Hardware.Camera2.CameraTemplate templateType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createCaptureRequest", "(I)Landroid/hardware/camera2/CaptureRequest$Builder;", "GetCreateCaptureRequest_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.CaptureRequest+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateType" Type="Android.Hardware.Camera2.CameraTemplate">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="templateType">An enumeration selecting the use case for this
 request; one of the CameraDevice.TEMPLATE_ values. Not all template
 types are supported on every device. See the documentation for each
 template type for details.</param>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Create a <c><see cref="!:NoType:android/hardware/camera2/CaptureRequest$Builder;Href=../../../../reference/android/hardware/camera2/CaptureRequest.Builder.html" /></c> for new capture requests,
 initialized with template for a target use case. The settings are chosen
 to be the best options for the specific camera device, so it is not
 recommended to reuse the same request for a different camera device;
 create a builder specific for that device and template and override the
 settings as desired, instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureRequest(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the templateType is not supported by
 this device.</exception>
        <exception cref="T:Android.Hardware.Camera2.CameraAccessException">if the camera device is no longer connected or has
                               encountered a fatal error</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the camera device has been closed</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCaptureSession">
      <MemberSignature Language="C#" Value="public abstract void CreateCaptureSession (System.Collections.Generic.IList&lt;Android.Views.Surface&gt; outputs, Android.Hardware.Camera2.CameraCaptureSession.StateCallback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateCaptureSession(class System.Collections.Generic.IList`1&lt;class Android.Views.Surface&gt; outputs, class Android.Hardware.Camera2.CameraCaptureSession/StateCallback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createCaptureSession", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V", "GetCreateCaptureSession_Ljava_util_List_Landroid_hardware_camera2_CameraCaptureSession_StateCallback_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputs" Type="System.Collections.Generic.IList&lt;Android.Views.Surface&gt;" />
        <Parameter Name="callback" Type="Android.Hardware.Camera2.CameraCaptureSession+StateCallback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="outputs">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()Ljava/lang/String;", "GetGetIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the ID of this camera device.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the ID of this camera device.

 </para>
          <para tool="javadoc-to-mdoc">This matches the ID given to <c><see cref="M:Android.Hardware.Camera2.CameraManager.OpenCamera(System.String,.StateCallback,.StateCallback)" /></c> to instantiate this
 this camera device.</para>
          <para tool="javadoc-to-mdoc">This ID can be used to query the camera device's <c><see cref="T:Android.Hardware.Camera2.CameraCharacteristics" /></c> with <c><see cref="M:Android.Hardware.Camera2.CameraManager.GetCameraCharacteristics(System.String)" /></c>.</para>
          <para tool="javadoc-to-mdoc">This method can be called even if the device has been closed or has encountered
 a serious error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#getId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Camera2.CameraManager.GetCameraCharacteristics(System.String)" />
        <altmember cref="M:Android.Hardware.Camera2.CameraManager.GetCameraIdList" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
