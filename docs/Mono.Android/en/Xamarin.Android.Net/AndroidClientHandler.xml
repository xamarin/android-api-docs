<Type Name="AndroidClientHandler" FullName="Xamarin.Android.Net.AndroidClientHandler">
  <TypeSignature Language="C#" Value="public class AndroidClientHandler : System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AndroidClientHandler extends System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="DocId" Value="T:Xamarin.Android.Net.AndroidClientHandler" />
  <TypeSignature Language="F#" Value="type AndroidClientHandler = class&#xA;    inherit HttpClientHandler" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpClientHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Obsolete("AndroidClientHandler has been deprecated. Use AndroidMessageHandler instead.")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("AndroidClientHandler has been deprecated. Use AndroidMessageHandler instead.")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             A custom implementation of <see cref="T:System.Net.Http.HttpClientHandler" /> which internally uses <see cref="T:Java.Net.HttpURLConnection" />
             (or its HTTPS incarnation) to send HTTP requests.
             </summary>
    <remarks>
      <para>Instance of this class is used to configure <see cref="T:System.Net.Http.HttpClient" /> instance
             in the following way:
             
             <example>
             var handler = new AndroidClientHandler {
                UseCookies = true,
                AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip,
             };
            
             var httpClient = new HttpClient (handler);
             var response = httpClient.GetAsync ("http://example.com")?.Result as AndroidHttpResponseMessage;
             </example></para>
      <para>
             The class supports pre-authentication of requests albeit in a slightly "manual" way. Namely, whenever a request to a server requiring authentication
             is made and no authentication credentials are provided in the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" /> property (which is usually the case on the first
             request), the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.RequestNeedsAuthorization" /> property will return <c>true</c> and the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" /> property will
             contain all the authentication information gathered from the server. The application must then fill in the blanks (i.e. the credentials) and re-send
             the request configured to perform pre-authentication. The reason for this manual process is that the underlying Java HTTP client API supports only a 
             single, VM-wide, authentication handler which cannot be configured to handle credentials for several requests. AndroidClientHandler, therefore, implements
             the authentication in managed .NET code. Message handler supports both Basic and Digest authentication. If an authentication scheme that's not supported
             by AndroidClientHandler is requested by the server, the application can provide its own authentication module (<see cref="T:Xamarin.Android.Net.AuthenticationData" />, 
             <see cref="P:Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" />) to handle the protocol authorization.</para>
      <para>AndroidClientHandler also supports requests to servers with "invalid" (e.g. self-signed) SSL certificates. Since this process is a bit convoluted using
             the Java APIs, AndroidClientHandler defines a way to handle the situation. It can store the necessary certificates (either CA or server certificates)
             in the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.TrustedCerts" /> collection. If, however, the application requires finer control over the SSL configuration (e.g. it implements its own
             TrustManager) then it should derive a custom class from <see cref="T:Xamarin.Android.Net.AndroidMessageHandler" /> instead of using AndroidClientHandler.
             Note that the instance of AndroidClientHandler configured to accept an "invalid" certificate from the particular server will most likely fail to validate
             certificates from other servers (even if they use a certificate with a fully validated trust chain) unless you store the CA certificates from your Android
             system in <see cref="P:Xamarin.Android.Net.AndroidClientHandler.TrustedCerts" /> along with the self-signed certificate(s).</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AndroidClientHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSelf">
      <MemberSignature Language="C#" Value="protected void AssertSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AssertSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.AssertSelf" />
      <MemberSignature Language="F#" Value="member this.AssertSelf : unit -&gt; unit" Usage="androidClientHandler.AssertSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureCustomSSLSocketFactory">
      <MemberSignature Language="C#" Value="protected virtual Javax.Net.Ssl.SSLSocketFactory? ConfigureCustomSSLSocketFactory (Javax.Net.Ssl.HttpsURLConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Javax.Net.Ssl.SSLSocketFactory ConfigureCustomSSLSocketFactory(class Javax.Net.Ssl.HttpsURLConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureCustomSSLSocketFactory(Javax.Net.Ssl.HttpsURLConnection)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureCustomSSLSocketFactory : Javax.Net.Ssl.HttpsURLConnection -&gt; Javax.Net.Ssl.SSLSocketFactory&#xA;override this.ConfigureCustomSSLSocketFactory : Javax.Net.Ssl.HttpsURLConnection -&gt; Javax.Net.Ssl.SSLSocketFactory" Usage="androidClientHandler.ConfigureCustomSSLSocketFactory connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.SSLSocketFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Javax.Net.Ssl.HttpsURLConnection" />
      </Parameters>
      <Docs>
        <param name="connection">HTTPS connection to return socket factory for</param>
        <summary>
            Configure and return a custom <see cref="t:SSLSocketFactory" /> for the passed HTTPS <paramref name="connection" />. If the class overriding the method returns anything but the default
            <c>null</c>, the SSL setup code will not call the <see cref="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureKeyManagerFactory(Java.Security.KeyStore)" /> nor the
            <see cref="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureTrustManagerFactory(Java.Security.KeyStore)" /> methods used to configure a custom trust manager which is
            then used to create a default socket factory.
            Deriving class must perform all the key manager and trust manager configuration to ensure proper
            operation of the returned socket factory.
            </summary>
        <returns>Instance of SSLSocketFactory ready to use with the HTTPS connection.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureKeyManagerFactory">
      <MemberSignature Language="C#" Value="protected virtual Javax.Net.Ssl.KeyManagerFactory? ConfigureKeyManagerFactory (Java.Security.KeyStore? keyStore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Javax.Net.Ssl.KeyManagerFactory ConfigureKeyManagerFactory(class Java.Security.KeyStore keyStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureKeyManagerFactory(Java.Security.KeyStore)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureKeyManagerFactory : Java.Security.KeyStore -&gt; Javax.Net.Ssl.KeyManagerFactory&#xA;override this.ConfigureKeyManagerFactory : Java.Security.KeyStore -&gt; Javax.Net.Ssl.KeyManagerFactory" Usage="androidClientHandler.ConfigureKeyManagerFactory keyStore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.KeyManagerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyStore" Type="Java.Security.KeyStore" />
      </Parameters>
      <Docs>
        <param name="keyStore">Key store.</param>
        <summary>
            Create and configure an instance of <see cref="T:Javax.Net.Ssl.KeyManagerFactory" />. The <paramref name="keyStore" /> parameter is set to the
            return value of the <see cref="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureKeyStore(Java.Security.KeyStore)" /> method, so it might be null if the application overrode the method and provided
            no key store. It will not be <c>null</c> when the default implementation is used. The application can return <c>null</c> here since
            KeyManagerFactory is not required for the custom SSL configuration, but it might be used by the application to implement a more advanced
            mechanism of key management.
            </summary>
        <returns>The key manager factory or <c>null</c>.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureKeyStore">
      <MemberSignature Language="C#" Value="protected virtual Java.Security.KeyStore? ConfigureKeyStore (Java.Security.KeyStore? keyStore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Security.KeyStore ConfigureKeyStore(class Java.Security.KeyStore keyStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureKeyStore(Java.Security.KeyStore)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureKeyStore : Java.Security.KeyStore -&gt; Java.Security.KeyStore&#xA;override this.ConfigureKeyStore : Java.Security.KeyStore -&gt; Java.Security.KeyStore" Usage="androidClientHandler.ConfigureKeyStore keyStore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Security.KeyStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyStore" Type="Java.Security.KeyStore" />
      </Parameters>
      <Docs>
        <param name="keyStore">Key store to configure.</param>
        <summary>
            Configures the key store. The <paramref name="keyStore" /> parameter is set to instance of <see cref="T:Java.Security.KeyStore" />
            created using the <see cref="P:Java.Security.KeyStore.DefaultType" /> type and with populated with certificates provided in the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.TrustedCerts" />
            property. AndroidClientHandler implementation simply returns the instance passed in the <paramref name="keyStore" /> parameter
            </summary>
        <returns>The key store.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureTrustManagerFactory">
      <MemberSignature Language="C#" Value="protected virtual Javax.Net.Ssl.TrustManagerFactory? ConfigureTrustManagerFactory (Java.Security.KeyStore? keyStore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Javax.Net.Ssl.TrustManagerFactory ConfigureTrustManagerFactory(class Java.Security.KeyStore keyStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureTrustManagerFactory(Java.Security.KeyStore)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureTrustManagerFactory : Java.Security.KeyStore -&gt; Javax.Net.Ssl.TrustManagerFactory&#xA;override this.ConfigureTrustManagerFactory : Java.Security.KeyStore -&gt; Javax.Net.Ssl.TrustManagerFactory" Usage="androidClientHandler.ConfigureTrustManagerFactory keyStore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.TrustManagerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyStore" Type="Java.Security.KeyStore" />
      </Parameters>
      <Docs>
        <param name="keyStore">Key store.</param>
        <summary>
            Create and configure an instance of <see cref="T:Javax.Net.Ssl.TrustManagerFactory" />. The <paramref name="keyStore" /> parameter is set to the
            return value of the <see cref="M:Xamarin.Android.Net.AndroidClientHandler.ConfigureKeyStore(Java.Security.KeyStore)" /> method, so it might be null if the application overrode the method and provided
            no key store. It will not be <c>null</c> when the default implementation is used. The application can return <c>null</c> from this 
            method in which case AndroidClientHandler will create its own instance of the trust manager factory provided that the <see cref="!:TrustCerts" />
            list contains at least one valid certificate. If there are no valid certificates and this method returns <c>null</c>, no custom 
            trust manager will be created since that would make all the HTTPS requests fail.
            </summary>
        <returns>The trust manager factory.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ConnectTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ConnectTimeout" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.ConnectTimeout" />
      <MemberSignature Language="F#" Value="member this.ConnectTimeout : TimeSpan with get, set" Usage="Xamarin.Android.Net.AndroidClientHandler.ConnectTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            Specifies the connect timeout
            </para>
          <para>
            The native Java client supports two separate timeouts - one for reading from the connection (<see cref="P:Xamarin.Android.Net.AndroidClientHandler.ReadTimeout" />) and another for establishing the connection. This property sets the value of
            the latter timeout, unless it is set to <see cref="t:System.TimeSpan.Zero" /> in which case the
            native Java client defaults are used.
            </para>
          <para>
            The default value is <c>120</c> seconds.
            </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="androidClientHandler.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJavaProxy">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Java.Net.Proxy?&gt; GetJavaProxy (Uri destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Java.Net.Proxy&gt; GetJavaProxy(class System.Uri destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.GetJavaProxy(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetJavaProxy : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Java.Net.Proxy&gt;&#xA;override this.GetJavaProxy : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Java.Net.Proxy&gt;" Usage="androidClientHandler.GetJavaProxy (destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Net.Proxy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSSLHostnameVerifier">
      <MemberSignature Language="C#" Value="protected virtual Javax.Net.Ssl.IHostnameVerifier? GetSSLHostnameVerifier (Javax.Net.Ssl.HttpsURLConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Javax.Net.Ssl.IHostnameVerifier GetSSLHostnameVerifier(class Javax.Net.Ssl.HttpsURLConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.GetSSLHostnameVerifier(Javax.Net.Ssl.HttpsURLConnection)" />
      <MemberSignature Language="F#" Value="abstract member GetSSLHostnameVerifier : Javax.Net.Ssl.HttpsURLConnection -&gt; Javax.Net.Ssl.IHostnameVerifier&#xA;override this.GetSSLHostnameVerifier : Javax.Net.Ssl.HttpsURLConnection -&gt; Javax.Net.Ssl.IHostnameVerifier" Usage="androidClientHandler.GetSSLHostnameVerifier connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.IHostnameVerifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Javax.Net.Ssl.HttpsURLConnection" />
      </Parameters>
      <Docs>
        <param name="connection">HTTPS connection object.</param>
        <summary>
            Returns a custom host name verifier for a HTTPS connection. By default it returns <c>null</c> and
            thus the connection uses whatever host name verification mechanism the operating system defaults to.
            Override in your class to define custom host name verification behavior. The overriding class should
            not set the <see cref="m:HttpsURLConnection.HostnameVerifier" /> property directly on the passed
            <paramref name="connection" /></summary>
        <returns>Instance of IHostnameVerifier to be used for this HTTPS connection</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticationData">
      <MemberSignature Language="C#" Value="public Xamarin.Android.Net.AuthenticationData? PreAuthenticationData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Android.Net.AuthenticationData PreAuthenticationData" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" />
      <MemberSignature Language="F#" Value="member this.PreAuthenticationData : Xamarin.Android.Net.AuthenticationData with get, set" Usage="Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Android.Net.AuthenticationData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            Gets or sets the pre authentication data for the request. This property must be set by the application
            before the request is made. Generally the value can be taken from <see cref="P:Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" />
            after the initial request, without any authentication data, receives the authorization request from the
            server. The application must then store credentials in instance of <see cref="T:Xamarin.Android.Net.AuthenticationData" /> and
            assign the instance to this propery before retrying the request.
            </para>
          <para>
            The property is never set by AndroidClientHandler.
            </para>
        </summary>
        <value>The pre authentication data.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyAuthenticationRequested">
      <MemberSignature Language="C#" Value="public bool ProxyAuthenticationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProxyAuthenticationRequested" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.ProxyAuthenticationRequested" />
      <MemberSignature Language="F#" Value="member this.ProxyAuthenticationRequested : bool" Usage="Xamarin.Android.Net.AndroidClientHandler.ProxyAuthenticationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Server authentication response indicates that the request to authorize comes from a proxy if this property is <c>true</c>.
            All the instances of <see cref="T:Xamarin.Android.Net.AuthenticationData" /> stored in the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" /> property will
            have their <see cref="P:Xamarin.Android.Net.AuthenticationData.UseProxyAuthentication" /> preset to the same value as this property.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.ReadTimeout" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : TimeSpan with get, set" Usage="Xamarin.Android.Net.AndroidClientHandler.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            Specifies the connection read timeout.
            </para>
          <para>
            Since there's no way for the handler to access <see cref="t:System.Net.Http.HttpClient.Timeout" />
            directly, this property should be set by the calling party to the same desired value. Value of this
            property will be passed to the native Java HTTP client, unless it is set to <see cref="t:System.TimeSpan.Zero" /></para>
          <para>
            The default value is <c>24</c> hours, much higher than the documented value of <see cref="t:System.Net.Http.HttpClient.Timeout" /> and the same as the value of iOS-specific
            NSUrlSessionHandler.
            </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestedAuthentication">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Xamarin.Android.Net.AuthenticationData&gt;? RequestedAuthentication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Xamarin.Android.Net.AuthenticationData&gt; RequestedAuthentication" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" />
      <MemberSignature Language="F#" Value="member this.RequestedAuthentication : System.Collections.Generic.IList&lt;Xamarin.Android.Net.AuthenticationData&gt;" Usage="Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Xamarin.Android.Net.AuthenticationData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If the website requires authentication, this property will contain data about each scheme supported
            by the server after the response. Note that unauthorized request will return a valid response - you
            need to check the status code and and (re)configure AndroidClientHandler instance accordingly by providing
            both the credentials and the authentication scheme by setting the <see cref="P:Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" /> 
            property. If AndroidClientHandler is not able to detect the kind of authentication scheme it will store an
            instance of <see cref="T:Xamarin.Android.Net.AuthenticationData" /> with its <see cref="P:Xamarin.Android.Net.AuthenticationData.Scheme" /> property
            set to <c>AuthenticationScheme.Unsupported</c> and the application will be responsible for providing an
            instance of <see cref="T:Xamarin.Android.Net.IAndroidAuthenticationModule" /> which handles this kind of authorization scheme
            (<see cref="P:Xamarin.Android.Net.AuthenticationData.AuthModule" /></summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestNeedsAuthorization">
      <MemberSignature Language="C#" Value="public bool RequestNeedsAuthorization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequestNeedsAuthorization" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.RequestNeedsAuthorization" />
      <MemberSignature Language="F#" Value="member this.RequestNeedsAuthorization : bool" Usage="Xamarin.Android.Net.AndroidClientHandler.RequestNeedsAuthorization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If <c>true</c> then the server requested authorization and the application must use information
            found in <see cref="P:Xamarin.Android.Net.AndroidClientHandler.RequestedAuthentication" /> to set the value of <see cref="P:Xamarin.Android.Net.AndroidClientHandler.PreAuthenticationData" /></summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="androidClientHandler.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">Request provided by <see cref="T:System.Net.Http.HttpClient" /></param>
        <param name="cancellationToken">Cancellation token.</param>
        <summary>
            Creates, configures and processes an asynchronous request to the indicated resource.
            </summary>
        <returns>Task in which the request is executed</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetupRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task SetupRequest (System.Net.Http.HttpRequestMessage request, Java.Net.HttpURLConnection conn);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task SetupRequest(class System.Net.Http.HttpRequestMessage request, class Java.Net.HttpURLConnection conn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.SetupRequest(System.Net.Http.HttpRequestMessage,Java.Net.HttpURLConnection)" />
      <MemberSignature Language="F#" Value="abstract member SetupRequest : System.Net.Http.HttpRequestMessage * Java.Net.HttpURLConnection -&gt; System.Threading.Tasks.Task&#xA;override this.SetupRequest : System.Net.Http.HttpRequestMessage * Java.Net.HttpURLConnection -&gt; System.Threading.Tasks.Task" Usage="androidClientHandler.SetupRequest (request, conn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="conn" Type="Java.Net.HttpURLConnection" />
      </Parameters>
      <Docs>
        <param name="request">Request data</param>
        <param name="conn">Pre-configured connection instance</param>
        <summary>
            Configure the <see cref="T:Java.Net.HttpURLConnection" /> before the request is sent. This method is meant to be overriden
            by applications which need to perform some extra configuration steps on the connection. It is called with all
            the request headers set, pre-authentication performed (if applicable) but before the request body is set 
            (e.g. for POST requests). The default implementation in AndroidClientHandler does nothing.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrustedCerts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Java.Security.Cert.Certificate&gt;? TrustedCerts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Java.Security.Cert.Certificate&gt; TrustedCerts" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Android.Net.AndroidClientHandler.TrustedCerts" />
      <MemberSignature Language="F#" Value="member this.TrustedCerts : System.Collections.Generic.IList&lt;Java.Security.Cert.Certificate&gt; with get, set" Usage="Xamarin.Android.Net.AndroidClientHandler.TrustedCerts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Security.Cert.Certificate&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            If the request is to the server protected with a self-signed (or otherwise untrusted) SSL certificate, the request will
            fail security chain verification unless the application provides either the CA certificate of the entity which issued the 
            server's certificate or, alternatively, provides the server public key. Whichever the case, the certificate(s) must be stored
            in this property in order for AndroidClientHandler to configure the request to accept the server certificate.</para>
          <para>AndroidClientHandler uses a custom <see cref="T:Java.Security.KeyStore" /> and <see cref="T:Javax.Net.Ssl.TrustManagerFactory" /> to configure the connection. 
            If, however, the application requires finer control over the SSL configuration (e.g. it implements its own TrustManager) then
            it should derive a custom class from <see cref="T:Xamarin.Android.Net.AndroidMessageHandler" /> instead of using AndroidClientHandler.</para>
        </summary>
        <value>The trusted certs.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteRequestContentToOutput">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task WriteRequestContentToOutput (System.Net.Http.HttpRequestMessage request, Java.Net.HttpURLConnection httpConnection, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRequestContentToOutput(class System.Net.Http.HttpRequestMessage request, class Java.Net.HttpURLConnection httpConnection, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Android.Net.AndroidClientHandler.WriteRequestContentToOutput(System.Net.Http.HttpRequestMessage,Java.Net.HttpURLConnection,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteRequestContentToOutput : System.Net.Http.HttpRequestMessage * Java.Net.HttpURLConnection * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteRequestContentToOutput : System.Net.Http.HttpRequestMessage * Java.Net.HttpURLConnection * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="androidClientHandler.WriteRequestContentToOutput (request, httpConnection, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="httpConnection" Type="Java.Net.HttpURLConnection" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="httpConnection">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
