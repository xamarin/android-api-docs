<Type Name="OffHostApduService" FullName="Android.Nfc.CardEmulators.OffHostApduService">
  <TypeSignature Language="C#" Value="public abstract class OffHostApduService : Android.App.Service" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OffHostApduService extends Android.App.Service" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Service</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/nfc/cardemulation/OffHostApduService", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">OffHostApduService is a convenience <c><see cref="T:Android.App.Service" /></c> class that can be
 extended to describe one or more NFC applications that are residing
 off-host, for example on an embedded secure element or a UICC.

 <format type="text/html"><h3>Developer Guide</h3></format>
 For a general introduction into the topic of card emulation,
 please read the <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/nfc/ce.html">
 NFC card emulation developer guide.</a></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>NFC Protocols</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">Off-host applications represented by this class are based on the NFC-Forum ISO-DEP
 protocol (based on ISO/IEC 14443-4) and support processing
 command Application Protocol Data Units (APDUs) as
 defined in the ISO/IEC 7816-4 specification.

 <format type="text/html"><h3>Service selection</h3></format></para>
      <para tool="javadoc-to-mdoc">When a remote NFC device wants to talk to your
 off-host NFC application, it sends a so-called
 "SELECT AID" APDU as defined in the ISO/IEC 7816-4 specification.
 The AID is an application identifier defined in ISO/IEC 7816-4.

 </para>
      <para tool="javadoc-to-mdoc">The registration procedure for AIDs is defined in the
 ISO/IEC 7816-5 specification. If you don't want to register an
 AID, you are free to use AIDs in the proprietary range:
 bits 8-5 of the first byte must each be set to '1'. For example,
 "0xF00102030405" is a proprietary AID. If you do use proprietary
 AIDs, it is recommended to choose an AID of at least 6 bytes,
 to reduce the risk of collisions with other applications that
 might be using proprietary AIDs as well.

 <format type="text/html"><h3>AID groups</h3></format></para>
      <para tool="javadoc-to-mdoc">In some cases, an off-host environment may need to register multiple AIDs
 to implement a certain application, and it needs to be sure
 that it is the default handler for all of these AIDs (as opposed
 to some AIDs in the group going to another service).

 </para>
      <para tool="javadoc-to-mdoc">An AID group is a list of AIDs that should be considered as
 belonging together by the OS. For all AIDs in an AID group, the
 OS will guarantee one of the following:
 <list type="bullet"><item><term>All AIDs in the group are routed to the off-host execution environment
 </term></item><item><term>No AIDs in the group are routed to the off-host execution environment
 </term></item></list>
 In other words, there is no in-between state, where some AIDs
 in the group can be routed to this off-host execution environment,
 and some to another or a host-based <c><see cref="T:Android.Nfc.CardEmulators.HostApduService" /></c>.
 <format type="text/html"><h3>AID groups and categories</h3></format></para>
      <para tool="javadoc-to-mdoc">Each AID group can be associated with a category. This allows
 the Android OS to classify services, and it allows the user to
 set defaults at the category level instead of the AID level.

 </para>
      <para tool="javadoc-to-mdoc">You can use
 <c><see cref="M:Android.Nfc.CardEmulators.CardEmulation.IsDefaultServiceForCategory(Android.Content.ComponentName,System.String)" /></c>
 to determine if your off-host service is the default handler for a category.

 </para>
      <para tool="javadoc-to-mdoc">In this version of the platform, the only known categories
 are <c><see cref="F:Android.Nfc.CardEmulators.CardEmulation.CategoryPayment" /></c> and <c><see cref="F:Android.Nfc.CardEmulators.CardEmulation.CategoryOther" /></c>.
 AID groups without a category, or with a category that is not recognized
 by the current platform version, will automatically be
 grouped into the <c><see cref="F:Android.Nfc.CardEmulators.CardEmulation.CategoryOther" /></c> category.

 <format type="text/html"><h3>Service AID registration</h3></format></para>
      <para tool="javadoc-to-mdoc">To tell the platform which AIDs
 reside off-host and are managed by this service, a <c><see cref="F:Android.Nfc.CardEmulators.OffHostApduService.ServiceMetaData" /></c>
 entry must be included in the declaration of the service. An
 example of a OffHostApduService manifest declaration is shown below:
 <example><code lang="xml"> &lt;service android:name=".MyOffHostApduService" android:exported="true" android:permission="android.permission.BIND_NFC_SERVICE"&gt;
     &lt;intent-filter&gt;
         &lt;action android:name="android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE"/&gt;
     &lt;/intent-filter&gt;
     &lt;meta-data android:name="android.nfc.cardemulation.off_host_apdu_ervice" android:resource="@xml/apduservice"/&gt;
 &lt;/service&gt;</code></example>

 This meta-data tag points to an apduservice.xml file.
 An example of this file with a single AID group declaration is shown below:
 <example><code lang="xml">
 &lt;offhost-apdu-service xmlns:android="http://schemas.android.com/apk/res/android"
           android:description="@string/servicedesc"&gt;
       &lt;aid-group android:description="@string/subscription" android:category="other"&gt;
           &lt;aid-filter android:name="F0010203040506"/&gt;
           &lt;aid-filter android:name="F0394148148100"/&gt;
       &lt;/aid-group&gt;
 &lt;/offhost-apdu-service&gt;
 </code></example></para>
      <para tool="javadoc-to-mdoc">The <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#OffHostApduService" /></c> is required
 to contain a
 <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#OffHostApduService_description" /></c>
 attribute that contains a user-friendly description of the service that may be shown in UI.

 </para>
      <para tool="javadoc-to-mdoc">The <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#OffHostApduService" /></c> must
 contain one or more <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#AidGroup" /></c> tags.
 Each <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#AidGroup" /></c> must contain one or
 more <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#AidFilter" /></c> tags, each of which
 contains a single AID. The AID must be specified in hexadecimal format, and contain
 an even number of characters.

 </para>
      <para tool="javadoc-to-mdoc">This registration will allow the service to be included
 as an option for being the default handler for categories.
 The Android OS will take care of correctly
 routing the AIDs to the off-host execution environment,
 based on which service the user has selected to be the handler for a certain category.

 </para>
      <para tool="javadoc-to-mdoc">The service may define additional actions outside of the
 Android namespace that provide further interaction with
 the off-host execution environment.

 </para>
      <para tool="javadoc-to-mdoc">Use of this class requires the
 <c><see cref="F:Android.Content.PM.PackageManager.FeatureNfcHostCardEmulation" /></c> to be present
 on the device.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OffHostApduService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#OffHostApduService()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OffHostApduService (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceInterface">
      <MemberSignature Language="C#" Value="public const string ServiceInterface;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ServiceInterface" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SERVICE_INTERFACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <c><see cref="T:Android.Content.Intent" /></c> action that must be declared as handled by the service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The <c><see cref="T:Android.Content.Intent" /></c> action that must be declared as handled by the service.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_INTERFACE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceMetaData">
      <MemberSignature Language="C#" Value="public const string ServiceMetaData;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ServiceMetaData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SERVICE_META_DATA")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the meta-data element that contains
 more information about this service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The name of the meta-data element that contains
 more information about this service.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_META_DATA" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
