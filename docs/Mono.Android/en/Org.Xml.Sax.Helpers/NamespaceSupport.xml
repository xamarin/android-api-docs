<Type Name="NamespaceSupport" FullName="Org.Xml.Sax.Helpers.NamespaceSupport">
  <TypeSignature Language="C#" Value="public class NamespaceSupport : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NamespaceSupport extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/helpers/NamespaceSupport", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Encapsulate Namespace logic for use by applications using SAX,
 or internally by SAX drivers.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Encapsulate Namespace logic for use by applications using SAX,
 or internally by SAX drivers.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format></para>
      <para tool="javadoc-to-mdoc">This class encapsulates the logic of Namespace processing: it
 tracks the declarations currently in force for each context and
 automatically processes qualified XML names into their Namespace
 parts; it can also be used in reverse for generating XML qnames
 from Namespaces.</para>
      <para tool="javadoc-to-mdoc">Namespace support objects are reusable, but the reset method
 must be invoked between each session.</para>
      <para tool="javadoc-to-mdoc">Here is a simple session:<example><code lang="java">
 String parts[] = new String[3];
 NamespaceSupport support = new NamespaceSupport();

 support.pushContext();
 support.declarePrefix("", "http://www.w3.org/1999/xhtml");
 support.declarePrefix("dc", "http://www.purl.org/dc#");

 parts = support.processName("p", parts, false);
 System.out.println("Namespace URI: " + parts[0]);
 System.out.println("Local name: " + parts[1]);
 System.out.println("Raw name: " + parts[2]);

 parts = support.processName("dc:title", parts, false);
 System.out.println("Namespace URI: " + parts[0]);
 System.out.println("Local name: " + parts[1]);
 System.out.println("Raw name: " + parts[2]);

 support.popContext();
 </code></example></para>
      <para tool="javadoc-to-mdoc">Note that this class is optimized for the use case where most
 elements do not contain Namespace declarations: if the same
 prefix/URI mapping is repeated for each context (for example), this
 class will be somewhat less efficient.</para>
      <para tool="javadoc-to-mdoc">Although SAX drivers (parsers) may choose to use this class to
 implement namespace handling, they are not required to do so.
 Applications must track namespace information themselves if they
 want to use namespace information.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceSupport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Create a new Namespace support object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new Namespace support object.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#NamespaceSupport()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NamespaceSupport (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaredPrefixes">
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration DeclaredPrefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IEnumeration DeclaredPrefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDeclaredPrefixes", "()Ljava/util/Enumeration;", "GetGetDeclaredPrefixesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an enumeration of all prefixes declared in this context.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return an enumeration of all prefixes declared in this context.

 </para>
          <para tool="javadoc-to-mdoc">The empty (default) prefix will be included in this
 enumeration; note that this behaviour differs from that of
 <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" /></c> and <c><see cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#getDeclaredPrefixes()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeclarePrefix">
      <MemberSignature Language="C#" Value="public virtual bool DeclarePrefix (string prefix, string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeclarePrefix(string prefix, string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("declarePrefix", "(Ljava/lang/String;Ljava/lang/String;)Z", "GetDeclarePrefix_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix to declare, or the empty string to
    indicate the default element namespace.  This may never have
    the value "xml" or "xmlns".</param>
        <param name="uri">The Namespace URI to associate with the prefix.</param>
        <summary>Declare a Namespace prefix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Declare a Namespace prefix.  All prefixes must be declared
 before they are referenced.  For example, a SAX driver (parser)
 would scan an element's attributes
 in two passes:  first for namespace declarations,
 then a second pass using <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.ProcessName(System.String,System.String[],System.String[])" /></c> to
 interpret prefixes against (potentially redefined) prefixes.

 </para>
          <para tool="javadoc-to-mdoc">This method declares a prefix in the current Namespace
 context; the prefix will remain in force until this context
 is popped, unless it is shadowed in a descendant context.</para>
          <para tool="javadoc-to-mdoc">To declare the default element Namespace, use the empty string as
 the prefix.</para>
          <para tool="javadoc-to-mdoc">Note that you must <i>not</i> declare a prefix after
 you've pushed and popped another Namespace context, or
 treated the declarations phase as complete by processing
 a prefixed name.</para>
          <para tool="javadoc-to-mdoc">Note that there is an asymmetry in this library: <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" /></c> will not return the "" prefix,
 even if you have declared a default element namespace.
 To check for a default namespace,
 you have to look it up explicitly using <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" /></c>.
 This asymmetry exists to make it easier to look up prefixes
 for attribute names, where the default prefix is not allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#declarePrefix(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.ProcessName(System.String, System.String[], System.String[])" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetPrefix">
      <MemberSignature Language="C#" Value="public virtual string GetPrefix (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPrefix(string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPrefix", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetPrefix_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">the namespace URI</param>
        <summary>Return one of the prefixes mapped to a Namespace URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return one of the prefixes mapped to a Namespace URI.

 </para>
          <para tool="javadoc-to-mdoc">If more than one prefix is currently mapped to the same
 URI, this method will make an arbitrary selection; if you
 want all of the prefixes, use the <c><see cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" /></c>
 method instead.</para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> this will never return the empty (default) prefix;
 to check for a default prefix, use the <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" /></c>
 method with an argument of "".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#getPrefix(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefixes(System.String)" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetPrefixes">
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration GetPrefixes (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IEnumeration GetPrefixes(string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPrefixes", "(Ljava/lang/String;)Ljava/util/Enumeration;", "GetGetPrefixes_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The Namespace URI.</param>
        <summary>Return an enumeration of all prefixes for a given URI whose
 declarations are active in the current context.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return an enumeration of all prefixes for a given URI whose
 declarations are active in the current context.
 This includes declarations from parent contexts that have
 not been overridden.

 </para>
          <para tool="javadoc-to-mdoc">This method returns prefixes mapped to a specific Namespace
 URI.  The xml: prefix will be included.  If you want only one
 prefix that's mapped to the Namespace URI, and you don't care
 which one you get, use the <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" /></c>
  method instead.</para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> the empty (default) prefix is <i>never</i> included
 in this enumeration; to check for the presence of a default
 Namespace, use the <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" /></c> method with an
 argument of "".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#getPrefixes(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetURI">
      <MemberSignature Language="C#" Value="public virtual string GetURI (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetURI(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getURI", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetURI_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix to look up.</param>
        <summary>Look up a prefix and get the currently-mapped Namespace URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Look up a prefix and get the currently-mapped Namespace URI.

 </para>
          <para tool="javadoc-to-mdoc">This method looks up the prefix in the current context.
 Use the empty string ("") for the default Namespace.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclUris">
      <MemberSignature Language="C#" Value="public virtual bool NamespaceDeclUris { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NamespaceDeclUris" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isNamespaceDeclUris", "()Z", "GetIsNamespaceDeclUrisHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNamespaceDeclUris", "(Z)V", "GetSetNamespaceDeclUris_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if namespace declaration attributes are placed into
 a namespace.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#isNamespaceDeclUris()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if namespace declaration attributes are placed into
 a namespace.  This behavior is not the default.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#setNamespaceDeclUris(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls whether namespace declaration attributes are placed
 into the <c><see cref="F:Org.Xml.Sax.Helpers.NamespaceSupport.Nsdecl" /></c> namespace
 by <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.ProcessName(System.String,System.String[],System.String[])" /></c>.  This may only be
 changed before any contexts have been pushed.</para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Nsdecl">
      <MemberSignature Language="C#" Value="public const string Nsdecl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Nsdecl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NSDECL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The namespace declaration URI as a constant.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The namespace declaration URI as a constant.
 The value is <c>http://www.w3.org/xmlns/2000/</c>, as defined
 in a backwards-incompatible erratum to the "Namespaces in XML"
 recommendation.  Because that erratum postdated SAX2, SAX2 defaults
 to the original recommendation, and does not normally use this URI.


 </para>
          <para tool="javadoc-to-mdoc">This is the Namespace URI that is optionally applied to
 <i>xmlns</i> and <i>xmlns:*</i> attributes, which are used to
 declare namespaces.  </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#NSDECL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      </Docs>
    </Member>
    <Member MemberName="PopContext">
      <MemberSignature Language="C#" Value="public virtual void PopContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopContext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("popContext", "()V", "GetPopContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Revert to the previous Namespace context.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Revert to the previous Namespace context.

 </para>
          <para tool="javadoc-to-mdoc">Normally, you should pop the context at the end of each
 XML element.  After popping the context, all Namespace prefix
 mappings that were previously in force are restored.</para>
          <para tool="javadoc-to-mdoc">You must not attempt to declare additional Namespace
 prefixes after popping a context, unless you push another
 context first.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#popContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.PushContext" />
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IEnumeration Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPrefixes", "()Ljava/util/Enumeration;", "GetGetPrefixesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an enumeration of all prefixes whose declarations are
 active in the current context.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return an enumeration of all prefixes whose declarations are
 active in the current context.
 This includes declarations from parent contexts that have
 not been overridden.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> if there is a default prefix, it will not be
 returned in this enumeration; check for the default prefix
 using the <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" /></c> with an argument of "".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#getPrefixes()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="C#" Value="public virtual string[] ProcessName (string qName, string[] parts, bool isAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] ProcessName(string qName, string[] parts, bool isAttribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("processName", "(Ljava/lang/String;[Ljava/lang/String;Z)[Ljava/lang/String;", "GetProcessName_Ljava_lang_String_arrayLjava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qName" Type="System.String" />
        <Parameter Name="parts" Type="System.String[]" />
        <Parameter Name="isAttribute" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="qName">The XML qualified name to be processed.</param>
        <param name="parts">An array supplied by the caller, capable of
        holding at least three members.</param>
        <param name="isAttribute">A flag indicating whether this is an
        attribute name (true) or an element name (false).</param>
        <summary>Process a raw XML qualified name, after all declarations in the
 current context have been handled by <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.DeclarePrefix(System.String,System.String)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Process a raw XML qualified name, after all declarations in the
 current context have been handled by <c><see cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.DeclarePrefix(System.String,System.String)" /></c>.

 <format type="text/html"><dl><dt>parts[0]</dt><dd>The Namespace URI, or an empty string if none is
  in use.</dd><dt>parts[1]</dt><dd>The local name (without prefix).</dd><dt>parts[2]</dt><dd>The original raw name.</dd></dl></format></para>
          <para tool="javadoc-to-mdoc">This method processes a raw XML qualified name in the
 current context by removing the prefix and looking it up among
 the prefixes currently declared.  The return value will be the
 array supplied by the caller, filled in as follows:</para>
          <para tool="javadoc-to-mdoc">All of the strings in the array will be internalized.  If
 the raw name has a prefix that has not been declared, then
 the return value will be null.</para>
          <para tool="javadoc-to-mdoc">Note that attribute names are processed differently than
 element names: an unprefixed element name will receive the
 default Namespace (if any), while an unprefixed attribute name
 will not.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#processName(java.lang.String, java.lang.String[], boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.DeclarePrefix(System.String, System.String)" />
        <altmember cref="M:Java.Lang.String.Intern" />
      </Docs>
    </Member>
    <Member MemberName="PushContext">
      <MemberSignature Language="C#" Value="public virtual void PushContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushContext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pushContext", "()V", "GetPushContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start a new Namespace context.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Start a new Namespace context.
 The new context will automatically inherit
 the declarations of its parent context, but it will also keep
 track of which declarations were made within this context.

 </para>
          <para tool="javadoc-to-mdoc">Event callback code should start a new context once per element.
 This means being ready to call this in either of two places.
 For elements that don't include namespace declarations, the
 <i>ContentHandler.startElement()</i> callback is the right place.
 For elements with such a declaration, it'd done in the first
 <i>ContentHandler.startPrefixMapping()</i> callback.
 A boolean flag can be used to
 track whether a context has been started yet.  When either of
 those methods is called, it checks the flag to see if a new context
 needs to be started.  If so, it starts the context and sets the
 flag.  After <i>ContentHandler.startElement()</i>
 does that, it always clears the flag.

 </para>
          <para tool="javadoc-to-mdoc">Normally, SAX drivers would push a new context at the beginning
 of each XML element.  Then they perform a first pass over the
 attributes to process all namespace declarations, making
 <i>ContentHandler.startPrefixMapping()</i> callbacks.
 Then a second pass is made, to determine the namespace-qualified
 names for all attributes and for the element name.
 Finally all the information for the
 <i>ContentHandler.startElement()</i> callback is available,
 so it can then be made.

 </para>
          <para tool="javadoc-to-mdoc">The Namespace support object always starts with a base context
 already in force: in this context, only the "xml" prefix is
 declared.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#pushContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IContentHandler" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.PopContext" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset this Namespace support object for reuse.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reset this Namespace support object for reuse.

 </para>
          <para tool="javadoc-to-mdoc">It is necessary to invoke this method before reusing the
 Namespace support object for a new session.  If namespace
 declaration URIs are to be supported, that flag must also
 be set to a non-default value.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public const string Xmlns;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Xmlns" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("XMLNS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The XML Namespace URI as a constant.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The XML Namespace URI as a constant.
 The value is <c>http://www.w3.org/XML/1998/namespace</c>
 as defined in the "Namespaces in XML" * recommendation.

 </para>
          <para tool="javadoc-to-mdoc">This is the Namespace URI that is automatically mapped
 to the "xml" prefix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html#XMLNS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
