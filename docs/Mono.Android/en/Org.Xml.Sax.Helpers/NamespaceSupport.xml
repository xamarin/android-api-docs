<Type Name="NamespaceSupport" FullName="Org.Xml.Sax.Helpers.NamespaceSupport">
  <TypeSignature Language="VB.NET" Value="Public Class NamespaceSupport&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class NamespaceSupport : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class NamespaceSupport : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NamespaceSupport extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Org.Xml.Sax.Helpers.NamespaceSupport" />
  <TypeSignature Language="F#" Value="type NamespaceSupport = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/xml/sax/helpers/NamespaceSupport", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/xml/sax/helpers/NamespaceSupport", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Encapsulate Namespace logic for use by applications using SAX,
            or internally by SAX drivers.</summary>
    <remarks>
      <para>Encapsulate Namespace logic for use by applications using SAX,
            or internally by SAX drivers.
            
            &lt;blockquote&gt;
            &lt;em&gt;This module, both source code and documentation, is in the
            Public Domain, and comes with &lt;strong&gt;NO WARRANTY&lt;/strong&gt;.&lt;/em&gt;
            See <see href="http://www.saxproject.org">http://www.saxproject.org</see>
            for further information.
            &lt;/blockquote&gt;</para>
      <para>This class encapsulates the logic of Namespace processing: it
            tracks the declarations currently in force for each context and
            automatically processes qualified XML names into their Namespace
            parts; it can also be used in reverse for generating XML qnames
            from Namespaces.</para>
      <para>Namespace support objects are reusable, but the reset method
            must be invoked between each session.</para>
      <para>Here is a simple session:</para>
      <code lang="text/java">String parts[] = new String[3];
            NamespaceSupport support = new NamespaceSupport();
            
            support.pushContext();
            support.declarePrefix("", "http://www.w3.org/1999/xhtml");
            support.declarePrefix("dc", "http://www.purl.org/dc#");
            
            parts = support.processName("p", parts, false);
            System.out.println("Namespace URI: " + parts[0]);
            System.out.println("Local name: " + parts[1]);
            System.out.println("Raw name: " + parts[2]);
            
            parts = support.processName("dc:title", parts, false);
            System.out.println("Namespace URI: " + parts[0]);
            System.out.println("Local name: " + parts[1]);
            System.out.println("Raw name: " + parts[2]);
            
            support.popContext();
            </code>
      <para>Note that this class is optimized for the use case where most
            elements do not contain Namespace declarations: if the same
            prefix/URI mapping is repeated for each context (for example), this
            class will be somewhat less efficient.</para>
      <para>Although SAX drivers (parsers) may choose to use this class to
            implement namespace handling, they are not required to do so.
            Applications must track namespace information themselves if they
            want to use namespace information.</para>
      <para>Added in SAX 2.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamespaceSupport();" />
      <MemberSignature Language="C#" Value="public NamespaceSupport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Create a new Namespace support object.</summary>
        <remarks>
          <para>Create a new Namespace support object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#NamespaceSupport()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.NamespaceSupport()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NamespaceSupport(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected NamespaceSupport (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Org.Xml.Sax.Helpers.NamespaceSupport : nativeint * Android.Runtime.JniHandleOwnership -&gt; Org.Xml.Sax.Helpers.NamespaceSupport" Usage="new Org.Xml.Sax.Helpers.NamespaceSupport (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaredPrefixes">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaredPrefixes As IEnumeration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Util::IEnumeration ^ DeclaredPrefixes { Java::Util::IEnumeration ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration? DeclaredPrefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IEnumeration DeclaredPrefixes" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
      <MemberSignature Language="F#" Value="member this.DeclaredPrefixes : Java.Util.IEnumeration" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDeclaredPrefixes", "()Ljava/util/Enumeration;", "GetGetDeclaredPrefixesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDeclaredPrefixes", "()Ljava/util/Enumeration;", "GetGetDeclaredPrefixesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an enumeration of all prefixes declared in this context.</summary>
        <value>An enumeration of all prefixes declared in this
                    context.</value>
        <remarks>
          <para>Return an enumeration of all prefixes declared in this context.</para>
          <para>The empty (default) prefix will be included in this
            enumeration; note that this behaviour differs from that of
            <c>#getPrefix</c> and <c>#getPrefixes</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#getDeclaredPrefixes()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeclarePrefix">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclarePrefix (prefix As String, uri As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeclarePrefix(System::String ^ prefix, System::String ^ uri);" />
      <MemberSignature Language="C#" Value="public virtual bool DeclarePrefix (string? prefix, string? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeclarePrefix(string prefix, string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.DeclarePrefix(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member DeclarePrefix : string * string -&gt; bool&#xA;override this.DeclarePrefix : string * string -&gt; bool" Usage="namespaceSupport.DeclarePrefix (prefix, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("declarePrefix", "(Ljava/lang/String;Ljava/lang/String;)Z", "GetDeclarePrefix_Ljava_lang_String_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("declarePrefix", "(Ljava/lang/String;Ljava/lang/String;)Z", "GetDeclarePrefix_Ljava_lang_String_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix to declare, or the empty string to
               indicate the default element namespace.  This may never have
               the value "xml" or "xmlns".</param>
        <param name="uri">The Namespace URI to associate with the prefix.</param>
        <summary>Declare a Namespace prefix.</summary>
        <returns>true if the prefix was legal, false otherwise</returns>
        <remarks>
          <para>Declare a Namespace prefix.  All prefixes must be declared
            before they are referenced.  For example, a SAX driver (parser)
            would scan an element's attributes
            in two passes:  first for namespace declarations,
            then a second pass using <c>#processName processName()</c> to
            interpret prefixes against (potentially redefined) prefixes.</para>
          <para>This method declares a prefix in the current Namespace
            context; the prefix will remain in force until this context
            is popped, unless it is shadowed in a descendant context.</para>
          <para>To declare the default element Namespace, use the empty string as
            the prefix.</para>
          <para>Note that you must &lt;em&gt;not&lt;/em&gt; declare a prefix after
            you've pushed and popped another Namespace context, or
            treated the declarations phase as complete by processing
            a prefixed name.</para>
          <para>Note that there is an asymmetry in this library: <c>#getPrefix getPrefix</c> will not return the "" prefix,
            even if you have declared a default element namespace.
            To check for a default namespace,
            you have to look it up explicitly using <c>#getURI getURI</c>.
            This asymmetry exists to make it easier to look up prefixes
            for attribute names, where the default prefix is not allowed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#declarePrefix(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.declarePrefix(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.ProcessName(System.String, System.String[], System.String[])" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetPrefix">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrefix (uri As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetPrefix(System::String ^ uri);" />
      <MemberSignature Language="C#" Value="public virtual string? GetPrefix (string? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPrefix(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetPrefix : string -&gt; string&#xA;override this.GetPrefix : string -&gt; string" Usage="namespaceSupport.GetPrefix uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPrefix", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetPrefix_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPrefix", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetPrefix_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">the namespace URI</param>
        <summary>Return one of the prefixes mapped to a Namespace URI.</summary>
        <returns>one of the prefixes currently mapped to the URI supplied,
                    or null if none is mapped or if the URI is assigned to
                    the default namespace</returns>
        <remarks>
          <para>Return one of the prefixes mapped to a Namespace URI.</para>
          <para>If more than one prefix is currently mapped to the same
            URI, this method will make an arbitrary selection; if you
            want all of the prefixes, use the <c>#getPrefixes</c>
            method instead.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; this will never return the empty (default) prefix;
            to check for a default prefix, use the <c>#getURI getURI</c>
            method with an argument of "".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#getPrefix(java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.getPrefix(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefixes(System.String)" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetPrefixes">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrefixes (uri As String) As IEnumeration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IEnumeration ^ GetPrefixes(System::String ^ uri);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration? GetPrefixes (string? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IEnumeration GetPrefixes(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefixes(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetPrefixes : string -&gt; Java.Util.IEnumeration&#xA;override this.GetPrefixes : string -&gt; Java.Util.IEnumeration" Usage="namespaceSupport.GetPrefixes uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPrefixes", "(Ljava/lang/String;)Ljava/util/Enumeration;", "GetGetPrefixes_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPrefixes", "(Ljava/lang/String;)Ljava/util/Enumeration;", "GetGetPrefixes_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The Namespace URI.</param>
        <summary>Return an enumeration of all prefixes for a given URI whose
            declarations are active in the current context.</summary>
        <returns>An enumeration of prefixes (never empty).</returns>
        <remarks>
          <para>Return an enumeration of all prefixes for a given URI whose
            declarations are active in the current context.
            This includes declarations from parent contexts that have
            not been overridden.</para>
          <para>This method returns prefixes mapped to a specific Namespace
            URI.  The xml: prefix will be included.  If you want only one
            prefix that's mapped to the Namespace URI, and you don't care
            which one you get, use the <c>#getPrefix getPrefix</c>
             method instead.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; the empty (default) prefix is &lt;em&gt;never&lt;/em&gt; included
            in this enumeration; to check for the presence of a default
            Namespace, use the <c>#getURI getURI</c> method with an
            argument of "".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#getPrefixes(java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.getPrefixes(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetURI">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetURI (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetURI(System::String ^ prefix);" />
      <MemberSignature Language="C#" Value="public virtual string? GetURI (string? prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetURI(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetURI : string -&gt; string&#xA;override this.GetURI : string -&gt; string" Usage="namespaceSupport.GetURI prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getURI", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetURI_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getURI", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetURI_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix to look up.</param>
        <summary>Look up a prefix and get the currently-mapped Namespace URI.</summary>
        <returns>The associated Namespace URI, or null if the prefix
                    is undeclared in this context.</returns>
        <remarks>
          <para>Look up a prefix and get the currently-mapped Namespace URI.</para>
          <para>This method looks up the prefix in the current context.
            Use the empty string ("") for the default Namespace.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#getURI(java.lang.String)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.getURI(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetPrefix(System.String)" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclUris">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NamespaceDeclUris As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool NamespaceDeclUris { bool get(); void set(bool value); };" />
      <MemberSignature Language="C#" Value="public virtual bool NamespaceDeclUris { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NamespaceDeclUris" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      <MemberSignature Language="F#" Value="member this.NamespaceDeclUris : bool with get, set" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isNamespaceDeclUris", "()Z", "GetIsNamespaceDeclUrisHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isNamespaceDeclUris", "()Z", "GetIsNamespaceDeclUrisHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNamespaceDeclUris", "(Z)V", "GetSetNamespaceDeclUris_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNamespaceDeclUris", "(Z)V", "GetSetNamespaceDeclUris_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="value">the namespace declaration attribute state. A value of true
                         enables this feature, a value of false disables it.</param>
        <summary>Returns true if namespace declaration attributes are placed into
            a namespace. -or- Controls whether namespace declaration attributes are placed
            into the <c>#NSDECL NSDECL</c> namespace
            by <c>#processName processName()</c>.</summary>
        <value>true if namespace declaration attributes are enabled, false
                    otherwise.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns true if namespace declaration attributes are placed into
            a namespace.  This behavior is not the default.</para>
          <para>Added in SAX 2.1alpha.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#isNamespaceDeclUris()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.isNamespaceDeclUris()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Controls whether namespace declaration attributes are placed
            into the <c>#NSDECL NSDECL</c> namespace
            by <c>#processName processName()</c>.  This may only be
            changed before any contexts have been pushed.</para>
          <para>Added in SAX 2.1alpha.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#setNamespaceDeclUris(boolean)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.setNamespaceDeclUris(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">when attempting to set this
    after any context has been pushed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Nsdecl">
      <MemberSignature Language="VB.NET" Value="Public Const Nsdecl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ Nsdecl;" />
      <MemberSignature Language="C#" Value="public const string Nsdecl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Nsdecl" />
      <MemberSignature Language="DocId" Value="F:Org.Xml.Sax.Helpers.NamespaceSupport.Nsdecl" />
      <MemberSignature Language="F#" Value="val mutable Nsdecl : string" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.Nsdecl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("NSDECL")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("NSDECL")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The namespace declaration URI as a constant.</summary>
        <remarks>
          <para>The namespace declaration URI as a constant.
            The value is <c>http://www.w3.org/xmlns/2000/</c>, as defined
            in a backwards-incompatible erratum to the "Namespaces in XML"
            recommendation.  Because that erratum postdated SAX2, SAX2 defaults
            to the original recommendation, and does not normally use this URI.</para>
          <para>This is the Namespace URI that is optionally applied to
            &lt;em&gt;xmlns&lt;/em&gt; and &lt;em&gt;xmlns:*&lt;/em&gt; attributes, which are used to
            declare namespaces.</para>
          <para>Added in SAX 2.1alpha.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#NSDECL" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.NSDECL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      </Docs>
    </Member>
    <Member MemberName="PopContext">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PopContext ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopContext();" />
      <MemberSignature Language="C#" Value="public virtual void PopContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.PopContext" />
      <MemberSignature Language="F#" Value="abstract member PopContext : unit -&gt; unit&#xA;override this.PopContext : unit -&gt; unit" Usage="namespaceSupport.PopContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("popContext", "()V", "GetPopContextHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("popContext", "()V", "GetPopContextHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Revert to the previous Namespace context.</summary>
        <remarks>
          <para>Revert to the previous Namespace context.</para>
          <para>Normally, you should pop the context at the end of each
            XML element.  After popping the context, all Namespace prefix
            mappings that were previously in force are restored.</para>
          <para>You must not attempt to declare additional Namespace
            prefixes after popping a context, unless you push another
            context first.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#popContext()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.popContext()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.PushContext" />
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Prefixes As IEnumeration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Util::IEnumeration ^ Prefixes { Java::Util::IEnumeration ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration? Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IEnumeration Prefixes" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
      <MemberSignature Language="F#" Value="member this.Prefixes : Java.Util.IEnumeration" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPrefixes", "()Ljava/util/Enumeration;", "GetGetPrefixesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPrefixes", "()Ljava/util/Enumeration;", "GetGetPrefixesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an enumeration of all prefixes whose declarations are
            active in the current context.</summary>
        <value>An enumeration of prefixes (never empty).</value>
        <remarks>
          <para>Return an enumeration of all prefixes whose declarations are
            active in the current context.
            This includes declarations from parent contexts that have
            not been overridden.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; if there is a default prefix, it will not be
            returned in this enumeration; check for the default prefix
            using the <c>#getURI getURI</c> with an argument of "".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#getPrefixes()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.getPrefixes()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.DeclaredPrefixes" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.GetURI(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProcessName (qName As String, parts As String(), isAttribute As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ ProcessName(System::String ^ qName, cli::array &lt;System::String ^&gt; ^ parts, bool isAttribute);" />
      <MemberSignature Language="C#" Value="public virtual string[]? ProcessName (string? qName, string[]? parts, bool isAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] ProcessName(string qName, string[] parts, bool isAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.ProcessName(System.String,System.String[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ProcessName : string * string[] * bool -&gt; string[]&#xA;override this.ProcessName : string * string[] * bool -&gt; string[]" Usage="namespaceSupport.ProcessName (qName, parts, isAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("processName", "(Ljava/lang/String;[Ljava/lang/String;Z)[Ljava/lang/String;", "GetProcessName_Ljava_lang_String_arrayLjava_lang_String_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("processName", "(Ljava/lang/String;[Ljava/lang/String;Z)[Ljava/lang/String;", "GetProcessName_Ljava_lang_String_arrayLjava_lang_String_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qName" Type="System.String" />
        <Parameter Name="parts" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="isAttribute" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="qName">The XML qualified name to be processed.</param>
        <param name="parts">An array supplied by the caller, capable of
                   holding at least three members.</param>
        <param name="isAttribute">A flag indicating whether this is an
                   attribute name (true) or an element name (false).</param>
        <summary>Process a raw XML qualified name, after all declarations in the
            current context have been handled by <c>#declarePrefix
            declarePrefix()</c>.</summary>
        <returns>The supplied array holding three internalized strings
                   representing the Namespace URI (or empty string), the
                   local name, and the XML qualified name; or null if there
                   is an undeclared prefix.</returns>
        <remarks>
          <para>Process a raw XML qualified name, after all declarations in the
            current context have been handled by <c>#declarePrefix
            declarePrefix()</c>.</para>
          <para>This method processes a raw XML qualified name in the
            current context by removing the prefix and looking it up among
            the prefixes currently declared.  The return value will be the
            array supplied by the caller, filled in as follows:</para>
          <para>&lt;dl&gt;
            &lt;dt&gt;parts[0]&lt;/dt&gt;
            &lt;dd&gt;The Namespace URI, or an empty string if none is
             in use.&lt;/dd&gt;
            &lt;dt&gt;parts[1]&lt;/dt&gt;
            &lt;dd&gt;The local name (without prefix).&lt;/dd&gt;
            &lt;dt&gt;parts[2]&lt;/dt&gt;
            &lt;dd&gt;The original raw name.&lt;/dd&gt;
            &lt;/dl&gt;</para>
          <para>All of the strings in the array will be internalized.  If
            the raw name has a prefix that has not been declared, then
            the return value will be null.</para>
          <para>Note that attribute names are processed differently than
            element names: an unprefixed element name will receive the
            default Namespace (if any), while an unprefixed attribute name
            will not.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#processName(java.lang.String,%20java.lang.String[],%20boolean)" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.processName(java.lang.String, java.lang.String[], boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.DeclarePrefix(System.String, System.String)" />
        <altmember cref="M:Java.Lang.String.Intern" />
      </Docs>
    </Member>
    <Member MemberName="PushContext">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PushContext ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushContext();" />
      <MemberSignature Language="C#" Value="public virtual void PushContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.PushContext" />
      <MemberSignature Language="F#" Value="abstract member PushContext : unit -&gt; unit&#xA;override this.PushContext : unit -&gt; unit" Usage="namespaceSupport.PushContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pushContext", "()V", "GetPushContextHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pushContext", "()V", "GetPushContextHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start a new Namespace context.</summary>
        <remarks>
          <para>Start a new Namespace context.
            The new context will automatically inherit
            the declarations of its parent context, but it will also keep
            track of which declarations were made within this context.</para>
          <para>Event callback code should start a new context once per element.
            This means being ready to call this in either of two places.
            For elements that don't include namespace declarations, the
            &lt;em&gt;ContentHandler.startElement()&lt;/em&gt; callback is the right place.
            For elements with such a declaration, it'd done in the first
            &lt;em&gt;ContentHandler.startPrefixMapping()&lt;/em&gt; callback.
            A boolean flag can be used to
            track whether a context has been started yet.  When either of
            those methods is called, it checks the flag to see if a new context
            needs to be started.  If so, it starts the context and sets the
            flag.  After &lt;em&gt;ContentHandler.startElement()&lt;/em&gt;
            does that, it always clears the flag.</para>
          <para>Normally, SAX drivers would push a new context at the beginning
            of each XML element.  Then they perform a first pass over the
            attributes to process all namespace declarations, making
            &lt;em&gt;ContentHandler.startPrefixMapping()&lt;/em&gt; callbacks.
            Then a second pass is made, to determine the namespace-qualified
            names for all attributes and for the element name.
            Finally all the information for the
            &lt;em&gt;ContentHandler.startElement()&lt;/em&gt; callback is available,
            so it can then be made.</para>
          <para>The Namespace support object always starts with a base context
            already in force: in this context, only the "xml" prefix is
            declared.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#pushContext()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.pushContext()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IContentHandler" />
        <altmember cref="M:Org.Xml.Sax.Helpers.NamespaceSupport.PopContext" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.Helpers.NamespaceSupport.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="namespaceSupport.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "GetResetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "GetResetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset this Namespace support object for reuse.</summary>
        <remarks>
          <para>Reset this Namespace support object for reuse.</para>
          <para>It is necessary to invoke this method before reusing the
            Namespace support object for a new session.  If namespace
            declaration URIs are to be supported, that flag must also
            be set to a non-default value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#reset()" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Org.Xml.Sax.Helpers.NamespaceSupport.NamespaceDeclUris" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Org.Xml.Sax.Helpers.NamespaceSupport.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="VB.NET" Value="Public Const Xmlns As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ Xmlns;" />
      <MemberSignature Language="C#" Value="public const string Xmlns;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Xmlns" />
      <MemberSignature Language="DocId" Value="F:Org.Xml.Sax.Helpers.NamespaceSupport.Xmlns" />
      <MemberSignature Language="F#" Value="val mutable Xmlns : string" Usage="Org.Xml.Sax.Helpers.NamespaceSupport.Xmlns" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("XMLNS")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("XMLNS")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The XML Namespace URI as a constant.</summary>
        <remarks>
          <para>The XML Namespace URI as a constant.
            The value is <c>http://www.w3.org/XML/1998/namespace</c>
            as defined in the "Namespaces in XML" * recommendation.</para>
          <para>This is the Namespace URI that is automatically mapped
            to the "xml" prefix.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport#XMLNS" title="Reference documentation">Java documentation for <code>org.xml.sax.helpers.NamespaceSupport.XMLNS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
