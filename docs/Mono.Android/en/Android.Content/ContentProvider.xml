<Type Name="ContentProvider" FullName="Android.Content.ContentProvider">
  <TypeSignature Language="C#" Value="public abstract class ContentProvider : Java.Lang.Object, Android.Content.IComponentCallbacks2, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContentProvider extends Java.Lang.Object implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Content.ContentProvider" />
  <TypeSignature Language="F#" Value="type ContentProvider = class&#xA;    inherit Object&#xA;    interface IComponentCallbacks&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IComponentCallbacks2" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/content/ContentProvider", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/content/ContentProvider", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Content providers are one of the primary building blocks of Android applications, providing
            content to applications.</summary>
    <remarks>
      <para>Content providers are one of the primary building blocks of Android applications, providing
            content to applications. They encapsulate data and provide it to applications through the single
            <c>ContentResolver</c> interface. A content provider is only required if you need to share
            data between multiple applications. For example, the contacts data is used by multiple
            applications and must be stored in a content provider. If you don't need to share data amongst
            multiple applications you can use a database directly via
            <c>android.database.sqlite.SQLiteDatabase</c>.</para>
      <para>When a request is made via
            a <c>ContentResolver</c> the system inspects the authority of the given URI and passes the
            request to the content provider registered with the authority. The content provider can interpret
            the rest of the URI however it wants. The <c>UriMatcher</c> class is helpful for parsing
            URIs.</para>
      <para>The primary methods that need to be implemented are:
            &lt;ul&gt;
              &lt;li&gt;<c>#onCreate</c> which is called to initialize the provider&lt;/li&gt;
              &lt;li&gt;<c>#query</c> which returns data to the caller&lt;/li&gt;
              &lt;li&gt;<c>#insert</c> which inserts new data into the content provider&lt;/li&gt;
              &lt;li&gt;<c>#update</c> which updates existing data in the content provider&lt;/li&gt;
              &lt;li&gt;<c>#delete</c> which deletes data from the content provider&lt;/li&gt;
              &lt;li&gt;<c>#getType</c> which returns the MIME type of data in the content provider&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>&lt;p class="caution"&gt;Data access methods (such as <c>#insert</c> and
            <c>#update</c>) may be called from many threads at once, and must be thread-safe.
            Other methods (such as <c>#onCreate</c>) are only called from the application
            main thread, and must avoid performing lengthy operations.  See the method
            descriptions for their expected thread behavior.&lt;/p&gt;</para>
      <para>Requests to <c>ContentResolver</c> are automatically forwarded to the appropriate
            ContentProvider instance, so subclasses don't have to worry about the details of
            cross-process calls.</para>
      <para>&lt;div class="special reference"&gt;
            &lt;h3&gt;Developer Guides&lt;/h3&gt;</para>
      <para>For more information about using content providers, read the
            <see href="https://developer.android.com/guide/topics/providers/content-providers.html">Content Providers</see>
            developer guide.</para>
      <para>&lt;/div&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/content/ContentProvider" title="Reference documentation">Java documentation for <code>android.content.ContentProvider</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct a ContentProvider instance.</summary>
        <remarks>
          <para>Construct a ContentProvider instance.  Content providers must be
            <see href="https://developer.android.com/guide/topics/manifest/provider-element.html">declared
            in the manifest</see>, accessed with <c>ContentResolver</c>, and created
            automatically by the system, so applications usually do not create
            ContentProvider instances directly.</para>
          <para>At construction time, the object is uninitialized, and most fields and
            methods are unavailable.  Subclasses should initialize themselves in
            <c>#onCreate</c>, not the constructor.</para>
          <para>Content providers are created on the application main thread at
            application launch time.  The constructor must not perform lengthy
            operations, or application startup will be delayed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#ContentProvider()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.ContentProvider()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContentProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Content.ContentProvider : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Content.ContentProvider" Usage="new Android.Content.ContentProvider (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyBatch">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ContentProviderResult[] ApplyBatch (System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; operations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ContentProviderResult[] ApplyBatch(class System.Collections.Generic.IList`1&lt;class Android.Content.ContentProviderOperation&gt; operations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.ApplyBatch(System.Collections.Generic.IList{Android.Content.ContentProviderOperation})" />
      <MemberSignature Language="F#" Value="abstract member ApplyBatch : System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; -&gt; Android.Content.ContentProviderResult[]&#xA;override this.ApplyBatch : System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; -&gt; Android.Content.ContentProviderResult[]" Usage="contentProvider.ApplyBatch operations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("applyBatch", "(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_util_ArrayList_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("applyBatch", "(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_util_ArrayList_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentProviderResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt;" />
      </Parameters>
      <Docs>
        <param name="operations">the operations to apply</param>
        <summary>Override this to handle requests to perform a batch of operations, or the
            default implementation will iterate over the operations and call
            <c>ContentProviderOperation#apply</c> on each of them.</summary>
        <returns>the results of the applications</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#applyBatch(java.lang.String,%20java.util.ArrayList)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.applyBatch(java.lang.String, java.util.ArrayList)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyBatch">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ContentProviderResult[] ApplyBatch (string authority, System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; operations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ContentProviderResult[] ApplyBatch(string authority, class System.Collections.Generic.IList`1&lt;class Android.Content.ContentProviderOperation&gt; operations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.ApplyBatch(System.String,System.Collections.Generic.IList{Android.Content.ContentProviderOperation})" />
      <MemberSignature Language="F#" Value="abstract member ApplyBatch : string * System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; -&gt; Android.Content.ContentProviderResult[]&#xA;override this.ApplyBatch : string * System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; -&gt; Android.Content.ContentProviderResult[]" Usage="contentProvider.ApplyBatch (authority, operations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("applyBatch", "(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_lang_String_Ljava_util_ArrayList_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("applyBatch", "(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_lang_String_Ljava_util_ArrayList_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentProviderResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="operations" Type="System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt;" />
      </Parameters>
      <Docs>
        <param name="authority">To be added.</param>
        <param name="operations">the operations to apply</param>
        <summary>Override this to handle requests to perform a batch of operations, or the
            default implementation will iterate over the operations and call
            <c>ContentProviderOperation#apply</c> on each of them.</summary>
        <returns>the results of the applications</returns>
        <remarks>
          <para>Override this to handle requests to perform a batch of operations, or the
            default implementation will iterate over the operations and call
            <c>ContentProviderOperation#apply</c> on each of them.
            If all calls to <c>ContentProviderOperation#apply</c> succeed
            then a <c>ContentProviderResult</c> array with as many
            elements as there were operations will be returned.  If any of the calls
            fail, it is up to the implementation how many of the others take effect.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#applyBatch(java.lang.String,%20java.util.ArrayList%3Candroid.content.ContentProviderOperation%3E)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.applyBatch(java.lang.String, java.util.ArrayList&lt;android.content.ContentProviderOperation&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachInfo">
      <MemberSignature Language="C#" Value="public virtual void AttachInfo (Android.Content.Context? context, Android.Content.PM.ProviderInfo? info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachInfo(class Android.Content.Context context, class Android.Content.PM.ProviderInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.AttachInfo(Android.Content.Context,Android.Content.PM.ProviderInfo)" />
      <MemberSignature Language="F#" Value="abstract member AttachInfo : Android.Content.Context * Android.Content.PM.ProviderInfo -&gt; unit&#xA;override this.AttachInfo : Android.Content.Context * Android.Content.PM.ProviderInfo -&gt; unit" Usage="contentProvider.AttachInfo (context, info)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("attachInfo", "(Landroid/content/Context;Landroid/content/pm/ProviderInfo;)V", "GetAttachInfo_Landroid_content_Context_Landroid_content_pm_ProviderInfo_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("attachInfo", "(Landroid/content/Context;Landroid/content/pm/ProviderInfo;)V", "GetAttachInfo_Landroid_content_Context_Landroid_content_pm_ProviderInfo_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="info" Type="Android.Content.PM.ProviderInfo" />
      </Parameters>
      <Docs>
        <param name="context">The context this provider is running in</param>
        <param name="info">Registered information about this content provider</param>
        <summary>After being instantiated, this is called to tell the content provider
            about itself.</summary>
        <remarks>
          <para>After being instantiated, this is called to tell the content provider
            about itself.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#attachInfo(android.content.Context,%20android.content.pm.ProviderInfo)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.attachInfo(android.content.Context, android.content.pm.ProviderInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BulkInsert">
      <MemberSignature Language="C#" Value="public virtual int BulkInsert (Android.Net.Uri uri, Android.Content.ContentValues[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BulkInsert(class Android.Net.Uri uri, class Android.Content.ContentValues[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.BulkInsert(Android.Net.Uri,Android.Content.ContentValues[])" />
      <MemberSignature Language="F#" Value="abstract member BulkInsert : Android.Net.Uri * Android.Content.ContentValues[] -&gt; int&#xA;override this.BulkInsert : Android.Net.Uri * Android.Content.ContentValues[] -&gt; int" Usage="contentProvider.BulkInsert (uri, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("bulkInsert", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "GetBulkInsert_Landroid_net_Uri_arrayLandroid_content_ContentValues_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("bulkInsert", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "GetBulkInsert_Landroid_net_Uri_arrayLandroid_content_ContentValues_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues[]" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request.</param>
        <param name="values">An array of sets of column_name/value pairs to add to the database.
               This must not be <c>null</c>.</param>
        <summary>Override this to handle requests to insert a set of new rows, or the
            default implementation will iterate over the values and call
            <c>#insert</c> on each of them.</summary>
        <returns>The number of values that were inserted.</returns>
        <remarks>
          <para>Override this to handle requests to insert a set of new rows, or the
            default implementation will iterate over the values and call
            <c>#insert</c> on each of them.
            As a courtesy, call <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()</c>
            after inserting.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#bulkInsert(android.net.Uri,%20android.content.ContentValues[])" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.bulkInsert(android.net.Uri, android.content.ContentValues[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle? Call (string method, string? arg, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle Call(string method, string arg, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Call(System.String,System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member Call : string * string * Android.OS.Bundle -&gt; Android.OS.Bundle&#xA;override this.Call : string * string * Android.OS.Bundle -&gt; Android.OS.Bundle" Usage="contentProvider.Call (method, arg, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="arg" Type="System.String" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="method">method name to call.  Opaque to framework, but should not be <c>null</c>.</param>
        <param name="arg">provider-defined String argument.  May be <c>null</c>.</param>
        <param name="extras">provider-defined Bundle argument.  May be <c>null</c>.</param>
        <summary>Call a provider-defined method.</summary>
        <returns>provider-defined return value.  May be <c>null</c>, which is also
              the default for providers which don't implement any call methods.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#call(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.call(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle? Call (string authority, string method, string? arg, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle Call(string authority, string method, string arg, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Call(System.String,System.String,System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member Call : string * string * string * Android.OS.Bundle -&gt; Android.OS.Bundle&#xA;override this.Call : string * string * string * Android.OS.Bundle -&gt; Android.OS.Bundle" Usage="contentProvider.Call (authority, method, arg, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="arg" Type="System.String" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="authority">To be added.</param>
        <param name="method">method name to call.  Opaque to framework, but should not be <c>null</c>.</param>
        <param name="arg">provider-defined String argument.  May be <c>null</c>.</param>
        <param name="extras">provider-defined Bundle argument.  May be <c>null</c>.</param>
        <summary>Call a provider-defined method.</summary>
        <returns>provider-defined return value.  May be <c>null</c>, which is also
              the default for providers which don't implement any call methods.</returns>
        <remarks>
          <para>Call a provider-defined method.  This can be used to implement
            interfaces that are cheaper and/or unnatural for a table-like
            model.
            
            &lt;p class="note"&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; The framework does no permission checking
            on this entry into the content provider besides the basic ability for the application
            to get access to the provider at all.  For example, it has no idea whether the call
            being executed may read or write data in the provider, so can't enforce those
            individual permissions.  Any implementation of this method &lt;strong&gt;must&lt;/strong&gt;
            do its own permission checks on incoming calls to make sure they are allowed.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#call(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.call(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingAttributionSource">
      <MemberSignature Language="C#" Value="public Android.Content.AttributionSource? CallingAttributionSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.AttributionSource CallingAttributionSource" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.CallingAttributionSource" />
      <MemberSignature Language="F#" Value="member this.CallingAttributionSource : Android.Content.AttributionSource" Usage="Android.Content.ContentProvider.CallingAttributionSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingAttributionSource", "()Landroid/content/AttributionSource;", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingAttributionSource", "()Landroid/content/AttributionSource;", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.AttributionSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the attribution source of the calling app.</summary>
        <value>The identity of the caller for permission purposes.</value>
        <remarks>
          <para>Gets the attribution source of the calling app. If you want to attribute
            the data access to the calling app you can create an attribution context
            via <c>android.content.Context#createContext(ContextParams)</c> and passing
            this identity to <c>ContextParams.Builder#setNextAttributionSource(
            AttributionSource)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getCallingAttributionSource()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getCallingAttributionSource()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingAttributionTag">
      <MemberSignature Language="C#" Value="public string? CallingAttributionTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingAttributionTag" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.CallingAttributionTag" />
      <MemberSignature Language="F#" Value="member this.CallingAttributionTag : string" Usage="Android.Content.ContentProvider.CallingAttributionTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingAttributionTag", "()Ljava/lang/String;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingAttributionTag", "()Ljava/lang/String;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the attribution tag of the caller that initiated the request being
            processed on the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the attribution tag of the caller that initiated the request being
            processed on the current thread. Returns <c>null</c> if not currently processing
            a request of the request is for the default attribution.</para>
          <para>This will always return <c>null</c> when processing
            <c>#getTypeAnonymous(Uri)</c> requests
            
            For <c>#getType(Uri)</c>  requests, this will be only available for cases, where
            the caller can be identified. See <c>#getTypeAnonymous(Uri)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getCallingAttributionTag()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getCallingAttributionTag()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingPackage">
      <MemberSignature Language="C#" Value="public string? CallingPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackage" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.CallingPackage" />
      <MemberSignature Language="F#" Value="member this.CallingPackage : string" Usage="Android.Content.ContentProvider.CallingPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the caller that initiated the request being
            processed on the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the package name of the caller that initiated the request being
            processed on the current thread. The returned package will have been
            verified to belong to the calling UID. Returns <c>null</c> if not
            currently processing a request.</para>
          <para>This will always return <c>null</c> when processing
            <c>#getTypeAnonymous(Uri)</c> requests
            
            For <c>#getType(Uri)</c>  requests, this will be only available for cases, where
            the caller can be identified. See <c>#getTypeAnonymous(Uri)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getCallingPackage()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getCallingPackage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.SecurityException">if the calling package doesn't belong to the
             calling UID.
</exception>
        <altmember cref="P:Android.OS.Binder.CallingUid" />
        <altmember cref="M:Android.Content.Context.GrantUriPermission(System.String, Android.Net.Uri, Android.Net.Uri)" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="CallingPackageUnchecked">
      <MemberSignature Language="C#" Value="public string? CallingPackageUnchecked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackageUnchecked" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.CallingPackageUnchecked" />
      <MemberSignature Language="F#" Value="member this.CallingPackageUnchecked : string" Usage="Android.Content.ContentProvider.CallingPackageUnchecked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingPackageUnchecked", "()Ljava/lang/String;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingPackageUnchecked", "()Ljava/lang/String;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the caller that initiated the request being
            processed on the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the package name of the caller that initiated the request being
            processed on the current thread. The returned package will have
            &lt;em&gt;not&lt;/em&gt; been verified to belong to the calling UID. Returns
            <c>null</c> if not currently processing a request.</para>
          <para>This will always return <c>null</c> when processing
            <c>#getTypeAnonymous(Uri)</c> requests
            
            For <c>#getType(Uri)</c>  requests, this will be only available for cases, where
            the caller can be identified. See <c>#getTypeAnonymous(Uri)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getCallingPackageUnchecked()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getCallingPackageUnchecked()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Canonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri? Canonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Canonicalize(class Android.Net.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="abstract member Canonicalize : Android.Net.Uri -&gt; Android.Net.Uri&#xA;override this.Canonicalize : Android.Net.Uri -&gt; Android.Net.Uri" Usage="contentProvider.Canonicalize url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetCanonicalize_Landroid_net_Uri_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetCanonicalize_Landroid_net_Uri_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to canonicalize.</param>
        <summary>Implement this to support canonicalization of URIs that refer to your
            content provider.</summary>
        <returns>Return the canonical representation of &lt;var&gt;url&lt;/var&gt;, or null if
            canonicalization of that Uri is not supported.</returns>
        <remarks>
          <para>Implement this to support canonicalization of URIs that refer to your
            content provider.  A canonical URI is one that can be transported across
            devices, backup/restore, and other contexts, and still be able to refer
            to the same data item.  Typically this is implemented by adding query
            params to the URI allowing the content provider to verify that an incoming
            canonical URI references the same data as it was originally intended for and,
            if it doesn't, to find that data (if it exists) in the current environment.</para>
          <para>For example, if the content provider holds people and a normal URI in it
            is created with a row index into that people database, the cananical representation
            may have an additional query param at the end which specifies the name of the
            person it is intended for.  Later calls into the provider with that URI will look
            up the row of that URI's base index and, if it doesn't match or its entry's
            name doesn't match the name in the query param, perform a query on its database
            to find the correct row to operate on.</para>
          <para>If you implement support for canonical URIs, &lt;b&gt;all&lt;/b&gt; incoming calls with
            URIs (including this one) must perform this verification and recovery of any
            canonical URIs they receive.  In addition, you must also implement
            <c>#uncanonicalize</c> to strip the canonicalization of any of these URIs.</para>
          <para>The default implementation of this method returns null, indicating that
            canonical URIs are not supported.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#canonicalize(android.net.Uri)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.canonicalize(android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCallingIdentity">
      <MemberSignature Language="C#" Value="public Android.Content.ContentProvider.CallingIdentity ClearCallingIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.ContentProvider/CallingIdentity ClearCallingIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.ClearCallingIdentity" />
      <MemberSignature Language="F#" Value="member this.ClearCallingIdentity : unit -&gt; Android.Content.ContentProvider.CallingIdentity" Usage="contentProvider.ClearCallingIdentity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearCallingIdentity", "()Landroid/content/ContentProvider$CallingIdentity;", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearCallingIdentity", "()Landroid/content/ContentProvider$CallingIdentity;", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentProvider+CallingIdentity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset the identity of the incoming IPC on the current thread.</summary>
        <returns>Returns an opaque token that can be used to restore the original
                    calling identity by passing it to
                    <c>#restoreCallingIdentity</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#clearCallingIdentity()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.clearCallingIdentity()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Android.Content.Context? Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.Context" />
      <MemberSignature Language="F#" Value="member this.Context : Android.Content.Context" Usage="Android.Content.ContentProvider.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the Context this provider is running in.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Retrieves the Context this provider is running in.  Only available once
            <c>#onCreate</c> has been called -- this will return <c>null</c> in the
            constructor.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getContext()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getContext()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual int Delete (Android.Net.Uri uri, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Delete(class Android.Net.Uri uri, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Delete(Android.Net.Uri,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member Delete : Android.Net.Uri * Android.OS.Bundle -&gt; int&#xA;override this.Delete : Android.Net.Uri * Android.OS.Bundle -&gt; int" Usage="contentProvider.Delete (uri, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("delete", "(Landroid/net/Uri;Landroid/os/Bundle;)I", "GetDelete_Landroid_net_Uri_Landroid_os_Bundle_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("delete", "(Landroid/net/Uri;Landroid/os/Bundle;)I", "GetDelete_Landroid_net_Uri_Landroid_os_Bundle_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The full URI to query, including a row ID (if a specific
                       record is requested).</param>
        <param name="extras">A Bundle containing additional information necessary for
                       the operation. Arguments may include SQL style arguments, such
                       as <c>ContentResolver#QUERY_ARG_SQL_LIMIT</c>, but note that
                       the documentation for each individual provider will indicate
                       which arguments they support.</param>
        <summary>Implement this to handle requests to delete one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Implement this to handle requests to delete one or more rows. The
            implementation should apply the selection clause when performing
            deletion, allowing the operation to affect multiple rows in a directory.
            As a courtesy, call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after deleting. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>The implementation is responsible for parsing out a row ID at the end of
            the URI, if a specific row is being deleted. That is, the client would
            pass in <c>content://contacts/people/22</c> and the implementation
            is responsible for parsing the record number (22) when creating a SQL
            statement.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#delete(android.net.Uri,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.delete(android.net.Uri, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract int Delete (Android.Net.Uri uri, string? selection, string[]? selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Delete(class Android.Net.Uri uri, string selection, string[] selectionArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Delete(Android.Net.Uri,System.String,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Delete : Android.Net.Uri * string * string[] -&gt; int" Usage="contentProvider.Delete (uri, selection, selectionArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Landroid_net_Uri_Ljava_lang_String_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Landroid_net_Uri_Ljava_lang_String_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="selectionArgs">To be added.</param>
        <param name="uri">The full URI to query, including a row ID (if a specific
                       record is requested).</param>
        <param name="selection">An optional restriction to apply to rows when deleting.</param>
        <summary>Implement this to handle requests to delete one or more rows.</summary>
        <returns>The number of rows affected.</returns>
        <remarks>
          <para>Implement this to handle requests to delete one or more rows. The
            implementation should apply the selection clause when performing
            deletion, allowing the operation to affect multiple rows in a directory.
            As a courtesy, call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after deleting. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>The implementation is responsible for parsing out a row ID at the end of
            the URI, if a specific row is being deleted. That is, the client would
            pass in <c>content://contacts/people/22</c> and the implementation
            is responsible for parsing the record number (22) when creating a SQL
            statement.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#delete(android.net.Uri,%20java.lang.String,%20java.lang.String[])" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.delete(android.net.Uri, java.lang.String, java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (Java.IO.FileDescriptor? fd, Java.IO.PrintWriter? writer, string[]? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Dump(Java.IO.FileDescriptor,Java.IO.PrintWriter,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Dump : Java.IO.FileDescriptor * Java.IO.PrintWriter * string[] -&gt; unit&#xA;override this.Dump : Java.IO.FileDescriptor * Java.IO.PrintWriter * string[] -&gt; unit" Usage="contentProvider.Dump (fd, writer, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
            closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.</param>
        <summary>Print the Provider's state into the given stream.</summary>
        <remarks>
          <para>Print the Provider's state into the given stream.  This gets invoked if
            you run "adb shell dumpsys activity provider &amp;lt;provider_component_name&amp;gt;".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#dump(java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String[])" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DumpAsync (Java.IO.FileDescriptor? fd, Java.IO.PrintWriter? writer, string[]? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DumpAsync(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.DumpAsync(Java.IO.FileDescriptor,Java.IO.PrintWriter,System.String[])" />
      <MemberSignature Language="F#" Value="member this.DumpAsync : Java.IO.FileDescriptor * Java.IO.PrintWriter * string[] -&gt; System.Threading.Tasks.Task" Usage="contentProvider.DumpAsync (fd, writer, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="writer">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathPermissions">
      <MemberSignature Language="C#" Value="public Android.Content.PM.PathPermission[]? GetPathPermissions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.PM.PathPermission[] GetPathPermissions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.GetPathPermissions" />
      <MemberSignature Language="F#" Value="member this.GetPathPermissions : unit -&gt; Android.Content.PM.PathPermission[]" Usage="contentProvider.GetPathPermissions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPathPermissions", "()[Landroid/content/pm/PathPermission;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPathPermissions", "()[Landroid/content/pm/PathPermission;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.PathPermission[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the path-based permissions required for read and/or write access to
            this content provider.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Return the path-based permissions required for read and/or write access to
            this content provider.  This method can be called from multiple
            threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getPathPermissions()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getPathPermissions()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamTypes">
      <MemberSignature Language="C#" Value="public virtual string[]? GetStreamTypes (Android.Net.Uri uri, string mimeTypeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetStreamTypes(class Android.Net.Uri uri, string mimeTypeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetStreamTypes : Android.Net.Uri * string -&gt; string[]&#xA;override this.GetStreamTypes : Android.Net.Uri * string -&gt; string[]" Usage="contentProvider.GetStreamTypes (uri, mimeTypeFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getStreamTypes", "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;", "GetGetStreamTypes_Landroid_net_Uri_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getStreamTypes", "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;", "GetGetStreamTypes_Landroid_net_Uri_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
            a pattern, such as *&amp;#47;* to retrieve all possible data types.</param>
        <summary>Called by a client to determine the types of data streams that this
            content provider supports for the given URI.</summary>
        <returns>Returns <c>null</c> if there are no possible data streams for the
            given mimeTypeFilter.  Otherwise returns an array of all available
            concrete MIME types.</returns>
        <remarks>
          <para>Called by a client to determine the types of data streams that this
            content provider supports for the given URI.  The default implementation
            returns <c>null</c>, meaning no types.  If your content provider stores data
            of a particular type, return that MIME type if it matches the given
            mimeTypeFilter.  If it can perform type conversions, return an array
            of all supported MIME types that match mimeTypeFilter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getStreamTypes(android.net.Uri,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getStreamTypes(android.net.Uri, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri, System.String, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public abstract string? GetType (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetType(class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="override this.GetType : Android.Net.Uri -&gt; string" Usage="contentProvider.GetType uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetType_Landroid_net_Uri_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetType_Landroid_net_Uri_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implement this to handle requests for the MIME type of the data at the
            given URI.</summary>
        <returns>a MIME type string, or <c>null</c> if there is no type.</returns>
        <remarks>
          <para>Implement this to handle requests for the MIME type of the data at the
            given URI.  The returned MIME type should start with
            <c>vnd.android.cursor.item</c> for a single record,
            or <c>vnd.android.cursor.dir/</c> for multiple items.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>Note that by default there are no permissions needed for an application to
            access this information; if your content provider requires read and/or
            write permissions, or is not exported, all applications can still call
            this method regardless of their access permissions.</para>
          <para>If your mime type reveals details that should be protected,
            then you should protect this method by implementing <c>#getTypeAnonymous</c>.
            Implementing <c>#getTypeAnonymous</c> ensures your <c>#getType</c> can be
            only accessed by caller's having associated readPermission for the URI.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getType(android.net.Uri)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getType(android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeAnonymous">
      <MemberSignature Language="C#" Value="public virtual string? GetTypeAnonymous (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeAnonymous(class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.GetTypeAnonymous(Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeAnonymous : Android.Net.Uri -&gt; string&#xA;override this.GetTypeAnonymous : Android.Net.Uri -&gt; string" Usage="contentProvider.GetTypeAnonymous uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTypeAnonymous", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetTypeAnonymous_Landroid_net_Uri_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTypeAnonymous", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetTypeAnonymous_Landroid_net_Uri_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implement this to handle requests for MIME type of URIs, that does not need to
            reveal any internal information which should be protected by any permission.</summary>
        <returns>a MIME type string, or <c>null</c> if type needs to be protected.</returns>
        <remarks>
          <para>Implement this to handle requests for MIME type of URIs, that does not need to
            reveal any internal information which should be protected by any permission.</para>
          <para>If your mime type reveals details that should be protected, then you should protect those
            by implementing those in <c>#getType</c>, and in this function, only return types of
            URIs which can be obtained by anyone without any access.
            
            Implementing ths function will make sure <c>#getType</c> is protected by readPermission.
            This function by default works as the <c>#getType</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getTypeAnonymous(android.net.Uri)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getTypeAnonymous(android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public abstract Android.Net.Uri? Insert (Android.Net.Uri uri, Android.Content.ContentValues? values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" />
      <MemberSignature Language="F#" Value="abstract member Insert : Android.Net.Uri * Android.Content.ContentValues -&gt; Android.Net.Uri" Usage="contentProvider.Insert (uri, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request.</param>
        <param name="values">A set of column_name/value pairs to add to the database.</param>
        <summary>Implement this to handle requests to insert a new row.</summary>
        <returns>The URI for the newly inserted item.</returns>
        <remarks>
          <para>Implement this to handle requests to insert a new row. As a courtesy,
            call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after inserting. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#insert(android.net.Uri,%20android.content.ContentValues)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.insert(android.net.Uri, android.content.ContentValues)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri? Insert (Android.Net.Uri uri, Android.Content.ContentValues? values, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member Insert : Android.Net.Uri * Android.Content.ContentValues * Android.OS.Bundle -&gt; Android.Net.Uri&#xA;override this.Insert : Android.Net.Uri * Android.Content.ContentValues * Android.OS.Bundle -&gt; Android.Net.Uri" Usage="contentProvider.Insert (uri, values, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Landroid_os_Bundle_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Landroid_os_Bundle_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request.</param>
        <param name="values">A set of column_name/value pairs to add to the database.</param>
        <param name="extras">A Bundle containing additional information necessary for
                       the operation. Arguments may include SQL style arguments, such
                       as <c>ContentResolver#QUERY_ARG_SQL_LIMIT</c>, but note that
                       the documentation for each individual provider will indicate
                       which arguments they support.</param>
        <summary>Implement this to handle requests to insert a new row.</summary>
        <returns>The URI for the newly inserted item.</returns>
        <remarks>
          <para>Implement this to handle requests to insert a new row. As a courtesy,
            call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after inserting. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#insert(android.net.Uri,%20android.content.ContentValues,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.insert(android.net.Uri, android.content.ContentValues, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="protected virtual bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.IsTemporary" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="Android.Content.ContentProvider.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTemporary", "()Z", "GetIsTemporaryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTemporary", "()Z", "GetIsTemporaryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this instance is a temporary content provider.</summary>
        <value>true if this instance is a temporary content provider</value>
        <remarks>
          <para>Returns true if this instance is a temporary content provider.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#isTemporary()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.isTemporary()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Content.ContentProvider.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCallingPackageChanged">
      <MemberSignature Language="C#" Value="public virtual void OnCallingPackageChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCallingPackageChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OnCallingPackageChanged" />
      <MemberSignature Language="F#" Value="abstract member OnCallingPackageChanged : unit -&gt; unit&#xA;override this.OnCallingPackageChanged : unit -&gt; unit" Usage="contentProvider.OnCallingPackageChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCallingPackageChanged", "()V", "GetOnCallingPackageChangedHandler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCallingPackageChanged", "()V", "GetOnCallingPackageChangedHandler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called whenever the value of <c>#getCallingPackage()</c> changes, giving
            the provider an opportunity to invalidate any security related caching it
            may be performing.</summary>
        <remarks>
          <para>Called whenever the value of <c>#getCallingPackage()</c> changes, giving
            the provider an opportunity to invalidate any security related caching it
            may be performing.</para>
          <para>This typically happens when a <c>ContentProvider</c> makes a nested call
            back into itself when already processing a call from a remote process.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#onCallingPackageChanged()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.onCallingPackageChanged()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration? newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OnConfigurationChanged(Android.Content.Res.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member OnConfigurationChanged : Android.Content.Res.Configuration -&gt; unit&#xA;override this.OnConfigurationChanged : Android.Content.Res.Configuration -&gt; unit" Usage="contentProvider.OnConfigurationChanged newConfig" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks.OnConfigurationChanged(Android.Content.Res.Configuration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.
</param>
        <summary>To be added
            This method is always called on the application main thread, and must
            not perform lengthy operations.</summary>
        <remarks>
          <para>To be added
            This method is always called on the application main thread, and must
            not perform lengthy operations.</para>
          <para>The default content provider implementation does nothing.
            Override this method to take appropriate action.
            (Content providers do not usually care about things like screen
            orientation, but may want to know about locale changes.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#onConfigurationChanged(android.content.res.Configuration)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.onConfigurationChanged(android.content.res.Configuration)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public abstract bool OnCreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OnCreate" />
      <MemberSignature Language="F#" Value="abstract member OnCreate : unit -&gt; bool" Usage="contentProvider.OnCreate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreate", "()Z", "GetOnCreateHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreate", "()Z", "GetOnCreateHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to initialize your content provider on startup.</summary>
        <returns>true if the provider was successfully loaded, false otherwise</returns>
        <remarks>
          <para>Implement this to initialize your content provider on startup.
            This method is called for all registered content providers on the
            application main thread at application launch time.  It must not perform
            lengthy operations, or application startup will be delayed.</para>
          <para>You should defer nontrivial initialization (such as opening,
            upgrading, and scanning databases) until the content provider is used
            (via <c>#query</c>, <c>#insert</c>, etc).  Deferred initialization
            keeps application startup fast, avoids unnecessary work if the provider
            turns out not to be needed, and stops database errors (such as a full
            disk) from halting application launch.</para>
          <para>If you use SQLite, <c>android.database.sqlite.SQLiteOpenHelper</c>
            is a helpful utility class that makes it easy to manage databases,
            and will automatically defer opening until first use.  If you do use
            SQLiteOpenHelper, make sure to avoid calling
            <c>android.database.sqlite.SQLiteOpenHelper#getReadableDatabase</c> or
            <c>android.database.sqlite.SQLiteOpenHelper#getWritableDatabase</c>
            from this method.  (Instead, override
            <c>android.database.sqlite.SQLiteOpenHelper#onOpen</c> to initialize the
            database when it is first opened.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#onCreate()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.onCreate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OnLowMemory" />
      <MemberSignature Language="F#" Value="abstract member OnLowMemory : unit -&gt; unit&#xA;override this.OnLowMemory : unit -&gt; unit" Usage="contentProvider.OnLowMemory " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks.OnLowMemory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added
            This method is always called on the application main thread, and must
            not perform lengthy operations.</summary>
        <remarks>
          <para>To be added
            This method is always called on the application main thread, and must
            not perform lengthy operations.</para>
          <para>The default content provider implementation does nothing.
            Subclasses may override this method to take appropriate action.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#onLowMemory()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.onLowMemory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OnTrimMemory(Android.Content.TrimMemory)" />
      <MemberSignature Language="F#" Value="abstract member OnTrimMemory : Android.Content.TrimMemory -&gt; unit&#xA;override this.OnTrimMemory : Android.Content.TrimMemory -&gt; unit" Usage="contentProvider.OnTrimMemory level" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks2.OnTrimMemory(Android.Content.TrimMemory)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" />,
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" />,
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" />,
 or <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" />.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor? OpenAssetFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" />
      <MemberSignature Language="F#" Value="abstract member OpenAssetFile : Android.Net.Uri * string -&gt; Android.Content.Res.AssetFileDescriptor&#xA;override this.OpenAssetFile : Android.Net.Uri * string -&gt; Android.Content.Res.AssetFileDescriptor" Usage="contentProvider.OpenAssetFile (uri, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">The string representation of the file mode. Can be "r", "w", "wt", "wa", "rw"
                        or "rwt". Please note the exact implementation of these may differ for each
                        Provider implementation - for example, "w" may or may not truncate.</param>
        <summary>This is like <c>#openFile</c>, but can be implemented by providers
            that need to be able to return sub-sections of files, often assets
            inside of their .</summary>
        <returns>Returns a new AssetFileDescriptor which you can use to access
            the file.</returns>
        <remarks>
          <para>This is like <c>#openFile</c>, but can be implemented by providers
            that need to be able to return sub-sections of files, often assets
            inside of their .apk.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>If you implement this, your clients must be able to deal with such
            file slices, either directly with
            <c>ContentResolver#openAssetFileDescriptor</c>, or by using the higher-level
            <c>ContentResolver#openInputStream ContentResolver.openInputStream</c>
            or <c>ContentResolver#openOutputStream ContentResolver.openOutputStream</c>
            methods.</para>
          <para>The returned AssetFileDescriptor can be a pipe or socket pair to enable
            streaming of data.
            
            &lt;p class="note"&gt;If you are implementing this to return a full file, you
            should create the AssetFileDescriptor with
            <c>AssetFileDescriptor#UNKNOWN_LENGTH</c> to be compatible with
            applications that cannot handle sub-sections of files.</para>
          <para>&lt;p class="note"&gt;For use in Intents, you will want to implement <c>#getType</c>
            to return the appropriate MIME type for the data returned here with
            the same URI.  This will allow intent resolution to automatically determine the data MIME
            type and select the appropriate matching targets as part of its operation.&lt;/p&gt;
            
            &lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openAssetFile(android.net.Uri,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openAssetFile(android.net.Uri, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor? OpenAssetFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal? signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member OpenAssetFile : Android.Net.Uri * string * Android.OS.CancellationSignal -&gt; Android.Content.Res.AssetFileDescriptor&#xA;override this.OpenAssetFile : Android.Net.Uri * string * Android.OS.CancellationSignal -&gt; Android.Content.Res.AssetFileDescriptor" Usage="contentProvider.OpenAssetFile (uri, mode, signal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">The string representation of the file mode. Can be "r", "w", "wt", "wa", "rw"
                        or "rwt". Please note the exact implementation of these may differ for each
                        Provider implementation - for example, "w" may or may not truncate.</param>
        <param name="signal">A signal to cancel the operation in progress, or
                       <c>null</c> if none. For example, if you are downloading a
                       file from the network to service a "rw" mode request, you
                       should periodically call
                       <c>CancellationSignal#throwIfCanceled()</c> to check whether
                       the client has canceled the request and abort the download.</param>
        <summary>This is like <c>#openFile</c>, but can be implemented by providers
            that need to be able to return sub-sections of files, often assets
            inside of their .</summary>
        <returns>Returns a new AssetFileDescriptor which you can use to access
            the file.</returns>
        <remarks>
          <para>This is like <c>#openFile</c>, but can be implemented by providers
            that need to be able to return sub-sections of files, often assets
            inside of their .apk.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>If you implement this, your clients must be able to deal with such
            file slices, either directly with
            <c>ContentResolver#openAssetFileDescriptor</c>, or by using the higher-level
            <c>ContentResolver#openInputStream ContentResolver.openInputStream</c>
            or <c>ContentResolver#openOutputStream ContentResolver.openOutputStream</c>
            methods.</para>
          <para>The returned AssetFileDescriptor can be a pipe or socket pair to enable
            streaming of data.
            
            &lt;p class="note"&gt;If you are implementing this to return a full file, you
            should create the AssetFileDescriptor with
            <c>AssetFileDescriptor#UNKNOWN_LENGTH</c> to be compatible with
            applications that cannot handle sub-sections of files.</para>
          <para>&lt;p class="note"&gt;For use in Intents, you will want to implement <c>#getType</c>
            to return the appropriate MIME type for the data returned here with
            the same URI.  This will allow intent resolution to automatically determine the data MIME
            type and select the appropriate matching targets as part of its operation.&lt;/p&gt;
            
            &lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openAssetFile(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor? OpenFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" />
      <MemberSignature Language="F#" Value="abstract member OpenFile : Android.Net.Uri * string -&gt; Android.OS.ParcelFileDescriptor&#xA;override this.OpenFile : Android.Net.Uri * string -&gt; Android.OS.ParcelFileDescriptor" Usage="contentProvider.OpenFile (uri, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">The string representation of the file mode. Can be "r", "w", "wt", "wa", "rw"
                        or "rwt". Please note the exact implementation of these may differ for each
                        Provider implementation - for example, "w" may or may not truncate.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>Returns a new ParcelFileDescriptor which you can use to access
            the file.</returns>
        <remarks>
          <para>Override this to handle requests to open a file blob.
            The default implementation always throws <c>FileNotFoundException</c>.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>This method returns a ParcelFileDescriptor, which is returned directly
            to the caller.  This way large data (such as images and documents) can be
            returned without copying the content.</para>
          <para>The returned ParcelFileDescriptor is owned by the caller, so it is
            their responsibility to close it when done.  That is, the implementation
            of this method should create a new ParcelFileDescriptor for each call.</para>
          <para>If opened with the exclusive "r" or "w" modes, the returned
            ParcelFileDescriptor can be a pipe or socket pair to enable streaming
            of data. Opening with the "rw" or "rwt" modes implies a file on disk that
            supports seeking.</para>
          <para>If you need to detect when the returned ParcelFileDescriptor has been
            closed, or if the remote process has crashed or encountered some other
            error, you can use <c>ParcelFileDescriptor#open(File, int,
            android.os.Handler, android.os.ParcelFileDescriptor.OnCloseListener)</c>,
            <c>ParcelFileDescriptor#createReliablePipe()</c>, or
            <c>ParcelFileDescriptor#createReliableSocketPair()</c>.</para>
          <para>If you need to return a large file that isn't backed by a real file on
            disk, such as a file on a network share or cloud storage service,
            consider using
            <c>StorageManager#openProxyFileDescriptor(int, android.os.ProxyFileDescriptorCallback, android.os.Handler)</c>
            which will let you to stream the content on-demand.
            
            &lt;p class="note"&gt;For use in Intents, you will want to implement <c>#getType</c>
            to return the appropriate MIME type for the data returned here with
            the same URI.  This will allow intent resolution to automatically determine the data MIME
            type and select the appropriate matching targets as part of its operation.</para>
          <para>&lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.
            You may also want to support other common columns if you have additional meta-data
            to supply, such as <c>android.provider.MediaStore.MediaColumns#DATE_ADDED</c>
            in <c>android.provider.MediaStore.MediaColumns</c>.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openFile(android.net.Uri,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openFile(android.net.Uri, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor? OpenFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal? signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member OpenFile : Android.Net.Uri * string * Android.OS.CancellationSignal -&gt; Android.OS.ParcelFileDescriptor&#xA;override this.OpenFile : Android.Net.Uri * string * Android.OS.CancellationSignal -&gt; Android.OS.ParcelFileDescriptor" Usage="contentProvider.OpenFile (uri, mode, signal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">The string representation of the file mode. Can be "r", "w", "wt", "wa", "rw"
                        or "rwt". Please note the exact implementation of these may differ for each
                        Provider implementation - for example, "w" may or may not truncate.</param>
        <param name="signal">A signal to cancel the operation in progress, or
                       <c>null</c> if none. For example, if you are downloading a
                       file from the network to service a "rw" mode request, you
                       should periodically call
                       <c>CancellationSignal#throwIfCanceled()</c> to check whether
                       the client has canceled the request and abort the download.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>Returns a new ParcelFileDescriptor which you can use to access
            the file.</returns>
        <remarks>
          <para>Override this to handle requests to open a file blob.
            The default implementation always throws <c>FileNotFoundException</c>.
            This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>This method returns a ParcelFileDescriptor, which is returned directly
            to the caller.  This way large data (such as images and documents) can be
            returned without copying the content.</para>
          <para>The returned ParcelFileDescriptor is owned by the caller, so it is
            their responsibility to close it when done.  That is, the implementation
            of this method should create a new ParcelFileDescriptor for each call.</para>
          <para>If opened with the exclusive "r" or "w" modes, the returned
            ParcelFileDescriptor can be a pipe or socket pair to enable streaming
            of data. Opening with the "rw" or "rwt" modes implies a file on disk that
            supports seeking.</para>
          <para>If you need to detect when the returned ParcelFileDescriptor has been
            closed, or if the remote process has crashed or encountered some other
            error, you can use <c>ParcelFileDescriptor#open(File, int,
            android.os.Handler, android.os.ParcelFileDescriptor.OnCloseListener)</c>,
            <c>ParcelFileDescriptor#createReliablePipe()</c>, or
            <c>ParcelFileDescriptor#createReliableSocketPair()</c>.
            
            &lt;p class="note"&gt;For use in Intents, you will want to implement <c>#getType</c>
            to return the appropriate MIME type for the data returned here with
            the same URI.  This will allow intent resolution to automatically determine the data MIME
            type and select the appropriate matching targets as part of its operation.</para>
          <para>&lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.
            You may also want to support other common columns if you have additional meta-data
            to supply, such as <c>android.provider.MediaStore.MediaColumns#DATE_ADDED</c>
            in <c>android.provider.MediaStore.MediaColumns</c>.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openFile(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFileHelper">
      <MemberSignature Language="C#" Value="protected Android.OS.ParcelFileDescriptor OpenFileHelper (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Android.OS.ParcelFileDescriptor OpenFileHelper(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" />
      <MemberSignature Language="F#" Value="member this.OpenFileHelper : Android.Net.Uri * string -&gt; Android.OS.ParcelFileDescriptor" Usage="contentProvider.OpenFileHelper (uri, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openFileHelper", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openFileHelper", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to be opened.</param>
        <param name="mode">The string representation of the file mode. Can be "r", "w", "wt", "wa", "rw"
                        or "rwt". Please note the exact implementation of these may differ for each
                        Provider implementation - for example, "w" may or may not truncate.</param>
        <summary>Convenience for subclasses that wish to implement <c>#openFile</c>
            by looking up a column named "_data" at the given URI.</summary>
        <returns>Returns a new ParcelFileDescriptor that can be used by the
            client to access the file.</returns>
        <remarks>
          <para>Convenience for subclasses that wish to implement <c>#openFile</c>
            by looking up a column named "_data" at the given URI.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openFileHelper(android.net.Uri,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openFileHelper(android.net.Uri, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenPipeHelper">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenPipeHelper (Android.Net.Uri uri, string mimeType, Android.OS.Bundle? opts, Java.Lang.Object? args, Android.Content.ContentProvider.IPipeDataWriter func);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenPipeHelper(class Android.Net.Uri uri, string mimeType, class Android.OS.Bundle opts, class Java.Lang.Object args, class Android.Content.ContentProvider/IPipeDataWriter func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenPipeHelper(Android.Net.Uri,System.String,Android.OS.Bundle,Java.Lang.Object,Android.Content.ContentProvider.IPipeDataWriter)" />
      <MemberSignature Language="F#" Value="abstract member OpenPipeHelper : Android.Net.Uri * string * Android.OS.Bundle * Java.Lang.Object * Android.Content.ContentProvider.IPipeDataWriter -&gt; Android.OS.ParcelFileDescriptor&#xA;override this.OpenPipeHelper : Android.Net.Uri * string * Android.OS.Bundle * Java.Lang.Object * Android.Content.ContentProvider.IPipeDataWriter -&gt; Android.OS.ParcelFileDescriptor" Usage="contentProvider.OpenPipeHelper (uri, mimeType, opts, args, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openPipeHelper", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/Object;Landroid/content/ContentProvider$PipeDataWriter;)Landroid/os/ParcelFileDescriptor;", "GetOpenPipeHelper_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Ljava_lang_Object_Landroid_content_ContentProvider_PipeDataWriter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openPipeHelper", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/Object;Landroid/content/ContentProvider$PipeDataWriter;)Landroid/os/ParcelFileDescriptor;", "GetOpenPipeHelper_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Ljava_lang_Object_Landroid_content_ContentProvider_PipeDataWriter_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="args" Type="Java.Lang.Object" />
        <Parameter Name="func" Type="Android.Content.ContentProvider+IPipeDataWriter" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose data is to be written.</param>
        <param name="mimeType">The desired type of data to be written.</param>
        <param name="opts">Options supplied by caller.</param>
        <param name="args">Your own custom arguments.</param>
        <param name="func">Interface implementing the function that will actually
            stream the data.</param>
        <summary>A helper function for implementing <c>#openTypedAssetFile</c>, for
            creating a data pipe and background thread allowing you to stream
            generated data back to the client.</summary>
        <returns>Returns a new ParcelFileDescriptor holding the read side of
            the pipe.  This should be returned to the caller for reading; the caller
            is responsible for closing it when done.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openPipeHelper(android.net.Uri,%20java.lang.String,%20android.os.Bundle,%20java.lang.Object,%20android.content.PipeDataWriter)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openPipeHelper(android.net.Uri, java.lang.String, android.os.Bundle, java.lang.Object, android.content.PipeDataWriter)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor? OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle? opts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OpenTypedAssetFile : Android.Net.Uri * string * Android.OS.Bundle -&gt; Android.Content.Res.AssetFileDescriptor&#xA;override this.OpenTypedAssetFile : Android.Net.Uri * string * Android.OS.Bundle -&gt; Android.Content.Res.AssetFileDescriptor" Usage="contentProvider.OpenTypedAssetFile (uri, mimeTypeFilter, opts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
            a pattern, such as *&amp;#47;*, if the caller does not have specific type
            requirements; in this case the content provider will pick its best
            type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
            these are specific to the content provider being called.</param>
        <summary>Called by a client to open a read-only stream containing data of a
            particular MIME type.</summary>
        <returns>Returns a new AssetFileDescriptor from which the client can
            read data of the desired type.</returns>
        <remarks>
          <para>Called by a client to open a read-only stream containing data of a
            particular MIME type.  This is like <c>#openAssetFile(Uri, String)</c>,
            except the file can only be read-only and the content provider may
            perform data conversions to generate data of the desired type.</para>
          <para>The default implementation compares the given mimeType against the
            result of <c>#getType(Uri)</c> and, if they match, simply calls
            <c>#openAssetFile(Uri, String)</c>.</para>
          <para>See <c>ClipData</c> for examples of the use and implementation
            of this method.</para>
          <para>The returned AssetFileDescriptor can be a pipe or socket pair to enable
            streaming of data.
            
            &lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.
            You may also want to support other common columns if you have additional meta-data
            to supply, such as <c>android.provider.MediaStore.MediaColumns#DATE_ADDED</c>
            in <c>android.provider.MediaStore.MediaColumns</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openTypedAssetFile(android.net.Uri,%20java.lang.String,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor? OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle? opts, Android.OS.CancellationSignal? signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,Android.OS.Bundle,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member OpenTypedAssetFile : Android.Net.Uri * string * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; Android.Content.Res.AssetFileDescriptor&#xA;override this.OpenTypedAssetFile : Android.Net.Uri * string * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; Android.Content.Res.AssetFileDescriptor" Usage="contentProvider.OpenTypedAssetFile (uri, mimeTypeFilter, opts, signal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
            a pattern, such as *&amp;#47;*, if the caller does not have specific type
            requirements; in this case the content provider will pick its best
            type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
            these are specific to the content provider being called.</param>
        <param name="signal">A signal to cancel the operation in progress, or
                       <c>null</c> if none. For example, if you are downloading a
                       file from the network to service a "rw" mode request, you
                       should periodically call
                       <c>CancellationSignal#throwIfCanceled()</c> to check whether
                       the client has canceled the request and abort the download.</param>
        <summary>Called by a client to open a read-only stream containing data of a
            particular MIME type.</summary>
        <returns>Returns a new AssetFileDescriptor from which the client can
            read data of the desired type.</returns>
        <remarks>
          <para>Called by a client to open a read-only stream containing data of a
            particular MIME type.  This is like <c>#openAssetFile(Uri, String)</c>,
            except the file can only be read-only and the content provider may
            perform data conversions to generate data of the desired type.</para>
          <para>The default implementation compares the given mimeType against the
            result of <c>#getType(Uri)</c> and, if they match, simply calls
            <c>#openAssetFile(Uri, String)</c>.</para>
          <para>See <c>ClipData</c> for examples of the use and implementation
            of this method.</para>
          <para>The returned AssetFileDescriptor can be a pipe or socket pair to enable
            streaming of data.
            
            &lt;p class="note"&gt;For better interoperability with other applications, it is recommended
            that for any URIs that can be opened, you also support queries on them
            containing at least the columns specified by <c>android.provider.OpenableColumns</c>.
            You may also want to support other common columns if you have additional meta-data
            to supply, such as <c>android.provider.MediaStore.MediaColumns#DATE_ADDED</c>
            in <c>android.provider.MediaStore.MediaColumns</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#openTypedAssetFile(android.net.Uri,%20java.lang.String,%20android.os.Bundle,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor? Query (Android.Net.Uri uri, string[]? projection, Android.OS.Bundle? queryArgs, Android.OS.CancellationSignal? cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, class Android.OS.Bundle queryArgs, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],Android.OS.Bundle,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member Query : Android.Net.Uri * string[] * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; Android.Database.ICursor&#xA;override this.Query : Android.Net.Uri * string[] * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; Android.Database.ICursor" Usage="contentProvider.Query (uri, projection, queryArgs, cancellationSignal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="queryArgs" Type="Android.OS.Bundle" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client.</param>
        <param name="projection">The list of columns to put into the cursor.
                       If <c>null</c> provide a default set of columns.</param>
        <param name="queryArgs">A Bundle containing additional information necessary for
                       the operation. Arguments may include SQL style arguments, such
                       as <c>ContentResolver#QUERY_ARG_SQL_LIMIT</c>, but note that
                       the documentation for each individual provider will indicate
                       which arguments they support.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress,
                       or <c>null</c>.</param>
        <summary>Implement this to handle query requests where the arguments are packed into a <c>Bundle</c>.</summary>
        <returns>a Cursor or <c>null</c>.</returns>
        <remarks>
          <para>Implement this to handle query requests where the arguments are packed into a <c>Bundle</c>.
            Arguments may include traditional SQL style query arguments. When present these
            should be handled  according to the contract established in
            <c>#query(Uri, String[], String, String[], String, CancellationSignal)</c>.</para>
          <para>Traditional SQL arguments can be found in the bundle using the following keys:
            &lt;li&gt;<c>android.content.ContentResolver#QUERY_ARG_SQL_SELECTION</c>&lt;li&gt;<c>android.content.ContentResolver#QUERY_ARG_SQL_SELECTION_ARGS</c>&lt;li&gt;<c>android.content.ContentResolver#QUERY_ARG_SQL_SORT_ORDER</c></para>
          <para>This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>Example client call:</para>
          <para />
          <code lang="text/java">// Request 20 records starting at row index 30.
                   Bundle queryArgs = new Bundle();
                   queryArgs.putInt(ContentResolver.QUERY_ARG_OFFSET, 30);
                   queryArgs.putInt(ContentResolver.QUERY_ARG_LIMIT, 20);
            
                   Cursor cursor = getContentResolver().query(
                            contentUri,    // Content Uri is specific to individual content providers.
                            projection,    // String[] describing which columns to return.
                            queryArgs,     // Query arguments.
                            null);         // Cancellation signal.</code>
          <para>Example implementation:</para>
          <para />
          <code lang="text/java">int recordsetSize = 0x1000;  // Actual value is implementation specific.
                    queryArgs = queryArgs != null ? queryArgs : Bundle.EMPTY;  // ensure queryArgs is non-null
            
                    int offset = queryArgs.getInt(ContentResolver.QUERY_ARG_OFFSET, 0);
                    int limit = queryArgs.getInt(ContentResolver.QUERY_ARG_LIMIT, Integer.MIN_VALUE);
            
                    MatrixCursor c = new MatrixCursor(PROJECTION, limit);
            
                    // Calculate the number of items to include in the cursor.
                    int numItems = MathUtils.constrain(recordsetSize - offset, 0, limit);
            
                    // Build the paged result set....
                    for (int i = offset; i &lt; offset + numItems; i++) {
                        // populate row from your data.
                    }
            
                    Bundle extras = new Bundle();
                    c.setExtras(extras);
            
                    // Any QUERY_ARG_* key may be included if honored.
                    // In an actual implementation, include only keys that are both present in queryArgs
                    // and reflected in the Cursor output. For example, if QUERY_ARG_OFFSET were included
                    // in queryArgs, but was ignored because it contained an invalid value (like –273),
                    // then QUERY_ARG_OFFSET should be omitted.
                    extras.putStringArray(ContentResolver.EXTRA_HONORED_ARGS, new String[] {
                        ContentResolver.QUERY_ARG_OFFSET,
                        ContentResolver.QUERY_ARG_LIMIT
                    });
            
                    extras.putInt(ContentResolver.EXTRA_TOTAL_COUNT, recordsetSize);
            
                    cursor.setNotificationUri(getContext().getContentResolver(), uri);
            
                    return cursor;</code>
          <para>See <c>#query(Uri, String[], String, String[], String, CancellationSignal)</c>
            for implementation details.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#query(android.net.Uri,%20java.lang.String[],%20android.os.Bundle,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor? Query (Android.Net.Uri uri, string[]? projection, string? selection, string[]? selectionArgs, string? sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String,System.String[],System.String)" />
      <MemberSignature Language="F#" Value="abstract member Query : Android.Net.Uri * string[] * string * string[] * string -&gt; Android.Database.ICursor" Usage="contentProvider.Query (uri, projection, selection, selectionArgs, sortOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
                 if the client is requesting a specific record, the URI will end in a record number
                 that the implementation should parse and add to a WHERE or HAVING clause, specifying
                 that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
                 <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
                 If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
                 the values from selectionArgs, in order that they appear in the selection.
                 The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
                 If <c>null</c> then the provider is free to define the sort order.</param>
        <summary>Implement this to handle query requests from clients.</summary>
        <returns>a Cursor or <c>null</c>.</returns>
        <remarks>
          <para>Implement this to handle query requests from clients.</para>
          <para>Apps targeting <c>android.os.Build.VERSION_CODES#O</c> or higher should override
            <c>#query(Uri, String[], Bundle, CancellationSignal)</c> and provide a stub
            implementation of this method.</para>
          <para>This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>Example client call:</para>
          <para />
          <code lang="text/java">// Request a specific record.
            Cursor managedCursor = managedQuery(
                            ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                            projection,    // Which columns to return.
                            null,          // WHERE clause.
                            null,          // WHERE clause value substitution
                            People.NAME + " ASC");   // Sort order.</code>
          <para>Example implementation:</para>
          <para />
          <code lang="text/java">// SQLiteQueryBuilder is a helper class that creates the
                    // proper SQL syntax for us.
                    SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();
            
                    // Set the table we're querying.
                    qBuilder.setTables(DATABASE_TABLE_NAME);
            
                    // If the query ends in a specific record number, we're
                    // being asked for a specific record, so set the
                    // WHERE clause in our query.
                    if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
                        qBuilder.appendWhere("_id=" + uri.getPathLeafId());
                    }
            
                    // Make the query.
                    Cursor c = qBuilder.query(mDb,
                            projection,
                            selection,
                            selectionArgs,
                            groupBy,
                            having,
                            sortOrder);
                    c.setNotificationUri(getContext().getContentResolver(), uri);
                    return c;</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#query(android.net.Uri,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor? Query (Android.Net.Uri uri, string[]? projection, string? selection, string[]? selectionArgs, string? sortOrder, Android.OS.CancellationSignal? cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String,System.String[],System.String,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member Query : Android.Net.Uri * string[] * string * string[] * string * Android.OS.CancellationSignal -&gt; Android.Database.ICursor&#xA;override this.Query : Android.Net.Uri * string[] * string * string[] * string * Android.OS.CancellationSignal -&gt; Android.Database.ICursor" Usage="contentProvider.Query (uri, projection, selection, selectionArgs, sortOrder, cancellationSignal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
                 if the client is requesting a specific record, the URI will end in a record number
                 that the implementation should parse and add to a WHERE or HAVING clause, specifying
                 that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
                 <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
                 If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
                 the values from selectionArgs, in order that they appear in the selection.
                 The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
                 If <c>null</c> then the provider is free to define the sort order.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or <c>null</c> if none.
            If the operation is canceled, then <c>android.os.OperationCanceledException</c> will be thrown
            when the query is executed.</param>
        <summary>Implement this to handle query requests from clients with support for cancellation.</summary>
        <returns>a Cursor or <c>null</c>.</returns>
        <remarks>
          <para>Implement this to handle query requests from clients with support for cancellation.</para>
          <para>Apps targeting <c>android.os.Build.VERSION_CODES#O</c> or higher should override
            <c>#query(Uri, String[], Bundle, CancellationSignal)</c> instead of this method.</para>
          <para>This method can be called from multiple threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>Example client call:</para>
          <para />
          <code lang="text/java">// Request a specific record.
            Cursor managedCursor = managedQuery(
                            ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                            projection,    // Which columns to return.
                            null,          // WHERE clause.
                            null,          // WHERE clause value substitution
                            People.NAME + " ASC");   // Sort order.</code>
          <para>Example implementation:</para>
          <para />
          <code lang="text/java">// SQLiteQueryBuilder is a helper class that creates the
                    // proper SQL syntax for us.
                    SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();
            
                    // Set the table we're querying.
                    qBuilder.setTables(DATABASE_TABLE_NAME);
            
                    // If the query ends in a specific record number, we're
                    // being asked for a specific record, so set the
                    // WHERE clause in our query.
                    if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
                        qBuilder.appendWhere("_id=" + uri.getPathLeafId());
                    }
            
                    // Make the query.
                    Cursor c = qBuilder.query(mDb,
                            projection,
                            selection,
                            selectionArgs,
                            groupBy,
                            having,
                            sortOrder);
                    c.setNotificationUri(getContext().getContentResolver(), uri);
                    return c;</code>
          <para>If you implement this method then you must also implement the version of
            <c>#query(Uri, String[], String, String[], String)</c> that does not take a cancellation
            signal to ensure correct operation on older versions of the Android Framework in
            which the cancellation signal overload was not available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#query(android.net.Uri,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReadPermission">
      <MemberSignature Language="C#" Value="public string? ReadPermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReadPermission" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.ReadPermission" />
      <MemberSignature Language="F#" Value="member this.ReadPermission : string with get, set" Usage="Android.Content.ContentProvider.ReadPermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getReadPermission", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getReadPermission", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setReadPermission", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setReadPermission", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Obsolete("Please use SetReadPermission() instead. This setter is not really public in Android API and will vanish in the future versions.")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Obsolete("Please use SetReadPermission() instead. This setter is not really public in Android API and will vanish in the future versions.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="permission">Name of the permission required for read-only access.</param>
        <summary>Return the name of the permission required for read-only access to
            this content provider. -or- Change the permission required to read data from the content
            provider.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return the name of the permission required for read-only access to
            this content provider.  This method can be called from multiple
            threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getReadPermission()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getReadPermission()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Change the permission required to read data from the content
            provider.  This is normally set for you from its manifest information
            when the provider is first created.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#setReadPermission(java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.setReadPermission(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual bool Refresh (Android.Net.Uri? uri, Android.OS.Bundle? extras, Android.OS.CancellationSignal? cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Refresh(class Android.Net.Uri uri, class Android.OS.Bundle extras, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Refresh(Android.Net.Uri,Android.OS.Bundle,Android.OS.CancellationSignal)" />
      <MemberSignature Language="F#" Value="abstract member Refresh : Android.Net.Uri * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; bool&#xA;override this.Refresh : Android.Net.Uri * Android.OS.Bundle * Android.OS.CancellationSignal -&gt; bool" Usage="contentProvider.Refresh (uri, extras, cancellationSignal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("refresh", "(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z", "GetRefresh_Landroid_net_Uri_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("refresh", "(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z", "GetRefresh_Landroid_net_Uri_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The Uri identifying the data to refresh.</param>
        <param name="extras">Additional options from the client. The definitions of
                       these are specific to the content provider being called.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress,
                       or <c>null</c> if none. For example, if you called refresh on
                       a particular uri, you should call
                       <c>CancellationSignal#throwIfCanceled()</c> to check whether
                       the client has canceled the refresh request.</param>
        <summary>Implement this to support refresh of content identified by <c>uri</c>.</summary>
        <returns>true if the provider actually tried refreshing.</returns>
        <remarks>
          <para>Implement this to support refresh of content identified by <c>uri</c>.
            By default, this method returns false; providers who wish to implement
            this should return true to signal the client that the provider has tried
            refreshing with its own implementation.</para>
          <para>This allows clients to request an explicit refresh of content identified
            by <c>uri</c>.</para>
          <para>Client code should only invoke this method when there is a strong
            indication (such as a user initiated pull to refresh gesture) that the
            content is stale.</para>
          <para>Remember to send
            <c>ContentResolver#notifyChange(Uri, android.database.ContentObserver)</c>
            notifications when content changes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#refresh(android.net.Uri,%20android.os.Bundle,%20android.os.CancellationSignal)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.refresh(android.net.Uri, android.os.Bundle, android.os.CancellationSignal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireContext">
      <MemberSignature Language="C#" Value="public Android.Content.Context RequireContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.Context RequireContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.RequireContext" />
      <MemberSignature Language="F#" Value="member this.RequireContext : unit -&gt; Android.Content.Context" Usage="contentProvider.RequireContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requireContext", "()Landroid/content/Context;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requireContext", "()Landroid/content/Context;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a Non-Nullable Context this provider is running in, this is intended to be called
            after <c>#onCreate</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Retrieves a Non-Nullable Context this provider is running in, this is intended to be called
            after <c>#onCreate</c>. When called before context was created, an IllegalStateException
            will be thrown.</para>
          <para>Note A provider must be declared in the manifest and created automatically by the system,
            and context is only available after <c>#onCreate</c> is called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#requireContext()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.requireContext()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreCallingIdentity">
      <MemberSignature Language="C#" Value="public void RestoreCallingIdentity (Android.Content.ContentProvider.CallingIdentity identity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreCallingIdentity(class Android.Content.ContentProvider/CallingIdentity identity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.RestoreCallingIdentity(Android.Content.ContentProvider.CallingIdentity)" />
      <MemberSignature Language="F#" Value="member this.RestoreCallingIdentity : Android.Content.ContentProvider.CallingIdentity -&gt; unit" Usage="contentProvider.RestoreCallingIdentity identity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("restoreCallingIdentity", "(Landroid/content/ContentProvider$CallingIdentity;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("restoreCallingIdentity", "(Landroid/content/ContentProvider$CallingIdentity;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identity" Type="Android.Content.ContentProvider+CallingIdentity" />
      </Parameters>
      <Docs>
        <param name="identity">To be added.</param>
        <summary>Restore the identity of the incoming IPC on the current thread back to a
            previously identity that was returned by <c>#clearCallingIdentity</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#restoreCallingIdentity(android.content.CallingIdentity)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.restoreCallingIdentity(android.content.CallingIdentity)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPathPermissions">
      <MemberSignature Language="C#" Value="protected void SetPathPermissions (Android.Content.PM.PathPermission[]? permissions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPathPermissions(class Android.Content.PM.PathPermission[] permissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.SetPathPermissions(Android.Content.PM.PathPermission[])" />
      <MemberSignature Language="F#" Value="member this.SetPathPermissions : Android.Content.PM.PathPermission[] -&gt; unit" Usage="contentProvider.SetPathPermissions permissions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPathPermissions", "([Landroid/content/pm/PathPermission;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPathPermissions", "([Landroid/content/pm/PathPermission;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="Android.Content.PM.PathPermission[]" />
      </Parameters>
      <Docs>
        <param name="permissions">Array of path permission descriptions.</param>
        <summary>Change the path-based permission required to read and/or write data in
            the content provider.</summary>
        <remarks>
          <para>Change the path-based permission required to read and/or write data in
            the content provider.  This is normally set for you from its manifest
            information when the provider is first created.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#setPathPermissions(android.content.pm.PathPermission[])" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.setPathPermissions(android.content.pm.PathPermission[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="SetReadPermission">
      <MemberSignature Language="C#" Value="protected void SetReadPermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetReadPermission(string permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.SetReadPermission(System.String)" />
      <MemberSignature Language="F#" Value="member this.SetReadPermission : string -&gt; unit" Usage="contentProvider.SetReadPermission permission" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWritePermission">
      <MemberSignature Language="C#" Value="protected void SetWritePermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetWritePermission(string permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.SetWritePermission(System.String)" />
      <MemberSignature Language="F#" Value="member this.SetWritePermission : string -&gt; unit" Usage="contentProvider.SetWritePermission permission" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public virtual void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Shutdown" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit&#xA;override this.Shutdown : unit -&gt; unit" Usage="contentProvider.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to shut down the ContentProvider instance.</summary>
        <remarks>
          <para>Implement this to shut down the ContentProvider instance. You can then
            invoke this method in unit tests.</para>
          <para>Android normally handles ContentProvider startup and shutdown
            automatically. You do not need to start up or shut down a
            ContentProvider. When you invoke a test method on a ContentProvider,
            however, a ContentProvider instance is started and keeps running after
            the test finishes, even if a succeeding test instantiates another
            ContentProvider. A conflict develops because the two instances are
            usually running against the same underlying data source (for example, an
            sqlite database).</para>
          <para>Implementing shutDown() avoids this conflict by providing a way to
            terminate the ContentProvider. This method can also prevent memory leaks
            from multiple instantiations of the ContentProvider, and it can ensure
            unit test isolation by allowing you to completely clean up the test
            fixture before moving on to the next test.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#shutdown()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.shutdown()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Content.ContentProvider.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Content.ContentProvider.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uncanonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri? Uncanonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Uncanonicalize(class Android.Net.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Uncanonicalize(Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="abstract member Uncanonicalize : Android.Net.Uri -&gt; Android.Net.Uri&#xA;override this.Uncanonicalize : Android.Net.Uri -&gt; Android.Net.Uri" Usage="contentProvider.Uncanonicalize url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetUncanonicalize_Landroid_net_Uri_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetUncanonicalize_Landroid_net_Uri_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to remove any canonicalization from.</param>
        <summary>Remove canonicalization from canonical URIs previously returned by
            <c>#canonicalize</c>.</summary>
        <returns>Return the non-canonical representation of &lt;var&gt;url&lt;/var&gt;, return
            the &lt;var&gt;url&lt;/var&gt; as-is if there is nothing to do, or return null if
            the data identified by the canonical representation can not be found in
            the current environment.</returns>
        <remarks>
          <para>Remove canonicalization from canonical URIs previously returned by
            <c>#canonicalize</c>.  For example, if your implementation is to add
            a query param to canonicalize a URI, this method can simply trip any
            query params on the URI.  The default implementation always returns the
            same &lt;var&gt;url&lt;/var&gt; that was passed in.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#uncanonicalize(android.net.Uri)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.uncanonicalize(android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual int Update (Android.Net.Uri uri, Android.Content.ContentValues? values, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Update(Android.Net.Uri,Android.Content.ContentValues,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member Update : Android.Net.Uri * Android.Content.ContentValues * Android.OS.Bundle -&gt; int&#xA;override this.Update : Android.Net.Uri * Android.Content.ContentValues * Android.OS.Bundle -&gt; int" Usage="contentProvider.Update (uri, values, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Landroid_os_Bundle_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Landroid_os_Bundle_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This can potentially have a record ID if
                       this is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.</param>
        <param name="extras">A Bundle containing additional information necessary for
                       the operation. Arguments may include SQL style arguments, such
                       as <c>ContentResolver#QUERY_ARG_SQL_LIMIT</c>, but note that
                       the documentation for each individual provider will indicate
                       which arguments they support.</param>
        <summary>Implement this to handle requests to update one or more rows.</summary>
        <returns>the number of rows affected.</returns>
        <remarks>
          <para>Implement this to handle requests to update one or more rows. The
            implementation should update all rows matching the selection to set the
            columns according to the provided values map. As a courtesy, call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after updating. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#update(android.net.Uri,%20android.content.ContentValues,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.update(android.net.Uri, android.content.ContentValues, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract int Update (Android.Net.Uri uri, Android.Content.ContentValues? values, string? selection, string[]? selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, string selection, string[] selectionArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Content.ContentProvider.Update(Android.Net.Uri,Android.Content.ContentValues,System.String,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Update : Android.Net.Uri * Android.Content.ContentValues * string * string[] -&gt; int" Usage="contentProvider.Update (uri, values, selection, selectionArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="selectionArgs">To be added.</param>
        <param name="uri">The URI to query. This can potentially have a record ID if
                       this is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.</param>
        <param name="selection">An optional filter to match rows to update.</param>
        <summary>Implement this to handle requests to update one or more rows.</summary>
        <returns>the number of rows affected.</returns>
        <remarks>
          <para>Implement this to handle requests to update one or more rows. The
            implementation should update all rows matching the selection to set the
            columns according to the provided values map. As a courtesy, call
            <c>ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver)
            notifyChange()</c> after updating. This method can be called from multiple
            threads, as described in Processes
            and Threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#update(android.net.Uri,%20android.content.ContentValues,%20java.lang.String,%20java.lang.String[])" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WritePermission">
      <MemberSignature Language="C#" Value="public string? WritePermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WritePermission" />
      <MemberSignature Language="DocId" Value="P:Android.Content.ContentProvider.WritePermission" />
      <MemberSignature Language="F#" Value="member this.WritePermission : string with get, set" Usage="Android.Content.ContentProvider.WritePermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWritePermission", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWritePermission", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setWritePermission", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setWritePermission", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Obsolete("Please use SetWritePermission() instead. This setter is not really public in Android API and will vanish in the future versions.")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Obsolete("Please use SetWritePermission() instead. This setter is not really public in Android API and will vanish in the future versions.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="permission">Name of the permission required for read/write access.</param>
        <summary>Return the name of the permission required for read/write access to
            this content provider. -or- Change the permission required to read and write data in the content
            provider.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return the name of the permission required for read/write access to
            this content provider.  This method can be called from multiple
            threads, as described in
            <see href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
            and Threads</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#getWritePermission()" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.getWritePermission()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Change the permission required to read and write data in the content
            provider.  This is normally set for you from its manifest information
            when the provider is first created.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/content/ContentProvider#setWritePermission(java.lang.String)" title="Reference documentation">Java documentation for <code>android.content.ContentProvider.setWritePermission(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
