<Type Name="ContentProvider" FullName="Android.Content.ContentProvider">
  <TypeSignature Language="C#" Value="public abstract class ContentProvider : Java.Lang.Object, Android.Content.IComponentCallbacks2, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContentProvider extends Java.Lang.Object implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/ContentProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Content providers are one of the primary building blocks of Android applications, providing
 content to applications.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Content providers are one of the primary building blocks of Android applications, providing
 content to applications. They encapsulate data and provide it to applications through the single
 <c><see cref="T:Android.Content.ContentResolver" /></c> interface. A content provider is only required if you need to share
 data between multiple applications. For example, the contacts data is used by multiple
 applications and must be stored in a content provider. If you don't need to share data amongst
 multiple applications you can use a database directly via
 <c><see cref="T:Android.Database.Sqlite.SQLiteDatabase" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">When a request is made via
 a <c><see cref="T:Android.Content.ContentResolver" /></c> the system inspects the authority of the given URI and passes the
 request to the content provider registered with the authority. The content provider can interpret
 the rest of the URI however it wants. The <c><see cref="T:Android.Content.UriMatcher" /></c> class is helpful for parsing
 URIs.</para>
      <para tool="javadoc-to-mdoc">The primary methods that need to be implemented are:
 <list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c> which is called to initialize the provider</term></item><item><term><c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c> which returns data to the caller</term></item><item><term><c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> which inserts new data into the content provider</term></item><item><term><c><see cref="M:Android.Content.ContentProvider.Update(Android.Net.Uri,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c> which updates existing data in the content provider</term></item><item><term><c><see cref="M:Android.Content.ContentProvider.Delete(Android.Net.Uri,System.String,System.String)" /></c> which deletes data from the content provider</term></item><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> which returns the MIME type of data in the content provider</term></item></list></para>
      <para tool="javadoc-to-mdoc">Data access methods (such as <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> and
 <c><see cref="M:Android.Content.ContentProvider.Update(Android.Net.Uri,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c>) may be called from many threads at once, and must be thread-safe.
 Other methods (such as <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c>) are only called from the application
 main thread, and must avoid performing lengthy operations.  See the method
 descriptions for their expected thread behavior.</para>
      <para tool="javadoc-to-mdoc">Requests to <c><see cref="T:Android.Content.ContentResolver" /></c> are automatically forwarded to the appropriate
 ContentProvider instance, so subclasses don't have to worry about the details of
 cross-process calls.</para>
      <format type="text/html">
        <h3>Developer Guides</h3>
      </format>
      <para tool="javadoc-to-mdoc">For more information about using content providers, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/providers/content-providers.html">Content Providers</a></format>
 developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <!-- jd-descr  -->
        <format type="text/html">
          <h2>Summary</h2>
        </format>
        <!-- ======== NESTED CLASS SUMMARY ========  -->
        <format type="text/html">
          <table id="nestedclasses" class="jd-sumtable">
            <tr>
              <th colspan="12">Nested Classes</th>
            </tr>
            <tr class="alt-color api apilevel-11">
              <td class="jd-typecol">
                <nobr>
        
         
         
        
        interface</nobr>
              </td>
              <td class="jd-linkcol">
                <see cref="!:NoType:android/content/ContentProvider$PipeDataWriter;Href=../../../reference/android/content/ContentProvider.PipeDataWriter.html" />&lt;T&gt;</td>
              <td class="jd-descrcol" width="100%">
        Interface to write a stream of data to a pipe.Â 
        
    

      </td>
            </tr>
            <!-- =========== ENUM CONSTANT SUMMARY ===========  -->
            <table id="inhconstants" class="jd-sumtable">
              <tr>
                <th>Inherited Constants</th>
              </tr>
              <tr class="api apilevel-">
                <td colspan="12">From interface
<see cref="T:Android.Content.ComponentCallbacks2" /><table class="jd-sumtable-expando"><tr class="alt-color api apilevel-14"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process has gone on to the
 LRU list.
          
    

        </td></tr><tr class=" api apilevel-14"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process is nearing the end
 of the background LRU list, and if more memory isn't found soon it will
 be killed.
          
    

        </td></tr><tr class="alt-color api apilevel-14"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process is around the middle
 of the background LRU list; freeing memory can help the system keep
 other processes running later in the list for better overall performance.
          
    

        </td></tr><tr class=" api apilevel-16"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process is not an expendable
 background process, but the device is running extremely low on memory
 and is about to not be able to keep any background processes running.
          
    

        </td></tr><tr class="alt-color api apilevel-16"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process is not an expendable
 background process, but the device is running low on memory.
          
    

        </td></tr><tr class=" api apilevel-16"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process is not an expendable
 background process, but the device is running moderately low on memory.
          
    

        </td></tr><tr class="alt-color api apilevel-14"><td class="jd-typecol">int</td><td class="jd-linkcol"><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></td><td class="jd-descrcol" width="100%">
          Level for <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c>: the process had been showing
 a user interface, and is no longer doing so.
          
    

        </td></tr></table></td>
              </tr>
            </table>
            <!-- ======== CONSTRUCTOR SUMMARY ========  -->
            <table id="pubctors" class="jd-sumtable">
              <tr>
                <th colspan="12">Public Constructors</th>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr />
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="C:Android.Content.ContentProvider" />()</nobr>
          Construct a ContentProvider instance.
          
    

        </td>
              </tr>
            </table>
            <!-- ========== METHOD SUMMARY ===========  -->
            <table id="pubmethods" class="jd-sumtable">
              <tr>
                <th colspan="12">Public Methods</th>
              </tr>
              <tr class="alt-color api apilevel-5">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Content.ContentProviderResult" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="!:Android.Content.ContentProvider.applyBatch(java.util.ArrayList&lt;android.content.ContentProviderOperation&gt;)" />(<see cref="T:Android.Runtime.JavaList" />&lt;<see cref="T:Android.Content.ContentProviderOperation" />&gt; operations)</nobr>
          Override this to handle requests to perform a batch of operations, or the
 default implementation will iterate over the operations and call
 <c><see cref="M:Android.Content.ContentProviderOperation.Apply(Android.Content.ContentProvider,Android.Content.ContentProviderResult[],Android.Content.ContentProviderResult[])" /></c> on each of them.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.AttachInfo(Android.Content.Context,Android.Content.PM.ProviderInfo)" />(<see cref="T:Android.Content.Context" /> context, <see cref="T:Android.Content.PM.ProviderInfo" /> info)</nobr>
          After being instantiated, this is called to tell the content provider
 about itself.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            int</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.BulkInsert(Android.Net.Uri,Android.Content.ContentValues[])" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values)</nobr>
          Override this to handle requests to insert a set of new rows, or the
 default implementation will iterate over the values and call
 <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> on each of them.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-11">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.OS.Bundle" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Call(System.String,System.String,System.String)" />(<see cref="T:Java.Lang.String" /> method, <see cref="T:Java.Lang.String" /> arg, <see cref="T:Android.OS.Bundle" /> extras)</nobr>
          Call a provider-defined method.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Net.Uri" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" />(<see cref="T:Android.Net.Uri" /> url)</nobr>
          Implement this to support canonicalization of URIs that refer to your
 content provider.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            int</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Delete(Android.Net.Uri,System.String,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs)</nobr>
          Implement this to handle requests to delete one or more rows.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-18">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Dump(Java.IO.FileDescriptor,Java.IO.PrintWriter,Java.IO.PrintWriter)" />(<see cref="T:Java.IO.FileDescriptor" /> fd, <see cref="T:Java.IO.PrintWriter" /> writer, <see cref="T:Java.Lang.String" /> args)</nobr>
          Print the Provider's state into the given stream.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Java.Lang.String" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.CallingPackage" />()</nobr>
          Return the package name of the caller that initiated the request being
 processed on the current thread.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Android.Content.Context" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.Context" />()</nobr>
          Retrieves the Context this provider is running in.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-4">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Android.Content.PM.PathPermission" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.GetPathPermissions" />()</nobr>
          Return the path-based permissions required for read and/or write access to
 this content provider.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Java.Lang.String" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.ReadPermission" />()</nobr>
          Return the name of the permission required for read-only access to
 this content provider.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-11">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Java.Lang.String" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter)</nobr>
          Called by a client to determine the types of data streams that this
 content provider supports for the given URI.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            <see cref="T:Java.Lang.String" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />(<see cref="T:Android.Net.Uri" /> uri)</nobr>
          Implement this to handle requests for the MIME type of the data at the
 given URI.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Java.Lang.String" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.WritePermission" />()</nobr>
          Return the name of the permission required for read/write access to
 this content provider.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            <see cref="T:Android.Net.Uri" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values)</nobr>
          Implement this to handle requests to insert a new row.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OnConfigurationChanged(Android.Content.Res.Configuration)" />(<see cref="T:Android.Content.Res.Configuration" /> newConfig)</nobr>
          Called by the system when the device configuration changes while your
 component is running.
 This method is always called on the application main thread, and must
 not perform lengthy operations.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            boolean</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OnCreate" />()</nobr>
          Implement this to initialize your content provider on startup.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OnLowMemory" />()</nobr>
          This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.
 This method is always called on the application main thread, and must
 not perform lengthy operations.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-14">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OnTrimMemory(Android.Content.TrimMemory)" />(int level)</nobr>
          Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Content.Res.AssetFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode, <see cref="T:Android.OS.CancellationSignal" /> signal)</nobr>
          This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-3">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Content.Res.AssetFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</nobr>
          This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.OS.ParcelFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</nobr>
          Override this to handle requests to open a file blob.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.OS.ParcelFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode, <see cref="T:Android.OS.CancellationSignal" /> signal)</nobr>
          Override this to handle requests to open a file blob.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-11">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            &lt;T&gt;
            <see cref="T:Android.OS.ParcelFileDescriptor" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="!:Android.Content.ContentProvider.openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,T,android.content.ContentProvider.PipeDataWriter&lt;T&gt;)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeType, <see cref="T:Android.OS.Bundle" /> opts, T args, <see cref="!:NoType:android/content/ContentProvider$PipeDataWriter;Href=../../../reference/android/content/ContentProvider.PipeDataWriter.html" />&lt;T&gt; func)</nobr>
          A helper function for implementing <c><see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String)" /></c>, for
 creating a data pipe and background thread allowing you to stream
 generated data back to the client.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-11">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Content.Res.AssetFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter, <see cref="T:Android.OS.Bundle" /> opts)</nobr>
          Called by a client to open a read-only stream containing data of a
 particular MIME type.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Content.Res.AssetFileDescriptor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter, <see cref="T:Android.OS.Bundle" /> opts, <see cref="T:Android.OS.CancellationSignal" /> signal)</nobr>
          Called by a client to open a read-only stream containing data of a
 particular MIME type.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            <see cref="T:Android.Database.ICursor" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> projection, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs, <see cref="T:Java.Lang.String" /> sortOrder)</nobr>
          Implement this to handle query requests from clients.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-16">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Database.ICursor" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[],System.String[])" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> projection, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs, <see cref="T:Java.Lang.String" /> sortOrder, <see cref="T:Android.OS.CancellationSignal" /> cancellationSignal)</nobr>
          Implement this to handle query requests from clients with support for cancellation.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-11">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Shutdown" />()</nobr>
          Implement this to shut down the ContentProvider instance.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-19">
                <td class="jd-typecol">
                  <nobr>
                    <see cref="T:Android.Net.Uri" />
                  </nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Uncanonicalize(Android.Net.Uri)" />(<see cref="T:Android.Net.Uri" /> url)</nobr>
          Remove canonicalization from canonical URIs previously returned by
 <c><see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" /></c>.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            abstract
            
            
            
            
            int</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.Update(Android.Net.Uri,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs)</nobr>
          Implement this to handle requests to update one or more rows.
          
    

        </td>
              </tr>
            </table>
            <!-- ========== METHOD SUMMARY ===========  -->
            <table id="promethods" class="jd-sumtable">
              <tr>
                <th colspan="12">Protected Methods</th>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            
            
            
            boolean</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.IsTemporary" />()</nobr>
          Returns true if this instance is a temporary content provider.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            <see cref="T:Android.OS.ParcelFileDescriptor" /></nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" />(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</nobr>
          Convenience for subclasses that wish to implement <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>
 by looking up a column named "_data" at the given URI.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-4">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="M:Android.Content.ContentProvider.SetPathPermissions(Android.Content.PM.PathPermission[])" />(<see cref="T:Android.Content.PM.PathPermission" /> permissions)</nobr>
          Change the path-based permission required to read and/or write data in
 the content provider.
          
    

        </td>
              </tr>
              <tr class=" api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.ReadPermission" />(<see cref="T:Java.Lang.String" /> permission)</nobr>
          Change the permission required to read data from the content
 provider.
          
    

        </td>
              </tr>
              <tr class="alt-color api apilevel-1">
                <td class="jd-typecol">
                  <nobr>
            
            
            final
            
            
            void</nobr>
                </td>
                <td class="jd-linkcol" width="100%">
                  <nobr>
                    <see cref="P:Android.Content.ContentProvider.WritePermission" />(<see cref="T:Java.Lang.String" /> permission)</nobr>
          Change the permission required to read and write data in the content
 provider.
          
    

        </td>
              </tr>
            </table>
            <!-- ========== METHOD SUMMARY ===========  -->
            <table id="inhmethods" class="jd-sumtable">
              <tr>
                <th>Inherited Methods</th>
              </tr>
              <tr class="api apilevel-">
                <td colspan="12">
From class

  <see cref="T:Java.Lang.Object" /><table class="jd-sumtable-expando"><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr><see cref="T:Java.Lang.Object" /></nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Clone" />()</nobr>
          Creates and returns a copy of this <c>Object</c>.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            
            
            
            boolean</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Equals(Java.Lang.Object)" />(<see cref="T:Java.Lang.Object" /> o)</nobr>
          Compares this instance with the specified object and indicates if they
 are equal.
          
    

        </td></tr><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.JavaFinalize" />()</nobr>
          Invoked when the garbage collector has detected that this instance is no longer reachable.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            <see cref="T:Java.Lang.Class" />&lt;?&gt;</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="P:Java.Lang.Object.Class" />()</nobr>
          Returns the unique instance of <c><see cref="T:Java.Lang.Class" /></c> that represents this
 object's class.
          
    

        </td></tr><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            
            
            
            int</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.GetHashCode" />()</nobr>
          Returns an integer hash code for this object.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Notify" />()</nobr>
          Causes a thread which is waiting on this object's monitor (by means of
 calling one of the <c>wait()</c> methods) to be woken up.
          
    

        </td></tr><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.NotifyAll" />()</nobr>
          Causes all threads which are waiting on this object's monitor (by means
 of calling one of the <c>wait()</c> methods) to be woken up.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr><see cref="T:Java.Lang.String" /></nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.ToString" />()</nobr>
          Returns a string containing a concise, human-readable description of this
 object.
          
    

        </td></tr><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Wait" />()</nobr>
          Causes the calling thread to wait until another thread calls the <c>notify()</c> or <c>notifyAll()</c> method of this object.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Wait(System.Int64,System.Int32)" />(long millis, int nanos)</nobr>
          Causes the calling thread to wait until another thread calls the <c>notify()</c> or <c>notifyAll()</c> method of this object or until the
 specified timeout expires.
          
    

        </td></tr><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            
            
            final
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Java.Lang.Object.Wait(System.Int64)" />(long millis)</nobr>
          Causes the calling thread to wait until another thread calls the <c>notify()</c> or <c>notifyAll()</c> method of this object or until the
 specified timeout expires.
          
    

        </td></tr></table></td>
              </tr>
              <tr class="api apilevel-">
                <td colspan="12">
From interface

  <see cref="T:Android.Content.ComponentCallbacks2" /><table class="jd-sumtable-expando"><tr class="alt-color api apilevel-14"><td class="jd-typecol"><nobr>
            abstract
            
            
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" />(int level)</nobr>
          Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.
          
    

        </td></tr></table></td>
              </tr>
              <tr class="api apilevel-">
                <td colspan="12">
From interface

  <see cref="T:Android.Content.IComponentCallbacks" /><table class="jd-sumtable-expando"><tr class="alt-color api apilevel-1"><td class="jd-typecol"><nobr>
            abstract
            
            
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Android.Content.IComponentCallbacks.OnConfigurationChanged(Android.Content.Res.Configuration)" />(<see cref="T:Android.Content.Res.Configuration" /> newConfig)</nobr>
          Called by the system when the device configuration changes while your
 component is running.
          
    

        </td></tr><tr class=" api apilevel-1"><td class="jd-typecol"><nobr>
            abstract
            
            
            
            
            void</nobr></td><td class="jd-linkcol" width="100%"><nobr><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" />()</nobr>
          This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.
          
    

        </td></tr></table></td>
              </tr>
            </table>
          </table>
        </format>
        <!-- jd-descr (summary)  -->
        <!-- Details  -->
        <!-- XML Attributes  -->
        <!-- Enum Values  -->
        <!-- Constants  -->
        <!-- Fields  -->
        <!-- Public ctors  -->
        <!-- ========= CONSTRUCTOR DETAIL ========  -->
        <format type="text/html">
          <h2>Public Constructors</h2>
        </format>
        <format type="text/html">
          <h4 class="jd-details-title">
        public 
         
         
         
         
        
      ContentProvider()</h4>
        </format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para>
      <para tool="javadoc-to-mdoc">Construct a ContentProvider instance.  Content providers must be
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/provider-element.html">declared
 in the manifest</a></format>, accessed with <c><see cref="T:Android.Content.ContentResolver" /></c>, and created
 automatically by the system, so applications usually do not create
 ContentProvider instances directly.

 </para>
      <para tool="javadoc-to-mdoc">At construction time, the object is uninitialized, and most fields and
 methods are unavailable.  Subclasses should initialize themselves in
 <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c>, not the constructor.

 </para>
      <para tool="javadoc-to-mdoc">Content providers are created on the application main thread at
 application launch time.  The constructor must not perform lengthy
 operations, or application startup will be delayed.
<!-- ========= CONSTRUCTOR DETAIL ========  --><!-- Protected ctors  --><!-- ========= METHOD DETAIL ========  --><!-- Public methdos  --><format type="text/html"><h2>Public Methods</h2></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Content.ContentProviderResult" />applyBatch(<see cref="T:Android.Runtime.JavaList" />&lt;<see cref="T:Android.Content.ContentProviderOperation" />&gt; operations)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 5</a></format></para>
      <para tool="javadoc-to-mdoc">Override this to handle requests to perform a batch of operations, or the
 default implementation will iterate over the operations and call
 <c><see cref="M:Android.Content.ContentProviderOperation.Apply(Android.Content.ContentProvider,Android.Content.ContentProviderResult[],Android.Content.ContentProviderResult[])" /></c> on each of them.
 If all calls to <c><see cref="M:Android.Content.ContentProviderOperation.Apply(Android.Content.ContentProvider,Android.Content.ContentProviderResult[],Android.Content.ContentProviderResult[])" /></c> succeed
 then a <c><see cref="T:Android.Content.ContentProviderResult" /></c> array with as many
 elements as there were operations will be returned.  If any of the calls
 fail, it is up to the implementation how many of the others take effect.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">Parameters</h5>
      </format>
      <format type="text/html">
        <table class="jd-tagtable">
          <tr>
            <th>operations
          <td>the operations to apply</td></th>
          </tr>
        </table>
      </format>
      <format type="text/html">
        <h5 class="jd-tagtitle">Returns</h5>
      </format>
      <list type="bullet">
        <item>
          <term>the results of the applications</term>
        </item>
      </list>
      <format type="text/html">
        <h5 class="jd-tagtitle">Throws</h5>
      </format>
      <format type="text/html">
        <table class="jd-tagtable">
          <tr>
            <th>
              <see cref="T:Android.Content.OperationApplicationException" />
              <td>thrown if any operation fails.</td>
            </th>
          </tr>
        </table>
      </format>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:Android.Content.ContentProviderOperation.Apply(Android.Content.ContentProvider,Android.Content.ContentProviderResult[],Android.Content.ContentProviderResult[])" />
            </c>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h4 class="jd-details-title">
        public 
         
         
         
         
        void
      attachInfo(<see cref="T:Android.Content.Context" /> context, <see cref="T:Android.Content.PM.ProviderInfo" /> info)</h4>
      </format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">After being instantiated, this is called to tell the content provider
 about itself.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>context
          <td>The context this provider is running in</td></th></tr><tr><th>info
          <td>Registered information about this content provider
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        int
      bulkInsert(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Override this to handle requests to insert a set of new rows, or the
 default implementation will iterate over the values and call
 <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> on each of them.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after inserting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The content:// URI of the insertion request.</td></th></tr><tr><th>values
          <td>An array of sets of column_name/value pairs to add to the database.
    This must not be <c>null</c>.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>The number of values that were inserted.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.OS.Bundle" />call(<see cref="T:Java.Lang.String" /> method, <see cref="T:Java.Lang.String" /> arg, <see cref="T:Android.OS.Bundle" /> extras)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 11</a></format><para tool="javadoc-to-mdoc">Call a provider-defined method.  This can be used to implement
 interfaces that are cheaper and/or unnatural for a table-like
 model.

 </para><para tool="javadoc-to-mdoc"><i>WARNING:</i> The framework does no permission checking
 on this entry into the content provider besides the basic ability for the application
 to get access to the provider at all.  For example, it has no idea whether the call
 being executed may read or write data in the provider, so can't enforce those
 individual permissions.  Any implementation of this method <i>must</i>
 do its own permission checks on incoming calls to make sure they are allowed.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>method
          <td>method name to call.  Opaque to framework, but should not be <c>null</c>.</td></th></tr><tr><th>arg
          <td>provider-defined String argument.  May be <c>null</c>.</td></th></tr><tr><th>extras
          <td>provider-defined Bundle argument.  May be <c>null</c>.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>provider-defined return value.  May be <c>null</c>, which is also
   the default for providers which don't implement any call methods.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Net.Uri" />canonicalize(<see cref="T:Android.Net.Uri" /> url)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format><para tool="javadoc-to-mdoc">Implement this to support canonicalization of URIs that refer to your
 content provider.  A canonical URI is one that can be transported across
 devices, backup/restore, and other contexts, and still be able to refer
 to the same data item.  Typically this is implemented by adding query
 params to the URI allowing the content provider to verify that an incoming
 canonical URI references the same data as it was originally intended for and,
 if it doesn't, to find that data (if it exists) in the current environment.

 </para><para tool="javadoc-to-mdoc">For example, if the content provider holds people and a normal URI in it
 is created with a row index into that people database, the cananical representation
 may have an additional query param at the end which specifies the name of the
 person it is intended for.  Later calls into the provider with that URI will look
 up the row of that URI's base index and, if it doesn't match or its entry's
 name doesn't match the name in the query param, perform a query on its database
 to find the correct row to operate on.</para><para tool="javadoc-to-mdoc">If you implement support for canonical URIs, <format type="text/html"><b>all</b></format> incoming calls with
 URIs (including this one) must perform this verification and recovery of any
 canonical URIs they receive.  In addition, you must also implement
 <c><see cref="M:Android.Content.ContentProvider.Uncanonicalize(Android.Net.Uri)" /></c> to strip the canonicalization of any of these URIs.</para><para tool="javadoc-to-mdoc">The default implementation of this method returns null, indicating that
 canonical URIs are not supported.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>url
          <td>The Uri to canonicalize.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Return the canonical representation of <format type="text/html"><var>url</var></format>, or null if
 canonicalization of that Uri is not supported.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        int
      delete(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Implement this to handle requests to delete one or more rows.
 The implementation should apply the selection clause when performing
 deletion, allowing the operation to affect multiple rows in a directory.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after deleting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">The implementation is responsible for parsing out a row ID at the end
 of the URI, if a specific row is being deleted. That is, the client would
 pass in <c>content://contacts/people/22</c> and the implementation is
 responsible for parsing the record number (22) when creating a SQL statement.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The full URI to query, including a row ID (if a specific record is requested).</td></th></tr><tr><th>selection
          <td>An optional restriction to apply to rows when deleting.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>The number of rows affected.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Android.Database.SQLException" /><td /></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        void
      dump(<see cref="T:Java.IO.FileDescriptor" /> fd, <see cref="T:Java.IO.PrintWriter" /> writer, <see cref="T:Java.Lang.String" /> args)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 18</a></format><para tool="javadoc-to-mdoc">Print the Provider's state into the given stream.  This gets invoked if
 you run "adb shell dumpsys activity provider &lt;provider_component_name&gt;".<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>fd
          <td>The raw file descriptor that the dump is being sent to.</td></th></tr><tr><th>writer
          <td>The PrintWriter to which you should dump your state.  This will be
 closed for you after you return.</td></th></tr><tr><th>args
          <td>additional arguments to the dump request.
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
        final 
         
         
        <see cref="T:Java.Lang.String" />getCallingPackage()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format></para><para tool="javadoc-to-mdoc">Return the package name of the caller that initiated the request being
 processed on the current thread. The returned package will have been
 verified to belong to the calling UID. Returns <c>null</c> if not
 currently processing a request.
 </para><para tool="javadoc-to-mdoc">
 This will always return <c>null</c> when processing
 <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> or <c><see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" /></c> requests.</para><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.Lang.SecurityException" /><td>if the calling package doesn't belong to the
             calling UID.
</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="P:Android.OS.Binder.CallingUid" /></c></term></item><item><term><c><see cref="M:Android.Content.Context.GrantUriPermission(System.String,Android.Net.Uri,Android.Net.Uri)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
        final 
         
         
        <see cref="T:Android.Content.Context" />getContext()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Retrieves the Context this provider is running in.  Only available once
 <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c> has been called -- this will return <c>null</c> in the
 constructor.
</para><format type="text/html"><h4 class="jd-details-title">
        public 
         
        final 
         
         
        <see cref="T:Android.Content.PM.PathPermission" />getPathPermissions()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 4</a></format><para tool="javadoc-to-mdoc">Return the path-based permissions required for read and/or write access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para><format type="text/html"><h4 class="jd-details-title">
        public 
         
        final 
         
         
        <see cref="T:Java.Lang.String" />getReadPermission()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Return the name of the permission required for read-only access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Java.Lang.String" />getStreamTypes(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 11</a></format><para tool="javadoc-to-mdoc">Called by a client to determine the types of data streams that this
 content provider supports for the given URI.  The default implementation
 returns <c>null</c>, meaning no types.  If your content provider stores data
 of a particular type, return that MIME type if it matches the given
 mimeTypeFilter.  If it can perform type conversions, return an array
 of all supported MIME types that match mimeTypeFilter.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The data in the content provider being queried.</td></th></tr><tr><th>mimeTypeFilter
          <td>The type of data the client desires.  May be
 a pattern, such as *&amp;#47;* to retrieve all possible data types.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns <c>null</c> if there are no possible data streams for the
 given mimeTypeFilter.  Otherwise returns an array of all available
 concrete MIME types.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String,System.String)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        <see cref="T:Java.Lang.String" />getType(<see cref="T:Android.Net.Uri" /> uri)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Implement this to handle requests for the MIME type of the data at the
 given URI.  The returned MIME type should start with
 <c>vnd.android.cursor.item</c> for a single record,
 or <c>vnd.android.cursor.dir/</c> for multiple items.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">Note that there are no permissions needed for an application to
 access this information; if your content provider requires read and/or
 write permissions, or is not exported, all applications can still call
 this method regardless of their access permissions.  This allows them
 to retrieve the MIME type for a URI when dispatching intents.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>the URI to query.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>a MIME type string, or <c>null</c> if there is no type.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
        final 
         
         
        <see cref="T:Java.Lang.String" />getWritePermission()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Return the name of the permission required for read/write access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        <see cref="T:Android.Net.Uri" />insert(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Implement this to handle requests to insert a new row.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after inserting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The content:// URI of the insertion request. This must not be <c>null</c>.</td></th></tr><tr><th>values
          <td>A set of column_name/value pairs to add to the database.
     This must not be <c>null</c>.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>The URI for the newly inserted item.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        void
      onConfigurationChanged(<see cref="T:Android.Content.Res.Configuration" /> newConfig)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Called by the system when the device configuration changes while your
 component is running.  Note that, unlike activities, other components
 are never restarted when a configuration changes: they must always deal
 with the results of the change, such as by re-retrieving resources.

 </para><para tool="javadoc-to-mdoc">At the time that this function has been called, your Resources
 object will have been updated to return resource values matching the
 new configuration.

 </para><para tool="javadoc-to-mdoc">For more information, read <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/runtime-changes.html">Handling Runtime Changes</a></format>.
 This method is always called on the application main thread, and must
 not perform lengthy operations.

 </para><para tool="javadoc-to-mdoc">The default content provider implementation does nothing.
 Override this method to take appropriate action.
 (Content providers do not usually care about things like screen
 orientation, but may want to know about locale changes.)
<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>newConfig
          <td>The new device configuration.
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        boolean
      onCreate()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Implement this to initialize your content provider on startup.
 This method is called for all registered content providers on the
 application main thread at application launch time.  It must not perform
 lengthy operations, or application startup will be delayed.

 </para><para tool="javadoc-to-mdoc">You should defer nontrivial initialization (such as opening,
 upgrading, and scanning databases) until the content provider is used
 (via <c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>, <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c>, etc).  Deferred initialization
 keeps application startup fast, avoids unnecessary work if the provider
 turns out not to be needed, and stops database errors (such as a full
 disk) from halting application launch.

 </para><para tool="javadoc-to-mdoc">If you use SQLite, <c><see cref="T:Android.Database.Sqlite.SQLiteOpenHelper" /></c>
 is a helpful utility class that makes it easy to manage databases,
 and will automatically defer opening until first use.  If you do use
 SQLiteOpenHelper, make sure to avoid calling
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.ReadableDatabase" /></c> or
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c>
 from this method.  (Instead, override
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c> to initialize the
 database when it is first opened.)</para><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>true if the provider was successfully loaded, false otherwise
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        void
      onLowMemory()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.  While
 the exact point at which this will be called is not defined, generally
 it will happen when all background process have been killed.
 That is, before reaching the point of killing processes hosting
 service and foreground UI that we would like to avoid killing.

 </para><para tool="javadoc-to-mdoc">You should implement this method to release
 any caches or other unnecessary resources you may be holding on to.
 The system will perform a garbage collection for you after returning from this method.
 </para><para tool="javadoc-to-mdoc">Preferably, you should implement <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> from
 <c><see cref="T:Android.Content.ComponentCallbacks2" /></c> to incrementally unload your resources based on various
 levels of memory demands.  That API is available for API level 14 and higher, so you should
 only use this <c><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" /></c> method as a fallback for older versions, which can be
 treated the same as <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> with the <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c> level.</para>

 This method is always called on the application main thread, and must
 not perform lengthy operations.

 <para tool="javadoc-to-mdoc">The default content provider implementation does nothing.
 Subclasses may override this method to take appropriate action.
<format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        void
      onTrimMemory(int level)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 14</a></format></para><para tool="javadoc-to-mdoc">Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.  This will
 happen for example when it goes in the background and there is not enough
 memory to keep as many background processes running as desired.  You
 should never compare to exact values of the level, since new intermediate
 values may be added -- you will typically want to compare if the value
 is greater or equal to a level you are interested in.

 </para><para tool="javadoc-to-mdoc">To retrieve the processes current trim level at any point, you can
 use <c><see cref="M:Android.App.ActivityManager.GetMyMemoryState(.RunningAppProcessInfo)" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>level
          <td>The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Content.Res.AssetFileDescriptor" />openAssetFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode, <see cref="T:Android.OS.CancellationSignal" /> signal)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format><para tool="javadoc-to-mdoc">This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">If you implement this, your clients must be able to deal with such
 file slices, either directly with
 <c><see cref="M:Android.Content.ContentResolver.OpenAssetFileDescriptor(Android.Net.Uri,System.String)" /></c>, or by using the higher-level
 <c><see cref="M:Android.Content.ContentResolver.OpenInputStream(Android.Net.Uri)" /></c>
 or <c><see cref="M:Android.Content.ContentResolver.OpenOutputStream(Android.Net.Uri)" /></c>
 methods.
 </para><para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para><para tool="javadoc-to-mdoc">If you are implementing this to return a full file, you
 should create the AssetFileDescriptor with
 <c><see cref="F:Android.Content.Res.AssetFileDescriptor.UnknownLength" /></c> to be compatible with
 applications that cannot handle sub-sections of files.</para><para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI whose file is to be opened.</td></th></tr><tr><th>mode
          <td>Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</td></th></tr><tr><th>signal
          <td>A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new AssetFileDescriptor which you can use to access
 the file.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Content.Res.AssetFileDescriptor" />openAssetFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 3</a></format><para tool="javadoc-to-mdoc">This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">If you implement this, your clients must be able to deal with such
 file slices, either directly with
 <c><see cref="M:Android.Content.ContentResolver.OpenAssetFileDescriptor(Android.Net.Uri,System.String)" /></c>, or by using the higher-level
 <c><see cref="M:Android.Content.ContentResolver.OpenInputStream(Android.Net.Uri)" /></c>
 or <c><see cref="M:Android.Content.ContentResolver.OpenOutputStream(Android.Net.Uri)" /></c>
 methods.
 </para><para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para><para tool="javadoc-to-mdoc">If you are implementing this to return a full file, you
 should create the AssetFileDescriptor with
 <c><see cref="F:Android.Content.Res.AssetFileDescriptor.UnknownLength" /></c> to be compatible with
 applications that cannot handle sub-sections of files.</para><para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI whose file is to be opened.</td></th></tr><tr><th>mode
          <td>Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new AssetFileDescriptor which you can use to access
 the file.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.OS.ParcelFileDescriptor" />openFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Override this to handle requests to open a file blob.
 The default implementation always throws <c><see cref="T:Java.IO.FileNotFoundException" /></c>.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">This method returns a ParcelFileDescriptor, which is returned directly
 to the caller.  This way large data (such as images and documents) can be
 returned without copying the content.

 </para><para tool="javadoc-to-mdoc">The returned ParcelFileDescriptor is owned by the caller, so it is
 their responsibility to close it when done.  That is, the implementation
 of this method should create a new ParcelFileDescriptor for each call.
 </para><para tool="javadoc-to-mdoc">
 If opened with the exclusive "r" or "w" modes, the returned
 ParcelFileDescriptor can be a pipe or socket pair to enable streaming
 of data. Opening with the "rw" or "rwt" modes implies a file on disk that
 supports seeking.
 </para><para tool="javadoc-to-mdoc">
 If you need to detect when the returned ParcelFileDescriptor has been
 closed, or if the remote process has crashed or encountered some other
 error, you can use <c><see cref="M:Android.OS.ParcelFileDescriptor.Open(Java.IO.File,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode)" /></c>,
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliablePipe" /></c>, or
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliableSocketPair" /></c>.

 </para><para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI whose file is to be opened.</td></th></tr><tr><th>mode
          <td>Access mode for the file.  May be "r" for read-only access,
 "rw" for read and write access, or "rwt" for read and write access
 that truncates any existing file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new ParcelFileDescriptor which you can use to access
 the file.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c></term></item><item><term><c><see cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.OS.ParcelFileDescriptor" />openFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode, <see cref="T:Android.OS.CancellationSignal" /> signal)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format><para tool="javadoc-to-mdoc">Override this to handle requests to open a file blob.
 The default implementation always throws <c><see cref="T:Java.IO.FileNotFoundException" /></c>.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para><para tool="javadoc-to-mdoc">This method returns a ParcelFileDescriptor, which is returned directly
 to the caller.  This way large data (such as images and documents) can be
 returned without copying the content.

 </para><para tool="javadoc-to-mdoc">The returned ParcelFileDescriptor is owned by the caller, so it is
 their responsibility to close it when done.  That is, the implementation
 of this method should create a new ParcelFileDescriptor for each call.
 </para><para tool="javadoc-to-mdoc">
 If opened with the exclusive "r" or "w" modes, the returned
 ParcelFileDescriptor can be a pipe or socket pair to enable streaming
 of data. Opening with the "rw" or "rwt" modes implies a file on disk that
 supports seeking.
 </para><para tool="javadoc-to-mdoc">
 If you need to detect when the returned ParcelFileDescriptor has been
 closed, or if the remote process has crashed or encountered some other
 error, you can use <c><see cref="M:Android.OS.ParcelFileDescriptor.Open(Java.IO.File,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode)" /></c>,
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliablePipe" /></c>, or
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliableSocketPair" /></c>.

 </para><para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI whose file is to be opened.</td></th></tr><tr><th>mode
          <td>Access mode for the file. May be "r" for read-only access,
            "w" for write-only access, "rw" for read and write access, or
            "rwt" for read and write access that truncates any existing
            file.</td></th></tr><tr><th>signal
          <td>A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new ParcelFileDescriptor which you can use to access
 the file.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c></term></item><item><term><c><see cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.OS.ParcelFileDescriptor" />openPipeHelper(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeType, <see cref="T:Android.OS.Bundle" /> opts, T args, <see cref="!:NoType:android/content/ContentProvider$PipeDataWriter;Href=../../../reference/android/content/ContentProvider.PipeDataWriter.html" />&lt;T&gt; func)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 11</a></format><para tool="javadoc-to-mdoc">A helper function for implementing <c><see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String)" /></c>, for
 creating a data pipe and background thread allowing you to stream
 generated data back to the client.  This function returns a new
 ParcelFileDescriptor that should be returned to the caller (the caller
 is responsible for closing it).</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI whose data is to be written.</td></th></tr><tr><th>mimeType
          <td>The desired type of data to be written.</td></th></tr><tr><th>opts
          <td>Options supplied by caller.</td></th></tr><tr><th>args
          <td>Your own custom arguments.</td></th></tr><tr><th>func
          <td>Interface implementing the function that will actually
 stream the data.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new ParcelFileDescriptor holding the read side of
 the pipe.  This should be returned to the caller for reading; the caller
 is responsible for closing it when done.
</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td /></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Content.Res.AssetFileDescriptor" />openTypedAssetFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter, <see cref="T:Android.OS.Bundle" /> opts)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 11</a></format><para tool="javadoc-to-mdoc">Called by a client to open a read-only stream containing data of a
 particular MIME type.  This is like <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>,
 except the file can only be read-only and the content provider may
 perform data conversions to generate data of the desired type.

 </para><para tool="javadoc-to-mdoc">The default implementation compares the given mimeType against the
 result of <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> and, if they match, simply calls
 <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>.

 </para><para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.ClipData" /></c> for examples of the use and implementation
 of this method.
 </para><para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The data in the content provider being queried.</td></th></tr><tr><th>mimeTypeFilter
          <td>The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</td></th></tr><tr><th>opts
          <td>Additional options from the client.  The definitions of
 these are specific to the content provider being called.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new AssetFileDescriptor from which the client can
 read data of the desired type.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the data.</td></th></tr><tr><th><see cref="T:Java.Lang.IllegalArgumentException" /><td>Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String,System.String)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Content.Res.AssetFileDescriptor" />openTypedAssetFile(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mimeTypeFilter, <see cref="T:Android.OS.Bundle" /> opts, <see cref="T:Android.OS.CancellationSignal" /> signal)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format><para tool="javadoc-to-mdoc">Called by a client to open a read-only stream containing data of a
 particular MIME type.  This is like <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>,
 except the file can only be read-only and the content provider may
 perform data conversions to generate data of the desired type.

 </para><para tool="javadoc-to-mdoc">The default implementation compares the given mimeType against the
 result of <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> and, if they match, simply calls
 <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>.

 </para><para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.ClipData" /></c> for examples of the use and implementation
 of this method.
 </para><para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para><para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The data in the content provider being queried.</td></th></tr><tr><th>mimeTypeFilter
          <td>The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</td></th></tr><tr><th>opts
          <td>Additional options from the client.  The definitions of
 these are specific to the content provider being called.</td></th></tr><tr><th>signal
          <td>A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new AssetFileDescriptor from which the client can
 read data of the desired type.</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td>Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</td></th></tr><tr><th><see cref="T:Java.Lang.SecurityException" /><td>Throws SecurityException if the caller does
 not have permission to access the data.</td></th></tr><tr><th><see cref="T:Java.Lang.IllegalArgumentException" /><td>Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String,System.String)" /></c></term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        <see cref="T:Android.Database.ICursor" />query(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> projection, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs, <see cref="T:Java.Lang.String" /> sortOrder)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Implement this to handle query requests from clients.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
 </para><para tool="javadoc-to-mdoc">
 Example client call:</para><para tool="javadoc-to-mdoc"><example><code lang="java">// Request a specific record.
 Cursor managedCursor = managedQuery(
                ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                projection,    // Which columns to return.
                null,          // WHERE clause.
                null,          // WHERE clause value substitution
                People.NAME + " ASC");   // Sort order.</code></example>
 Example implementation:</para><para tool="javadoc-to-mdoc"><example><code lang="java">// SQLiteQueryBuilder is a helper class that creates the
        // proper SQL syntax for us.
        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();

        // Set the table we're querying.
        qBuilder.setTables(DATABASE_TABLE_NAME);

        // If the query ends in a specific record number, we're
        // being asked for a specific record, so set the
        // WHERE clause in our query.
        if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
            qBuilder.appendWhere("_id=" + uri.getPathLeafId());
        }

        // Make the query.
        Cursor c = qBuilder.query(mDb,
                projection,
                selection,
                selectionArgs,
                groupBy,
                having,
                sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;</code></example></para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</td></th></tr><tr><th>projection
          <td>The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</td></th></tr><tr><th>selection
          <td>A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</td></th></tr><tr><th>selectionArgs
          <td>You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</td></th></tr><tr><th>sortOrder
          <td>How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>a Cursor or <c>null</c>.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Database.ICursor" />query(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> projection, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs, <see cref="T:Java.Lang.String" /> sortOrder, <see cref="T:Android.OS.CancellationSignal" /> cancellationSignal)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 16</a></format><para tool="javadoc-to-mdoc">Implement this to handle query requests from clients with support for cancellation.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
 </para><para tool="javadoc-to-mdoc">
 Example client call:</para><para tool="javadoc-to-mdoc"><example><code lang="java">// Request a specific record.
 Cursor managedCursor = managedQuery(
                ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                projection,    // Which columns to return.
                null,          // WHERE clause.
                null,          // WHERE clause value substitution
                People.NAME + " ASC");   // Sort order.</code></example>
 Example implementation:</para><para tool="javadoc-to-mdoc"><example><code lang="java">// SQLiteQueryBuilder is a helper class that creates the
        // proper SQL syntax for us.
        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();

        // Set the table we're querying.
        qBuilder.setTables(DATABASE_TABLE_NAME);

        // If the query ends in a specific record number, we're
        // being asked for a specific record, so set the
        // WHERE clause in our query.
        if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
            qBuilder.appendWhere("_id=" + uri.getPathLeafId());
        }

        // Make the query.
        Cursor c = qBuilder.query(mDb,
                projection,
                selection,
                selectionArgs,
                groupBy,
                having,
                sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;</code></example></para><para tool="javadoc-to-mdoc">
 If you implement this method then you must also implement the version of
 <c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c> that does not take a cancellation
 signal to ensure correct operation on older versions of the Android Framework in
 which the cancellation signal overload was not available.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</td></th></tr><tr><th>projection
          <td>The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</td></th></tr><tr><th>selection
          <td>A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</td></th></tr><tr><th>selectionArgs
          <td>You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</td></th></tr><tr><th>sortOrder
          <td>How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</td></th></tr><tr><th>cancellationSignal
          <td>A signal to cancel the operation in progress, or <c>null</c> if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>a Cursor or <c>null</c>.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        void
      shutdown()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 11</a></format><para tool="javadoc-to-mdoc">Implement this to shut down the ContentProvider instance. You can then
 invoke this method in unit tests.
 
 </para><para tool="javadoc-to-mdoc">
 Android normally handles ContentProvider startup and shutdown
 automatically. You do not need to start up or shut down a
 ContentProvider. When you invoke a test method on a ContentProvider,
 however, a ContentProvider instance is started and keeps running after
 the test finishes, even if a succeeding test instantiates another
 ContentProvider. A conflict develops because the two instances are
 usually running against the same underlying data source (for example, an
 sqlite database).
 </para><para tool="javadoc-to-mdoc">
 Implementing shutDown() avoids this conflict by providing a way to
 terminate the ContentProvider. This method can also prevent memory leaks
 from multiple instantiations of the ContentProvider, and it can ensure
 unit test isolation by allowing you to completely clean up the test
 fixture before moving on to the next test.
 <format type="text/html"><h4 class="jd-details-title">
        public 
         
         
         
         
        <see cref="T:Android.Net.Uri" />uncanonicalize(<see cref="T:Android.Net.Uri" /> url)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 19</a></format></para><para tool="javadoc-to-mdoc">Remove canonicalization from canonical URIs previously returned by
 <c><see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" /></c>.  For example, if your implementation is to add
 a query param to canonicalize a URI, this method can simply trip any
 query params on the URI.  The default implementation always returns the
 same <format type="text/html"><var>url</var></format> that was passed in.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>url
          <td>The Uri to remove any canonicalization from.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Return the non-canonical representation of <format type="text/html"><var>url</var></format>, return
 the <format type="text/html"><var>url</var></format> as-is if there is nothing to do, or return null if
 the data identified by the canonical representation can not be found in
 the current environment.
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        public 
         
         
        abstract 
         
        int
      update(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Android.Content.ContentValues" /> values, <see cref="T:Java.Lang.String" /> selection, <see cref="T:Java.Lang.String" /> selectionArgs)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Implement this to handle requests to update one or more rows.
 The implementation should update all rows matching the selection
 to set the columns according to the provided values map.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after updating.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI to query. This can potentially have a record ID if this
 is an update request for a specific record.</td></th></tr><tr><th>values
          <td>A set of column_name/value pairs to update in the database.
     This must not be <c>null</c>.</td></th></tr><tr><th>selection
          <td>An optional filter to match rows to update.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>the number of rows affected.
</term></item></list><!-- ========= METHOD DETAIL ========  --><format type="text/html"><h2>Protected Methods</h2></format><format type="text/html"><h4 class="jd-details-title">
        protected 
         
         
         
         
        boolean
      isTemporary()</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format><para tool="javadoc-to-mdoc">Returns true if this instance is a temporary content provider.<format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>true if this instance is a temporary content provider
</term></item></list><format type="text/html"><h4 class="jd-details-title">
        protected 
         
        final 
         
         
        <see cref="T:Android.OS.ParcelFileDescriptor" />openFileHelper(<see cref="T:Android.Net.Uri" /> uri, <see cref="T:Java.Lang.String" /> mode)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Convenience for subclasses that wish to implement <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>
 by looking up a column named "_data" at the given URI.</para><format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>uri
          <td>The URI to be opened.</td></th></tr><tr><th>mode
          <td>The file mode.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</td></th></tr></table></format><format type="text/html"><h5 class="jd-tagtitle">Returns</h5></format><list type="bullet"><item><term>Returns a new ParcelFileDescriptor that can be used by the
 client to access the file.
</term></item></list><format type="text/html"><h5 class="jd-tagtitle">Throws</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th><see cref="T:Java.IO.FileNotFoundException" /><td /></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        protected 
         
        final 
         
         
        void
      setPathPermissions(<see cref="T:Android.Content.PM.PathPermission" /> permissions)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 4</a></format><para tool="javadoc-to-mdoc">Change the path-based permission required to read and/or write data in
 the content provider.  This is normally set for you from its manifest
 information when the provider is first created.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>permissions
          <td>Array of path permission descriptions.
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        protected 
         
        final 
         
         
        void
      setReadPermission(<see cref="T:Java.Lang.String" /> permission)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Change the permission required to read data from the content
 provider.  This is normally set for you from its manifest information
 when the provider is first created.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>permission
          <td>Name of the permission required for read-only access.
</td></th></tr></table></format><format type="text/html"><h4 class="jd-details-title">
        protected 
         
        final 
         
         
        void
      setWritePermission(<see cref="T:Java.Lang.String" /> permission)</h4></format>
  Added in <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-sdk-element.html#ApiLevels">API level 1</a></format></para><para tool="javadoc-to-mdoc">Change the permission required to read and write data in the content
 provider.  This is normally set for you from its manifest information
 when the provider is first created.<format type="text/html"><h5 class="jd-tagtitle">Parameters</h5></format><format type="text/html"><table class="jd-tagtable"><tr><th>permission
          <td>Name of the permission required for read/write access.
</td></th></tr></table></format><!-- ========= END OF CLASS DATA =========  --></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/content/ContentProvider.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct a ContentProvider instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a ContentProvider instance.  Content providers must be
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/provider-element.html">declared
 in the manifest</a></format>, accessed with <c><see cref="T:Android.Content.ContentResolver" /></c>, and created
 automatically by the system, so applications usually do not create
 ContentProvider instances directly.

 </para>
          <para tool="javadoc-to-mdoc">At construction time, the object is uninitialized, and most fields and
 methods are unavailable.  Subclasses should initialize themselves in
 <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c>, not the constructor.

 </para>
          <para tool="javadoc-to-mdoc">Content providers are created on the application main thread at
 application launch time.  The constructor must not perform lengthy
 operations, or application startup will be delayed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#ContentProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContentProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyBatch">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ContentProviderResult[] ApplyBatch (System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; operations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ContentProviderResult[] ApplyBatch(class System.Collections.Generic.IList`1&lt;class Android.Content.ContentProviderOperation&gt; operations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyBatch", "(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_util_ArrayList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentProviderResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt;" />
      </Parameters>
      <Docs>
        <param name="operations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachInfo">
      <MemberSignature Language="C#" Value="public virtual void AttachInfo (Android.Content.Context context, Android.Content.PM.ProviderInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachInfo(class Android.Content.Context context, class Android.Content.PM.ProviderInfo info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachInfo", "(Landroid/content/Context;Landroid/content/pm/ProviderInfo;)V", "GetAttachInfo_Landroid_content_Context_Landroid_content_pm_ProviderInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="info" Type="Android.Content.PM.ProviderInfo" />
      </Parameters>
      <Docs>
        <param name="context">The context this provider is running in</param>
        <param name="info">Registered information about this content provider
</param>
        <summary>After being instantiated, this is called to tell the content provider
 about itself.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">After being instantiated, this is called to tell the content provider
 about itself.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#attachInfo(android.content.Context, android.content.pm.ProviderInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BulkInsert">
      <MemberSignature Language="C#" Value="public virtual int BulkInsert (Android.Net.Uri uri, Android.Content.ContentValues[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BulkInsert(class Android.Net.Uri uri, class Android.Content.ContentValues[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bulkInsert", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "GetBulkInsert_Landroid_net_Uri_arrayLandroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues[]" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request.</param>
        <param name="values">An array of sets of column_name/value pairs to add to the database.
    This must not be <c>null</c>.</param>
        <summary>Override this to handle requests to insert a set of new rows, or the
 default implementation will iterate over the values and call
 <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> on each of them.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this to handle requests to insert a set of new rows, or the
 default implementation will iterate over the values and call
 <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> on each of them.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after inserting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#bulkInsert(android.net.Uri, android.content.ContentValues[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle Call (string method, string arg, Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle Call(string method, string arg, class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="arg" Type="System.String" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="method">method name to call.  Opaque to framework, but should not be <c>null</c>.</param>
        <param name="arg">provider-defined String argument.  May be <c>null</c>.</param>
        <param name="extras">provider-defined Bundle argument.  May be <c>null</c>.</param>
        <summary>Call a provider-defined method.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call a provider-defined method.  This can be used to implement
 interfaces that are cheaper and/or unnatural for a table-like
 model.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>WARNING:</i> The framework does no permission checking
 on this entry into the content provider besides the basic ability for the application
 to get access to the provider at all.  For example, it has no idea whether the call
 being executed may read or write data in the provider, so can't enforce those
 individual permissions.  Any implementation of this method <i>must</i>
 do its own permission checks on incoming calls to make sure they are allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#call(java.lang.String, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CallingPackage">
      <MemberSignature Language="C#" Value="public string CallingPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "GetGetCallingPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the caller that initiated the request being
 processed on the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the package name of the caller that initiated the request being
 processed on the current thread. The returned package will have been
 verified to belong to the calling UID. Returns <c>null</c> if not
 currently processing a request.
 </para>
          <para tool="javadoc-to-mdoc">
 This will always return <c>null</c> when processing
 <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> or <c><see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" /></c> requests.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getCallingPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.SecurityException">if the calling package doesn't belong to the
             calling UID.
</exception>
        <altmember cref="P:Android.OS.Binder.CallingUid" />
        <altmember cref="M:Android.Content.Context.GrantUriPermission(System.String, Android.Net.Uri, Android.Net.Uri)" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="Canonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri Canonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Canonicalize(class Android.Net.Uri url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetCanonicalize_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to canonicalize.</param>
        <summary>Implement this to support canonicalization of URIs that refer to your
 content provider.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to support canonicalization of URIs that refer to your
 content provider.  A canonical URI is one that can be transported across
 devices, backup/restore, and other contexts, and still be able to refer
 to the same data item.  Typically this is implemented by adding query
 params to the URI allowing the content provider to verify that an incoming
 canonical URI references the same data as it was originally intended for and,
 if it doesn't, to find that data (if it exists) in the current environment.

 </para>
          <para tool="javadoc-to-mdoc">For example, if the content provider holds people and a normal URI in it
 is created with a row index into that people database, the cananical representation
 may have an additional query param at the end which specifies the name of the
 person it is intended for.  Later calls into the provider with that URI will look
 up the row of that URI's base index and, if it doesn't match or its entry's
 name doesn't match the name in the query param, perform a query on its database
 to find the correct row to operate on.</para>
          <para tool="javadoc-to-mdoc">If you implement support for canonical URIs, <format type="text/html"><b>all</b></format> incoming calls with
 URIs (including this one) must perform this verification and recovery of any
 canonical URIs they receive.  In addition, you must also implement
 <c><see cref="M:Android.Content.ContentProvider.Uncanonicalize(Android.Net.Uri)" /></c> to strip the canonicalization of any of these URIs.</para>
          <para tool="javadoc-to-mdoc">The default implementation of this method returns null, indicating that
 canonical URIs are not supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#canonicalize(android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the Context this provider is running in.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieves the Context this provider is running in.  Only available once
 <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c> has been called -- this will return <c>null</c> in the
 constructor.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract int Delete (Android.Net.Uri uri, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Delete(class Android.Net.Uri uri, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Landroid_net_Uri_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The full URI to query, including a row ID (if a specific record is requested).</param>
        <param name="selection">An optional restriction to apply to rows when deleting.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to delete one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to delete one or more rows.
 The implementation should apply the selection clause when performing
 deletion, allowing the operation to affect multiple rows in a directory.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after deleting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">The implementation is responsible for parsing out a row ID at the end
 of the URI, if a specific row is being deleted. That is, the client would
 pass in <c>content://contacts/people/22</c> and the implementation is
 responsible for parsing the record number (22) when creating a SQL statement.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#delete(android.net.Uri, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
 closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the Provider's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the Provider's state into the given stream.  This gets invoked if
 you run "adb shell dumpsys activity provider &lt;provider_component_name&gt;".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DumpAsync (Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DumpAsync(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="writer">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathPermissions">
      <MemberSignature Language="C#" Value="public Android.Content.PM.PathPermission[] GetPathPermissions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.PM.PathPermission[] GetPathPermissions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPathPermissions", "()[Landroid/content/pm/PathPermission;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.PathPermission[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the path-based permissions required for read and/or write access to
 this content provider.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the path-based permissions required for read and/or write access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getPathPermissions()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamTypes">
      <MemberSignature Language="C#" Value="public virtual string[] GetStreamTypes (Android.Net.Uri uri, string mimeTypeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetStreamTypes(class Android.Net.Uri uri, string mimeTypeFilter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStreamTypes", "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;", "GetGetStreamTypes_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;* to retrieve all possible data types.</param>
        <summary>Called by a client to determine the types of data streams that this
 content provider supports for the given URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a client to determine the types of data streams that this
 content provider supports for the given URI.  The default implementation
 returns <c>null</c>, meaning no types.  If your content provider stores data
 of a particular type, return that MIME type if it matches the given
 mimeTypeFilter.  If it can perform type conversions, return an array
 of all supported MIME types that match mimeTypeFilter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getStreamTypes(android.net.Uri, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri, System.String, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public abstract string GetType (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetType(class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetType_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implement this to handle requests for the MIME type of the data at the
 given URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests for the MIME type of the data at the
 given URI.  The returned MIME type should start with
 <c>vnd.android.cursor.item</c> for a single record,
 or <c>vnd.android.cursor.dir/</c> for multiple items.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">Note that there are no permissions needed for an application to
 access this information; if your content provider requires read and/or
 write permissions, or is not exported, all applications can still call
 this method regardless of their access permissions.  This allows them
 to retrieve the MIME type for a URI when dispatching intents.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getType(android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public abstract Android.Net.Uri Insert (Android.Net.Uri uri, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request. This must not be <c>null</c>.</param>
        <param name="values">A set of column_name/value pairs to add to the database.
     This must not be <c>null</c>.</param>
        <summary>Implement this to handle requests to insert a new row.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to insert a new row.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after inserting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#insert(android.net.Uri, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="protected virtual bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTemporary", "()Z", "GetIsTemporaryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this instance is a temporary content provider.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this instance is a temporary content provider.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#isTemporary()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.
</param>
        <summary>Called by the system when the device configuration changes while your
 component is running.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the system when the device configuration changes while your
 component is running.  Note that, unlike activities, other components
 are never restarted when a configuration changes: they must always deal
 with the results of the change, such as by re-retrieving resources.

 </para>
          <para tool="javadoc-to-mdoc">At the time that this function has been called, your Resources
 object will have been updated to return resource values matching the
 new configuration.

 </para>
          <para tool="javadoc-to-mdoc">For more information, read <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/runtime-changes.html">Handling Runtime Changes</a></format>.
 This method is always called on the application main thread, and must
 not perform lengthy operations.

 </para>
          <para tool="javadoc-to-mdoc">The default content provider implementation does nothing.
 Override this method to take appropriate action.
 (Content providers do not usually care about things like screen
 orientation, but may want to know about locale changes.)
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public abstract bool OnCreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "()Z", "GetOnCreateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to initialize your content provider on startup.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to initialize your content provider on startup.
 This method is called for all registered content providers on the
 application main thread at application launch time.  It must not perform
 lengthy operations, or application startup will be delayed.

 </para>
          <para tool="javadoc-to-mdoc">You should defer nontrivial initialization (such as opening,
 upgrading, and scanning databases) until the content provider is used
 (via <c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>, <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c>, etc).  Deferred initialization
 keeps application startup fast, avoids unnecessary work if the provider
 turns out not to be needed, and stops database errors (such as a full
 disk) from halting application launch.

 </para>
          <para tool="javadoc-to-mdoc">If you use SQLite, <c><see cref="T:Android.Database.Sqlite.SQLiteOpenHelper" /></c>
 is a helpful utility class that makes it easy to manage databases,
 and will automatically defer opening until first use.  If you do use
 SQLiteOpenHelper, make sure to avoid calling
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.ReadableDatabase" /></c> or
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c>
 from this method.  (Instead, override
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c> to initialize the
 database when it is first opened.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#onCreate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.  While
 the exact point at which this will be called is not defined, generally
 it will happen when all background process have been killed.
 That is, before reaching the point of killing processes hosting
 service and foreground UI that we would like to avoid killing.

 </para>
          <para tool="javadoc-to-mdoc">You should implement this method to release
 any caches or other unnecessary resources you may be holding on to.
 The system will perform a garbage collection for you after returning from this method.
 </para>
          <para tool="javadoc-to-mdoc">Preferably, you should implement <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> from
 <c><see cref="T:Android.Content.ComponentCallbacks2" /></c> to incrementally unload your resources based on various
 levels of memory demands.  That API is available for API level 14 and higher, so you should
 only use this <c><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" /></c> method as a fallback for older versions, which can be
 treated the same as <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> with the <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c> level.</para>

 This method is always called on the application main thread, and must
 not perform lengthy operations.

 <para tool="javadoc-to-mdoc">The default content provider implementation does nothing.
 Subclasses may override this method to take appropriate action.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/content/ContentProvider.html#onLowMemory()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory" />
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.  This will
 happen for example when it goes in the background and there is not enough
 memory to keep as many background processes running as desired.  You
 should never compare to exact values of the level, since new intermediate
 values may be added -- you will typically want to compare if the value
 is greater or equal to a level you are interested in.

 </para>
          <para tool="javadoc-to-mdoc">To retrieve the processes current trim level at any point, you can
 use <c><see cref="M:Android.App.ActivityManager.GetMyMemoryState(.RunningAppProcessInfo)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#onTrimMemory(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <summary>This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">If you implement this, your clients must be able to deal with such
 file slices, either directly with
 <c><see cref="M:Android.Content.ContentResolver.OpenAssetFileDescriptor(Android.Net.Uri,System.String)" /></c>, or by using the higher-level
 <c><see cref="M:Android.Content.ContentResolver.OpenInputStream(Android.Net.Uri)" /></c>
 or <c><see cref="M:Android.Content.ContentResolver.OpenOutputStream(Android.Net.Uri)" /></c>
 methods.
 </para>
          <para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para>
          <para tool="javadoc-to-mdoc">If you are implementing this to return a full file, you
 should create the AssetFileDescriptor with
 <c><see cref="F:Android.Content.Res.AssetFileDescriptor.UnknownLength" /></c> to be compatible with
 applications that cannot handle sub-sections of files.</para>
          <para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openAssetFile(android.net.Uri, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">If you implement this, your clients must be able to deal with such
 file slices, either directly with
 <c><see cref="M:Android.Content.ContentResolver.OpenAssetFileDescriptor(Android.Net.Uri,System.String)" /></c>, or by using the higher-level
 <c><see cref="M:Android.Content.ContentResolver.OpenInputStream(Android.Net.Uri)" /></c>
 or <c><see cref="M:Android.Content.ContentResolver.OpenOutputStream(Android.Net.Uri)" /></c>
 methods.
 </para>
          <para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para>
          <para tool="javadoc-to-mdoc">If you are implementing this to return a full file, you
 should create the AssetFileDescriptor with
 <c><see cref="F:Android.Content.Res.AssetFileDescriptor.UnknownLength" /></c> to be compatible with
 applications that cannot handle sub-sections of files.</para>
          <para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "rw" for read and write access, or "rwt" for read and write access
 that truncates any existing file.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this to handle requests to open a file blob.
 The default implementation always throws <c><see cref="T:Java.IO.FileNotFoundException" /></c>.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">This method returns a ParcelFileDescriptor, which is returned directly
 to the caller.  This way large data (such as images and documents) can be
 returned without copying the content.

 </para>
          <para tool="javadoc-to-mdoc">The returned ParcelFileDescriptor is owned by the caller, so it is
 their responsibility to close it when done.  That is, the implementation
 of this method should create a new ParcelFileDescriptor for each call.
 </para>
          <para tool="javadoc-to-mdoc">
 If opened with the exclusive "r" or "w" modes, the returned
 ParcelFileDescriptor can be a pipe or socket pair to enable streaming
 of data. Opening with the "rw" or "rwt" modes implies a file on disk that
 supports seeking.
 </para>
          <para tool="javadoc-to-mdoc">
 If you need to detect when the returned ParcelFileDescriptor has been
 closed, or if the remote process has crashed or encountered some other
 error, you can use <c><see cref="M:Android.OS.ParcelFileDescriptor.Open(Java.IO.File,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode)" /></c>,
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliablePipe" /></c>, or
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliableSocketPair" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openFile(android.net.Uri, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file. May be "r" for read-only access,
            "w" for write-only access, "rw" for read and write access, or
            "rwt" for read and write access that truncates any existing
            file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this to handle requests to open a file blob.
 The default implementation always throws <c><see cref="T:Java.IO.FileNotFoundException" /></c>.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">This method returns a ParcelFileDescriptor, which is returned directly
 to the caller.  This way large data (such as images and documents) can be
 returned without copying the content.

 </para>
          <para tool="javadoc-to-mdoc">The returned ParcelFileDescriptor is owned by the caller, so it is
 their responsibility to close it when done.  That is, the implementation
 of this method should create a new ParcelFileDescriptor for each call.
 </para>
          <para tool="javadoc-to-mdoc">
 If opened with the exclusive "r" or "w" modes, the returned
 ParcelFileDescriptor can be a pipe or socket pair to enable streaming
 of data. Opening with the "rw" or "rwt" modes implies a file on disk that
 supports seeking.
 </para>
          <para tool="javadoc-to-mdoc">
 If you need to detect when the returned ParcelFileDescriptor has been
 closed, or if the remote process has crashed or encountered some other
 error, you can use <c><see cref="M:Android.OS.ParcelFileDescriptor.Open(Java.IO.File,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode,Android.OS.ParcelFileMode)" /></c>,
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliablePipe" /></c>, or
 <c><see cref="M:Android.OS.ParcelFileDescriptor.CreateReliableSocketPair" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">For use in Intents, you will want to implement <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c>
 to return the appropriate MIME type for the data returned here with
 the same URI.  This will allow intent resolution to automatically determine the data MIME
 type and select the appropriate matching targets as part of its operation.</para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFileHelper">
      <MemberSignature Language="C#" Value="protected Android.OS.ParcelFileDescriptor OpenFileHelper (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Android.OS.ParcelFileDescriptor OpenFileHelper(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFileHelper", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to be opened.</param>
        <param name="mode">The file mode.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <summary>Convenience for subclasses that wish to implement <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>
 by looking up a column named "_data" at the given URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for subclasses that wish to implement <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri,System.String)" /></c>
 by looking up a column named "_data" at the given URI.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openFileHelper(android.net.Uri, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenPipeHelper">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenPipeHelper (Android.Net.Uri uri, string mimeType, Android.OS.Bundle opts, Java.Lang.Object args, Android.Content.ContentProvider.IPipeDataWriter func);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenPipeHelper(class Android.Net.Uri uri, string mimeType, class Android.OS.Bundle opts, class Java.Lang.Object args, class Android.Content.ContentProvider/IPipeDataWriter func) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openPipeHelper", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/Object;Landroid/content/ContentProvider$PipeDataWriter;)Landroid/os/ParcelFileDescriptor;", "GetOpenPipeHelper_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Ljava_lang_Object_Landroid_content_ContentProvider_PipeDataWriter_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="args" Type="Java.Lang.Object" />
        <Parameter Name="func" Type="Android.Content.ContentProvider+IPipeDataWriter" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="opts">To be added.</param>
        <param name="args">To be added.</param>
        <param name="func">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <summary>Called by a client to open a read-only stream containing data of a
 particular MIME type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a client to open a read-only stream containing data of a
 particular MIME type.  This is like <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>,
 except the file can only be read-only and the content provider may
 perform data conversions to generate data of the desired type.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation compares the given mimeType against the
 result of <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> and, if they match, simply calls
 <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.ClipData" /></c> for examples of the use and implementation
 of this method.
 </para>
          <para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Called by a client to open a read-only stream containing data of a
 particular MIME type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a client to open a read-only stream containing data of a
 particular MIME type.  This is like <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>,
 except the file can only be read-only and the content provider may
 perform data conversions to generate data of the desired type.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation compares the given mimeType against the
 result of <c><see cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" /></c> and, if they match, simply calls
 <c><see cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.ClipData" /></c> for examples of the use and implementation
 of this method.
 </para>
          <para tool="javadoc-to-mdoc">
 The returned AssetFileDescriptor can be a pipe or socket pair to enable
 streaming of data.

 </para>
          <para tool="javadoc-to-mdoc">For better interoperability with other applications, it is recommended
 that for any URIs that can be opened, you also support queries on them
 containing at least the columns specified by <c><see cref="T:Android.Provider.OpenableColumns" /></c>.
 You may also want to support other common columns if you have additional meta-data
 to supply, such as <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED" /></c>
 in <c><see cref="!:NoType:android/provider/MediaStore$MediaColumns;Href=../../../reference/android/provider/MediaStore.MediaColumns.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <summary>Implement this to handle query requests from clients.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle query requests from clients.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
 </para>
          <para tool="javadoc-to-mdoc">
 Example client call:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// Request a specific record.
 Cursor managedCursor = managedQuery(
                ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                projection,    // Which columns to return.
                null,          // WHERE clause.
                null,          // WHERE clause value substitution
                People.NAME + " ASC");   // Sort order.</code>
            </example>
 Example implementation:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// SQLiteQueryBuilder is a helper class that creates the
        // proper SQL syntax for us.
        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();

        // Set the table we're querying.
        qBuilder.setTables(DATABASE_TABLE_NAME);

        // If the query ends in a specific record number, we're
        // being asked for a specific record, so set the
        // WHERE clause in our query.
        if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
            qBuilder.appendWhere("_id=" + uri.getPathLeafId());
        }

        // Make the query.
        Cursor c = qBuilder.query(mDb,
                projection,
                selection,
                selectionArgs,
                groupBy,
                having,
                sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or <c>null</c> if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Implement this to handle query requests from clients with support for cancellation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle query requests from clients with support for cancellation.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
 </para>
          <para tool="javadoc-to-mdoc">
 Example client call:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// Request a specific record.
 Cursor managedCursor = managedQuery(
                ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                projection,    // Which columns to return.
                null,          // WHERE clause.
                null,          // WHERE clause value substitution
                People.NAME + " ASC");   // Sort order.</code>
            </example>
 Example implementation:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// SQLiteQueryBuilder is a helper class that creates the
        // proper SQL syntax for us.
        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();

        // Set the table we're querying.
        qBuilder.setTables(DATABASE_TABLE_NAME);

        // If the query ends in a specific record number, we're
        // being asked for a specific record, so set the
        // WHERE clause in our query.
        if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
            qBuilder.appendWhere("_id=" + uri.getPathLeafId());
        }

        // Make the query.
        Cursor c = qBuilder.query(mDb,
                projection,
                selection,
                selectionArgs,
                groupBy,
                having,
                sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
 If you implement this method then you must also implement the version of
 <c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c> that does not take a cancellation
 signal to ensure correct operation on older versions of the Android Framework in
 which the cancellation signal overload was not available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReadPermission">
      <MemberSignature Language="C#" Value="public string ReadPermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReadPermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReadPermission", "()Ljava/lang/String;", "GetGetReadPermissionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReadPermission", "(Ljava/lang/String;)V", "GetSetReadPermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the permission required for read-only access to
 this content provider.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getReadPermission()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the name of the permission required for read-only access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#setReadPermission(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the permission required to read data from the content
 provider.  This is normally set for you from its manifest information
 when the provider is first created.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetPathPermissions">
      <MemberSignature Language="C#" Value="protected void SetPathPermissions (Android.Content.PM.PathPermission[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPathPermissions(class Android.Content.PM.PathPermission[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPathPermissions", "([Landroid/content/pm/PathPermission;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="Android.Content.PM.PathPermission[]" />
      </Parameters>
      <Docs>
        <param name="permissions">Array of path permission descriptions.
</param>
        <summary>Change the path-based permission required to read and/or write data in
 the content provider.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Change the path-based permission required to read and/or write data in
 the content provider.  This is normally set for you from its manifest
 information when the provider is first created.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#setPathPermissions(android.content.pm.PathPermission[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="SetReadPermission">
      <MemberSignature Language="C#" Value="protected void SetReadPermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetReadPermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWritePermission">
      <MemberSignature Language="C#" Value="protected void SetWritePermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetWritePermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public virtual void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to shut down the ContentProvider instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to shut down the ContentProvider instance. You can then
 invoke this method in unit tests.
 
 </para>
          <para tool="javadoc-to-mdoc">
 Android normally handles ContentProvider startup and shutdown
 automatically. You do not need to start up or shut down a
 ContentProvider. When you invoke a test method on a ContentProvider,
 however, a ContentProvider instance is started and keeps running after
 the test finishes, even if a succeeding test instantiates another
 ContentProvider. A conflict develops because the two instances are
 usually running against the same underlying data source (for example, an
 sqlite database).
 </para>
          <para tool="javadoc-to-mdoc">
 Implementing shutDown() avoids this conflict by providing a way to
 terminate the ContentProvider. This method can also prevent memory leaks
 from multiple instantiations of the ContentProvider, and it can ensure
 unit test isolation by allowing you to completely clean up the test
 fixture before moving on to the next test.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#shutdown()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uncanonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri Uncanonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Uncanonicalize(class Android.Net.Uri url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetUncanonicalize_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to remove any canonicalization from.</param>
        <summary>Remove canonicalization from canonical URIs previously returned by
 <c><see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove canonicalization from canonical URIs previously returned by
 <c><see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" /></c>.  For example, if your implementation is to add
 a query param to canonicalize a URI, this method can simply trip any
 query params on the URI.  The default implementation always returns the
 same <format type="text/html"><var>url</var></format> that was passed in.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#uncanonicalize(android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract int Update (Android.Net.Uri uri, Android.Content.ContentValues values, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This can potentially have a record ID if this
 is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.
     This must not be <c>null</c>.</param>
        <param name="selection">An optional filter to match rows to update.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to update one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to update one or more rows.
 The implementation should update all rows matching the selection
 to set the columns according to the provided values map.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri,Android.Database.ContentObserver)" /></c>
 after updating.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WritePermission">
      <MemberSignature Language="C#" Value="public string WritePermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WritePermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWritePermission", "()Ljava/lang/String;", "GetGetWritePermissionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setWritePermission", "(Ljava/lang/String;)V", "GetSetWritePermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the permission required for read/write access to
 this content provider.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#getWritePermission()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the name of the permission required for read/write access to
 this content provider.  This method can be called from multiple
 threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/content/ContentProvider.html#setWritePermission(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the permission required to read and write data in the content
 provider.  This is normally set for you from its manifest information
 when the provider is first created.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
