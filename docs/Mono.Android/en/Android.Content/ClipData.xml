<Type Name="ClipData" FullName="Android.Content.ClipData">
  <TypeSignature Language="C#" Value="public class ClipData : Java.Lang.Object, Android.OS.IParcelable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClipData extends Java.Lang.Object implements class Android.OS.IParcelable, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IParcelable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/ClipData", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>Representation of a clipped data on the clipboard.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Representation of a clipped data on the clipboard.

 </para>
      <para tool="javadoc-to-mdoc">ClippedData is a complex type containing one or Item instances,
 each of which can hold one or more representations of an item of data.
 For display to the user, it also has a label and iconic representation.</para>
      <para tool="javadoc-to-mdoc">A ClipData contains a <c><see cref="T:Android.Content.ClipDescription" /></c>, which describes
 important meta-data about the clip.  In particular, its
 <c><see cref="M:Android.Content.ClipDescription.GetMimeType(System.Int32)" /></c>
 must return correct MIME type(s) describing the data in the clip.  For help
 in correctly constructing a clip with the correct MIME type, use
 <c><see cref="M:Android.Content.ClipData.NewPlainText(Java.Lang.ICharSequence,Java.Lang.ICharSequence)" /></c>,
 <c><see cref="M:Android.Content.ClipData.NewUri(Android.Content.ContentResolver,Java.Lang.ICharSequence,Java.Lang.ICharSequence)" /></c>, and
 <c><see cref="M:Android.Content.ClipData.NewIntent(Java.Lang.ICharSequence,Android.Content.Intent)" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">Each Item instance can be one of three main classes of data: a simple
 CharSequence of text, a single Intent object, or a Uri.  See <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html" /></c>
 for more details.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about using the clipboard framework, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/clipboard/copy-paste.html">Copy and Paste</a></format>
 developer guide.</para>
      <format type="text/html">
        <h3>Implementing Paste or Drop</h3>
      </format>
      <para tool="javadoc-to-mdoc">To implement a paste or drop of a ClippedData object into an application,
 the application must correctly interpret the data for its use.  If the <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html" /></c>
 it contains is simple text or an Intent, there is little to be done: text
 can only be interpreted as text, and an Intent will typically be used for
 creating shortcuts (such as placing icons on the home screen) or other
 actions.

 </para>
      <para tool="javadoc-to-mdoc">If all you want is the textual representation of the clipped data, you
 can use the convenience method <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html#coerceToText(android.content.Context)" /></c>.
 In this case there is generally no need to worry about the MIME types
 reported by <c><see cref="M:Android.Content.ClipDescription.GetMimeType(System.Int32)" /></c>,
 since any clip item can always be converted to a string.

 </para>
      <para tool="javadoc-to-mdoc">More complicated exchanges will be done through URIs, in particular
 "content:" URIs.  A content URI allows the recipient of a ClippedData item
 to interact closely with the ContentProvider holding the data in order to
 negotiate the transfer of that data.  The clip must also be filled in with
 the available MIME types; <c><see cref="M:Android.Content.ClipData.NewUri(Android.Content.ContentResolver,Java.Lang.ICharSequence,Java.Lang.ICharSequence)" /></c>
 will take care of correctly doing this.

 </para>
      <para tool="javadoc-to-mdoc">For example, here is the paste function of a simple NotePad application.
 When retrieving the data from the clipboard, it can do either two things:
 if the clipboard contains a URI reference to an existing note, it copies
 the entire structure of the note into a new note; otherwise, it simply
 coerces the clip into text and uses that as the new note's contents.

 <example><code lang="java">/**
 * A helper method that replaces the note's data with the contents of the clipboard.
 */
private final void performPaste() {

    // Gets a handle to the Clipboard Manager
    ClipboardManager clipboard = (ClipboardManager)
            getSystemService(Context.CLIPBOARD_SERVICE);

    // Gets a content resolver instance
    ContentResolver cr = getContentResolver();

    // Gets the clipboard data from the clipboard
    ClipData clip = clipboard.getPrimaryClip();
    if (clip != null) {

        String text=null;
        String title=null;

        // Gets the first item from the clipboard data
        ClipData.Item item = clip.getItemAt(0);

        // Tries to get the item's contents as a URI pointing to a note
        Uri uri = item.getUri();

        // Tests to see that the item actually is an URI, and that the URI
        // is a content URI pointing to a provider whose MIME type is the same
        // as the MIME type supported by the Note pad provider.
        if (uri != null &amp;&amp; NotePad.Notes.CONTENT_ITEM_TYPE.equals(cr.getType(uri))) {

            // The clipboard holds a reference to data with a note MIME type. This copies it.
            Cursor orig = cr.query(
                    uri,            // URI for the content provider
                    PROJECTION,     // Get the columns referred to in the projection
                    null,           // No selection variables
                    null,           // No selection variables, so no criteria are needed
                    null            // Use the default sort order
            );

            // If the Cursor is not null, and it contains at least one record
            // (moveToFirst() returns true), then this gets the note data from it.
            if (orig != null) {
                if (orig.moveToFirst()) {
                    int colNoteIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_NOTE);
                    int colTitleIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_TITLE);
                    text = orig.getString(colNoteIndex);
                    title = orig.getString(colTitleIndex);
                }

                // Closes the cursor.
                orig.close();
            }
        }

        // If the contents of the clipboard wasn't a reference to a note, then
        // this converts whatever it is to text.
        if (text == null) {
            text = item.coerceToText(this).toString();
        }

        // Updates the current note with the retrieved title and text.
        updateNote(text, title);
    }
}</code></example></para>
      <para tool="javadoc-to-mdoc">In many cases an application can paste various types of streams of data.  For
 example, an e-mail application may want to allow the user to paste an image
 or other binary data as an attachment.  This is accomplished through the
 ContentResolver <c><see cref="M:Android.Content.ContentResolver.GetStreamTypes(Android.Net.Uri,System.String)" /></c> and
 <c><see cref="M:Android.Content.ContentResolver.OpenTypedAssetFileDescriptor(Android.Net.Uri,System.String,System.String)" /></c>
 methods.  These allow a client to discover the type(s) of data that a particular
 content URI can make available as a stream and retrieve the stream of data.

 </para>
      <para tool="javadoc-to-mdoc">For example, the implementation of <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html#coerceToText(android.content.Context)" /></c>
 itself uses this to try to retrieve a URI clip as a stream of text:

 <example><code lang="java">public CharSequence coerceToText(Context context) {
    // If this Item has an explicit textual value, simply return that.
    CharSequence text = getText();
    if (text != null) {
        return text;
    }

    // If this Item has a URI value, try using that.
    Uri uri = getUri();
    if (uri != null) {

        // First see if the URI can be opened as a plain text stream
        // (of any sub-type).  If so, this is the best textual
        // representation for it.
        FileInputStream stream = null;
        try {
            // Ask for a stream of the desired type.
            AssetFileDescriptor descr = context.getContentResolver()
                    .openTypedAssetFileDescriptor(uri, "text/*", null);
            stream = descr.createInputStream();
            InputStreamReader reader = new InputStreamReader(stream, "UTF-8");

            // Got it...  copy the stream into a local string and return it.
            StringBuilder builder = new StringBuilder(128);
            char[] buffer = new char[8192];
            int len;
            while ((len=reader.read(buffer)) &gt; 0) {
                builder.append(buffer, 0, len);
            }
            return builder.toString();

        } catch (FileNotFoundException e) {
            // Unable to open content URI as text...  not really an
            // error, just something to ignore.

        } catch (IOException e) {
            // Something bad has happened.
            Log.w("ClippedData", "Failure loading text", e);
            return e.toString();

        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException e) {
                }
            }
        }

        // If we couldn't open the URI as a stream, then the URI itself
        // probably serves fairly well as a textual representation.
        return uri.toString();
    }

    // Finally, if all we have is an Intent, then we can just turn that
    // into text.  Not the most user-friendly thing, but it's something.
    Intent intent = getIntent();
    if (intent != null) {
        return intent.toUri(Intent.URI_INTENT_SCHEME);
    }

    // Shouldn't get here, but just in case...
    return "";
}</code></example><format type="text/html"><h3>Implementing Copy or Drag</h3></format></para>
      <para tool="javadoc-to-mdoc">To be the source of a clip, the application must construct a ClippedData
 object that any recipient can interpret best for their context.  If the clip
 is to contain a simple text, Intent, or URI, this is easy: an <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html" /></c>
 containing the appropriate data type can be constructed and used.

 </para>
      <para tool="javadoc-to-mdoc">More complicated data types require the implementation of support in
 a ContentProvider for describing and generating the data for the recipient.
 A common scenario is one where an application places on the clipboard the
 content: URI of an object that the user has copied, with the data at that
 URI consisting of a complicated structure that only other applications with
 direct knowledge of the structure can use.

 </para>
      <para tool="javadoc-to-mdoc">For applications that do not have intrinsic knowledge of the data structure,
 the content provider holding it can make the data available as an arbitrary
 number of types of data streams.  This is done by implementing the
 ContentProvider <c><see cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri,System.String)" /></c> and
 <c><see cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri,System.String,System.String)" /></c>
 methods.

 </para>
      <para tool="javadoc-to-mdoc">Going back to our simple NotePad application, this is the implementation
 it may have to convert a single note URI (consisting of a title and the note
 text) into a stream of plain text data.

 <example><code lang="java">/**
 * This describes the MIME types that are supported for opening a note
 * URI as a stream.
 */
static ClipDescription NOTE_STREAM_TYPES = new ClipDescription(null,
        new String[] { ClipDescription.MIMETYPE_TEXT_PLAIN });

/**
 * Returns the types of available data streams.  URIs to specific notes are supported.
 * The application can convert such a note to a plain text stream.
 *
 * @param uri the URI to analyze
 * @param mimeTypeFilter The MIME type to check for. This method only returns a data stream
 * type for MIME types that match the filter. Currently, only text/plain MIME types match.
 * @return a data stream MIME type. Currently, only text/plan is returned.
 * @throws IllegalArgumentException if the URI pattern doesn't match any supported patterns.
 */
@Override
public String[] getStreamTypes(Uri uri, String mimeTypeFilter) {
    /**
     *  Chooses the data stream type based on the incoming URI pattern.
     */
    switch (sUriMatcher.match(uri)) {

        // If the pattern is for notes or live folders, return null. Data streams are not
        // supported for this type of URI.
        case NOTES:
        case LIVE_FOLDER_NOTES:
            return null;

        // If the pattern is for note IDs and the MIME filter is text/plain, then return
        // text/plain
        case NOTE_ID:
            return NOTE_STREAM_TYPES.filterMimeTypes(mimeTypeFilter);

            // If the URI pattern doesn't match any permitted patterns, throws an exception.
        default:
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
}


/**
 * Returns a stream of data for each supported stream type. This method does a query on the
 * incoming URI, then uses
 * {@link android.content.ContentProvider#openPipeHelper(Uri, String, Bundle, Object,
 * PipeDataWriter)} to start another thread in which to convert the data into a stream.
 *
 * @param uri The URI pattern that points to the data stream
 * @param mimeTypeFilter A String containing a MIME type. This method tries to get a stream of
 * data with this MIME type.
 * @param opts Additional options supplied by the caller.  Can be interpreted as
 * desired by the content provider.
 * @return AssetFileDescriptor A handle to the file.
 * @throws FileNotFoundException if there is no file associated with the incoming URI.
 */
@Override
public AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts)
        throws FileNotFoundException {

    // Checks to see if the MIME type filter matches a supported MIME type.
    String[] mimeTypes = getStreamTypes(uri, mimeTypeFilter);

    // If the MIME type is supported
    if (mimeTypes != null) {

        // Retrieves the note for this URI. Uses the query method defined for this provider,
        // rather than using the database query method.
        Cursor c = query(
                uri,                    // The URI of a note
                READ_NOTE_PROJECTION,   // Gets a projection containing the note's ID, title,
                                        // and contents
                null,                   // No WHERE clause, get all matching records
                null,                   // Since there is no WHERE clause, no selection criteria
                null                    // Use the default sort order (modification date,
                                        // descending
        );


        // If the query fails or the cursor is empty, stop
        if (c == null || !c.moveToFirst()) {

            // If the cursor is empty, simply close the cursor and return
            if (c != null) {
                c.close();
            }

            // If the cursor is null, throw an exception
            throw new FileNotFoundException("Unable to query " + uri);
        }

        // Start a new thread that pipes the stream data back to the caller.
        return new AssetFileDescriptor(
                openPipeHelper(uri, mimeTypes[0], opts, c, this), 0,
                AssetFileDescriptor.UNKNOWN_LENGTH);
    }

    // If the MIME type is not supported, return a read-only handle to the file.
    return super.openTypedAssetFile(uri, mimeTypeFilter, opts);
}

/**
 * Implementation of {@link android.content.ContentProvider.PipeDataWriter}
 * to perform the actual work of converting the data in one of cursors to a
 * stream of data for the client to read.
 */
@Override
public void writeDataToPipe(ParcelFileDescriptor output, Uri uri, String mimeType,
        Bundle opts, Cursor c) {
    // We currently only support conversion-to-text from a single note entry,
    // so no need for cursor data type checking here.
    FileOutputStream fout = new FileOutputStream(output.getFileDescriptor());
    PrintWriter pw = null;
    try {
        pw = new PrintWriter(new OutputStreamWriter(fout, "UTF-8"));
        pw.println(c.getString(READ_NOTE_TITLE_INDEX));
        pw.println("");
        pw.println(c.getString(READ_NOTE_NOTE_INDEX));
    } catch (UnsupportedEncodingException e) {
        Log.w(TAG, "Ooops", e);
    } finally {
        c.close();
        if (pw != null) {
            pw.flush();
        }
        try {
            fout.close();
        } catch (IOException e) {
        }
    }
}</code></example></para>
      <para tool="javadoc-to-mdoc">The copy operation in our NotePad application is now just a simple matter
 of making a clip containing the URI of the note being copied:

 <example><code lang="java">case R.id.context_copy:
    // Gets a handle to the clipboard service.
    ClipboardManager clipboard = (ClipboardManager)
            getSystemService(Context.CLIPBOARD_SERVICE);

    // Copies the notes URI to the clipboard. In effect, this copies the note itself
    clipboard.setPrimaryClip(ClipData.newUri(   // new clipboard item holding a URI
            getContentResolver(),               // resolver to retrieve URI info
            "Note",                             // label for the clip
            noteUri)                            // the URI
    );

    // Returns to the caller and skips further processing.
    return true;</code></example></para>
      <para tool="javadoc-to-mdoc">Note if a paste operation needs this clip as text (for example to paste
 into an editor), then <c><see cref="!:NoType:android/content/ClipData$Item;Href=../../../reference/android/content/ClipData.Item.html#coerceToText(android.content.Context)" /></c> will ask the content
 provider for the clip URI as text and successfully paste the entire note.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/content/ClipData.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClipData (Android.Content.ClipData other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.ClipData other) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/ClipData;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="Android.Content.ClipData" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Create a new clip that is a copy of another clip.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new clip that is a copy of another clip.  This does a deep-copy
 of all items in the clip.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#ClipData(android.content.ClipData)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClipData (Android.Content.ClipDescription description, Android.Content.ClipData.Item item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.ClipDescription description, class Android.Content.ClipData/Item item) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/ClipDescription;Landroid/content/ClipData$Item;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="description" Type="Android.Content.ClipDescription" />
        <Parameter Name="item" Type="Android.Content.ClipData+Item" />
      </Parameters>
      <Docs>
        <param name="description">To be added.</param>
        <param name="item">To be added.</param>
        <summary>Create a new clip.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new clip.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#ClipData(android.content.ClipDescription, android.content.ClipData.Item)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ClipData (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClipData (Java.Lang.ICharSequence label, string[] mimeTypes, Android.Content.ClipData.Item item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ICharSequence label, string[] mimeTypes, class Android.Content.ClipData/Item item) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="mimeTypes" Type="System.String[]" />
        <Parameter Name="item" Type="Android.Content.ClipData+Item" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="mimeTypes">To be added.</param>
        <param name="item">To be added.</param>
        <summary>Create a new clip.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new clip.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#ClipData(java.lang.CharSequence, java.lang.String[], android.content.ClipData.Item)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClipData (string label, string[] mimeTypes, Android.Content.ClipData.Item item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string label, string[] mimeTypes, class Android.Content.ClipData/Item item) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="mimeTypes" Type="System.String[]" />
        <Parameter Name="item" Type="Android.Content.ClipData+Item" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="mimeTypes">To be added.</param>
        <param name="item">To be added.</param>
        <summary>Create a new clip.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new clip.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#ClipData(java.lang.CharSequence, java.lang.String[], android.content.ClipData.Item)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddItem">
      <MemberSignature Language="C#" Value="public virtual void AddItem (Android.Content.ClipData.Item item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddItem(class Android.Content.ClipData/Item item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addItem", "(Landroid/content/ClipData$Item;)V", "GetAddItem_Landroid_content_ClipData_Item_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Content.ClipData+Item" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>Add a new Item to the overall ClipData container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a new Item to the overall ClipData container.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#addItem(android.content.ClipData.Item)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public static Android.OS.IParcelableCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.IParcelableCreator Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CREATOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelableCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#CREATOR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DescribeContents">
      <MemberSignature Language="C#" Value="public virtual int DescribeContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DescribeContents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("describeContents", "()I", "GetDescribeContentsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#describeContents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ClipDescription Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ClipDescription Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDescription", "()Landroid/content/ClipDescription;", "GetGetDescriptionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the <c><see cref="T:Android.Content.ClipDescription" /></c> associated with this data, describing
 what it contains.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the <c><see cref="T:Android.Content.ClipDescription" /></c> associated with this data, describing
 what it contains.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#getDescription()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ClipData.Item GetItemAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ClipData/Item GetItemAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getItemAt", "(I)Landroid/content/ClipData$Item;", "GetGetItemAt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData+Item</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Return a single item inside of the clip data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a single item inside of the clip data.  The index can range
 from 0 to <c><see cref="P:Android.Content.ClipData.ItemCount" /></c>-1.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#getItemAt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ItemCount">
      <MemberSignature Language="C#" Value="public virtual int ItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getItemCount", "()I", "GetGetItemCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the number of items in the clip data.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the number of items in the clip data.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#getItemCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NewHtmlText">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewHtmlText (Java.Lang.ICharSequence label, Java.Lang.ICharSequence text, string htmlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewHtmlText(class Java.Lang.ICharSequence label, class Java.Lang.ICharSequence text, string htmlText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newHtmlText", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/content/ClipData;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="htmlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="label">User-visible label for the clip data.</param>
        <param name="text">The text of clip as plain text, for receivers that don't
 handle HTML.  This is required.</param>
        <param name="htmlText">The actual HTML text in the clip.</param>
        <summary>Create a new ClipData holding data of the type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextHtml" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new ClipData holding data of the type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextHtml" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#newHtmlText(java.lang.CharSequence, java.lang.CharSequence, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="NewHtmlText">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewHtmlText (string label, string text, string htmlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewHtmlText(string label, string text, string htmlText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="htmlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="text">To be added.</param>
        <param name="htmlText">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewIntent">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewIntent (Java.Lang.ICharSequence label, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewIntent(class Java.Lang.ICharSequence label, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newIntent", "(Ljava/lang/CharSequence;Landroid/content/Intent;)Landroid/content/ClipData;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="label">User-visible label for the clip data.</param>
        <param name="intent">The actual Intent in the clip.</param>
        <summary>Create a new ClipData holding an Intent with MIME type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextIntent" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new ClipData holding an Intent with MIME type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextIntent" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#newIntent(java.lang.CharSequence, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NewIntent">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewIntent (string label, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewIntent(string label, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewPlainText">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewPlainText (Java.Lang.ICharSequence label, Java.Lang.ICharSequence text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewPlainText(class Java.Lang.ICharSequence label, class Java.Lang.ICharSequence text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newPlainText", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="label">User-visible label for the clip data.</param>
        <param name="text">The actual text in the clip.</param>
        <summary>Create a new ClipData holding data of the type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextPlain" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new ClipData holding data of the type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextPlain" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#newPlainText(java.lang.CharSequence, java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NewPlainText">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewPlainText (string label, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewPlainText(string label, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRawUri">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewRawUri (Java.Lang.ICharSequence label, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewRawUri(class Java.Lang.ICharSequence label, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newRawUri", "(Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="label">User-visible label for the clip data.</param>
        <param name="uri">The URI in the clip.</param>
        <summary>Create a new ClipData holding an URI with MIME type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextUrilist" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new ClipData holding an URI with MIME type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextUrilist" /></c>.
 Unlike <c><see cref="M:Android.Content.ClipData.NewUri(Android.Content.ContentResolver,Java.Lang.ICharSequence,Java.Lang.ICharSequence)" /></c>, nothing
 is inferred about the URI -- if it is a content: URI holding a bitmap,
 the reported type will still be uri-list.  Use this with care!</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#newRawUri(java.lang.CharSequence, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NewRawUri">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewRawUri (string label, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewRawUri(string label, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewUri">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewUri (Android.Content.ContentResolver resolver, Java.Lang.ICharSequence label, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewUri(class Android.Content.ContentResolver resolver, class Java.Lang.ICharSequence label, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newUri", "(Landroid/content/ContentResolver;Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Android.Content.ContentResolver" />
        <Parameter Name="label" Type="Java.Lang.ICharSequence" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="resolver">ContentResolver used to get information about the URI.</param>
        <param name="label">User-visible label for the clip data.</param>
        <param name="uri">The URI in the clip.</param>
        <summary>Create a new ClipData holding a URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new ClipData holding a URI.  If the URI is a content: URI,
 this will query the content provider for the MIME type of its data and
 use that as the MIME type.  Otherwise, it will use the MIME type
 <c><see cref="F:Android.Content.ClipDescription.MimetypeTextUrilist" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#newUri(android.content.ContentResolver, java.lang.CharSequence, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NewUri">
      <MemberSignature Language="C#" Value="public static Android.Content.ClipData NewUri (Android.Content.ContentResolver resolver, string label, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.ClipData NewUri(class Android.Content.ContentResolver resolver, string label, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Content.ClipData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Android.Content.ContentResolver" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <param name="label">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToParcel">
      <MemberSignature Language="C#" Value="public virtual void WriteToParcel (Android.OS.Parcel dest, Android.OS.ParcelableWriteFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToParcel(class Android.OS.Parcel dest, valuetype Android.OS.ParcelableWriteFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "GetWriteToParcel_Landroid_os_Parcel_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.ParcelableWriteFlags" />
      </Parameters>
      <Docs>
        <param name="dest">The Parcel in which the object should be written.</param>
        <param name="flags">Additional flags about how the object should be written.
 May be 0 or <c><see cref="F:Android.OS.Parcelable.ParcelableWriteReturnValue" /></c>.
</param>
        <summary>Flatten this object in to a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flatten this object in to a Parcel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ClipData.html#writeToParcel(android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
