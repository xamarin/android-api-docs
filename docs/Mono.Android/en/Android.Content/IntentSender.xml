<Type Name="IntentSender" FullName="Android.Content.IntentSender">
  <TypeSignature Language="C#" Value="public class IntentSender : Java.Lang.Object, Android.OS.IParcelable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntentSender extends Java.Lang.Object implements class Android.OS.IParcelable, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IParcelable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/IntentSender", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="4">
    <summary>A description of an Intent and target action to perform with it.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A description of an Intent and target action to perform with it.
 The returned object can be
 handed to other applications so that they can perform the action you
 described on your behalf at a later time.

 </para>
      <para tool="javadoc-to-mdoc">By giving a IntentSender to another application,
 you are granting it the right to perform the operation you have specified
 as if the other application was yourself (with the same permissions and
 identity).  As such, you should be careful about how you build the IntentSender:
 often, for example, the base Intent you supply will have the component
 name explicitly set to one of your own components, to ensure it is ultimately
 sent there and nowhere else.

 </para>
      <para tool="javadoc-to-mdoc">A IntentSender itself is simply a reference to a token maintained by
 the system describing the original data used to retrieve it.  This means
 that, even if its owning application's process is killed, the
 IntentSender itself will remain usable from other processes that
 have been given it.  If the creating application later re-retrieves the
 same kind of IntentSender (same operation, same Intent action, data,
 categories, and components, and same flags), it will receive a IntentSender
 representing the same token if that is still valid.

 </para>
      <para tool="javadoc-to-mdoc">Instances of this class can not be made directly, but rather must be
 created from an existing <c><see cref="T:Android.App.PendingIntent" /></c> with
 <c><see cref="P:Android.App.PendingIntent.IntentSender" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/content/IntentSender.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 4" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IntentSender (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public static Android.OS.IParcelableCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.IParcelableCreator Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CREATOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelableCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#CREATOR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="CreatorPackage">
      <MemberSignature Language="C#" Value="public virtual string CreatorPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreatorPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorPackage", "()Ljava/lang/String;", "GetGetCreatorPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the application that created this
 IntentSender, that is the identity under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the package name of the application that created this
 IntentSender, that is the identity under which you will actually be
 sending the Intent.  The returned string is supplied by the system, so
 that an application can not spoof its package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#getCreatorPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUid">
      <MemberSignature Language="C#" Value="public virtual int CreatorUid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CreatorUid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorUid", "()I", "GetGetCreatorUidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the uid of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the uid of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.  The returned integer is supplied by the system, so
 that an application can not spoof its uid.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#getCreatorUid()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUserHandle">
      <MemberSignature Language="C#" Value="public virtual Android.OS.UserHandle CreatorUserHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.UserHandle CreatorUserHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorUserHandle", "()Landroid/os/UserHandle;", "GetGetCreatorUserHandleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the user handle of the application that created this
 PendingIntent, that is the user under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the user handle of the application that created this
 PendingIntent, that is the user under which you will actually be
 sending the Intent.  The returned UserHandle is supplied by the system, so
 that an application can not spoof its user.  See
 <c><see cref="M:Android.OS.Process.MyUserHandle" /></c> for
 more explanation of user handles.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#getCreatorUserHandle()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DescribeContents">
      <MemberSignature Language="C#" Value="public virtual int DescribeContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DescribeContents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("describeContents", "()I", "GetDescribeContentsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#describeContents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntentSenderOrNullFromParcel">
      <MemberSignature Language="C#" Value="public static Android.Content.IntentSender ReadIntentSenderOrNullFromParcel (Android.OS.Parcel in);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.IntentSender ReadIntentSenderOrNullFromParcel(class Android.OS.Parcel in) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readIntentSenderOrNullFromParcel", "(Landroid/os/Parcel;)Landroid/content/IntentSender;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.IntentSender</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="in">The Parcel containing the written Messenger.</param>
        <summary>Convenience function for reading either a Messenger or null pointer from
 a Parcel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience function for reading either a Messenger or null pointer from
 a Parcel.  You must have previously written the Messenger with
 <c><see cref="M:Android.Content.IntentSender.WriteIntentSenderOrNullToParcel(Android.Content.IntentSender,Android.OS.Parcel)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#readIntentSenderOrNullFromParcel(android.os.Parcel)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="SendIntent">
      <MemberSignature Language="C#" Value="public virtual void SendIntent (Android.Content.Context context, Android.App.Result code, Android.Content.Intent intent, Android.Content.IntentSender.IOnFinished onFinished, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendIntent(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.Content.IntentSender/IOnFinished onFinished, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendIntent", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/content/IntentSender$OnFinished;Landroid/os/Handler;)V", "GetSendIntent_Landroid_content_Context_ILandroid_content_Intent_Landroid_content_IntentSender_OnFinished_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.Content.IntentSender+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the IntentSender's target.</param>
        <param name="intent">Additional Intent data.  See <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <summary>Perform the operation associated with this IntentSender, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this IntentSender, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#sendIntent(android.content.Context, int, android.content.Intent, android.content.IntentSender.OnFinished, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html">Throws CanceledIntentException if the IntentSender
 is no longer allowing more intents to be sent through it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendIntent">
      <MemberSignature Language="C#" Value="public virtual void SendIntent (Android.Content.Context context, Android.App.Result code, Android.Content.Intent intent, Android.Content.IntentSender.IOnFinished onFinished, Android.OS.Handler handler, string requiredPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendIntent(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.Content.IntentSender/IOnFinished onFinished, class Android.OS.Handler handler, string requiredPermission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendIntent", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/content/IntentSender$OnFinished;Landroid/os/Handler;Ljava/lang/String;)V", "GetSendIntent_Landroid_content_Context_ILandroid_content_Intent_Landroid_content_IntentSender_OnFinished_Landroid_os_Handler_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.Content.IntentSender+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="requiredPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the IntentSender's target.</param>
        <param name="intent">Additional Intent data.  See <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <param name="requiredPermission">Name of permission that a recipient of the PendingIntent
 is required to hold.  This is only valid for broadcast intents, and
 corresponds to the permission argument in
 <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent,System.String)" /></c>.
 If null, no permission is required.</param>
        <summary>Perform the operation associated with this IntentSender, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this IntentSender, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#sendIntent(android.content.Context, int, android.content.Intent, android.content.IntentSender.OnFinished, android.os.Handler, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html">Throws CanceledIntentException if the IntentSender
 is no longer allowing more intents to be sent through it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TargetPackage">
      <MemberSignature Language="C#" Value="public virtual string TargetPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetPackage", "()Ljava/lang/String;", "GetGetTargetPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#getTargetPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIntentSenderOrNullToParcel">
      <MemberSignature Language="C#" Value="public static void WriteIntentSenderOrNullToParcel (Android.Content.IntentSender sender, Android.OS.Parcel out);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntentSenderOrNullToParcel(class Android.Content.IntentSender sender, class Android.OS.Parcel out) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeIntentSenderOrNullToParcel", "(Landroid/content/IntentSender;Landroid/os/Parcel;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Android.Content.IntentSender" />
        <Parameter Name="out" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="sender">The IntentSender to write, or null.</param>
        <param name="out">Where to write the IntentSender.
</param>
        <summary>Convenience function for writing either a IntentSender or null pointer to
 a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience function for writing either a IntentSender or null pointer to
 a Parcel.  You must use this with <c><see cref="M:Android.Content.IntentSender.ReadIntentSenderOrNullFromParcel(Android.OS.Parcel)" /></c>
 for later reading it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#writeIntentSenderOrNullToParcel(android.content.IntentSender, android.os.Parcel)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="WriteToParcel">
      <MemberSignature Language="C#" Value="public virtual void WriteToParcel (Android.OS.Parcel out, Android.OS.ParcelableWriteFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToParcel(class Android.OS.Parcel out, valuetype Android.OS.ParcelableWriteFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "GetWriteToParcel_Landroid_os_Parcel_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.ParcelableWriteFlags" />
      </Parameters>
      <Docs>
        <param name="out">The Parcel in which the object should be written.</param>
        <param name="flags">Additional flags about how the object should be written.
 May be 0 or <c><see cref="F:Android.OS.Parcelable.ParcelableWriteReturnValue" /></c>.
</param>
        <summary>Flatten this object in to a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flatten this object in to a Parcel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/IntentSender.html#writeToParcel(android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
  </Members>
</Type>
