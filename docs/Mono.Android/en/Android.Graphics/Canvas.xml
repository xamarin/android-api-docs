<Type Name="Canvas" FullName="Android.Graphics.Canvas">
  <TypeSignature Language="C#" Value="public class Canvas : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Canvas extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Graphics.Canvas" />
  <TypeSignature Language="F#" Value="type Canvas = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/graphics/Canvas", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/graphics/Canvas", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The Canvas class holds the "draw" calls.</summary>
    <remarks>
      <para>The Canvas class holds the "draw" calls. To draw something, you need
            4 basic components: A Bitmap to hold the pixels, a Canvas to host
            the draw calls (writing into the bitmap), a drawing primitive (e.g. Rect,
            Path, text, Bitmap), and a paint (to describe the colors and styles for the
            drawing).
            
            &lt;div class="special reference"&gt;
            &lt;h3&gt;Developer Guides&lt;/h3&gt;</para>
      <para>For more information about how to use Canvas, read the
            <see href="https://developer.android.com/guide/topics/graphics/2d-graphics.html">
            Canvas and Drawables</see> developer guide.</para>
      <para>&lt;/div&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/graphics/Canvas" title="Reference documentation">Java documentation for <code>android.graphics.Canvas</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Canvas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct an empty raster canvas.</summary>
        <remarks>
          <para>Construct an empty raster canvas. Use setBitmap() to specify a bitmap to
            draw into.  The initial target density is <c>Bitmap#DENSITY_NONE</c>;
            this will typically be replaced when a target bitmap is set for the
            canvas.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#Canvas()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.Canvas()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Canvas (Android.Graphics.Bitmap bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Graphics.Bitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.#ctor(Android.Graphics.Bitmap)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.Canvas : Android.Graphics.Bitmap -&gt; Android.Graphics.Canvas" Usage="new Android.Graphics.Canvas bitmap" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/graphics/Bitmap;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/graphics/Bitmap;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">Specifies a mutable bitmap for the canvas to draw into.</param>
        <summary>Construct a canvas with the specified bitmap to draw into.</summary>
        <remarks>
          <para>Construct a canvas with the specified bitmap to draw into. The bitmap
            must be mutable.</para>
          <para>The initial target density of the canvas is the same as the given
            bitmap's density.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#Canvas(android.graphics.Bitmap)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.Canvas(android.graphics.Bitmap)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Canvas (Javax.Microedition.Khronos.Opengles.IGL gl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Javax.Microedition.Khronos.Opengles.IGL gl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.#ctor(Javax.Microedition.Khronos.Opengles.IGL)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.Canvas : Javax.Microedition.Khronos.Opengles.IGL -&gt; Android.Graphics.Canvas" Usage="new Android.Graphics.Canvas gl" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This method does not exist in API-11+.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method does not exist in API-11+.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL" />
      </Parameters>
      <Docs>
        <param name="gl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Canvas (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.Canvas : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Graphics.Canvas" Usage="new Android.Graphics.Canvas (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public Android.Graphics.Rect ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect ClipBounds" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.ClipBounds" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : Android.Graphics.Rect" Usage="Android.Graphics.Canvas.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getClipBounds", "()Landroid/graphics/Rect;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getClipBounds", "()Landroid/graphics/Rect;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the bounds of the current clip (in local coordinates).</summary>
        <value>the clip bounds, or [0, 0, 0, 0] if the clip is empty.</value>
        <remarks>
          <para>Retrieve the bounds of the current clip (in local coordinates).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getClipBounds()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getClipBounds()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipOutPath">
      <MemberSignature Language="C#" Value="public virtual bool ClipOutPath (Android.Graphics.Path path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipOutPath(class Android.Graphics.Path path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipOutPath(Android.Graphics.Path)" />
      <MemberSignature Language="F#" Value="abstract member ClipOutPath : Android.Graphics.Path -&gt; bool&#xA;override this.ClipOutPath : Android.Graphics.Path -&gt; bool" Usage="canvas.ClipOutPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipOutPath", "(Landroid/graphics/Path;)Z", "GetClipOutPath_Landroid_graphics_Path_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipOutPath", "(Landroid/graphics/Path;)Z", "GetClipOutPath_Landroid_graphics_Path_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
      </Parameters>
      <Docs>
        <param name="path">The path used in the difference operation</param>
        <summary>Set the clip to the difference of the current clip and the specified path.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Set the clip to the difference of the current clip and the specified path.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipOutPath(android.graphics.Path)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipOutPath(android.graphics.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipOutRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipOutRect (Android.Graphics.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipOutRect(class Android.Graphics.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipOutRect(Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member ClipOutRect : Android.Graphics.Rect -&gt; bool&#xA;override this.ClipOutRect : Android.Graphics.Rect -&gt; bool" Usage="canvas.ClipOutRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipOutRect", "(Landroid/graphics/Rect;)Z", "GetClipOutRect_Landroid_graphics_Rect_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipOutRect", "(Landroid/graphics/Rect;)Z", "GetClipOutRect_Landroid_graphics_Rect_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to perform a difference op with the current clip.</param>
        <summary>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipOutRect(android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipOutRect(android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipOutRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipOutRect (Android.Graphics.RectF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipOutRect(class Android.Graphics.RectF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipOutRect(Android.Graphics.RectF)" />
      <MemberSignature Language="F#" Value="abstract member ClipOutRect : Android.Graphics.RectF -&gt; bool&#xA;override this.ClipOutRect : Android.Graphics.RectF -&gt; bool" Usage="canvas.ClipOutRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipOutRect", "(Landroid/graphics/RectF;)Z", "GetClipOutRect_Landroid_graphics_RectF_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipOutRect", "(Landroid/graphics/RectF;)Z", "GetClipOutRect_Landroid_graphics_RectF_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to perform a difference op with the current clip.</param>
        <summary>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipOutRect(android.graphics.RectF)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipOutRect(android.graphics.RectF)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipOutRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipOutRect (int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipOutRect(int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipOutRect(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ClipOutRect : int * int * int * int -&gt; bool&#xA;override this.ClipOutRect : int * int * int * int -&gt; bool" Usage="canvas.ClipOutRect (left, top, right, bottom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipOutRect", "(IIII)Z", "GetClipOutRect_IIIIHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipOutRect", "(IIII)Z", "GetClipOutRect_IIIIHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle used in the difference operation</param>
        <param name="top">The top of the rectangle used in the difference operation</param>
        <param name="right">The right side of the rectangle used in the difference operation</param>
        <param name="bottom">The bottom of the rectangle used in the difference operation</param>
        <summary>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipOutRect(int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipOutRect(int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipOutRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipOutRect (float left, float top, float right, float bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipOutRect(float32 left, float32 top, float32 right, float32 bottom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipOutRect(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member ClipOutRect : single * single * single * single -&gt; bool&#xA;override this.ClipOutRect : single * single * single * single -&gt; bool" Usage="canvas.ClipOutRect (left, top, right, bottom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipOutRect", "(FFFF)Z", "GetClipOutRect_FFFFHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipOutRect", "(FFFF)Z", "GetClipOutRect_FFFFHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle used in the difference operation</param>
        <param name="top">The top of the rectangle used in the difference operation</param>
        <param name="right">The right side of the rectangle used in the difference operation</param>
        <param name="bottom">The bottom of the rectangle used in the difference operation</param>
        <summary>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Set the clip to the difference of the current clip and the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipOutRect(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipOutRect(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipPath">
      <MemberSignature Language="C#" Value="public virtual bool ClipPath (Android.Graphics.Path path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipPath(class Android.Graphics.Path path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipPath(Android.Graphics.Path)" />
      <MemberSignature Language="F#" Value="abstract member ClipPath : Android.Graphics.Path -&gt; bool&#xA;override this.ClipPath : Android.Graphics.Path -&gt; bool" Usage="canvas.ClipPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipPath", "(Landroid/graphics/Path;)Z", "GetClipPath_Landroid_graphics_Path_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipPath", "(Landroid/graphics/Path;)Z", "GetClipPath_Landroid_graphics_Path_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
      </Parameters>
      <Docs>
        <param name="path">The path to intersect with the current clip</param>
        <summary>Intersect the current clip with the specified path.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified path.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipPath(android.graphics.Path)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipPath(android.graphics.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipPath">
      <MemberSignature Language="C#" Value="public virtual bool ClipPath (Android.Graphics.Path path, Android.Graphics.Region.Op op);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipPath(class Android.Graphics.Path path, class Android.Graphics.Region/Op op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipPath(Android.Graphics.Path,Android.Graphics.Region.Op)" />
      <MemberSignature Language="F#" Value="abstract member ClipPath : Android.Graphics.Path * Android.Graphics.Region.Op -&gt; bool&#xA;override this.ClipPath : Android.Graphics.Path * Android.Graphics.Region.Op -&gt; bool" Usage="canvas.ClipPath (path, op)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipPath", "(Landroid/graphics/Path;Landroid/graphics/Region$Op;)Z", "GetClipPath_Landroid_graphics_Path_Landroid_graphics_Region_Op_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipPath", "(Landroid/graphics/Path;Landroid/graphics/Region$Op;)Z", "GetClipPath_Landroid_graphics_Path_Landroid_graphics_Region_Op_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
        <Parameter Name="op" Type="Android.Graphics.Region+Op" />
      </Parameters>
      <Docs>
        <param name="path">The path to intersect with the current clip</param>
        <param name="op">How the clip is modified</param>
        <summary>Intersect the current clip with the specified path.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipPath(android.graphics.Path)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipPath(android.graphics.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (Android.Graphics.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(class Android.Graphics.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : Android.Graphics.Rect -&gt; bool&#xA;override this.ClipRect : Android.Graphics.Rect -&gt; bool" Usage="canvas.ClipRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(Landroid/graphics/Rect;)Z", "GetClipRect_Landroid_graphics_Rect_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(Landroid/graphics/Rect;)Z", "GetClipRect_Landroid_graphics_Rect_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to intersect with the current clip.</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (Android.Graphics.RectF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(class Android.Graphics.RectF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(Android.Graphics.RectF)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : Android.Graphics.RectF -&gt; bool&#xA;override this.ClipRect : Android.Graphics.RectF -&gt; bool" Usage="canvas.ClipRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(Landroid/graphics/RectF;)Z", "GetClipRect_Landroid_graphics_RectF_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(Landroid/graphics/RectF;)Z", "GetClipRect_Landroid_graphics_RectF_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to intersect with the current clip.</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(android.graphics.RectF)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(android.graphics.RectF)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (Android.Graphics.Rect rect, Android.Graphics.Region.Op op);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(class Android.Graphics.Rect rect, class Android.Graphics.Region/Op op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(Android.Graphics.Rect,Android.Graphics.Region.Op)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : Android.Graphics.Rect * Android.Graphics.Region.Op -&gt; bool&#xA;override this.ClipRect : Android.Graphics.Rect * Android.Graphics.Region.Op -&gt; bool" Usage="canvas.ClipRect (rect, op)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(Landroid/graphics/Rect;Landroid/graphics/Region$Op;)Z", "GetClipRect_Landroid_graphics_Rect_Landroid_graphics_Region_Op_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(Landroid/graphics/Rect;Landroid/graphics/Region$Op;)Z", "GetClipRect_Landroid_graphics_Rect_Landroid_graphics_Region_Op_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
        <Parameter Name="op" Type="Android.Graphics.Region+Op" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to intersect with the current clip.</param>
        <param name="op">How the clip is modified</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (Android.Graphics.RectF rect, Android.Graphics.Region.Op op);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(class Android.Graphics.RectF rect, class Android.Graphics.Region/Op op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(Android.Graphics.RectF,Android.Graphics.Region.Op)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : Android.Graphics.RectF * Android.Graphics.Region.Op -&gt; bool&#xA;override this.ClipRect : Android.Graphics.RectF * Android.Graphics.Region.Op -&gt; bool" Usage="canvas.ClipRect (rect, op)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(Landroid/graphics/RectF;Landroid/graphics/Region$Op;)Z", "GetClipRect_Landroid_graphics_RectF_Landroid_graphics_Region_Op_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(Landroid/graphics/RectF;Landroid/graphics/Region$Op;)Z", "GetClipRect_Landroid_graphics_RectF_Landroid_graphics_Region_Op_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
        <Parameter Name="op" Type="Android.Graphics.Region+Op" />
      </Parameters>
      <Docs>
        <param name="rect">The rect to intersect with the current clip</param>
        <param name="op">How the clip is modified</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (int left, int top, int right, int bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(int32 left, int32 top, int32 right, int32 bottom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : int * int * int * int -&gt; bool&#xA;override this.ClipRect : int * int * int * int -&gt; bool" Usage="canvas.ClipRect (left, top, right, bottom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(IIII)Z", "GetClipRect_IIIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(IIII)Z", "GetClipRect_IIIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to intersect with the
                          current clip</param>
        <param name="top">The top of the rectangle to intersect with the current clip</param>
        <param name="right">The right side of the rectangle to intersect with the
                          current clip</param>
        <param name="bottom">The bottom of the rectangle to intersect with the current
                          clip</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (float left, float top, float right, float bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(float32 left, float32 top, float32 right, float32 bottom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : single * single * single * single -&gt; bool&#xA;override this.ClipRect : single * single * single * single -&gt; bool" Usage="canvas.ClipRect (left, top, right, bottom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(FFFF)Z", "GetClipRect_FFFFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(FFFF)Z", "GetClipRect_FFFFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to intersect with the
                          current clip</param>
        <param name="top">The top of the rectangle to intersect with the current clip</param>
        <param name="right">The right side of the rectangle to intersect with the
                          current clip</param>
        <param name="bottom">The bottom of the rectangle to intersect with the current
                          clip</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual bool ClipRect (float left, float top, float right, float bottom, Android.Graphics.Region.Op op);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRect(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Region/Op op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRect(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Region.Op)" />
      <MemberSignature Language="F#" Value="abstract member ClipRect : single * single * single * single * Android.Graphics.Region.Op -&gt; bool&#xA;override this.ClipRect : single * single * single * single * Android.Graphics.Region.Op -&gt; bool" Usage="canvas.ClipRect (left, top, right, bottom, op)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRect", "(FFFFLandroid/graphics/Region$Op;)Z", "GetClipRect_FFFFLandroid_graphics_Region_Op_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRect", "(FFFFLandroid/graphics/Region$Op;)Z", "GetClipRect_FFFFLandroid_graphics_Region_Op_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="op" Type="Android.Graphics.Region+Op" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to intersect with the
                          current clip</param>
        <param name="top">The top of the rectangle to intersect with the current clip</param>
        <param name="right">The right side of the rectangle to intersect with the
                          current clip</param>
        <param name="bottom">The bottom of the rectangle to intersect with the current
                          clip</param>
        <param name="op">How the clip is modified</param>
        <summary>Intersect the current clip with the specified rectangle, which is
            expressed in local coordinates.</summary>
        <returns>true if the resulting clip is non-empty</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRect(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRect(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRegion">
      <MemberSignature Language="C#" Value="public virtual bool ClipRegion (Android.Graphics.Region? region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRegion(class Android.Graphics.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRegion(Android.Graphics.Region)" />
      <MemberSignature Language="F#" Value="abstract member ClipRegion : Android.Graphics.Region -&gt; bool&#xA;override this.ClipRegion : Android.Graphics.Region -&gt; bool" Usage="canvas.ClipRegion region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRegion", "(Landroid/graphics/Region;)Z", "GetClipRegion_Landroid_graphics_Region_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRegion", "(Landroid/graphics/Region;)Z", "GetClipRegion_Landroid_graphics_Region_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Android.Graphics.Region" />
      </Parameters>
      <Docs>
        <param name="region">The region to operate on the current clip, based on op</param>
        <summary>Intersect the current clip with the specified region.</summary>
        <returns>true if the resulting is non-empty</returns>
        <remarks>
          <para>Intersect the current clip with the specified region. Note that unlike
            clipRect() and clipPath() which transform their arguments by the
            current matrix, clipRegion() assumes its argument is already in the
            coordinate system of the current layer's bitmap, and so not
            transformation is performed.</para>
          <para>This member is deprecated. Unlike all other clip calls this API does not respect the
                        current matrix. Use <c>#clipRect(Rect)</c> as an alternative.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#clipRegion(android.graphics.Region)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.clipRegion(android.graphics.Region)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipRegion">
      <MemberSignature Language="C#" Value="public virtual bool ClipRegion (Android.Graphics.Region? region, Android.Graphics.Region.Op? op);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClipRegion(class Android.Graphics.Region region, class Android.Graphics.Region/Op op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.ClipRegion(Android.Graphics.Region,Android.Graphics.Region.Op)" />
      <MemberSignature Language="F#" Value="abstract member ClipRegion : Android.Graphics.Region * Android.Graphics.Region.Op -&gt; bool&#xA;override this.ClipRegion : Android.Graphics.Region * Android.Graphics.Region.Op -&gt; bool" Usage="canvas.ClipRegion (region, op)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clipRegion", "(Landroid/graphics/Region;Landroid/graphics/Region$Op;)Z", "GetClipRegion_Landroid_graphics_Region_Landroid_graphics_Region_Op_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clipRegion", "(Landroid/graphics/Region;Landroid/graphics/Region$Op;)Z", "GetClipRegion_Landroid_graphics_Region_Landroid_graphics_Region_Op_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Android.Graphics.Region" />
        <Parameter Name="op" Type="Android.Graphics.Region+Op" />
      </Parameters>
      <Docs>
        <param name="region">The region to operate on the current clip, based on op</param>
        <param name="op">How the clip is modified</param>
        <summary>Modify the current clip with the specified region.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public virtual void Concat (Android.Graphics.Matrix? matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Concat(class Android.Graphics.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Concat(Android.Graphics.Matrix)" />
      <MemberSignature Language="F#" Value="abstract member Concat : Android.Graphics.Matrix -&gt; unit&#xA;override this.Concat : Android.Graphics.Matrix -&gt; unit" Usage="canvas.Concat matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("concat", "(Landroid/graphics/Matrix;)V", "GetConcat_Landroid_graphics_Matrix_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("concat", "(Landroid/graphics/Matrix;)V", "GetConcat_Landroid_graphics_Matrix_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="Android.Graphics.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">The matrix to preconcatenate with the current matrix</param>
        <summary>Preconcat the current matrix with the specified matrix.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified matrix. If the specified
            matrix is null, this method does nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#concat(android.graphics.Matrix)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.concat(android.graphics.Matrix)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Density">
      <MemberSignature Language="C#" Value="public virtual int Density { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Density" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.Density" />
      <MemberSignature Language="F#" Value="member this.Density : int with get, set" Usage="Android.Graphics.Canvas.Density" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDensity", "()I", "GetGetDensityHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDensity", "()I", "GetGetDensityHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setDensity", "(I)V", "GetSetDensity_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setDensity", "(I)V", "GetSetDensity_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="density">The new target density of the canvas, which is used
            to determine the scaling factor when drawing a bitmap into it.  Use
            <c>Bitmap#DENSITY_NONE</c> to disable bitmap scaling.</param>
        <summary>Returns the target density of the canvas. -or- Specifies the density for this Canvas' backing bitmap.</summary>
        <value>Returns the current target density of the canvas, which is used
            to determine the scaling factor when drawing a bitmap into it.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns the target density of the canvas.  The default density is
            derived from the density of its backing bitmap, or
            <c>Bitmap#DENSITY_NONE</c> if there is not one.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getDensity()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getDensity()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Specifies the density for this Canvas' backing bitmap.  This modifies
            the target density of the canvas itself, as well as the density of its
            backing bitmap via <c>Bitmap#setDensity(int) Bitmap.setDensity(int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#setDensity(int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.setDensity(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Graphics.Canvas.Density" />
        <altmember cref="P:Android.Graphics.Bitmap.Density" />
      </Docs>
    </Member>
    <Member MemberName="DisableZ">
      <MemberSignature Language="C#" Value="public virtual void DisableZ ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableZ() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DisableZ" />
      <MemberSignature Language="F#" Value="abstract member DisableZ : unit -&gt; unit&#xA;override this.DisableZ : unit -&gt; unit" Usage="canvas.DisableZ " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("disableZ", "()V", "GetDisableZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("disableZ", "()V", "GetDisableZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables Z support, preventing any RenderNodes drawn after this point from being
            visually reordered or having shadows rendered.</summary>
        <remarks>
          <para>Disables Z support, preventing any RenderNodes drawn after this point from being
            visually reordered or having shadows rendered.
            
            Note: This is not impacted by any <c>#save()</c> or <c>#restore()</c> calls as it is not
            considered to be part of the current matrix or clip.
            
            See <c>#enableZ()</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#disableZ()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.disableZ()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public virtual void DrawArc (Android.Graphics.RectF oval, float startAngle, float sweepAngle, bool useCenter, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawArc(class Android.Graphics.RectF oval, float32 startAngle, float32 sweepAngle, bool useCenter, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawArc(Android.Graphics.RectF,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawArc : Android.Graphics.RectF * single * single * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawArc : Android.Graphics.RectF * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawArc (oval, startAngle, sweepAngle, useCenter, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawArc", "(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V", "GetDrawArc_Landroid_graphics_RectF_FFZLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawArc", "(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V", "GetDrawArc_Landroid_graphics_RectF_FFZLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oval" Type="Android.Graphics.RectF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
        <Parameter Name="useCenter" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="oval">The bounds of oval used to define the shape and size of the arc</param>
        <param name="startAngle">Starting angle (in degrees) where the arc begins</param>
        <param name="sweepAngle">Sweep angle (in degrees) measured clockwise</param>
        <param name="useCenter">If true, include the center of the oval in the arc, and close it if it is
                       being stroked. This will draw a wedge</param>
        <param name="paint">The paint used to draw the arc</param>
        <summary>Draw the specified arc, which will be scaled to fit inside the specified oval.</summary>
        <remarks>
          <para>Draw the specified arc, which will be scaled to fit inside the specified oval.</para>
          <para>If the start angle is negative or &gt;= 360, the start angle is treated as start angle modulo
            360.</para>
          <para>If the sweep angle is &gt;= 360, then the oval is drawn completely. Note that this differs
            slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is
            negative, the sweep angle is treated as sweep angle modulo 360</para>
          <para>The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0
            degrees (3 o'clock on a watch.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawArc(android.graphics.RectF,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public virtual void DrawArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle, bool useCenter, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawArc(float32 left, float32 top, float32 right, float32 bottom, float32 startAngle, float32 sweepAngle, bool useCenter, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawArc : single * single * single * single * single * single * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawArc : single * single * single * single * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawArc (left, top, right, bottom, startAngle, sweepAngle, useCenter, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawArc", "(FFFFFFZLandroid/graphics/Paint;)V", "GetDrawArc_FFFFFFZLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawArc", "(FFFFFFZLandroid/graphics/Paint;)V", "GetDrawArc_FFFFFFZLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
        <Parameter Name="useCenter" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="startAngle">Starting angle (in degrees) where the arc begins</param>
        <param name="sweepAngle">Sweep angle (in degrees) measured clockwise</param>
        <param name="useCenter">If true, include the center of the oval in the arc, and close it if it is
                       being stroked. This will draw a wedge</param>
        <param name="paint">The paint used to draw the arc</param>
        <summary>Draw the specified arc, which will be scaled to fit inside the specified oval.</summary>
        <remarks>
          <para>Draw the specified arc, which will be scaled to fit inside the specified oval.</para>
          <para>If the start angle is negative or &gt;= 360, the start angle is treated as start angle modulo
            360.</para>
          <para>If the sweep angle is &gt;= 360, then the oval is drawn completely. Note that this differs
            slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is
            negative, the sweep angle is treated as sweep angle modulo 360</para>
          <para>The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0
            degrees (3 o'clock on a watch.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawArc(float,%20float,%20float,%20float,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawArc(float, float, float, float, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawARGB">
      <MemberSignature Language="C#" Value="public virtual void DrawARGB (int a, int r, int g, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawARGB(int32 a, int32 r, int32 g, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawARGB(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DrawARGB : int * int * int * int -&gt; unit&#xA;override this.DrawARGB : int * int * int * int -&gt; unit" Usage="canvas.DrawARGB (a, r, g, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawARGB", "(IIII)V", "GetDrawARGB_IIIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawARGB", "(IIII)V", "GetDrawARGB_IIIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="g" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">alpha component (0..255) of the color to draw onto the canvas</param>
        <param name="r">red component (0..255) of the color to draw onto the canvas</param>
        <param name="g">green component (0..255) of the color to draw onto the canvas</param>
        <param name="b">blue component (0..255) of the color to draw onto the canvas</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB
            color, using srcover porterduff mode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB
            color, using srcover porterduff mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawARGB(int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawARGB(int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (Android.Graphics.Bitmap bitmap, Android.Graphics.Matrix matrix, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(class Android.Graphics.Bitmap bitmap, class Android.Graphics.Matrix matrix, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(Android.Graphics.Bitmap,Android.Graphics.Matrix,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Matrix * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Matrix * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (bitmap, matrix, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Matrix_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Matrix_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="matrix" Type="Android.Graphics.Matrix" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw</param>
        <param name="matrix">The matrix used to transform the bitmap when it is drawn</param>
        <param name="paint">May be null. The paint used to draw the bitmap</param>
        <summary>Draw the bitmap using the specified matrix.</summary>
        <remarks>
          <para>Draw the bitmap using the specified matrix.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(android.graphics.Bitmap,%20android.graphics.Matrix,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (Android.Graphics.Bitmap bitmap, Android.Graphics.Rect? src, Android.Graphics.Rect dst, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(class Android.Graphics.Bitmap bitmap, class Android.Graphics.Rect src, class Android.Graphics.Rect dst, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(Android.Graphics.Bitmap,Android.Graphics.Rect,Android.Graphics.Rect,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (bitmap, src, dst, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="src" Type="Android.Graphics.Rect" />
        <Parameter Name="dst" Type="Android.Graphics.Rect" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to be drawn</param>
        <param name="src">May be null. The subset of the bitmap to be drawn</param>
        <param name="dst">The rectangle that the bitmap will be scaled/translated to fit into</param>
        <param name="paint">May be null. The paint used to draw the bitmap</param>
        <summary>Draw the specified bitmap, scaling/translating automatically to fill the destination
            rectangle.</summary>
        <remarks>
          <para>Draw the specified bitmap, scaling/translating automatically to fill the destination
            rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to
            draw.</para>
          <para>Note: if the paint contains a maskfilter that generates a mask which extends beyond the
            bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it
            were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be
            the edge color replicated.</para>
          <para>This function &lt;em&gt;ignores the density associated with the bitmap&lt;/em&gt;. This is because the
            source and destination rectangle coordinate spaces are in their respective densities, so must
            already have the appropriate scaling factor applied.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.Rect,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (Android.Graphics.Bitmap bitmap, Android.Graphics.Rect? src, Android.Graphics.RectF dst, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(class Android.Graphics.Bitmap bitmap, class Android.Graphics.Rect src, class Android.Graphics.RectF dst, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(Android.Graphics.Bitmap,Android.Graphics.Rect,Android.Graphics.RectF,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (bitmap, src, dst, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="src" Type="Android.Graphics.Rect" />
        <Parameter Name="dst" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to be drawn</param>
        <param name="src">May be null. The subset of the bitmap to be drawn</param>
        <param name="dst">The rectangle that the bitmap will be scaled/translated to fit into</param>
        <param name="paint">May be null. The paint used to draw the bitmap</param>
        <summary>Draw the specified bitmap, scaling/translating automatically to fill the destination
            rectangle.</summary>
        <remarks>
          <para>Draw the specified bitmap, scaling/translating automatically to fill the destination
            rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to
            draw.</para>
          <para>Note: if the paint contains a maskfilter that generates a mask which extends beyond the
            bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it
            were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be
            the edge color replicated.</para>
          <para>This function &lt;em&gt;ignores the density associated with the bitmap&lt;/em&gt;. This is because the
            source and destination rectangle coordinate spaces are in their respective densities, so must
            already have the appropriate scaling factor applied.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.RectF,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (Android.Graphics.Bitmap bitmap, float left, float top, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(class Android.Graphics.Bitmap bitmap, float32 left, float32 top, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(Android.Graphics.Bitmap,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : Android.Graphics.Bitmap * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : Android.Graphics.Bitmap * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (bitmap, left, top, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V", "GetDrawBitmap_Landroid_graphics_Bitmap_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to be drawn</param>
        <param name="left">The position of the left side of the bitmap being drawn</param>
        <param name="top">The position of the top side of the bitmap being drawn</param>
        <param name="paint">The paint used to draw the bitmap (may be null)</param>
        <summary>Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint,
            transformed by the current matrix.</summary>
        <remarks>
          <para>Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint,
            transformed by the current matrix.</para>
          <para>Note: if the paint contains a maskfilter that generates a mask which extends beyond the
            bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it
            were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be
            the edge color replicated.</para>
          <para>If the bitmap and canvas have different densities, this function will take care of
            automatically scaling the bitmap to draw at the same density as the canvas.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(android.graphics.Bitmap,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (int[] colors, int offset, int stride, int x, int y, int width, int height, bool hasAlpha, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(int32[] colors, int32 offset, int32 stride, int32 x, int32 y, int32 width, int32 height, bool hasAlpha, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : int[] * int * int * int * int * int * int * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : int[] * int * int * int * int * int * int * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (colors, offset, stride, x, y, width, height, hasAlpha, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "([IIIIIIIZLandroid/graphics/Paint;)V", "GetDrawBitmap_arrayIIIIIIIZLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "([IIIIIIIZLandroid/graphics/Paint;)V", "GetDrawBitmap_arrayIIIIIIIZLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colors" Type="System.Int32[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="stride" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="hasAlpha" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="colors">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="stride">To be added.</param>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="hasAlpha">To be added.</param>
        <param name="paint">The paint used to draw the bitmap (may be null)</param>
        <summary>Legacy version of drawBitmap(int[] colors, .</summary>
        <remarks>
          <para>Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y</para>
          <para>This member is deprecated. Usage with a <c>#isHardwareAccelerated() hardware accelerated</c> canvas
                        requires an internal copy of color buffer contents every time this method is
                        called. Using a Bitmap avoids this copy, and allows the application to more
                        explicitly control the lifetime and copies of pixel data.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(int[],%20int,%20int,%20int,%20int,%20int,%20int,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, bool hasAlpha, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmap(int32[] colors, int32 offset, int32 stride, float32 x, float32 y, int32 width, int32 height, bool hasAlpha, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmap(System.Int32[],System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmap : int[] * int * int * single * single * int * int * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmap : int[] * int * int * single * single * int * int * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmap (colors, offset, stride, x, y, width, height, hasAlpha, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmap", "([IIIFFIIZLandroid/graphics/Paint;)V", "GetDrawBitmap_arrayIIIFFIIZLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmap", "([IIIFFIIZLandroid/graphics/Paint;)V", "GetDrawBitmap_arrayIIIFFIIZLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colors" Type="System.Int32[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="stride" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="hasAlpha" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="colors">Array of colors representing the pixels of the bitmap</param>
        <param name="offset">Offset into the array of colors for the first pixel</param>
        <param name="stride">The number of colors in the array between rows (must be &gt;= width or &lt;= -width).</param>
        <param name="x">The X coordinate for where to draw the bitmap</param>
        <param name="y">The Y coordinate for where to draw the bitmap</param>
        <param name="width">The width of the bitmap</param>
        <param name="height">The height of the bitmap</param>
        <param name="hasAlpha">True if the alpha channel of the colors contains valid values. If false, the
                       alpha byte is ignored (assumed to be 0xFF for every pixel).</param>
        <param name="paint">May be null. The paint used to draw the bitmap</param>
        <summary>Treat the specified array of colors as a bitmap, and draw it.</summary>
        <remarks>
          <para>Treat the specified array of colors as a bitmap, and draw it. This gives the same result as
            first creating a bitmap from the array, and then drawing it, but this method avoids
            explicitly creating a bitmap object which can be more efficient if the colors are changing
            often.</para>
          <para>This member is deprecated. Usage with a <c>#isHardwareAccelerated() hardware accelerated</c> canvas
                        requires an internal copy of color buffer contents every time this method is
                        called. Using a Bitmap avoids this copy, and allows the application to more
                        explicitly control the lifetime and copies of pixel data.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmap(int[],%20int,%20int,%20float,%20float,%20int,%20int,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DrawBitmapMesh">
      <MemberSignature Language="C#" Value="public virtual void DrawBitmapMesh (Android.Graphics.Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[]? colors, int colorOffset, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBitmapMesh(class Android.Graphics.Bitmap bitmap, int32 meshWidth, int32 meshHeight, float32[] verts, int32 vertOffset, int32[] colors, int32 colorOffset, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawBitmapMesh(Android.Graphics.Bitmap,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32[],System.Int32,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBitmapMesh : Android.Graphics.Bitmap * int * int * single[] * int * int[] * int * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawBitmapMesh : Android.Graphics.Bitmap * int * int * single[] * int * int[] * int * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawBitmapMesh (bitmap, meshWidth, meshHeight, verts, vertOffset, colors, colorOffset, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawBitmapMesh", "(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V", "GetDrawBitmapMesh_Landroid_graphics_Bitmap_IIarrayFIarrayIILandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawBitmapMesh", "(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V", "GetDrawBitmapMesh_Landroid_graphics_Bitmap_IIarrayFIarrayIILandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="meshWidth" Type="System.Int32" />
        <Parameter Name="meshHeight" Type="System.Int32" />
        <Parameter Name="verts" Type="System.Single[]" />
        <Parameter Name="vertOffset" Type="System.Int32" />
        <Parameter Name="colors" Type="System.Int32[]" />
        <Parameter Name="colorOffset" Type="System.Int32" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw using the mesh</param>
        <param name="meshWidth">The number of columns in the mesh. Nothing is drawn if this is 0</param>
        <param name="meshHeight">The number of rows in the mesh. Nothing is drawn if this is 0</param>
        <param name="verts">Array of x,y pairs, specifying where the mesh should be drawn. There must be at
                       least (meshWidth+1) * (meshHeight+1) * 2 + vertOffset values in the array</param>
        <param name="vertOffset">Number of verts elements to skip before drawing</param>
        <param name="colors">May be null. Specifies a color at each vertex, which is interpolated across the
                       cell, and whose values are multiplied by the corresponding bitmap colors. If not
                       null, there must be at least (meshWidth+1) * (meshHeight+1) + colorOffset values
                       in the array.</param>
        <param name="colorOffset">Number of color elements to skip before drawing</param>
        <param name="paint">May be null. The paint used to draw the bitmap. Antialiasing is not supported.</param>
        <summary>Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the
            bitmap.</summary>
        <remarks>
          <para>Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the
            bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts
            array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed
            across the top of the bitmap from left to right. A more general version of this method is
            drawVertices().
            
            Prior to API level <c>Build.VERSION_CODES#P</c> vertOffset and colorOffset were ignored,
            effectively treating them as zeros. In API level <c>Build.VERSION_CODES#P</c> and above
            these parameters will be respected.</para>
          <para>Note: antialiasing is not supported, therefore <c>Paint#ANTI_ALIAS_FLAG</c> is
            ignored.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawBitmapMesh(android.graphics.Bitmap,%20int,%20int,%20float[],%20int,%20int[],%20int,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawCircle">
      <MemberSignature Language="C#" Value="public virtual void DrawCircle (float cx, float cy, float radius, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawCircle(float32 cx, float32 cy, float32 radius, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawCircle(System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawCircle : single * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawCircle : single * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawCircle (cx, cy, radius, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawCircle", "(FFFLandroid/graphics/Paint;)V", "GetDrawCircle_FFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawCircle", "(FFFLandroid/graphics/Paint;)V", "GetDrawCircle_FFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cx" Type="System.Single" />
        <Parameter Name="cy" Type="System.Single" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="cx">The x-coordinate of the center of the circle to be drawn</param>
        <param name="cy">The y-coordinate of the center of the circle to be drawn</param>
        <param name="radius">The radius of the circle to be drawn</param>
        <param name="paint">The paint used to draw the circle</param>
        <summary>Draw the specified circle using the specified paint.</summary>
        <remarks>
          <para>Draw the specified circle using the specified paint. If radius is &lt;= 0, then nothing will be
            drawn. The circle will be filled or framed based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawCircle(float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawCircle(float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public virtual void DrawColor (Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawColor(valuetype Android.Graphics.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawColor(Android.Graphics.Color)" />
      <MemberSignature Language="F#" Value="abstract member DrawColor : Android.Graphics.Color -&gt; unit&#xA;override this.DrawColor : Android.Graphics.Color -&gt; unit" Usage="canvas.DrawColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawColor", "(I)V", "GetDrawColor_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawColor", "(I)V", "GetDrawColor_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="color">the color to draw onto the canvas</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color,
            using srcover porterduff mode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color,
            using srcover porterduff mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawColor(int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawColor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public virtual void DrawColor (long color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawColor(int64 color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawColor(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member DrawColor : int64 -&gt; unit&#xA;override this.DrawColor : int64 -&gt; unit" Usage="canvas.DrawColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawColor", "(J)V", "GetDrawColor_JHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawColor", "(J)V", "GetDrawColor_JHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="color">the <c>ColorLong</c> to draw onto the canvas. See the <c>Color</c>
                         class for details about <c>ColorLong</c>s.</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color,
            using srcover porterduff mode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color,
            using srcover porterduff mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawColor(long)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawColor(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public virtual void DrawColor (Android.Graphics.Color color, Android.Graphics.BlendMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawColor(valuetype Android.Graphics.Color color, class Android.Graphics.BlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawColor(Android.Graphics.Color,Android.Graphics.BlendMode)" />
      <MemberSignature Language="F#" Value="abstract member DrawColor : Android.Graphics.Color * Android.Graphics.BlendMode -&gt; unit&#xA;override this.DrawColor : Android.Graphics.Color * Android.Graphics.BlendMode -&gt; unit" Usage="canvas.DrawColor (color, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawColor", "(ILandroid/graphics/BlendMode;)V", "GetDrawColor_ILandroid_graphics_BlendMode_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawColor", "(ILandroid/graphics/BlendMode;)V", "GetDrawColor_ILandroid_graphics_BlendMode_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Android.Graphics.Color" />
        <Parameter Name="mode" Type="Android.Graphics.BlendMode" />
      </Parameters>
      <Docs>
        <param name="color">the color to draw onto the canvas</param>
        <param name="mode">the blendmode to apply to the color</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and
            blendmode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and
            blendmode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawColor(int,%20android.graphics.BlendMode)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawColor(int, android.graphics.BlendMode)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public virtual void DrawColor (Android.Graphics.Color color, Android.Graphics.PorterDuff.Mode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawColor(valuetype Android.Graphics.Color color, class Android.Graphics.PorterDuff/Mode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawColor(Android.Graphics.Color,Android.Graphics.PorterDuff.Mode)" />
      <MemberSignature Language="F#" Value="abstract member DrawColor : Android.Graphics.Color * Android.Graphics.PorterDuff.Mode -&gt; unit&#xA;override this.DrawColor : Android.Graphics.Color * Android.Graphics.PorterDuff.Mode -&gt; unit" Usage="canvas.DrawColor (color, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawColor", "(ILandroid/graphics/PorterDuff$Mode;)V", "GetDrawColor_ILandroid_graphics_PorterDuff_Mode_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawColor", "(ILandroid/graphics/PorterDuff$Mode;)V", "GetDrawColor_ILandroid_graphics_PorterDuff_Mode_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Android.Graphics.Color" />
        <Parameter Name="mode" Type="Android.Graphics.PorterDuff+Mode" />
      </Parameters>
      <Docs>
        <param name="color">the color to draw onto the canvas</param>
        <param name="mode">the porter-duff mode to apply to the color
</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color,
            using srcover porterduff mode.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawColor(int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawColor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public virtual void DrawColor (long color, Android.Graphics.BlendMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawColor(int64 color, class Android.Graphics.BlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawColor(System.Int64,Android.Graphics.BlendMode)" />
      <MemberSignature Language="F#" Value="abstract member DrawColor : int64 * Android.Graphics.BlendMode -&gt; unit&#xA;override this.DrawColor : int64 * Android.Graphics.BlendMode -&gt; unit" Usage="canvas.DrawColor (color, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawColor", "(JLandroid/graphics/BlendMode;)V", "GetDrawColor_JLandroid_graphics_BlendMode_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawColor", "(JLandroid/graphics/BlendMode;)V", "GetDrawColor_JLandroid_graphics_BlendMode_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Int64" />
        <Parameter Name="mode" Type="Android.Graphics.BlendMode" />
      </Parameters>
      <Docs>
        <param name="color">the <c>ColorLong</c> to draw onto the canvas. See the <c>Color</c>
                         class for details about <c>ColorLong</c>s.</param>
        <param name="mode">the blendmode to apply to the color</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and
            blendmode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and
            blendmode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawColor(long,%20android.graphics.BlendMode)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawColor(long, android.graphics.BlendMode)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawDoubleRoundRect">
      <MemberSignature Language="C#" Value="public virtual void DrawDoubleRoundRect (Android.Graphics.RectF outer, float[] outerRadii, Android.Graphics.RectF inner, float[] innerRadii, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawDoubleRoundRect(class Android.Graphics.RectF outer, float32[] outerRadii, class Android.Graphics.RectF inner, float32[] innerRadii, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawDoubleRoundRect(Android.Graphics.RectF,System.Single[],Android.Graphics.RectF,System.Single[],Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawDoubleRoundRect : Android.Graphics.RectF * single[] * Android.Graphics.RectF * single[] * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawDoubleRoundRect : Android.Graphics.RectF * single[] * Android.Graphics.RectF * single[] * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawDoubleRoundRect (outer, outerRadii, inner, innerRadii, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawDoubleRoundRect", "(Landroid/graphics/RectF;[FLandroid/graphics/RectF;[FLandroid/graphics/Paint;)V", "GetDrawDoubleRoundRect_Landroid_graphics_RectF_arrayFLandroid_graphics_RectF_arrayFLandroid_graphics_Paint_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawDoubleRoundRect", "(Landroid/graphics/RectF;[FLandroid/graphics/RectF;[FLandroid/graphics/Paint;)V", "GetDrawDoubleRoundRect_Landroid_graphics_RectF_arrayFLandroid_graphics_RectF_arrayFLandroid_graphics_Paint_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Android.Graphics.RectF" />
        <Parameter Name="outerRadii" Type="System.Single[]" />
        <Parameter Name="inner" Type="Android.Graphics.RectF" />
        <Parameter Name="innerRadii" Type="System.Single[]" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="outer">The outer rectangular bounds of the roundRect to be drawn</param>
        <param name="outerRadii">Array of 8 float representing the x, y corner radii for top left,
                              top right, bottom right, bottom left corners respectively on the outer
                              rounded rectangle</param>
        <param name="inner">The inner rectangular bounds of the roundRect to be drawn</param>
        <param name="innerRadii">Array of 8 float representing the x, y corner radii for top left,
                              top right, bottom right, bottom left corners respectively on the
                              outer rounded rectangle</param>
        <param name="paint">The paint used to draw the double roundRect</param>
        <summary>Draws a double rounded rectangle using the specified paint.</summary>
        <remarks>
          <para>Draws a double rounded rectangle using the specified paint. The resultant round rect
            will be filled in the area defined between the outer and inner rectangular bounds if
            the <c>Paint</c> configured with <c>Paint.Style#FILL</c>.
            Otherwise if <c>Paint.Style#STROKE</c> is used, then 2 rounded rect strokes will
            be drawn at the outer and inner rounded rectangles</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawDoubleRoundRect(android.graphics.RectF,%20float[],%20android.graphics.RectF,%20float[],%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawDoubleRoundRect(android.graphics.RectF, float[], android.graphics.RectF, float[], android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawDoubleRoundRect">
      <MemberSignature Language="C#" Value="public virtual void DrawDoubleRoundRect (Android.Graphics.RectF outer, float outerRx, float outerRy, Android.Graphics.RectF inner, float innerRx, float innerRy, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawDoubleRoundRect(class Android.Graphics.RectF outer, float32 outerRx, float32 outerRy, class Android.Graphics.RectF inner, float32 innerRx, float32 innerRy, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawDoubleRoundRect(Android.Graphics.RectF,System.Single,System.Single,Android.Graphics.RectF,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawDoubleRoundRect : Android.Graphics.RectF * single * single * Android.Graphics.RectF * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawDoubleRoundRect : Android.Graphics.RectF * single * single * Android.Graphics.RectF * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawDoubleRoundRect (outer, outerRx, outerRy, inner, innerRx, innerRy, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawDoubleRoundRect", "(Landroid/graphics/RectF;FFLandroid/graphics/RectF;FFLandroid/graphics/Paint;)V", "GetDrawDoubleRoundRect_Landroid_graphics_RectF_FFLandroid_graphics_RectF_FFLandroid_graphics_Paint_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawDoubleRoundRect", "(Landroid/graphics/RectF;FFLandroid/graphics/RectF;FFLandroid/graphics/Paint;)V", "GetDrawDoubleRoundRect_Landroid_graphics_RectF_FFLandroid_graphics_RectF_FFLandroid_graphics_Paint_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Android.Graphics.RectF" />
        <Parameter Name="outerRx" Type="System.Single" />
        <Parameter Name="outerRy" Type="System.Single" />
        <Parameter Name="inner" Type="Android.Graphics.RectF" />
        <Parameter Name="innerRx" Type="System.Single" />
        <Parameter Name="innerRy" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="outer">The outer rectangular bounds of the roundRect to be drawn</param>
        <param name="outerRx">The x-radius of the oval used to round the corners on the outer rectangle</param>
        <param name="outerRy">The y-radius of the oval used to round the corners on the outer rectangle</param>
        <param name="inner">The inner rectangular bounds of the roundRect to be drawn</param>
        <param name="innerRx">The x-radius of the oval used to round the corners on the inner rectangle</param>
        <param name="innerRy">The y-radius of the oval used to round the corners on the outer rectangle</param>
        <param name="paint">The paint used to draw the double roundRect</param>
        <summary>Draws a double rounded rectangle using the specified paint.</summary>
        <remarks>
          <para>Draws a double rounded rectangle using the specified paint. The resultant round rect
            will be filled in the area defined between the outer and inner rectangular bounds if
            the <c>Paint</c> configured with <c>Paint.Style#FILL</c>.
            Otherwise if <c>Paint.Style#STROKE</c> is used, then 2 rounded rect strokes will
            be drawn at the outer and inner rounded rectangles</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawDoubleRoundRect(android.graphics.RectF,%20float,%20float,%20android.graphics.RectF,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawDoubleRoundRect(android.graphics.RectF, float, float, android.graphics.RectF, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawFilter">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.DrawFilter? DrawFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.DrawFilter DrawFilter" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.DrawFilter" />
      <MemberSignature Language="F#" Value="member this.DrawFilter : Android.Graphics.DrawFilter with get, set" Usage="Android.Graphics.Canvas.DrawFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDrawFilter", "()Landroid/graphics/DrawFilter;", "GetGetDrawFilterHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDrawFilter", "()Landroid/graphics/DrawFilter;", "GetGetDrawFilterHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setDrawFilter", "(Landroid/graphics/DrawFilter;)V", "GetSetDrawFilter_Landroid_graphics_DrawFilter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setDrawFilter", "(Landroid/graphics/DrawFilter;)V", "GetSetDrawFilter_Landroid_graphics_DrawFilter_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.DrawFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawGlyphs">
      <MemberSignature Language="C#" Value="public virtual void DrawGlyphs (int[] glyphIds, int glyphIdOffset, float[] positions, int positionOffset, int glyphCount, Android.Graphics.Fonts.Font font, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawGlyphs(int32[] glyphIds, int32 glyphIdOffset, float32[] positions, int32 positionOffset, int32 glyphCount, class Android.Graphics.Fonts.Font font, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawGlyphs(System.Int32[],System.Int32,System.Single[],System.Int32,System.Int32,Android.Graphics.Fonts.Font,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawGlyphs : int[] * int * single[] * int * int * Android.Graphics.Fonts.Font * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawGlyphs : int[] * int * single[] * int * int * Android.Graphics.Fonts.Font * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawGlyphs (glyphIds, glyphIdOffset, positions, positionOffset, glyphCount, font, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawGlyphs", "([II[FIILandroid/graphics/fonts/Font;Landroid/graphics/Paint;)V", "GetDrawGlyphs_arrayIIarrayFIILandroid_graphics_fonts_Font_Landroid_graphics_Paint_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawGlyphs", "([II[FIILandroid/graphics/fonts/Font;Landroid/graphics/Paint;)V", "GetDrawGlyphs_arrayIIarrayFIILandroid_graphics_fonts_Font_Landroid_graphics_Paint_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIds" Type="System.Int32[]" />
        <Parameter Name="glyphIdOffset" Type="System.Int32" />
        <Parameter Name="positions" Type="System.Single[]" />
        <Parameter Name="positionOffset" Type="System.Int32" />
        <Parameter Name="glyphCount" Type="System.Int32" />
        <Parameter Name="font" Type="Android.Graphics.Fonts.Font" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="glyphIds">Array of glyph IDs. The length of array must be greater than or equal to
                            <c>glyphIdOffset + glyphCount</c>.</param>
        <param name="glyphIdOffset">Number of elements to skip before drawing in <c>glyphIds</c>
                                array.</param>
        <param name="positions">A flattened X and Y position array. The first glyph X position must be
                             stored at <c>positionOffset</c>. The first glyph Y position must be stored
                             at <c>positionOffset + 1</c>, then the second glyph X position must be
                             stored at <c>positionOffset + 2</c>.
                            The length of array must be greater than or equal to
                            <c>positionOffset + glyphCount * 2</c>.</param>
        <param name="positionOffset">Number of elements to skip before drawing in <c>positions</c>.
                                  The first glyph X position must be stored at <c>positionOffset</c>.
                                  The first glyph Y position must be stored at
                                  <c>positionOffset + 1</c>, then the second glyph X position must be
                                  stored at <c>positionOffset + 2</c>.</param>
        <param name="glyphCount">Number of glyphs to be drawn.</param>
        <param name="font">Font used for drawing.</param>
        <param name="paint">Paint used for drawing. The typeface set to this paint is ignored.</param>
        <summary>Draw array of glyphs with specified font.</summary>
        <remarks>
          <para>Draw array of glyphs with specified font.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawGlyphs(int[],%20int,%20float[],%20int,%20int,%20android.graphics.fonts.Font,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawGlyphs(int[], int, float[], int, int, android.graphics.fonts.Font, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public virtual void DrawLine (float startX, float startY, float stopX, float stopY, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawLine(float32 startX, float32 startY, float32 stopX, float32 stopY, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawLine(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawLine : single * single * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawLine : single * single * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawLine (startX, startY, stopX, stopY, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawLine", "(FFFFLandroid/graphics/Paint;)V", "GetDrawLine_FFFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawLine", "(FFFFLandroid/graphics/Paint;)V", "GetDrawLine_FFFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startX" Type="System.Single" />
        <Parameter Name="startY" Type="System.Single" />
        <Parameter Name="stopX" Type="System.Single" />
        <Parameter Name="stopY" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="stopX">To be added.</param>
        <param name="stopY">To be added.</param>
        <param name="startX">The x-coordinate of the start point of the line</param>
        <param name="startY">The y-coordinate of the start point of the line</param>
        <param name="paint">The paint used to draw the line</param>
        <summary>Draw a line segment with the specified start and stop x,y coordinates, using the specified
            paint.</summary>
        <remarks>
          <para>Draw a line segment with the specified start and stop x,y coordinates, using the specified
            paint.</para>
          <para>Note that since a line is always "framed", the Style is ignored in the paint.</para>
          <para>Degenerate lines (length is 0) will not be drawn.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawLine(float,%20float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawLine(float, float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public virtual void DrawLines (float[] pts, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawLines(float32[] pts, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawLines(System.Single[],Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawLines : single[] * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawLines : single[] * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawLines (pts, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawLines", "([FLandroid/graphics/Paint;)V", "GetDrawLines_arrayFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawLines", "([FLandroid/graphics/Paint;)V", "GetDrawLines_arrayFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Single[]" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="pts">Array of points to draw [x0 y0 x1 y1 x2 y2 ...]</param>
        <param name="paint">The paint used to draw the points</param>
        <summary>Draw a series of lines.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawLines(float[],%20int,%20int,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawLines(float[], int, int, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public virtual void DrawLines (float[] pts, int offset, int count, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawLines(float32[] pts, int32 offset, int32 count, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawLines(System.Single[],System.Int32,System.Int32,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawLines : single[] * int * int * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawLines : single[] * int * int * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawLines (pts, offset, count, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawLines", "([FIILandroid/graphics/Paint;)V", "GetDrawLines_arrayFIILandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawLines", "([FIILandroid/graphics/Paint;)V", "GetDrawLines_arrayFIILandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Single[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="pts">Array of points to draw [x0 y0 x1 y1 x2 y2 ...]</param>
        <param name="offset">Number of values in the array to skip before drawing.</param>
        <param name="count">The number of values in the array to process, after skipping "offset" of them.
                       Since each line uses 4 values, the number of "lines" that are drawn is really
                       (count &gt;&gt; 2).</param>
        <param name="paint">The paint used to draw the points</param>
        <summary>Draw a series of lines.</summary>
        <remarks>
          <para>Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus
            to draw 1 line, the array must contain at least 4 values. This is logically the same as
            drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by
            drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawLines(float[],%20int,%20int,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawLines(float[], int, int, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawMesh">
      <MemberSignature Language="C#" Value="public virtual void DrawMesh (Android.Graphics.Mesh mesh, Android.Graphics.BlendMode? blendMode, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawMesh(class Android.Graphics.Mesh mesh, class Android.Graphics.BlendMode blendMode, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawMesh(Android.Graphics.Mesh,Android.Graphics.BlendMode,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawMesh : Android.Graphics.Mesh * Android.Graphics.BlendMode * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawMesh : Android.Graphics.Mesh * Android.Graphics.BlendMode * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawMesh (mesh, blendMode, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawMesh", "(Landroid/graphics/Mesh;Landroid/graphics/BlendMode;Landroid/graphics/Paint;)V", "GetDrawMesh_Landroid_graphics_Mesh_Landroid_graphics_BlendMode_Landroid_graphics_Paint_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawMesh", "(Landroid/graphics/Mesh;Landroid/graphics/BlendMode;Landroid/graphics/Paint;)V", "GetDrawMesh_Landroid_graphics_Mesh_Landroid_graphics_BlendMode_Landroid_graphics_Paint_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="Android.Graphics.Mesh" />
        <Parameter Name="blendMode" Type="Android.Graphics.BlendMode" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="blendMode">To be added.</param>
        <param name="paint">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawOval">
      <MemberSignature Language="C#" Value="public virtual void DrawOval (Android.Graphics.RectF oval, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawOval(class Android.Graphics.RectF oval, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawOval(Android.Graphics.RectF,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawOval : Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawOval : Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawOval (oval, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawOval", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawOval_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawOval", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawOval_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oval" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="paint">To be added.</param>
        <param name="oval">The rectangle bounds of the oval to be drawn</param>
        <summary>Draw the specified oval using the specified paint.</summary>
        <remarks>
          <para>Draw the specified oval using the specified paint. The oval will be filled or framed based on
            the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawOval(android.graphics.RectF,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawOval(android.graphics.RectF, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawOval">
      <MemberSignature Language="C#" Value="public virtual void DrawOval (float left, float top, float right, float bottom, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawOval(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawOval(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawOval : single * single * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawOval : single * single * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawOval (left, top, right, bottom, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawOval", "(FFFFLandroid/graphics/Paint;)V", "GetDrawOval_FFFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawOval", "(FFFFLandroid/graphics/Paint;)V", "GetDrawOval_FFFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="paint">To be added.</param>
        <summary>Draw the specified oval using the specified paint.</summary>
        <remarks>
          <para>Draw the specified oval using the specified paint. The oval will be filled or framed based on
            the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawOval(float,%20float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawOval(float, float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPaint">
      <MemberSignature Language="C#" Value="public virtual void DrawPaint (Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPaint(class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPaint(Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPaint : Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPaint : Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPaint paint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPaint", "(Landroid/graphics/Paint;)V", "GetDrawPaint_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPaint", "(Landroid/graphics/Paint;)V", "GetDrawPaint_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="paint">The paint used to draw onto the canvas</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint.
            This is equivalent (but faster) to drawing an infinitely large rectangle with the specified
            paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPaint(android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPaint(android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPatch">
      <MemberSignature Language="C#" Value="public virtual void DrawPatch (Android.Graphics.NinePatch patch, Android.Graphics.Rect dst, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPatch(class Android.Graphics.NinePatch patch, class Android.Graphics.Rect dst, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPatch(Android.Graphics.NinePatch,Android.Graphics.Rect,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPatch : Android.Graphics.NinePatch * Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPatch : Android.Graphics.NinePatch * Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPatch (patch, dst, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPatch", "(Landroid/graphics/NinePatch;Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawPatch_Landroid_graphics_NinePatch_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPatch", "(Landroid/graphics/NinePatch;Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawPatch_Landroid_graphics_NinePatch_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Android.Graphics.NinePatch" />
        <Parameter Name="dst" Type="Android.Graphics.Rect" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="patch">The ninepatch object to render</param>
        <param name="dst">The destination rectangle.</param>
        <param name="paint">The paint to draw the bitmap with. May be null. Antialiasing is not supported.</param>
        <summary>Draws the specified bitmap as an N-patch (most often, a 9-patch.</summary>
        <remarks>
          <para>Draws the specified bitmap as an N-patch (most often, a 9-patch.)</para>
          <para>Note: antialiasing is not supported, therefore <c>Paint#ANTI_ALIAS_FLAG</c> is
            ignored.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPatch(android.graphics.NinePatch,%20android.graphics.Rect,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPatch">
      <MemberSignature Language="C#" Value="public virtual void DrawPatch (Android.Graphics.NinePatch patch, Android.Graphics.RectF dst, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPatch(class Android.Graphics.NinePatch patch, class Android.Graphics.RectF dst, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPatch(Android.Graphics.NinePatch,Android.Graphics.RectF,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPatch : Android.Graphics.NinePatch * Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPatch : Android.Graphics.NinePatch * Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPatch (patch, dst, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPatch", "(Landroid/graphics/NinePatch;Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawPatch_Landroid_graphics_NinePatch_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPatch", "(Landroid/graphics/NinePatch;Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawPatch_Landroid_graphics_NinePatch_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Android.Graphics.NinePatch" />
        <Parameter Name="dst" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="patch">The ninepatch object to render</param>
        <param name="dst">The destination rectangle.</param>
        <param name="paint">The paint to draw the bitmap with. May be null. Antialiasing is not supported.</param>
        <summary>Draws the specified bitmap as an N-patch (most often, a 9-patch.</summary>
        <remarks>
          <para>Draws the specified bitmap as an N-patch (most often, a 9-patch.)</para>
          <para>Note: antialiasing is not supported, therefore <c>Paint#ANTI_ALIAS_FLAG</c> is
            ignored.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPatch(android.graphics.NinePatch,%20android.graphics.RectF,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPatch(android.graphics.NinePatch, android.graphics.RectF, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public virtual void DrawPath (Android.Graphics.Path path, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPath(class Android.Graphics.Path path, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPath(Android.Graphics.Path,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPath : Android.Graphics.Path * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPath : Android.Graphics.Path * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPath (path, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPath", "(Landroid/graphics/Path;Landroid/graphics/Paint;)V", "GetDrawPath_Landroid_graphics_Path_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPath", "(Landroid/graphics/Path;Landroid/graphics/Paint;)V", "GetDrawPath_Landroid_graphics_Path_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="path">The path to be drawn</param>
        <param name="paint">The paint used to draw the path</param>
        <summary>Draw the specified path using the specified paint.</summary>
        <remarks>
          <para>Draw the specified path using the specified paint. The path will be filled or framed based on
            the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPath(android.graphics.Path,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPath(android.graphics.Path, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public virtual void DrawPicture (Android.Graphics.Picture picture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPicture(class Android.Graphics.Picture picture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPicture(Android.Graphics.Picture)" />
      <MemberSignature Language="F#" Value="abstract member DrawPicture : Android.Graphics.Picture -&gt; unit&#xA;override this.DrawPicture : Android.Graphics.Picture -&gt; unit" Usage="canvas.DrawPicture picture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;)V", "GetDrawPicture_Landroid_graphics_Picture_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;)V", "GetDrawPicture_Landroid_graphics_Picture_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="Android.Graphics.Picture" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to be drawn</param>
        <summary>Save the canvas state, draw the picture, and restore the canvas state.</summary>
        <remarks>
          <para>Save the canvas state, draw the picture, and restore the canvas state.
            This differs from picture.draw(canvas), which does not perform any
            save/restore.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; This forces the picture to internally call
            <c>Picture#endRecording</c> in order to prepare for playback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPicture(android.graphics.Picture)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPicture(android.graphics.Picture)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public virtual void DrawPicture (Android.Graphics.Picture picture, Android.Graphics.Rect dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPicture(class Android.Graphics.Picture picture, class Android.Graphics.Rect dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPicture(Android.Graphics.Picture,Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member DrawPicture : Android.Graphics.Picture * Android.Graphics.Rect -&gt; unit&#xA;override this.DrawPicture : Android.Graphics.Picture * Android.Graphics.Rect -&gt; unit" Usage="canvas.DrawPicture (picture, dst)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;Landroid/graphics/Rect;)V", "GetDrawPicture_Landroid_graphics_Picture_Landroid_graphics_Rect_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;Landroid/graphics/Rect;)V", "GetDrawPicture_Landroid_graphics_Picture_Landroid_graphics_Rect_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="Android.Graphics.Picture" />
        <Parameter Name="dst" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to be drawn</param>
        <param name="dst">To be added.</param>
        <summary>Draw the picture, stretched to fit into the dst rectangle.</summary>
        <remarks>
          <para>Draw the picture, stretched to fit into the dst rectangle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPicture(android.graphics.Picture,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPicture(android.graphics.Picture, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public virtual void DrawPicture (Android.Graphics.Picture picture, Android.Graphics.RectF dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPicture(class Android.Graphics.Picture picture, class Android.Graphics.RectF dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPicture(Android.Graphics.Picture,Android.Graphics.RectF)" />
      <MemberSignature Language="F#" Value="abstract member DrawPicture : Android.Graphics.Picture * Android.Graphics.RectF -&gt; unit&#xA;override this.DrawPicture : Android.Graphics.Picture * Android.Graphics.RectF -&gt; unit" Usage="canvas.DrawPicture (picture, dst)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;Landroid/graphics/RectF;)V", "GetDrawPicture_Landroid_graphics_Picture_Landroid_graphics_RectF_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPicture", "(Landroid/graphics/Picture;Landroid/graphics/RectF;)V", "GetDrawPicture_Landroid_graphics_Picture_Landroid_graphics_RectF_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="Android.Graphics.Picture" />
        <Parameter Name="dst" Type="Android.Graphics.RectF" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to be drawn</param>
        <param name="dst">To be added.</param>
        <summary>Draw the picture, stretched to fit into the dst rectangle.</summary>
        <remarks>
          <para>Draw the picture, stretched to fit into the dst rectangle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPicture(android.graphics.Picture,%20android.graphics.RectF)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPicture(android.graphics.Picture, android.graphics.RectF)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPoint">
      <MemberSignature Language="C#" Value="public virtual void DrawPoint (float x, float y, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPoint(float32 x, float32 y, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPoint(System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPoint : single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPoint : single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPoint (x, y, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPoint", "(FFLandroid/graphics/Paint;)V", "GetDrawPoint_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPoint", "(FFLandroid/graphics/Paint;)V", "GetDrawPoint_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="paint">To be added.</param>
        <summary>Helper for drawPoints() for drawing a single point.</summary>
        <remarks>
          <para>Helper for drawPoints() for drawing a single point.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPoint(float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPoints">
      <MemberSignature Language="C#" Value="public virtual void DrawPoints (float[] pts, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPoints(float32[] pts, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPoints(System.Single[],Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPoints : single[] * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPoints : single[] * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPoints (pts, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPoints", "([FLandroid/graphics/Paint;)V", "GetDrawPoints_arrayFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPoints", "([FLandroid/graphics/Paint;)V", "GetDrawPoints_arrayFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Single[]" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="pts">Array of points to draw [x0 y0 x1 y1 x2 y2 ...]</param>
        <param name="paint">The paint used to draw the points</param>
        <summary>Helper for drawPoints() that assumes you want to draw the entire array</summary>
        <remarks>
          <para>Helper for drawPoints() that assumes you want to draw the entire array</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPoints(float[],%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPoints(float[], android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPoints">
      <MemberSignature Language="C#" Value="public virtual void DrawPoints (float[]? pts, int offset, int count, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPoints(float32[] pts, int32 offset, int32 count, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPoints(System.Single[],System.Int32,System.Int32,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPoints : single[] * int * int * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPoints : single[] * int * int * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPoints (pts, offset, count, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPoints", "([FIILandroid/graphics/Paint;)V", "GetDrawPoints_arrayFIILandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPoints", "([FIILandroid/graphics/Paint;)V", "GetDrawPoints_arrayFIILandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Single[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="pts">Array of points to draw [x0 y0 x1 y1 x2 y2 ...]</param>
        <param name="offset">Number of values to skip before starting to draw.</param>
        <param name="count">The number of values to process, after skipping offset of them. Since one point
                       uses two values, the number of "points" that are drawn is really (count &gt;&gt; 1).</param>
        <param name="paint">The paint used to draw the points</param>
        <summary>Draw a series of points.</summary>
        <remarks>
          <para>Draw a series of points. Each point is centered at the coordinate specified by pts[], and its
            diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with
            special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4
            if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type.
            The shape is a square, unless the cap type is Round, in which case the shape is a circle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPoints(float[],%20int,%20int,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPoints(float[], int, int, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPosText">
      <MemberSignature Language="C#" Value="public virtual void DrawPosText (string text, float[] pos, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPosText(string text, float32[] pos, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPosText(System.String,System.Single[],Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPosText : string * single[] * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPosText : string * single[] * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPosText (text, pos, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPosText", "(Ljava/lang/String;[FLandroid/graphics/Paint;)V", "GetDrawPosText_Ljava_lang_String_arrayFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPosText", "(Ljava/lang/String;[FLandroid/graphics/Paint;)V", "GetDrawPosText_Ljava_lang_String_arrayFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="pos" Type="System.Single[]" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="pos">Array of [x,y] positions, used to position each character</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text in the array, with each character's origin specified by the pos array.</summary>
        <remarks>
          <para>Draw the text in the array, with each character's origin specified by the pos array.</para>
          <para>This member is deprecated. This method does not support glyph composition and decomposition and should
                        therefore not be used to render complex scripts. It also doesn't handle
                        supplementary characters (eg emoji).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPosText(java.lang.String,%20float[],%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPosText(java.lang.String, float[], android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawPosText">
      <MemberSignature Language="C#" Value="public virtual void DrawPosText (char[] text, int index, int count, float[] pos, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPosText(char[] text, int32 index, int32 count, float32[] pos, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawPosText(System.Char[],System.Int32,System.Int32,System.Single[],Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPosText : char[] * int * int * single[] * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawPosText : char[] * int * int * single[] * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawPosText (text, index, count, pos, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawPosText", "([CII[FLandroid/graphics/Paint;)V", "GetDrawPosText_arrayCIIarrayFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawPosText", "([CII[FLandroid/graphics/Paint;)V", "GetDrawPosText_arrayCIIarrayFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="pos" Type="System.Single[]" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="index">The index of the first character to draw</param>
        <param name="count">The number of characters to draw, starting from index.</param>
        <param name="pos">Array of [x,y] positions, used to position each character</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text in the array, with each character's origin specified by the pos array.</summary>
        <remarks>
          <para>Draw the text in the array, with each character's origin specified by the pos array.</para>
          <para>This member is deprecated. This method does not support glyph composition and decomposition and should
                        therefore not be used to render complex scripts. It also doesn't handle
                        supplementary characters (eg emoji).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawPosText(char[],%20int,%20int,%20float[],%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawPosText(char[], int, int, float[], android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRect">
      <MemberSignature Language="C#" Value="public virtual void DrawRect (Android.Graphics.Rect r, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRect(class Android.Graphics.Rect r, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRect(Android.Graphics.Rect,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawRect : Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawRect : Android.Graphics.Rect * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawRect (r, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRect", "(Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawRect_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRect", "(Landroid/graphics/Rect;Landroid/graphics/Paint;)V", "GetDrawRect_Landroid_graphics_Rect_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="r">The rectangle to be drawn.</param>
        <param name="paint">The paint used to draw the rectangle</param>
        <summary>Draw the specified Rect using the specified Paint.</summary>
        <remarks>
          <para>Draw the specified Rect using the specified Paint. The rectangle will be filled or framed
            based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRect(android.graphics.Rect,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRect(android.graphics.Rect, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRect">
      <MemberSignature Language="C#" Value="public virtual void DrawRect (Android.Graphics.RectF rect, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRect(class Android.Graphics.RectF rect, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRect(Android.Graphics.RectF,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawRect : Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawRect : Android.Graphics.RectF * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawRect (rect, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRect", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawRect_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRect", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V", "GetDrawRect_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="rect">The rect to be drawn</param>
        <param name="paint">The paint used to draw the rect</param>
        <summary>Draw the specified Rect using the specified paint.</summary>
        <remarks>
          <para>Draw the specified Rect using the specified paint. The rectangle will be filled or framed
            based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRect(android.graphics.RectF,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRect(android.graphics.RectF, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRect">
      <MemberSignature Language="C#" Value="public virtual void DrawRect (float left, float top, float right, float bottom, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRect(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRect(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawRect : single * single * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawRect : single * single * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawRect (left, top, right, bottom, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRect", "(FFFFLandroid/graphics/Paint;)V", "GetDrawRect_FFFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRect", "(FFFFLandroid/graphics/Paint;)V", "GetDrawRect_FFFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to be drawn</param>
        <param name="top">The top side of the rectangle to be drawn</param>
        <param name="right">The right side of the rectangle to be drawn</param>
        <param name="bottom">The bottom side of the rectangle to be drawn</param>
        <param name="paint">The paint used to draw the rect</param>
        <summary>Draw the specified Rect using the specified paint.</summary>
        <remarks>
          <para>Draw the specified Rect using the specified paint. The rectangle will be filled or framed
            based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRect(float,%20float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRect(float, float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRenderNode">
      <MemberSignature Language="C#" Value="public virtual void DrawRenderNode (Android.Graphics.RenderNode renderNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRenderNode(class Android.Graphics.RenderNode renderNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRenderNode(Android.Graphics.RenderNode)" />
      <MemberSignature Language="F#" Value="abstract member DrawRenderNode : Android.Graphics.RenderNode -&gt; unit&#xA;override this.DrawRenderNode : Android.Graphics.RenderNode -&gt; unit" Usage="canvas.DrawRenderNode renderNode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRenderNode", "(Landroid/graphics/RenderNode;)V", "GetDrawRenderNode_Landroid_graphics_RenderNode_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRenderNode", "(Landroid/graphics/RenderNode;)V", "GetDrawRenderNode_Landroid_graphics_RenderNode_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderNode" Type="Android.Graphics.RenderNode" />
      </Parameters>
      <Docs>
        <param name="renderNode">The RenderNode to draw, must be non-null.</param>
        <summary>Draws the given RenderNode.</summary>
        <remarks>
          <para>Draws the given RenderNode. This is only supported in hardware rendering, which can be
            verified by asserting that <c>#isHardwareAccelerated()</c> is true. If
            <c>#isHardwareAccelerated()</c> is false then this throws an exception.
            
            See <c>RenderNode</c> for more information on what a RenderNode is and how to use it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRenderNode(android.graphics.RenderNode)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRenderNode(android.graphics.RenderNode)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRGB">
      <MemberSignature Language="C#" Value="public virtual void DrawRGB (int r, int g, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRGB(int32 r, int32 g, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DrawRGB : int * int * int -&gt; unit&#xA;override this.DrawRGB : int * int * int -&gt; unit" Usage="canvas.DrawRGB (r, g, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRGB", "(III)V", "GetDrawRGB_IIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRGB", "(III)V", "GetDrawRGB_IIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="g" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="r">red component (0..255) of the color to draw onto the canvas</param>
        <param name="g">green component (0..255) of the color to draw onto the canvas</param>
        <param name="b">blue component (0..255) of the color to draw onto the canvas</param>
        <summary>Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color,
            using srcover porterduff mode.</summary>
        <remarks>
          <para>Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color,
            using srcover porterduff mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRGB(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRGB(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public virtual void DrawRoundRect (Android.Graphics.RectF rect, float rx, float ry, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRoundRect(class Android.Graphics.RectF rect, float32 rx, float32 ry, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRoundRect(Android.Graphics.RectF,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawRoundRect : Android.Graphics.RectF * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawRoundRect : Android.Graphics.RectF * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawRoundRect (rect, rx, ry, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRoundRect", "(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V", "GetDrawRoundRect_Landroid_graphics_RectF_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRoundRect", "(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V", "GetDrawRoundRect_Landroid_graphics_RectF_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
        <Parameter Name="rx" Type="System.Single" />
        <Parameter Name="ry" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangular bounds of the roundRect to be drawn</param>
        <param name="rx">The x-radius of the oval used to round the corners</param>
        <param name="ry">The y-radius of the oval used to round the corners</param>
        <param name="paint">The paint used to draw the roundRect</param>
        <summary>Draw the specified round-rect using the specified paint.</summary>
        <remarks>
          <para>Draw the specified round-rect using the specified paint. The roundrect will be filled or
            framed based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRoundRect(android.graphics.RectF,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public virtual void DrawRoundRect (float left, float top, float right, float bottom, float rx, float ry, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawRoundRect(float32 left, float32 top, float32 right, float32 bottom, float32 rx, float32 ry, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawRoundRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawRoundRect : single * single * single * single * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawRoundRect : single * single * single * single * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawRoundRect (left, top, right, bottom, rx, ry, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawRoundRect", "(FFFFFFLandroid/graphics/Paint;)V", "GetDrawRoundRect_FFFFFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawRoundRect", "(FFFFFFLandroid/graphics/Paint;)V", "GetDrawRoundRect_FFFFFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="rx" Type="System.Single" />
        <Parameter Name="ry" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="rx">The x-radius of the oval used to round the corners</param>
        <param name="ry">The y-radius of the oval used to round the corners</param>
        <param name="paint">The paint used to draw the roundRect</param>
        <summary>Draw the specified round-rect using the specified paint.</summary>
        <remarks>
          <para>Draw the specified round-rect using the specified paint. The roundrect will be filled or
            framed based on the Style in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawRoundRect(float,%20float,%20float,%20float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawRoundRect(float, float, float, float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public virtual void DrawText (string text, float x, float y, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(string text, float32 x, float32 y, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawText(System.String,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawText : string * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawText : string * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawText (text, x, y, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawText", "(Ljava/lang/String;FFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_String_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawText", "(Ljava/lang/String;FFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_String_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="x">The x-coordinate of the origin of the text being drawn</param>
        <param name="y">The y-coordinate of the baseline of the text being drawn</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text, with origin at (x,y), using the specified paint.</summary>
        <remarks>
          <para>Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted
            based on the Align setting in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawText(java.lang.String,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawText(java.lang.String, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public virtual void DrawText (Java.Lang.ICharSequence text, int start, int end, float x, float y, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(class Java.Lang.ICharSequence text, int32 start, int32 end, float32 x, float32 y, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawText(Java.Lang.ICharSequence,System.Int32,System.Int32,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawText : Java.Lang.ICharSequence * int * int * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawText : Java.Lang.ICharSequence * int * int * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawText (text, start, end, x, y, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawText", "(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_CharSequence_IIFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawText", "(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_CharSequence_IIFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="start">The index of the first character in text to draw</param>
        <param name="end">(end - 1) is the index of the last character in text to draw</param>
        <param name="x">The x-coordinate of origin for where to draw the text</param>
        <param name="y">The y-coordinate of origin for where to draw the text</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the specified range of text, specified by start/end, with its origin at (x,y), in the
            specified Paint.</summary>
        <remarks>
          <para>Draw the specified range of text, specified by start/end, with its origin at (x,y), in the
            specified Paint. The origin is interpreted based on the Align setting in the Paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawText(java.lang.CharSequence,%20int,%20int,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public virtual void DrawText (char[] text, int index, int count, float x, float y, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(char[] text, int32 index, int32 count, float32 x, float32 y, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawText(System.Char[],System.Int32,System.Int32,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawText : char[] * int * int * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawText : char[] * int * int * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawText (text, index, count, x, y, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawText", "([CIIFFLandroid/graphics/Paint;)V", "GetDrawText_arrayCIIFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawText", "([CIIFFLandroid/graphics/Paint;)V", "GetDrawText_arrayCIIFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <param name="text">The text to be drawn</param>
        <param name="x">The x-coordinate of the origin of the text being drawn</param>
        <param name="y">The y-coordinate of the baseline of the text being drawn</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text, with origin at (x,y), using the specified paint.</summary>
        <remarks>
          <para>Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted
            based on the Align setting in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawText(char[],%20int,%20int,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawText(char[], int, int, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public virtual void DrawText (string text, int start, int end, float x, float y, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(string text, int32 start, int32 end, float32 x, float32 y, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawText(System.String,System.Int32,System.Int32,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawText : string * int * int * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawText : string * int * int * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawText (text, start, end, x, y, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawText", "(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_String_IIFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawText", "(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V", "GetDrawText_Ljava_lang_String_IIFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="start">The index of the first character in text to draw</param>
        <param name="end">(end - 1) is the index of the last character in text to draw</param>
        <param name="x">The x-coordinate of the origin of the text being drawn</param>
        <param name="y">The y-coordinate of the baseline of the text being drawn</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text, with origin at (x,y), using the specified paint.</summary>
        <remarks>
          <para>Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted
            based on the Align setting in the paint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawText(java.lang.String,%20int,%20int,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawText(java.lang.String, int, int, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public virtual void DrawTextOnPath (string text, Android.Graphics.Path path, float hOffset, float vOffset, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawTextOnPath(string text, class Android.Graphics.Path path, float32 hOffset, float32 vOffset, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextOnPath(System.String,Android.Graphics.Path,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawTextOnPath : string * Android.Graphics.Path * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawTextOnPath : string * Android.Graphics.Path * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextOnPath (text, path, hOffset, vOffset, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawTextOnPath", "(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V", "GetDrawTextOnPath_Ljava_lang_String_Landroid_graphics_Path_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawTextOnPath", "(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V", "GetDrawTextOnPath_Ljava_lang_String_Landroid_graphics_Path_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="path" Type="Android.Graphics.Path" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="path">The path the text should follow for its baseline</param>
        <param name="hOffset">The distance along the path to add to the text's starting position</param>
        <param name="vOffset">The distance above(-) or below(+) the path to position the text</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text, with origin at (x,y), using the specified paint, along the specified path.</summary>
        <remarks>
          <para>Draw the text, with origin at (x,y), using the specified paint, along the specified path. The
            paint's Align setting determines where along the path to start the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextOnPath(java.lang.String,%20android.graphics.Path,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public virtual void DrawTextOnPath (char[] text, int index, int count, Android.Graphics.Path path, float hOffset, float vOffset, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawTextOnPath(char[] text, int32 index, int32 count, class Android.Graphics.Path path, float32 hOffset, float32 vOffset, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextOnPath(System.Char[],System.Int32,System.Int32,Android.Graphics.Path,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawTextOnPath : char[] * int * int * Android.Graphics.Path * single * single * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawTextOnPath : char[] * int * int * Android.Graphics.Path * single * single * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextOnPath (text, index, count, path, hOffset, vOffset, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawTextOnPath", "([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V", "GetDrawTextOnPath_arrayCIILandroid_graphics_Path_FFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawTextOnPath", "([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V", "GetDrawTextOnPath_arrayCIILandroid_graphics_Path_FFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="path" Type="Android.Graphics.Path" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">The text to be drawn</param>
        <param name="index">The starting index within the text to be drawn</param>
        <param name="count">Starting from index, the number of characters to draw</param>
        <param name="path">The path the text should follow for its baseline</param>
        <param name="hOffset">The distance along the path to add to the text's starting position</param>
        <param name="vOffset">The distance above(-) or below(+) the path to position the text</param>
        <param name="paint">The paint used for the text (e.g. color, size, style)</param>
        <summary>Draw the text, with origin at (x,y), using the specified paint, along the specified path.</summary>
        <remarks>
          <para>Draw the text, with origin at (x,y), using the specified paint, along the specified path. The
            paint's Align setting determines where along the path to start the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextOnPath(char[],%20int,%20int,%20android.graphics.Path,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrawTextRun">
      <MemberSignature Language="C#" Value="public virtual void DrawTextRun (Android.Graphics.Text.MeasuredText text, int start, int end, int contextStart, int contextEnd, float x, float y, bool isRtl, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawTextRun(class Android.Graphics.Text.MeasuredText text, int32 start, int32 end, int32 contextStart, int32 contextEnd, float32 x, float32 y, bool isRtl, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextRun(Android.Graphics.Text.MeasuredText,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawTextRun : Android.Graphics.Text.MeasuredText * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawTextRun : Android.Graphics.Text.MeasuredText * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextRun (text, start, end, contextStart, contextEnd, x, y, isRtl, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawTextRun", "(Landroid/graphics/text/MeasuredText;IIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_Landroid_graphics_text_MeasuredText_IIIIFFZLandroid_graphics_Paint_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawTextRun", "(Landroid/graphics/text/MeasuredText;IIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_Landroid_graphics_text_MeasuredText_IIIIFFZLandroid_graphics_Paint_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Android.Graphics.Text.MeasuredText" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="contextStart" Type="System.Int32" />
        <Parameter Name="contextEnd" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="isRtl" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">the text to render</param>
        <param name="start">the start of the text to render. Data before this position can be used for
                       shaping context.</param>
        <param name="end">the end of the text to render. Data at or after this position can be used for
                       shaping context.</param>
        <param name="contextStart">the index of the start of the shaping context</param>
        <param name="contextEnd">the index of the end of the shaping context</param>
        <param name="x">the x position at which to draw the text</param>
        <param name="y">the y position at which to draw the text</param>
        <param name="isRtl">whether the run is in RTL direction</param>
        <param name="paint">the paint</param>
        <summary>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</summary>
        <remarks>
          <para>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</para>
          <para>See <c>#drawTextRun(CharSequence, int, int, int, int, float, float, boolean, Paint)</c> for
            more details. This method uses a <c>MeasuredText</c> rather than CharSequence to represent
            the string.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextRun(android.graphics.text.MeasuredText,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextRun(android.graphics.text.MeasuredText, int, int, int, int, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextRun">
      <MemberSignature Language="C#" Value="public virtual void DrawTextRun (Java.Lang.ICharSequence text, int start, int end, int contextStart, int contextEnd, float x, float y, bool isRtl, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawTextRun(class Java.Lang.ICharSequence text, int32 start, int32 end, int32 contextStart, int32 contextEnd, float32 x, float32 y, bool isRtl, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextRun(Java.Lang.ICharSequence,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawTextRun : Java.Lang.ICharSequence * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawTextRun : Java.Lang.ICharSequence * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextRun (text, start, end, contextStart, contextEnd, x, y, isRtl, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawTextRun", "(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_Ljava_lang_CharSequence_IIIIFFZLandroid_graphics_Paint_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawTextRun", "(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_Ljava_lang_CharSequence_IIIIFFZLandroid_graphics_Paint_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="contextStart" Type="System.Int32" />
        <Parameter Name="contextEnd" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="isRtl" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">the text to render</param>
        <param name="start">the start of the text to render. Data before this position can be used for
                       shaping context.</param>
        <param name="end">the end of the text to render. Data at or after this position can be used for
                       shaping context.</param>
        <param name="contextStart">the index of the start of the shaping context</param>
        <param name="contextEnd">the index of the end of the shaping context</param>
        <param name="x">the x position at which to draw the text</param>
        <param name="y">the y position at which to draw the text</param>
        <param name="isRtl">whether the run is in RTL direction</param>
        <param name="paint">the paint</param>
        <summary>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</summary>
        <remarks>
          <para>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</para>
          <para>The run of text includes the characters from <c>start</c> to <c>end</c> in the text. In
            addition, the range <c>contextStart</c> to <c>contextEnd</c> is used as context for the
            purpose of complex text shaping, such as Arabic text potentially shaped differently based on
            the text next to it.</para>
          <para>All text outside the range <c>contextStart..contextEnd</c> is ignored. The text between
            <c>start</c> and <c>end</c> will be laid out and drawn. The context range is useful for
            contextual shaping, e.g. Kerning, Arabic contextural form.</para>
          <para>The direction of the run is explicitly specified by <c>isRtl</c>. Thus, this method is
            suitable only for runs of a single direction. Alignment of the text is as determined by the
            Paint's TextAlign value. Further, <c>0 &lt;= contextStart &lt;= start &lt;= end &lt;= contextEnd
            &lt;= text.length</c> must hold on entry.</para>
          <para>Also see <c>android.graphics.Paint#getRunAdvance</c> for a corresponding method to measure
            the text; the advance width of the text drawn matches the value obtained from that method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextRun(java.lang.CharSequence,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextRun">
      <MemberSignature Language="C#" Value="public virtual void DrawTextRun (char[] text, int index, int count, int contextIndex, int contextCount, float x, float y, bool isRtl, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawTextRun(char[] text, int32 index, int32 count, int32 contextIndex, int32 contextCount, float32 x, float32 y, bool isRtl, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextRun(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawTextRun : char[] * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawTextRun : char[] * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextRun (text, index, count, contextIndex, contextCount, x, y, isRtl, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawTextRun", "([CIIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_arrayCIIIIFFZLandroid_graphics_Paint_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawTextRun", "([CIIIIFFZLandroid/graphics/Paint;)V", "GetDrawTextRun_arrayCIIIIFFZLandroid_graphics_Paint_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="contextIndex" Type="System.Int32" />
        <Parameter Name="contextCount" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="isRtl" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">the text to render</param>
        <param name="index">the start of the text to render</param>
        <param name="count">the count of chars to render</param>
        <param name="contextIndex">the start of the context for shaping. Must be no greater than index.</param>
        <param name="contextCount">the number of characters in the context for shaping. contexIndex +
                       contextCount must be no less than index + count.</param>
        <param name="x">the x position at which to draw the text</param>
        <param name="y">the y position at which to draw the text</param>
        <param name="isRtl">whether the run is in RTL direction</param>
        <param name="paint">the paint</param>
        <summary>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</summary>
        <remarks>
          <para>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</para>
          <para>See <c>#drawTextRun(CharSequence, int, int, int, int, float, float, boolean, Paint)</c> for
            more details. This method uses a character array rather than CharSequence to represent the
            string. Also, to be consistent with the pattern established in <c>#drawText</c>, in this
            method <c>count</c> and <c>contextCount</c> are used rather than offsets of the end
            position; <c>count = end - start, contextCount = contextEnd -
            contextStart</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextRun(char[],%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextRun(char[], int, int, int, int, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextRun">
      <MemberSignature Language="C#" Value="public void DrawTextRun (string text, int start, int end, int contextStart, int contextEnd, float x, float y, bool isRtl, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextRun(string text, int32 start, int32 end, int32 contextStart, int32 contextEnd, float32 x, float32 y, bool isRtl, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawTextRun(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="member this.DrawTextRun : string * int * int * int * int * single * single * bool * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawTextRun (text, start, end, contextStart, contextEnd, x, y, isRtl, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="contextStart" Type="System.Int32" />
        <Parameter Name="contextEnd" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="isRtl" Type="System.Boolean" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="text">the text to render</param>
        <param name="start">the start of the text to render. Data before this position can be used for
                       shaping context.</param>
        <param name="end">the end of the text to render. Data at or after this position can be used for
                       shaping context.</param>
        <param name="contextStart">the index of the start of the shaping context</param>
        <param name="contextEnd">the index of the end of the shaping context</param>
        <param name="x">the x position at which to draw the text</param>
        <param name="y">the y position at which to draw the text</param>
        <param name="isRtl">whether the run is in RTL direction</param>
        <param name="paint">the paint</param>
        <summary>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</summary>
        <remarks>
          <para>Draw a run of text, all in a single direction, with optional context for complex text
            shaping.</para>
          <para>The run of text includes the characters from <c>start</c> to <c>end</c> in the text. In
            addition, the range <c>contextStart</c> to <c>contextEnd</c> is used as context for the
            purpose of complex text shaping, such as Arabic text potentially shaped differently based on
            the text next to it.</para>
          <para>All text outside the range <c>contextStart..contextEnd</c> is ignored. The text between
            <c>start</c> and <c>end</c> will be laid out and drawn. The context range is useful for
            contextual shaping, e.g. Kerning, Arabic contextural form.</para>
          <para>The direction of the run is explicitly specified by <c>isRtl</c>. Thus, this method is
            suitable only for runs of a single direction. Alignment of the text is as determined by the
            Paint's TextAlign value. Further, <c>0 &lt;= contextStart &lt;= start &lt;= end &lt;= contextEnd
            &lt;= text.length</c> must hold on entry.</para>
          <para>Also see <c>android.graphics.Paint#getRunAdvance</c> for a corresponding method to measure
            the text; the advance width of the text drawn matches the value obtained from that method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawTextRun(java.lang.CharSequence,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, boolean, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public virtual void DrawVertices (Android.Graphics.Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[]? texs, int texOffset, int[]? colors, int colorOffset, short[]? indices, int indexOffset, int indexCount, Android.Graphics.Paint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawVertices(class Android.Graphics.Canvas/VertexMode mode, int32 vertexCount, float32[] verts, int32 vertOffset, float32[] texs, int32 texOffset, int32[] colors, int32 colorOffset, int16[] indices, int32 indexOffset, int32 indexCount, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.DrawVertices(Android.Graphics.Canvas.VertexMode,System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32[],System.Int32,System.Int16[],System.Int32,System.Int32,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member DrawVertices : Android.Graphics.Canvas.VertexMode * int * single[] * int * single[] * int * int[] * int * int16[] * int * int * Android.Graphics.Paint -&gt; unit&#xA;override this.DrawVertices : Android.Graphics.Canvas.VertexMode * int * single[] * int * single[] * int * int[] * int * int16[] * int * int * Android.Graphics.Paint -&gt; unit" Usage="canvas.DrawVertices (mode, vertexCount, verts, vertOffset, texs, texOffset, colors, colorOffset, indices, indexOffset, indexCount, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawVertices", "(Landroid/graphics/Canvas$VertexMode;I[FI[FI[II[SIILandroid/graphics/Paint;)V", "GetDrawVertices_Landroid_graphics_Canvas_VertexMode_IarrayFIarrayFIarrayIIarraySIILandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drawVertices", "(Landroid/graphics/Canvas$VertexMode;I[FI[FI[II[SIILandroid/graphics/Paint;)V", "GetDrawVertices_Landroid_graphics_Canvas_VertexMode_IarrayFIarrayFIarrayIIarraySIILandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Graphics.Canvas+VertexMode" />
        <Parameter Name="vertexCount" Type="System.Int32" />
        <Parameter Name="verts" Type="System.Single[]" />
        <Parameter Name="vertOffset" Type="System.Int32" />
        <Parameter Name="texs" Type="System.Single[]" />
        <Parameter Name="texOffset" Type="System.Int32" />
        <Parameter Name="colors" Type="System.Int32[]" />
        <Parameter Name="colorOffset" Type="System.Int32" />
        <Parameter Name="indices" Type="System.Int16[]" />
        <Parameter Name="indexOffset" Type="System.Int32" />
        <Parameter Name="indexCount" Type="System.Int32" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="mode">How to interpret the array of vertices</param>
        <param name="vertexCount">The number of values in the vertices array (and corresponding texs and
                       colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount
                       must be a multiple of 2.</param>
        <param name="verts">Array of vertices for the mesh</param>
        <param name="vertOffset">Number of values in the verts to skip before drawing.</param>
        <param name="texs">May be null. If not null, specifies the coordinates to sample into the current
                       shader (e.g. bitmap tile or gradient)</param>
        <param name="texOffset">Number of values in texs to skip before drawing.</param>
        <param name="colors">May be null. If not null, specifies a color for each vertex, to be interpolated
                       across the triangle.</param>
        <param name="colorOffset">Number of values in colors to skip before drawing.</param>
        <param name="indices">If not null, array of indices to reference into the vertex (texs, colors)
                       array.</param>
        <param name="indexOffset">To be added.</param>
        <param name="indexCount">number of entries in the indices array (if not null).</param>
        <param name="paint">Specifies the shader to use if the texs array is non-null.</param>
        <summary>Draw the array of vertices, interpreted as triangles (based on mode).</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#drawVertices(android.graphics.VertexMode,%20int,%20float[],%20int,%20float[],%20int,%20int[],%20int,%20short[],%20int,%20int,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.drawVertices(android.graphics.VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnableZ">
      <MemberSignature Language="C#" Value="public virtual void EnableZ ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableZ() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.EnableZ" />
      <MemberSignature Language="F#" Value="abstract member EnableZ : unit -&gt; unit&#xA;override this.EnableZ : unit -&gt; unit" Usage="canvas.EnableZ " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("enableZ", "()V", "GetEnableZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("enableZ", "()V", "GetEnableZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables Z support which defaults to disabled.</summary>
        <remarks>
          <para>Enables Z support which defaults to disabled. This allows for RenderNodes drawn with
            <c>#drawRenderNode(RenderNode)</c> to be re-arranged based off of their
            <c>RenderNode#getElevation()</c> and <c>RenderNode#getTranslationZ()</c>
            values. It also enables rendering of shadows for RenderNodes with an elevation or
            translationZ.</para>
          <para>Any draw reordering will not be moved before this call. A typical usage of this might
            look something like:</para>
          <code lang="text/java">void draw(Canvas canvas) {
                    // Draw any background content
                    canvas.drawColor(backgroundColor);
            
                    // Begin drawing that may be reordered based off of Z
                    canvas.enableZ();
                    for (RenderNode child : children) {
                        canvas.drawRenderNode(child);
                    }
                    // End drawing that may be reordered based off of Z
                    canvas.disableZ();
            
                    // Draw any overlays
                    canvas.drawText("I'm on top of everything!", 0, 0, paint);
                }
            </code>
          <para>&lt;/p&gt;
            
            Note: This is not impacted by any <c>#save()</c> or <c>#restore()</c> calls as it is not
            considered to be part of the current matrix or clip.
            
            See <c>#disableZ()</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#enableZ()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.enableZ()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeGlCaches">
      <MemberSignature Language="C#" Value="public static void FreeGlCaches ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeGlCaches() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.FreeGlCaches" />
      <MemberSignature Language="F#" Value="static member FreeGlCaches : unit -&gt; unit" Usage="Android.Graphics.Canvas.FreeGlCaches " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("freeGlCaches", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("freeGlCaches", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipBounds">
      <MemberSignature Language="C#" Value="public virtual bool GetClipBounds (Android.Graphics.Rect bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetClipBounds(class Android.Graphics.Rect bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.GetClipBounds(Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member GetClipBounds : Android.Graphics.Rect -&gt; bool&#xA;override this.GetClipBounds : Android.Graphics.Rect -&gt; bool" Usage="canvas.GetClipBounds bounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getClipBounds", "(Landroid/graphics/Rect;)Z", "GetGetClipBounds_Landroid_graphics_Rect_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getClipBounds", "(Landroid/graphics/Rect;)Z", "GetGetClipBounds_Landroid_graphics_Rect_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="bounds">Return the clip bounds here.</param>
        <summary>Return the bounds of the current clip (in local coordinates) in the
            bounds parameter, and return true if it is non-empty.</summary>
        <returns>true if the current clip is non-empty.</returns>
        <remarks>
          <para>Return the bounds of the current clip (in local coordinates) in the
            bounds parameter, and return true if it is non-empty. This can be useful
            in a way similar to quickReject, in that it tells you that drawing
            outside of these bounds will be clipped out.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getClipBounds(android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getClipBounds(android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetMatrix">
      <MemberSignature Language="C#" Value="public virtual void GetMatrix (Android.Graphics.Matrix ctm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMatrix(class Android.Graphics.Matrix ctm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.GetMatrix(Android.Graphics.Matrix)" />
      <MemberSignature Language="F#" Value="abstract member GetMatrix : Android.Graphics.Matrix -&gt; unit&#xA;override this.GetMatrix : Android.Graphics.Matrix -&gt; unit" Usage="canvas.GetMatrix ctm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getMatrix", "(Landroid/graphics/Matrix;)V", "GetGetMatrix_Landroid_graphics_Matrix_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getMatrix", "(Landroid/graphics/Matrix;)V", "GetGetMatrix_Landroid_graphics_Matrix_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctm" Type="Android.Graphics.Matrix" />
      </Parameters>
      <Docs>
        <param name="ctm">To be added.</param>
        <summary>Return, in ctm, the current transformation matrix.</summary>
        <remarks>
          <para>Return, in ctm, the current transformation matrix. This does not alter
            the matrix in the canvas, but just returns a copy of it.</para>
          <para>This member is deprecated. <c>#isHardwareAccelerated() Hardware accelerated</c> canvases may have any
            matrix when passed to a View or Drawable, as it is implementation defined where in the
            hierarchy such canvases are created. It is recommended in such cases to either draw contents
            irrespective of the current matrix, or to track relevant transform state outside of the
            canvas.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getMatrix(android.graphics.Matrix)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getMatrix(android.graphics.Matrix)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GL">
      <MemberSignature Language="C#" Value="public virtual Javax.Microedition.Khronos.Opengles.IGL? GL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Microedition.Khronos.Opengles.IGL GL" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.GL" />
      <MemberSignature Language="F#" Value="member this.GL : Javax.Microedition.Khronos.Opengles.IGL" Usage="Android.Graphics.Canvas.GL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getGL", "()Ljavax/microedition/khronos/opengles/GL;", "GetGetGLHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getGL", "()Ljavax/microedition/khronos/opengles/GL;", "GetGetGLHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Microedition.Khronos.Opengles.IGL</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public virtual int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.Height" />
      <MemberSignature Language="F#" Value="member this.Height : int" Usage="Android.Graphics.Canvas.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the height of the current drawing layer</summary>
        <value>the height of the current drawing layer</value>
        <remarks>
          <para>Returns the height of the current drawing layer</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getHeight()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getHeight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsHardwareAccelerated">
      <MemberSignature Language="C#" Value="public virtual bool IsHardwareAccelerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHardwareAccelerated" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.IsHardwareAccelerated" />
      <MemberSignature Language="F#" Value="member this.IsHardwareAccelerated : bool" Usage="Android.Graphics.Canvas.IsHardwareAccelerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isHardwareAccelerated", "()Z", "GetIsHardwareAcceleratedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isHardwareAccelerated", "()Z", "GetIsHardwareAcceleratedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this Canvas uses hardware acceleration.</summary>
        <value>True if drawing operations are hardware accelerated,
                    false otherwise.</value>
        <remarks>
          <para>Indicates whether this Canvas uses hardware acceleration.</para>
          <para>Note that this method does not define what type of hardware acceleration
            may or may not be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#isHardwareAccelerated()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.isHardwareAccelerated()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsOpaque">
      <MemberSignature Language="C#" Value="public virtual bool IsOpaque { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpaque" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.IsOpaque" />
      <MemberSignature Language="F#" Value="member this.IsOpaque : bool" Usage="Android.Graphics.Canvas.IsOpaque" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isOpaque", "()Z", "GetIsOpaqueHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isOpaque", "()Z", "GetIsOpaqueHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the device that the current layer draws into is opaque
            (that is, it does not support per-pixel alpha).</summary>
        <value>true if the device that the current layer draws into is opaque</value>
        <remarks>
          <para>Return true if the device that the current layer draws into is opaque
            (that is, it does not support per-pixel alpha).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#isOpaque()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.isOpaque()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Graphics.Canvas.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Matrix">
      <MemberSignature Language="C#" Value="public Android.Graphics.Matrix Matrix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Matrix Matrix" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.Matrix" />
      <MemberSignature Language="F#" Value="member this.Matrix : Android.Graphics.Matrix with get, set" Usage="Android.Graphics.Canvas.Matrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMatrix", "()Landroid/graphics/Matrix;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMatrix", "()Landroid/graphics/Matrix;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setMatrix", "(Landroid/graphics/Matrix;)V", "GetSetMatrix_Landroid_graphics_Matrix_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setMatrix", "(Landroid/graphics/Matrix;)V", "GetSetMatrix_Landroid_graphics_Matrix_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="matrix">The matrix to replace the current matrix with. If it is
                          null, set the current matrix to identity.</param>
        <summary>Return a new matrix with a copy of the canvas' current transformation
            matrix. -or- Completely replace the current matrix with the specified matrix.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return a new matrix with a copy of the canvas' current transformation
            matrix.</para>
          <para>This member is deprecated. <c>#isHardwareAccelerated() Hardware accelerated</c> canvases may have any
            matrix when passed to a View or Drawable, as it is implementation defined where in the
            hierarchy such canvases are created. It is recommended in such cases to either draw contents
            irrespective of the current matrix, or to track relevant transform state outside of the
            canvas.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getMatrix()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getMatrix()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Completely replace the current matrix with the specified matrix. If the
            matrix parameter is null, then the current matrix is reset to identity.
            
            &lt;strong&gt;Note:&lt;/strong&gt; it is recommended to use <c>#concat(Matrix)</c>,
            <c>#scale(float, float)</c>, <c>#translate(float, float)</c> and
            <c>#rotate(float)</c> instead of this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#setMatrix(android.graphics.Matrix)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.setMatrix(android.graphics.Matrix)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Graphics.Canvas.Concat(Android.Graphics.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="MaximumBitmapHeight">
      <MemberSignature Language="C#" Value="public virtual int MaximumBitmapHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumBitmapHeight" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.MaximumBitmapHeight" />
      <MemberSignature Language="F#" Value="member this.MaximumBitmapHeight : int" Usage="Android.Graphics.Canvas.MaximumBitmapHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaximumBitmapHeight", "()I", "GetGetMaximumBitmapHeightHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaximumBitmapHeight", "()I", "GetGetMaximumBitmapHeightHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum allowed height for bitmaps drawn with this canvas.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the maximum allowed height for bitmaps drawn with this canvas.
            Attempting to draw with a bitmap taller than this value will result
            in an error.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getMaximumBitmapHeight()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getMaximumBitmapHeight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Graphics.Canvas.MaximumBitmapWidth" />
      </Docs>
    </Member>
    <Member MemberName="MaximumBitmapWidth">
      <MemberSignature Language="C#" Value="public virtual int MaximumBitmapWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumBitmapWidth" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.MaximumBitmapWidth" />
      <MemberSignature Language="F#" Value="member this.MaximumBitmapWidth : int" Usage="Android.Graphics.Canvas.MaximumBitmapWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaximumBitmapWidth", "()I", "GetGetMaximumBitmapWidthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaximumBitmapWidth", "()I", "GetGetMaximumBitmapWidthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum allowed width for bitmaps drawn with this canvas.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the maximum allowed width for bitmaps drawn with this canvas.
            Attempting to draw with a bitmap wider than this value will result
            in an error.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getMaximumBitmapWidth()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getMaximumBitmapWidth()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="P:Android.Graphics.Canvas.MaximumBitmapHeight" />
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (Android.Graphics.Path path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(class Android.Graphics.Path path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(Android.Graphics.Path)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : Android.Graphics.Path -&gt; bool&#xA;override this.QuickReject : Android.Graphics.Path -&gt; bool" Usage="canvas.QuickReject path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(Landroid/graphics/Path;)Z", "GetQuickReject_Landroid_graphics_Path_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(Landroid/graphics/Path;)Z", "GetQuickReject_Landroid_graphics_Path_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
      </Parameters>
      <Docs>
        <param name="path">The path to compare with the current clip</param>
        <summary>Return true if the specified path, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the path (transformed by the canvas' matrix)
                               does not intersect with the canvas' clip</returns>
        <remarks>
          <para>Return true if the specified path, after being transformed by the
            current matrix, would lie completely outside of the current clip. Call
            this to check if an area you intend to draw into is clipped out (and
            therefore you can skip making the draw calls). Note: for speed it may
            return false even if the path itself might not intersect the clip
            (i.e. the bounds of the path intersects, but the path does not).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(android.graphics.Path)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(android.graphics.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (Android.Graphics.RectF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(class Android.Graphics.RectF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(Android.Graphics.RectF)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : Android.Graphics.RectF -&gt; bool&#xA;override this.QuickReject : Android.Graphics.RectF -&gt; bool" Usage="canvas.QuickReject rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(Landroid/graphics/RectF;)Z", "GetQuickReject_Landroid_graphics_RectF_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(Landroid/graphics/RectF;)Z", "GetQuickReject_Landroid_graphics_RectF_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
      </Parameters>
      <Docs>
        <param name="rect">the rect to compare with the current clip</param>
        <summary>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the rect (transformed by the canvas' matrix)
                         does not intersect with the canvas' clip</returns>
        <remarks>
          <para>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip. Call
            this to check if an area you intend to draw into is clipped out (and
            therefore you can skip making the draw calls).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(android.graphics.RectF)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(android.graphics.RectF)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (Android.Graphics.Path path, Android.Graphics.Canvas.EdgeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(class Android.Graphics.Path path, class Android.Graphics.Canvas/EdgeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(Android.Graphics.Path,Android.Graphics.Canvas.EdgeType)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : Android.Graphics.Path * Android.Graphics.Canvas.EdgeType -&gt; bool&#xA;override this.QuickReject : Android.Graphics.Path * Android.Graphics.Canvas.EdgeType -&gt; bool" Usage="canvas.QuickReject (path, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(Landroid/graphics/Path;Landroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_Landroid_graphics_Path_Landroid_graphics_Canvas_EdgeType_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(Landroid/graphics/Path;Landroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_Landroid_graphics_Path_Landroid_graphics_Canvas_EdgeType_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Android.Graphics.Path" />
        <Parameter Name="type" Type="Android.Graphics.Canvas+EdgeType" />
      </Parameters>
      <Docs>
        <param name="path">The path to compare with the current clip</param>
        <param name="type">
          <format type="text/html">
            <a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType AA;scope=Xamarin" title="Canvas EdgeType AA">Canvas EdgeType AA</a>
          </format> if the path should be considered antialiased,
                    since that means it may affect a larger area (more pixels) than
                    non-antialiased (<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType BW;scope=Xamarin" title="Canvas EdgeType BW">Canvas EdgeType BW</a></format>).</param>
        <summary>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the rect (transformed by the canvas' matrix)
                               does not intersect with the canvas' clip</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (Android.Graphics.RectF rect, Android.Graphics.Canvas.EdgeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(class Android.Graphics.RectF rect, class Android.Graphics.Canvas/EdgeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(Android.Graphics.RectF,Android.Graphics.Canvas.EdgeType)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : Android.Graphics.RectF * Android.Graphics.Canvas.EdgeType -&gt; bool&#xA;override this.QuickReject : Android.Graphics.RectF * Android.Graphics.Canvas.EdgeType -&gt; bool" Usage="canvas.QuickReject (rect, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(Landroid/graphics/RectF;Landroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_Landroid_graphics_RectF_Landroid_graphics_Canvas_EdgeType_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(Landroid/graphics/RectF;Landroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_Landroid_graphics_RectF_Landroid_graphics_Canvas_EdgeType_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Android.Graphics.RectF" />
        <Parameter Name="type" Type="Android.Graphics.Canvas+EdgeType" />
      </Parameters>
      <Docs>
        <param name="rect">the rect to compare with the current clip</param>
        <param name="type">
          <format type="text/html">
            <a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType AA;scope=Xamarin" title="Canvas EdgeType AA">Canvas EdgeType AA</a>
          </format> if the path should be considered antialiased,
              since that means it may affect a larger area (more pixels) than
              non-antialiased (<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType BW;scope=Xamarin" title="Canvas EdgeType BW">Canvas EdgeType BW</a></format>).</param>
        <summary>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the rect (transformed by the canvas' matrix)
                               does not intersect with the canvas' clip</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (float left, float top, float right, float bottom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(float32 left, float32 top, float32 right, float32 bottom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : single * single * single * single -&gt; bool&#xA;override this.QuickReject : single * single * single * single -&gt; bool" Usage="canvas.QuickReject (left, top, right, bottom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(FFFF)Z", "GetQuickReject_FFFFHandler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(FFFF)Z", "GetQuickReject_FFFFHandler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to compare with the
                               current clip</param>
        <param name="top">The top of the rectangle to compare with the current
                               clip</param>
        <param name="right">The right side of the rectangle to compare with the
                               current clip</param>
        <param name="bottom">The bottom of the rectangle to compare with the
                               current clip</param>
        <summary>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the rect (transformed by the canvas' matrix)
                               does not intersect with the canvas' clip</returns>
        <remarks>
          <para>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip. Call
            this to check if an area you intend to draw into is clipped out (and
            therefore you can skip making the draw calls).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public virtual bool QuickReject (float left, float top, float right, float bottom, Android.Graphics.Canvas.EdgeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickReject(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Canvas/EdgeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.QuickReject(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Canvas.EdgeType)" />
      <MemberSignature Language="F#" Value="abstract member QuickReject : single * single * single * single * Android.Graphics.Canvas.EdgeType -&gt; bool&#xA;override this.QuickReject : single * single * single * single * Android.Graphics.Canvas.EdgeType -&gt; bool" Usage="canvas.QuickReject (left, top, right, bottom, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quickReject", "(FFFFLandroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_FFFFLandroid_graphics_Canvas_EdgeType_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quickReject", "(FFFFLandroid/graphics/Canvas$EdgeType;)Z", "GetQuickReject_FFFFLandroid_graphics_Canvas_EdgeType_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="type" Type="Android.Graphics.Canvas+EdgeType" />
      </Parameters>
      <Docs>
        <param name="left">The left side of the rectangle to compare with the
                               current clip</param>
        <param name="top">The top of the rectangle to compare with the current
                               clip</param>
        <param name="right">The right side of the rectangle to compare with the
                               current clip</param>
        <param name="bottom">The bottom of the rectangle to compare with the
                               current clip</param>
        <param name="type">
          <format type="text/html">
            <a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType AA;scope=Xamarin" title="Canvas EdgeType AA">Canvas EdgeType AA</a>
          </format> if the path should be considered antialiased,
                    since that means it may affect a larger area (more pixels) than
                    non-antialiased (<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Canvas EdgeType BW;scope=Xamarin" title="Canvas EdgeType BW">Canvas EdgeType BW</a></format>).</param>
        <summary>Return true if the specified rectangle, after being transformed by the
            current matrix, would lie completely outside of the current clip.</summary>
        <returns>true if the rect (transformed by the canvas' matrix)
                               does not intersect with the canvas' clip</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#quickReject(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.quickReject(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public virtual void Restore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Restore() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Restore" />
      <MemberSignature Language="F#" Value="abstract member Restore : unit -&gt; unit&#xA;override this.Restore : unit -&gt; unit" Usage="canvas.Restore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("restore", "()V", "GetRestoreHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("restore", "()V", "GetRestoreHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This call balances a previous call to save(), and is used to remove all
            modifications to the matrix/clip state since the last save call.</summary>
        <remarks>
          <para>This call balances a previous call to save(), and is used to remove all
            modifications to the matrix/clip state since the last save call. It is
            an error to call restore() more times than save() was called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#restore()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.restore()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RestoreToCount">
      <MemberSignature Language="C#" Value="public virtual void RestoreToCount (int saveCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RestoreToCount(int32 saveCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.RestoreToCount(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member RestoreToCount : int -&gt; unit&#xA;override this.RestoreToCount : int -&gt; unit" Usage="canvas.RestoreToCount saveCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("restoreToCount", "(I)V", "GetRestoreToCount_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("restoreToCount", "(I)V", "GetRestoreToCount_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="saveCount">The save level to restore to.</param>
        <summary>Efficient way to pop any calls to save() that happened after the save
            count reached saveCount.</summary>
        <remarks>
          <para>Efficient way to pop any calls to save() that happened after the save
            count reached saveCount. It is an error for saveCount to be less than 1.</para>
          <para>Example:
               int count = canvas.save();
               ... // more calls potentially to save()
               canvas.restoreToCount(count);
               // now the canvas is back in the same state it was before the initial
               // call to save().</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#restoreToCount(int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.restoreToCount(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public virtual void Rotate (float degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rotate(float32 degrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Rotate(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member Rotate : single -&gt; unit&#xA;override this.Rotate : single -&gt; unit" Usage="canvas.Rotate degrees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("rotate", "(F)V", "GetRotate_FHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("rotate", "(F)V", "GetRotate_FHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="degrees">The amount to rotate, in degrees</param>
        <summary>Preconcat the current matrix with the specified rotation.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified rotation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#rotate(float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.rotate(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (float degrees, float px, float py);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float32 degrees, float32 px, float32 py) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Rotate(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="member this.Rotate : single * single * single -&gt; unit" Usage="canvas.Rotate (degrees, px, py)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("rotate", "(FFF)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("rotate", "(FFF)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Single" />
        <Parameter Name="px" Type="System.Single" />
        <Parameter Name="py" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="degrees">The amount to rotate, in degrees</param>
        <param name="px">The x-coord for the pivot point (unchanged by the rotation)</param>
        <param name="py">The y-coord for the pivot point (unchanged by the rotation)</param>
        <summary>Preconcat the current matrix with the specified rotation.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified rotation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#rotate(float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.rotate(float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual int Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Save" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; int&#xA;override this.Save : unit -&gt; int" Usage="canvas.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("save", "()I", "GetSaveHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("save", "()I", "GetSaveHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the current matrix and clip onto a private stack.</summary>
        <returns>The value to pass to restoreToCount() to balance this save()</returns>
        <remarks>
          <para>Saves the current matrix and clip onto a private stack.</para>
          <para>Subsequent calls to translate,scale,rotate,skew,concat or clipRect,
            clipPath will all operate as usual, but when the balancing call to
            restore() is made, those calls will be forgotten, and the settings that
            existed before the save() will be reinstated.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#save()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.save()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual int Save (Android.Graphics.SaveFlags saveFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Save(valuetype Android.Graphics.SaveFlags saveFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Save(Android.Graphics.SaveFlags)" />
      <MemberSignature Language="F#" Value="abstract member Save : Android.Graphics.SaveFlags -&gt; int&#xA;override this.Save : Android.Graphics.SaveFlags -&gt; int" Usage="canvas.Save saveFlags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("save", "(I)I", "GetSave_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("save", "(I)I", "GetSave_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveFlags" Type="Android.Graphics.SaveFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="saveFlags">flag bits that specify which parts of the Canvas state
                             to save/restore</param>
        <summary>Based on saveFlags, can save the current matrix and clip onto a private
            stack.</summary>
        <returns>The value to pass to restoreToCount() to balance this save()</returns>
        <remarks>
          <para>Based on saveFlags, can save the current matrix and clip onto a private
            stack.
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; if possible, use the
            parameter-less save(). It is simpler and faster than individually
            disabling the saving of matrix or clip with this method.</para>
          <para>Subsequent calls to translate,scale,rotate,skew,concat or clipRect,
            clipPath will all operate as usual, but when the balancing call to
            restore() is made, those calls will be forgotten, and the settings that
            existed before the save() will be reinstated.</para>
          <para>This member is deprecated. Use <c>#save()</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#save(int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.save(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveCount">
      <MemberSignature Language="C#" Value="public virtual int SaveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SaveCount" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.SaveCount" />
      <MemberSignature Language="F#" Value="member this.SaveCount : int" Usage="Android.Graphics.Canvas.SaveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSaveCount", "()I", "GetGetSaveCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSaveCount", "()I", "GetGetSaveCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of matrix/clip states on the Canvas' private stack.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the number of matrix/clip states on the Canvas' private stack.
            This will equal # save() calls - # restore() calls.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getSaveCount()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getSaveCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public virtual int SaveLayer (Android.Graphics.RectF? bounds, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayer(class Android.Graphics.RectF bounds, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayer(Android.Graphics.RectF,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayer : Android.Graphics.RectF * Android.Graphics.Paint -&gt; int&#xA;override this.SaveLayer : Android.Graphics.RectF * Android.Graphics.Paint -&gt; int" Usage="canvas.SaveLayer (bounds, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayer", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)I", "GetSaveLayer_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayer", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)I", "GetSaveLayer_Landroid_graphics_RectF_Landroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="bounds">May be null. The maximum size the offscreen render target
                          needs to be (in local coordinates)</param>
        <param name="paint">This is copied, and is applied to the offscreen when
                          restore() is called.</param>
        <summary>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen rendering target.</summary>
        <returns>value to pass to restoreToCount() to balance this save()</returns>
        <remarks>
          <para>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen rendering target.
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; this method is very expensive,
            incurring more than double rendering cost for contained content. Avoid
            using this method when possible and instead use a
            <c>android.view.View#LAYER_TYPE_HARDWARE hardware layer</c> on a View
            to apply an xfermode, color filter, or alpha, as it will perform much
            better than this method.</para>
          <para>All drawing calls are directed to a newly allocated offscreen rendering target.
            Only when the balancing call to restore() is made, is that offscreen
            buffer drawn back to the current target of the Canvas (which can potentially be a previous
            layer if these calls are nested).</para>
          <para>Attributes of the Paint - <c>Paint#getAlpha() alpha</c>,
            <c>Paint#getXfermode() Xfermode</c>, and
            <c>Paint#getColorFilter() ColorFilter</c> are applied when the
            offscreen rendering target is drawn back when restore() is called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayer(android.graphics.RectF,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayer(android.graphics.RectF, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public virtual int SaveLayer (Android.Graphics.RectF? bounds, Android.Graphics.Paint? paint, Android.Graphics.SaveFlags saveFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayer(class Android.Graphics.RectF bounds, class Android.Graphics.Paint paint, valuetype Android.Graphics.SaveFlags saveFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayer(Android.Graphics.RectF,Android.Graphics.Paint,Android.Graphics.SaveFlags)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayer : Android.Graphics.RectF * Android.Graphics.Paint * Android.Graphics.SaveFlags -&gt; int&#xA;override this.SaveLayer : Android.Graphics.RectF * Android.Graphics.Paint * Android.Graphics.SaveFlags -&gt; int" Usage="canvas.SaveLayer (bounds, paint, saveFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayer", "(Landroid/graphics/RectF;Landroid/graphics/Paint;I)I", "GetSaveLayer_Landroid_graphics_RectF_Landroid_graphics_Paint_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayer", "(Landroid/graphics/RectF;Landroid/graphics/Paint;I)I", "GetSaveLayer_Landroid_graphics_RectF_Landroid_graphics_Paint_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.RectF" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
        <Parameter Name="saveFlags" Type="Android.Graphics.SaveFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="bounds">May be null. The maximum size the offscreen bitmap
                          needs to be (in local coordinates)</param>
        <param name="paint">This is copied, and is applied to the offscreen when
                          restore() is called.</param>
        <param name="saveFlags">see _SAVE_FLAG constants, generally <c>#ALL_SAVE_FLAG</c> is recommended
                          for performance reasons.</param>
        <summary>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen bitmap.</summary>
        <returns>value to pass to restoreToCount() to balance this save()</returns>
        <remarks>
          <para>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen bitmap.
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; this method is very expensive,
            incurring more than double rendering cost for contained content. Avoid
            using this method, especially if the bounds provided are large. It is
            recommended to use a <c>android.view.View#LAYER_TYPE_HARDWARE hardware layer</c> on a View
            to apply an xfermode, color filter, or alpha, as it will perform much
            better than this method.</para>
          <para>All drawing calls are directed to a newly allocated offscreen bitmap.
            Only when the balancing call to restore() is made, is that offscreen
            buffer drawn back to the current target of the Canvas (either the
            screen, it's target Bitmap, or the previous layer).</para>
          <para>Attributes of the Paint - <c>Paint#getAlpha() alpha</c>,
            <c>Paint#getXfermode() Xfermode</c>, and
            <c>Paint#getColorFilter() ColorFilter</c> are applied when the
            offscreen bitmap is drawn back when restore() is called.
            
            As of API Level API level <c>Build.VERSION_CODES#P</c> the only valid
            <c>saveFlags</c> is <c>#ALL_SAVE_FLAG</c>.  All other flags are ignored.</para>
          <para>This member is deprecated. Use <c>#saveLayer(RectF, Paint)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayer(android.graphics.RectF,%20android.graphics.Paint,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayer(android.graphics.RectF, android.graphics.Paint, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public virtual int SaveLayer (float left, float top, float right, float bottom, Android.Graphics.Paint? paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayer(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Paint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayer(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayer : single * single * single * single * Android.Graphics.Paint -&gt; int&#xA;override this.SaveLayer : single * single * single * single * Android.Graphics.Paint -&gt; int" Usage="canvas.SaveLayer (left, top, right, bottom, paint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayer", "(FFFFLandroid/graphics/Paint;)I", "GetSaveLayer_FFFFLandroid_graphics_Paint_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayer", "(FFFFLandroid/graphics/Paint;)I", "GetSaveLayer_FFFFLandroid_graphics_Paint_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="paint">To be added.</param>
        <summary>Convenience for <c>#saveLayer(RectF, Paint)</c> that takes the four float coordinates of the
            bounds rectangle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Convenience for <c>#saveLayer(RectF, Paint)</c> that takes the four float coordinates of the
            bounds rectangle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayer(float,%20float,%20float,%20float,%20android.graphics.Paint)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayer(float, float, float, float, android.graphics.Paint)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public virtual int SaveLayer (float left, float top, float right, float bottom, Android.Graphics.Paint? paint, Android.Graphics.SaveFlags saveFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayer(float32 left, float32 top, float32 right, float32 bottom, class Android.Graphics.Paint paint, valuetype Android.Graphics.SaveFlags saveFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayer(System.Single,System.Single,System.Single,System.Single,Android.Graphics.Paint,Android.Graphics.SaveFlags)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayer : single * single * single * single * Android.Graphics.Paint * Android.Graphics.SaveFlags -&gt; int&#xA;override this.SaveLayer : single * single * single * single * Android.Graphics.Paint * Android.Graphics.SaveFlags -&gt; int" Usage="canvas.SaveLayer (left, top, right, bottom, paint, saveFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayer", "(FFFFLandroid/graphics/Paint;I)I", "GetSaveLayer_FFFFLandroid_graphics_Paint_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayer", "(FFFFLandroid/graphics/Paint;I)I", "GetSaveLayer_FFFFLandroid_graphics_Paint_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="paint" Type="Android.Graphics.Paint" />
        <Parameter Name="saveFlags" Type="Android.Graphics.SaveFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="paint">To be added.</param>
        <param name="saveFlags">To be added.</param>
        <summary>Helper version of saveLayer() that takes 4 values rather than a RectF.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Helper version of saveLayer() that takes 4 values rather than a RectF.
            
            As of API Level API level <c>Build.VERSION_CODES#P</c> the only valid
            <c>saveFlags</c> is <c>#ALL_SAVE_FLAG</c>.  All other flags are ignored.</para>
          <para>This member is deprecated. Use <c>#saveLayer(float, float, float, float, Paint)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayer(float,%20float,%20float,%20float,%20android.graphics.Paint,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayer(float, float, float, float, android.graphics.Paint, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveLayerAlpha">
      <MemberSignature Language="C#" Value="public virtual int SaveLayerAlpha (Android.Graphics.RectF? bounds, int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayerAlpha(class Android.Graphics.RectF bounds, int32 alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayerAlpha(Android.Graphics.RectF,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayerAlpha : Android.Graphics.RectF * int -&gt; int&#xA;override this.SaveLayerAlpha : Android.Graphics.RectF * int -&gt; int" Usage="canvas.SaveLayerAlpha (bounds, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayerAlpha", "(Landroid/graphics/RectF;I)I", "GetSaveLayerAlpha_Landroid_graphics_RectF_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayerAlpha", "(Landroid/graphics/RectF;I)I", "GetSaveLayerAlpha_Landroid_graphics_RectF_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.RectF" />
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bounds">The maximum size the offscreen bitmap needs to be
                             (in local coordinates)</param>
        <param name="alpha">The alpha to apply to the offscreen when it is
                                    drawn during restore()</param>
        <summary>Convenience for <c>#saveLayer(RectF, Paint)</c> but instead of taking a entire Paint object
            it takes only the <c>alpha</c> parameter.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Convenience for <c>#saveLayer(RectF, Paint)</c> but instead of taking a entire Paint object
            it takes only the <c>alpha</c> parameter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayerAlpha(android.graphics.RectF,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayerAlpha(android.graphics.RectF, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayerAlpha">
      <MemberSignature Language="C#" Value="public virtual int SaveLayerAlpha (Android.Graphics.RectF? bounds, int alpha, Android.Graphics.SaveFlags saveFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayerAlpha(class Android.Graphics.RectF bounds, int32 alpha, valuetype Android.Graphics.SaveFlags saveFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayerAlpha(Android.Graphics.RectF,System.Int32,Android.Graphics.SaveFlags)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayerAlpha : Android.Graphics.RectF * int * Android.Graphics.SaveFlags -&gt; int&#xA;override this.SaveLayerAlpha : Android.Graphics.RectF * int * Android.Graphics.SaveFlags -&gt; int" Usage="canvas.SaveLayerAlpha (bounds, alpha, saveFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayerAlpha", "(Landroid/graphics/RectF;II)I", "GetSaveLayerAlpha_Landroid_graphics_RectF_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayerAlpha", "(Landroid/graphics/RectF;II)I", "GetSaveLayerAlpha_Landroid_graphics_RectF_IIHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="Android.Graphics.RectF" />
        <Parameter Name="alpha" Type="System.Int32" />
        <Parameter Name="saveFlags" Type="Android.Graphics.SaveFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="bounds">The maximum size the offscreen bitmap needs to be
                             (in local coordinates)</param>
        <param name="alpha">The alpha to apply to the offscreen when it is
                                    drawn during restore()</param>
        <param name="saveFlags">see _SAVE_FLAG constants, generally <c>#ALL_SAVE_FLAG</c> is recommended
                             for performance reasons.</param>
        <summary>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen bitmap.</summary>
        <returns>value to pass to restoreToCount() to balance this call</returns>
        <remarks>
          <para>This behaves the same as save(), but in addition it allocates and
            redirects drawing to an offscreen bitmap.
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; this method is very expensive,
            incurring more than double rendering cost for contained content. Avoid
            using this method, especially if the bounds provided are large. It is
            recommended to use a <c>android.view.View#LAYER_TYPE_HARDWARE hardware layer</c> on a View
            to apply an xfermode, color filter, or alpha, as it will perform much
            better than this method.</para>
          <para>All drawing calls are directed to a newly allocated offscreen bitmap.
            Only when the balancing call to restore() is made, is that offscreen
            buffer drawn back to the current target of the Canvas (either the
            screen, it's target Bitmap, or the previous layer).</para>
          <para>The <c>alpha</c> parameter is applied when the offscreen bitmap is
            drawn back when restore() is called.
            
            As of API Level API level <c>Build.VERSION_CODES#P</c> the only valid
            <c>saveFlags</c> is <c>#ALL_SAVE_FLAG</c>.  All other flags are ignored.</para>
          <para>This member is deprecated. Use <c>#saveLayerAlpha(RectF, int)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayerAlpha(android.graphics.RectF,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayerAlpha(android.graphics.RectF, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveLayerAlpha">
      <MemberSignature Language="C#" Value="public virtual int SaveLayerAlpha (float left, float top, float right, float bottom, int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayerAlpha(float32 left, float32 top, float32 right, float32 bottom, int32 alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayerAlpha(System.Single,System.Single,System.Single,System.Single,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayerAlpha : single * single * single * single * int -&gt; int&#xA;override this.SaveLayerAlpha : single * single * single * single * int -&gt; int" Usage="canvas.SaveLayerAlpha (left, top, right, bottom, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayerAlpha", "(FFFFI)I", "GetSaveLayerAlpha_FFFFIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayerAlpha", "(FFFFI)I", "GetSaveLayerAlpha_FFFFIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Convenience for <c>#saveLayerAlpha(RectF, int)</c> that takes the four float coordinates of
            the bounds rectangle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Convenience for <c>#saveLayerAlpha(RectF, int)</c> that takes the four float coordinates of
            the bounds rectangle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayerAlpha(float,%20float,%20float,%20float,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayerAlpha(float, float, float, float, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayerAlpha">
      <MemberSignature Language="C#" Value="public virtual int SaveLayerAlpha (float left, float top, float right, float bottom, int alpha, Android.Graphics.SaveFlags saveFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveLayerAlpha(float32 left, float32 top, float32 right, float32 bottom, int32 alpha, valuetype Android.Graphics.SaveFlags saveFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SaveLayerAlpha(System.Single,System.Single,System.Single,System.Single,System.Int32,Android.Graphics.SaveFlags)" />
      <MemberSignature Language="F#" Value="abstract member SaveLayerAlpha : single * single * single * single * int * Android.Graphics.SaveFlags -&gt; int&#xA;override this.SaveLayerAlpha : single * single * single * single * int * Android.Graphics.SaveFlags -&gt; int" Usage="canvas.SaveLayerAlpha (left, top, right, bottom, alpha, saveFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("saveLayerAlpha", "(FFFFII)I", "GetSaveLayerAlpha_FFFFIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("saveLayerAlpha", "(FFFFII)I", "GetSaveLayerAlpha_FFFFIIHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="top" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="bottom" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Int32" />
        <Parameter Name="saveFlags" Type="Android.Graphics.SaveFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="top">To be added.</param>
        <param name="right">To be added.</param>
        <param name="bottom">To be added.</param>
        <param name="alpha">To be added.</param>
        <param name="saveFlags">To be added.</param>
        <summary>Helper for saveLayerAlpha() that takes 4 values instead of a RectF.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
            
            As of API Level API level <c>Build.VERSION_CODES#P</c> the only valid
            <c>saveFlags</c> is <c>#ALL_SAVE_FLAG</c>.  All other flags are ignored.</para>
          <para>This member is deprecated. Use <c>#saveLayerAlpha(float, float, float, float, int)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#saveLayerAlpha(float,%20float,%20float,%20float,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.saveLayerAlpha(float, float, float, float, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual void Scale (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scale(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Scale(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member Scale : single * single -&gt; unit&#xA;override this.Scale : single * single -&gt; unit" Usage="canvas.Scale (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scale", "(FF)V", "GetScale_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scale", "(FF)V", "GetScale_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to scale in X</param>
        <param name="sy">The amount to scale in Y</param>
        <summary>Preconcat the current matrix with the specified scale.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified scale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#scale(float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.scale(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float sx, float sy, float px, float py);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 sx, float32 sy, float32 px, float32 py) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Scale(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single * single * single -&gt; unit" Usage="canvas.Scale (sx, sy, px, py)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scale", "(FFFF)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scale", "(FFFF)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="px" Type="System.Single" />
        <Parameter Name="py" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to scale in X</param>
        <param name="sy">The amount to scale in Y</param>
        <param name="px">The x-coord for the pivot point (unchanged by the scale)</param>
        <param name="py">The y-coord for the pivot point (unchanged by the scale)</param>
        <summary>Preconcat the current matrix with the specified scale.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified scale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#scale(float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.scale(float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetBitmap">
      <MemberSignature Language="C#" Value="public virtual void SetBitmap (Android.Graphics.Bitmap? bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBitmap(class Android.Graphics.Bitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SetBitmap(Android.Graphics.Bitmap)" />
      <MemberSignature Language="F#" Value="abstract member SetBitmap : Android.Graphics.Bitmap -&gt; unit&#xA;override this.SetBitmap : Android.Graphics.Bitmap -&gt; unit" Usage="canvas.SetBitmap bitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;)V", "GetSetBitmap_Landroid_graphics_Bitmap_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;)V", "GetSetBitmap_Landroid_graphics_Bitmap_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">Specifies a mutable bitmap for the canvas to draw into.</param>
        <summary>Specify a bitmap for the canvas to draw into.</summary>
        <remarks>
          <para>Specify a bitmap for the canvas to draw into. All canvas state such as
            layers, filters, and the save/restore stack are reset. Additionally,
            the canvas' target density is updated to match that of the bitmap.
            
            Prior to API level <c>Build.VERSION_CODES#O</c> the current matrix and
            clip stack were preserved.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#setBitmap(android.graphics.Bitmap)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.setBitmap(android.graphics.Bitmap)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Graphics.Canvas.Density" />
      </Docs>
    </Member>
    <Member MemberName="SetViewport">
      <MemberSignature Language="C#" Value="public virtual void SetViewport (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetViewport(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.SetViewport(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetViewport : int * int -&gt; unit&#xA;override this.SetViewport : int * int -&gt; unit" Usage="canvas.SetViewport (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setViewport", "(II)V", "GetSetViewport_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setViewport", "(II)V", "GetSetViewport_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public virtual void Skew (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skew(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Skew(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member Skew : single * single -&gt; unit&#xA;override this.Skew : single * single -&gt; unit" Usage="canvas.Skew (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("skew", "(FF)V", "GetSkew_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("skew", "(FF)V", "GetSkew_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to skew in X</param>
        <param name="sy">The amount to skew in Y</param>
        <summary>Preconcat the current matrix with the specified skew.</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified skew.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#skew(float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.skew(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Graphics.Canvas.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Graphics.Canvas.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual void Translate (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Translate(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Canvas.Translate(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member Translate : single * single -&gt; unit&#xA;override this.Translate : single * single -&gt; unit" Usage="canvas.Translate (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("translate", "(FF)V", "GetTranslate_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("translate", "(FF)V", "GetTranslate_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">The distance to translate in X</param>
        <param name="dy">The distance to translate in Y</param>
        <summary>Preconcat the current matrix with the specified translation</summary>
        <remarks>
          <para>Preconcat the current matrix with the specified translation</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#translate(float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.translate(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public virtual int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Canvas.Width" />
      <MemberSignature Language="F#" Value="member this.Width : int" Usage="Android.Graphics.Canvas.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the width of the current drawing layer</summary>
        <value>the width of the current drawing layer</value>
        <remarks>
          <para>Returns the width of the current drawing layer</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/Canvas#getWidth()" title="Reference documentation">Java documentation for <code>android.graphics.Canvas.getWidth()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
