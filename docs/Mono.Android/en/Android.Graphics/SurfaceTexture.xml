<Type Name="SurfaceTexture" FullName="Android.Graphics.SurfaceTexture">
  <TypeSignature Language="C#" Value="public class SurfaceTexture : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SurfaceTexture extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/SurfaceTexture", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>Captures frames from an image stream as an OpenGL ES texture.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Captures frames from an image stream as an OpenGL ES texture.

 </para>
      <para tool="javadoc-to-mdoc">The image stream may come from either camera preview or video decode. A
 <c><see cref="T:Android.Views.Surface" /></c> created from a SurfaceTexture can be used as an output
 destination for the <c><see cref="N:Android.Hardware.Camera2" /></c>, <c><see cref="T:Android.Media.MediaCodec" /></c>,
 <c><see cref="T:Android.Media.MediaPlayer" /></c>, and <c><see cref="T:Android.Renderscripts.Allocation" /></c> APIs.
 When <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> is called, the contents of the texture object specified
 when the SurfaceTexture was created are updated to contain the most recent image from the image
 stream.  This may cause some frames of the stream to be skipped.

 </para>
      <para tool="javadoc-to-mdoc">A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output
 destination of the older <c><see cref="T:Android.Hardware.Camera" /></c> API. Doing so will cause all the
 frames from the image stream to be sent to the SurfaceTexture object rather than to the device's
 display.

 </para>
      <para tool="javadoc-to-mdoc">When sampling from the texture one should first transform the texture coordinates using the
 matrix queried via <c><see cref="M:Android.Graphics.SurfaceTexture.GetTransformMatrix(System.Single[])" /></c>.  The transform matrix may change each
 time <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> is called, so it should be re-queried each time the texture image
 is updated.
 This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s,
 t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in
 the streamed texture.  This transform compensates for any properties of the image stream source
 that cause it to appear different from a traditional OpenGL ES texture.  For example, sampling
 from the bottom left corner of the image can be accomplished by transforming the column vector
 (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can
 be done by transforming (1, 1, 0, 1).

 </para>
      <para tool="javadoc-to-mdoc">The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the
  OpenGL ES extension.  This limits how the texture may be used.
 Each time the texture is bound it must be bound to the GL_TEXTURE_EXTERNAL_OES target rather than
 the GL_TEXTURE_2D target.  Additionally, any OpenGL ES 2.0 shader that samples from the texture
 must declare its use of this extension using, for example, an "#extension
 GL_OES_EGL_image_external : require" directive.  Such shaders must also access the texture using
 the samplerExternalOES GLSL sampler type.

 </para>
      <para tool="javadoc-to-mdoc">SurfaceTexture objects may be created on any thread.  <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> may only be
 called on the thread with the OpenGL ES context that contains the texture object.  The
 frame-available callback is called on an arbitrary thread, so unless special care is taken <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> should not be called directly from the callback.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SurfaceTexture (int texName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 texName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="texName" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="texName">To be added.</param>
        <summary>Construct a new SurfaceTexture to stream images to a given OpenGL texture.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a new SurfaceTexture to stream images to a given OpenGL texture.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#SurfaceTexture(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="!:NoType:If the SurfaceTexture cannot be created." />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SurfaceTexture (int texName, bool singleBufferMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 texName, bool singleBufferMode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="texName" Type="System.Int32" />
        <Parameter Name="singleBufferMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="texName">To be added.</param>
        <param name="singleBufferMode">To be added.</param>
        <summary>Construct a new SurfaceTexture to stream images to a given OpenGL texture.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a new SurfaceTexture to stream images to a given OpenGL texture.

 In single buffered mode the application is responsible for serializing access to the image
 content buffer. Each time the image content is to be updated, the
 <c><see cref="M:Android.Graphics.SurfaceTexture.ReleaseTexImage" /></c> method must be called before the image content producer takes
 ownership of the buffer. For example, when producing image content with the NDK
 ANativeWindow_lock and ANativeWindow_unlockAndPost functions, <c><see cref="M:Android.Graphics.SurfaceTexture.ReleaseTexImage" /></c>
 must be called before each ANativeWindow_lock, or that call will fail. When producing
 image content with OpenGL ES, <c><see cref="M:Android.Graphics.SurfaceTexture.ReleaseTexImage" /></c> must be called before the first
 OpenGL ES function call each frame.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#SurfaceTexture(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="!:NoType:If the SurfaceTexture cannot be created." />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SurfaceTexture (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachToGLContext">
      <MemberSignature Language="C#" Value="public virtual void AttachToGLContext (int texName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachToGLContext(int32 texName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachToGLContext", "(I)V", "GetAttachToGLContext_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texName" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="texName">The name of the OpenGL ES texture that will be created.  This texture name
 must be unusued in the OpenGL ES context that is current on the calling thread.
</param>
        <summary>Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread.  A
 new OpenGL ES texture object is created and populated with the SurfaceTexture image frame
 that was current at the time of the last call to <c><see cref="M:Android.Graphics.SurfaceTexture.DetachFromGLContext" /></c>.  This new
 texture is bound to the GL_TEXTURE_EXTERNAL_OES texture target.

 This can be used to access the SurfaceTexture image contents from multiple OpenGL ES
 contexts.  Note, however, that the image contents are only accessible from one OpenGL ES
 context at a time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#attachToGLContext(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DetachFromGLContext">
      <MemberSignature Language="C#" Value="public virtual void DetachFromGLContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetachFromGLContext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detachFromGLContext", "()V", "GetDetachFromGLContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object.
 This call must be made with the OpenGL ES context current on the calling thread.  The OpenGL
 ES texture object will be deleted as a result of this call.  After calling this method all
 calls to <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> will throw an <c><see cref="T:Java.Lang.IllegalStateException" /></c> until
 a successful call to <c><see cref="M:Android.Graphics.SurfaceTexture.AttachToGLContext(System.Int32)" /></c> is made.

 This can be used to access the SurfaceTexture image contents from multiple OpenGL ES
 contexts.  Note, however, that the image contents are only accessible from one OpenGL ES
 context at a time.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#detachFromGLContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FrameAvailable">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Graphics.SurfaceTexture.FrameAvailableEventArgs&gt; FrameAvailable;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Graphics.SurfaceTexture/FrameAvailableEventArgs&gt; FrameAvailable" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Graphics.SurfaceTexture+FrameAvailableEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransformMatrix">
      <MemberSignature Language="C#" Value="public virtual void GetTransformMatrix (float[] mtx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTransformMatrix(float32[] mtx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTransformMatrix", "([F)V", "GetGetTransformMatrix_arrayFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mtx" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="mtx">the array into which the 4x4 matrix will be stored.  The array must have exactly
     16 elements.
</param>
        <summary>Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by
 the most recent call to updateTexImage.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by
 the most recent call to updateTexImage.

 This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s
 and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample
 that location from the texture.  Sampling the texture outside of the range of this transform
 is undefined.

 The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via
 the glLoadMatrixf or glUniformMatrix4fv functions.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTransformMatrix(float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>release() frees all the buffers and puts the SurfaceTexture into the
 'abandoned' state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">release() frees all the buffers and puts the SurfaceTexture into the
 'abandoned' state. Once put in this state the SurfaceTexture can never
 leave it. When in the 'abandoned' state, all methods of the
 IGraphicBufferProducer interface will fail with the NO_INIT error.

 Note that while calling this method causes all the buffers to be freed
 from the perspective of the the SurfaceTexture, if there are additional
 references on the buffers (e.g. if a buffer is referenced by a client or
 by OpenGL ES as a texture) then those buffer will remain allocated.

 Always call this method when you are done with SurfaceTexture. Failing
 to do so may delay resource deallocation for a significant amount of
 time.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseTexImage">
      <MemberSignature Language="C#" Value="public virtual void ReleaseTexImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseTexImage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseTexImage", "()V", "GetReleaseTexImageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the the texture content.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases the the texture content. This is needed in single buffered mode to allow the image
 content producer to take ownership of the image buffer.
 For more information see <c><see cref="C:Android.Graphics.SurfaceTexture(System.Int32,System.Boolean)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#releaseTexImage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultBufferSize">
      <MemberSignature Language="C#" Value="public virtual void SetDefaultBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaultBufferSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDefaultBufferSize", "(II)V", "GetSetDefaultBufferSize_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>Set the default size of the image buffers.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the default size of the image buffers.  The image producer may override the buffer size,
 in which case the producer-set buffer size will be used, not the default size set by this
 method.  Both video and camera based image producers do override the size.  This method may
 be used to set the image size when producing images with <c><see cref="T:Android.Graphics.Canvas" /></c> (via
 <c><see cref="M:Android.Views.Surface.LockCanvas(Android.Graphics.Rect)" /></c>), or OpenGL ES (via an EGLSurface).

 The new default buffer size will take effect the next time the image producer requests a
 buffer to fill.  For <c><see cref="T:Android.Graphics.Canvas" /></c> this will be the next time <c><see cref="M:Android.Views.Surface.LockCanvas(Android.Graphics.Rect)" /></c> is called.  For OpenGL ES, the EGLSurface should be
 destroyed (via eglDestroySurface), made not-current (via eglMakeCurrent), and then recreated
 (via eglCreateWindowSurface) to ensure that the new default size has taken effect.

 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see
 <c><see cref="!:Javax.Microedition.Khronos.Opengles.GL10.glGetIntegerv(int,int[],int)" /></c>).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#setDefaultBufferSize(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="SetOnFrameAvailableListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnFrameAvailableListener (Android.Graphics.SurfaceTexture.IOnFrameAvailableListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnFrameAvailableListener(class Android.Graphics.SurfaceTexture/IOnFrameAvailableListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnFrameAvailableListener", "(Landroid/graphics/SurfaceTexture$OnFrameAvailableListener;)V", "GetSetOnFrameAvailableListener_Landroid_graphics_SurfaceTexture_OnFrameAvailableListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Graphics.SurfaceTexture+IOnFrameAvailableListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to use, or null to remove the listener.
</param>
        <summary>Register a callback to be invoked when a new image frame becomes available to the
 SurfaceTexture.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a new image frame becomes available to the
 SurfaceTexture.
 </para>
          <para tool="javadoc-to-mdoc">
 The callback may be called on an arbitrary thread, so it is not
 safe to call <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> without first binding the OpenGL ES context to the
 thread invoking the callback.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetOnFrameAvailableListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnFrameAvailableListener (Android.Graphics.SurfaceTexture.IOnFrameAvailableListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnFrameAvailableListener(class Android.Graphics.SurfaceTexture/IOnFrameAvailableListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnFrameAvailableListener", "(Landroid/graphics/SurfaceTexture$OnFrameAvailableListener;Landroid/os/Handler;)V", "GetSetOnFrameAvailableListener_Landroid_graphics_SurfaceTexture_OnFrameAvailableListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Graphics.SurfaceTexture+IOnFrameAvailableListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to use, or null to remove the listener.</param>
        <param name="handler">The handler on which the listener should be invoked, or null
 to use an arbitrary thread.
</param>
        <summary>Register a callback to be invoked when a new image frame becomes available to the
 SurfaceTexture.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a new image frame becomes available to the
 SurfaceTexture.
 </para>
          <para tool="javadoc-to-mdoc">
 If a handler is specified, the callback will be invoked on that handler's thread.
 If no handler is specified, then the callback may be called on an arbitrary thread,
 so it is not safe to call <c><see cref="M:Android.Graphics.SurfaceTexture.UpdateTexImage" /></c> without first binding the OpenGL ES
 context to the thread invoking the callback.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public virtual long Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Timestamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTimestamp", "()J", "GetGetTimestampHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the timestamp associated with the texture image set by the most recent call to
 updateTexImage.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the timestamp associated with the texture image set by the most recent call to
 updateTexImage.

 This timestamp is in nanoseconds, and is normally monotonically increasing. The timestamp
 should be unaffected by time-of-day adjustments, and for a camera should be strictly
 monotonic but for a MediaPlayer may be reset when the position is set.  The
 specific meaning and zero point of the timestamp depends on the source providing images to
 the SurfaceTexture. Unless otherwise specified by the image source, timestamps cannot
 generally be compared across SurfaceTexture instances, or across multiple program
 invocations. It is mostly useful for determining time offsets between subsequent frames.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTimestamp()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="UpdateTexImage">
      <MemberSignature Language="C#" Value="public virtual void UpdateTexImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTexImage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("updateTexImage", "()V", "GetUpdateTexImageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Update the texture image to the most recent frame from the image stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Update the texture image to the most recent frame from the image stream.  This may only be
 called while the OpenGL ES context that owns the texture is current on the calling thread.
 It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
