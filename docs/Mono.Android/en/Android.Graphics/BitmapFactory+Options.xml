<Type Name="BitmapFactory+Options" FullName="Android.Graphics.BitmapFactory+Options">
  <TypeSignature Language="C#" Value="public class BitmapFactory.Options : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit BitmapFactory/Options extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/BitmapFactory$Options", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Options ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Create a default Options object, which if left unchanged will give
 the same result from the decoder as if null were passed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a default Options object, which if left unchanged will give
 the same result from the decoder as if null were passed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#BitmapFactory.Options()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Options (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InBitmap">
      <MemberSignature Language="C#" Value="public Android.Graphics.Bitmap InBitmap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Bitmap InBitmap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inBitmap")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set, decode methods that take the Options object will attempt to
 reuse this bitmap when loading content.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If set, decode methods that take the Options object will attempt to
 reuse this bitmap when loading content. If the decode operation cannot
 use this bitmap, the decode method will return <c>null</c> and
 will throw an IllegalArgumentException. The current implementation
 necessitates that the reused bitmap be mutable and of the same size as the
 source content. The source content must be in jpeg or png format (whether as
 a resource or as a stream). The <c><see cref="T:Android.Graphics.Bitmap+Config" /></c> of the reused bitmap will override the setting of
 <c><see cref="P:Android.Graphics.BitmapFactory.Options.InPreferredConfig" /></c>, if set. The reused bitmap will continue to
 remain mutable even when decoding a resource which would normally result
 in an immutable bitmap.

 </para>
          <para tool="javadoc-to-mdoc">You should still always use the returned Bitmap of the decode
 method and not assume that reusing the bitmap worked, due to the
 constraints outlined above and failure situations that can occur.
 Checking whether the return value matches the value of the inBitmap
 set in the Options structure is a way to see if the bitmap was reused,
 but in all cases you should use the returned Bitmap to make sure
 that you are using the bitmap that was used as the decode destination.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="InDensity">
      <MemberSignature Language="C#" Value="public int InDensity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InDensity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inDensity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The pixel density to use for the bitmap.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The pixel density to use for the bitmap.  This will always result
 in the returned bitmap having a density set for it (see
 <c><see cref="P:Android.Graphics.Bitmap.Density" /></c>).  In addition,
 if <c><see cref="P:Android.Graphics.BitmapFactory.Options.InScaled" /></c> is set (which it is by default} and this
 density does not match <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c>, then the bitmap
 will be scaled to the target density before being returned.
 
 </para>
          <para tool="javadoc-to-mdoc">If this is 0,
 <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResource(Android.Content.Res.Resources,System.Int32)" /></c>, 
 <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResource(Android.Content.Res.Resources,System.Int32,System.Int32)" /></c>,
 and <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResourceStream(Android.Content.Res.Resources,Android.Util.TypedValue,Android.Util.TypedValue,Android.Util.TypedValue,Android.Util.TypedValue)" /></c>
 will fill in the density associated with the resource.  The other
 functions will leave it as-is and no density will be applied.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDensity" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InScreenDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InScaled" />
        <altmember cref="P:Android.Graphics.Bitmap.Density" />
        <altmember cref="P:Android.Util.DisplayMetrics.DensityDpi" />
      </Docs>
    </Member>
    <Member MemberName="InDither">
      <MemberSignature Language="C#" Value="public bool InDither { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InDither" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inDither")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If dither is true, the decoder will attempt to dither the decoded
 image.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If dither is true, the decoder will attempt to dither the decoded
 image.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDither" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InInputShareable">
      <MemberSignature Language="C#" Value="public bool InInputShareable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InInputShareable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inInputShareable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This field works in conjuction with inPurgeable.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This field works in conjuction with inPurgeable. If inPurgeable is
 false, then this field is ignored. If inPurgeable is true, then this
 field determines whether the bitmap can share a reference to the
 input data (inputstream, array, etc.) or if it must make a deep copy.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inInputShareable" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="InJustDecodeBounds">
      <MemberSignature Language="C#" Value="public bool InJustDecodeBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InJustDecodeBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inJustDecodeBounds")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set to true, the decoder will return null (no bitmap), but
 the out... fields will still be set, allowing the caller to query
 the bitmap without having to allocate the memory for its pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If set to true, the decoder will return null (no bitmap), but
 the out... fields will still be set, allowing the caller to query
 the bitmap without having to allocate the memory for its pixels.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inJustDecodeBounds" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InMutable">
      <MemberSignature Language="C#" Value="public bool InMutable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InMutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inMutable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set, decode methods will always return a mutable Bitmap instead of
 an immutable one.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If set, decode methods will always return a mutable Bitmap instead of
 an immutable one. This can be used for instance to programmatically apply
 effects to a Bitmap loaded through BitmapFactory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inMutable" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="InPreferQualityOverSpeed">
      <MemberSignature Language="C#" Value="public bool InPreferQualityOverSpeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPreferQualityOverSpeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inPreferQualityOverSpeed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If inPreferQualityOverSpeed is set to true, the decoder will try to
 decode the reconstructed image to a higher quality even at the
 expense of the decoding speed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If inPreferQualityOverSpeed is set to true, the decoder will try to
 decode the reconstructed image to a higher quality even at the
 expense of the decoding speed. Currently the field only affects JPEG
 decode, in the case of which a more accurate, but slightly slower,
 IDCT method will be used instead.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferQualityOverSpeed" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
    <Member MemberName="InPreferredConfig">
      <MemberSignature Language="C#" Value="public Android.Graphics.Bitmap.Config InPreferredConfig { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Bitmap/Config InPreferredConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inPreferredConfig")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Bitmap+Config</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this is non-null, the decoder will try to decode into this
 internal configuration.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If this is non-null, the decoder will try to decode into this
 internal configuration. If it is null, or the request cannot be met,
 the decoder will try to pick the best matching config based on the
 system's screen depth, and characteristics of the original image such
 as if it has per-pixel alpha (requiring a config that also does).
 
 Image are loaded with the <c><see cref="P:Android.Graphics.Bitmap.Config.Argb8888" /></c> config by
 default.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredConfig" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InPremultiplied">
      <MemberSignature Language="C#" Value="public bool InPremultiplied { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPremultiplied" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inPremultiplied")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InPurgeable">
      <MemberSignature Language="C#" Value="public bool InPurgeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPurgeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inPurgeable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this is set to true, then the resulting bitmap will allocate its
 pixels such that they can be purged if the system needs to reclaim
 memory.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If this is set to true, then the resulting bitmap will allocate its
 pixels such that they can be purged if the system needs to reclaim
 memory. In that instance, when the pixels need to be accessed again
 (e.g. the bitmap is drawn, getPixels() is called), they will be
 automatically re-decoded.

 For the re-decode to happen, the bitmap must have access to the
 encoded data, either by sharing a reference to the input
 or by making a copy of it. This distinction is controlled by
 inInputShareable. If this is true, then the bitmap may keep a shallow
 reference to the input. If this is false, then the bitmap will
 explicitly make a copy of the input data, and keep that. Even if
 sharing is allowed, the implementation may still decide to make a
 deep copy of the input data.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPurgeable" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="InSampleSize">
      <MemberSignature Language="C#" Value="public int InSampleSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InSampleSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inSampleSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set to a value &gt; 1, requests the decoder to subsample the original
 image, returning a smaller image to save memory.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If set to a value &gt; 1, requests the decoder to subsample the original
 image, returning a smaller image to save memory. The sample size is
 the number of pixels in either dimension that correspond to a single
 pixel in the decoded bitmap. For example, inSampleSize == 4 returns
 an image that is 1/4 the width/height of the original, and 1/16 the
 number of pixels. Any value &lt;= 1 is treated the same as 1. Note: the
 decoder uses a final value based on powers of 2, any other value will
 be rounded down to the nearest power of 2.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InScaled">
      <MemberSignature Language="C#" Value="public bool InScaled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InScaled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inScaled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When this flag is set, if <c><see cref="P:Android.Graphics.BitmapFactory.Options.InDensity" /></c> and
 <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c> are not 0, the
 bitmap will be scaled to match <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c> when loaded,
 rather than relying on the graphics system scaling it each time it
 is drawn to a Canvas.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">When this flag is set, if <c><see cref="P:Android.Graphics.BitmapFactory.Options.InDensity" /></c> and
 <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c> are not 0, the
 bitmap will be scaled to match <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c> when loaded,
 rather than relying on the graphics system scaling it each time it
 is drawn to a Canvas.

 </para>
          <para tool="javadoc-to-mdoc">This flag is turned on by default and should be turned off if you need
 a non-scaled version of the bitmap.  Nine-patch bitmaps ignore this
 flag and are always scaled.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScaled" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="InScreenDensity">
      <MemberSignature Language="C#" Value="public int InScreenDensity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InScreenDensity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inScreenDensity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The pixel density of the actual screen that is being used.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The pixel density of the actual screen that is being used.  This is
 purely for applications running in density compatibility code, where
 <c><see cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" /></c> is actually the density the application
 sees rather than the real screen density.
 
 </para>
          <para tool="javadoc-to-mdoc">By setting this, you
 allow the loading code to avoid scaling a bitmap that is currently
 in the screen density up/down to the compatibility density.  Instead,
 if <c><see cref="P:Android.Graphics.BitmapFactory.Options.InDensity" /></c> is the same as <c><see cref="P:Android.Graphics.BitmapFactory.Options.InScreenDensity" /></c>, the
 bitmap will be left as-is.  Anything using the resulting bitmap
 must also used <c><see cref="M:Android.Graphics.Bitmap.GetScaledWidth(System.Int32)" /></c> and <c><see cref="M:Android.Graphics.Bitmap.GetScaledHeight(Android.Graphics.Canvas)" /></c> to account for any different between the
 bitmap's density and the target's density.
 
 </para>
          <para tool="javadoc-to-mdoc">This is never set automatically for the caller by
 <c><see cref="T:Android.Graphics.BitmapFactory" /></c> itself.  It must be explicitly set, since the
 caller must deal with the resulting bitmap in a density-aware way.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScreenDensity" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InTargetDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InScaled" />
        <altmember cref="P:Android.Util.DisplayMetrics.DensityDpi" />
      </Docs>
    </Member>
    <Member MemberName="InTargetDensity">
      <MemberSignature Language="C#" Value="public int InTargetDensity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InTargetDensity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inTargetDensity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The pixel density of the destination this bitmap will be drawn to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The pixel density of the destination this bitmap will be drawn to.
 This is used in conjunction with <c><see cref="P:Android.Graphics.BitmapFactory.Options.InDensity" /></c> and
 <c><see cref="P:Android.Graphics.BitmapFactory.Options.InScaled" /></c> to determine if and how to scale the bitmap before
 returning it.
 
 </para>
          <para tool="javadoc-to-mdoc">If this is 0,
 <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResource(Android.Content.Res.Resources,System.Int32)" /></c>, 
 <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResource(Android.Content.Res.Resources,System.Int32,System.Int32)" /></c>,
 and <c><see cref="M:Android.Graphics.BitmapFactory.DecodeResourceStream(Android.Content.Res.Resources,Android.Util.TypedValue,Android.Util.TypedValue,Android.Util.TypedValue,Android.Util.TypedValue)" /></c>
 will fill in the density associated the Resources object's
 DisplayMetrics.  The other
 functions will leave it as-is and no scaling for density will be
 performed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTargetDensity" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InScreenDensity" />
        <altmember cref="P:Android.Graphics.BitmapFactory.Options.InScaled" />
        <altmember cref="P:Android.Util.DisplayMetrics.DensityDpi" />
      </Docs>
    </Member>
    <Member MemberName="InTempStorage">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;byte&gt; InTempStorage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;unsigned int8&gt; InTempStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inTempStorage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Temp storage to use for decoding.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Temp storage to use for decoding.  Suggest 16K or so.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTempStorage" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MCancel">
      <MemberSignature Language="C#" Value="public bool MCancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MCancel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("mCancel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Flag to indicate that cancel has been called on this object.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag to indicate that cancel has been called on this object.  This
 is useful if there's an intermediary that wants to first decode the
 bounds and then decode the image.  In that case the intermediary
 can check, inbetween the bounds decode and the image decode, to see
 if the operation is canceled.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#mCancel" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OutHeight">
      <MemberSignature Language="C#" Value="public int OutHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("outHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The resulting height of the bitmap, set independent of the state of
 inJustDecodeBounds.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The resulting height of the bitmap, set independent of the state of
 inJustDecodeBounds. However, if there is an error trying to decode,
 outHeight will be set to -1. 
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outHeight" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OutMimeType">
      <MemberSignature Language="C#" Value="public string OutMimeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutMimeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("outMimeType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If known, this string is set to the mimetype of the decoded image.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If known, this string is set to the mimetype of the decoded image.
 If not know, or there is an error, it is set to null.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outMimeType" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OutWidth">
      <MemberSignature Language="C#" Value="public int OutWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("outWidth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The resulting width of the bitmap, set independent of the state of
 inJustDecodeBounds.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The resulting width of the bitmap, set independent of the state of
 inJustDecodeBounds. However, if there is an error trying to decode,
 outWidth will be set to -1.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outWidth" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestCancelDecode">
      <MemberSignature Language="C#" Value="public virtual void RequestCancelDecode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestCancelDecode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestCancelDecode", "()V", "GetRequestCancelDecodeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This can be called from another thread while this options object is
  inside a decode... call.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This can be called from another thread while this options object is
  inside a decode... call. Calling this will notify the decoder that
  it should cancel its operation. This is not guaranteed to cancel
  the decode, but if it does, the decoder... operation will return
  null, or if inJustDecodeBounds is true, will set outWidth/outHeight
  to -1
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#requestCancelDecode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
