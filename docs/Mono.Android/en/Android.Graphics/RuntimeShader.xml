<Type Name="RuntimeShader" FullName="Android.Graphics.RuntimeShader">
  <TypeSignature Language="VB.NET" Value="Public Class RuntimeShader&#xA;Inherits Shader" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuntimeShader : Android::Graphics::Shader" />
  <TypeSignature Language="C#" Value="public class RuntimeShader : Android.Graphics.Shader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuntimeShader extends Android.Graphics.Shader" />
  <TypeSignature Language="DocId" Value="T:Android.Graphics.RuntimeShader" />
  <TypeSignature Language="F#" Value="type RuntimeShader = class&#xA;    inherit Shader" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Shader</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/graphics/RuntimeShader", ApiSince=33, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/graphics/RuntimeShader", ApiSince=33, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>RuntimeShader</c> calculates a per-pixel color based on the output of a user defined
            Android Graphics Shading Language (AGSL) function.</summary>
    <remarks>
      <para>A <c>RuntimeShader</c> calculates a per-pixel color based on the output of a user defined
            Android Graphics Shading Language (AGSL) function.</para>
      <para>&lt;h3&gt;Android Graphics Shading Language&lt;/h3&gt;</para>
      <para>The AGSL syntax is very similar to OpenGL ES Shading Language, but there are some important
            differences that are highlighted here. Most of these differences are summed up in one basic fact:
            &lt;b&gt;With GPU shading languages, you are programming a stage of the GPU pipeline. With AGSL, you
            are programming a stage of the <c>Canvas</c> or <c>RenderNode</c> drawing pipeline.&lt;/b&gt;</para>
      <para>In particular, a GLSL fragment shader controls the entire behavior of the GPU between the
            rasterizer and the blending hardware. That shader does all of the work to compute a color, and
            the color it generates is exactly what is fed to the blending stage of the pipeline.</para>
      <para>In contrast, AGSL functions exist as part of a larger pipeline. When you issue a
            <c>Canvas</c> drawing operation, Android (generally) assembles a single GPU fragment shader to
            do all of the required work. This shader typically includes several pieces. For example, it might
            include:</para>
      <para>&lt;ul&gt;
             &lt;li&gt;Evaluating whether a pixel falls inside or outside of the shape being drawn (or on the
             border, where it might apply antialiasing).&lt;/li&gt;
             &lt;li&gt;Evaluating whether a pixel falls inside or outside of the clipping region (again, with
             possible antialiasing logic for border pixels).&lt;/li&gt;
             &lt;li&gt;Logic for the <c>Shader</c>, <c>ColorFilter</c>, and <c>BlendMode</c> on the
             <c>Paint</c>.&lt;/li&gt;
             &lt;li&gt;Color space conversion code, as part of Android’s color management.&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>A <c>RuntimeShader</c>, like other <c>Shader</c> types, effectively contributes a function
            to the GPU’s fragment shader.</para>
      <para>&lt;h3&gt;AGSL Shader Execution&lt;/h3&gt;</para>
      <para>Just like a GLSL shader, an AGSL shader begins execution in a main function. Unlike GLSL, the
            function receives as an input parameter the position of the pixel within the <c>Canvas</c> or
            <c>RenderNode</c> coordinate space (similar to gl_fragCoord) and returns the color to be shaded
            as a vec4 (similar to out vec4 color or gl_FragColor in GLSL).</para>
      <code lang="text/java">vec4 main(vec2 canvas_coordinates);
            </code>
      <para>AGSL and GLSL use different coordinate spaces by default. In GLSL, the fragment coordinate
            (fragCoord) is relative to the lower left. AGSL matches the screen coordinate system of the
            Android <c>Canvas</c> which has its origin as the upper left corner. This means that the
            coordinates provided as a parameter in the main function are local to the canvas with the
            exception of any <c>Shader#getLocalMatrix(Matrix)</c> transformations applied to this shader.
            Additionally, if the shader is invoked by another using <c>#setInputShader(String, Shader)</c>,
            then that parent shader may modify the input coordinates arbitrarily.</para>
      <para>&lt;h3&gt;AGSL and Color Spaces&lt;/h3&gt;</para>
      <para>Android Graphics and by extension <c>RuntimeShader</c> are color managed.  The working
            <c>ColorSpace</c> for an AGSL shader is defined to be the color space of the destination, which
            in most cases is determined by <c>Window#setColorMode(int)</c>.</para>
      <para>When authoring an AGSL shader, you won’t know what the working color space is. For many
            effects, this is fine because by default color inputs are automatically converted into the
            working color space. For certain effects, it may be important to do some math in a fixed, known
            color space. A common example is lighting – to get physically accurate lighting, math should be
            done in a linear color space. To help with this, AGSL provides two intrinsic functions that
            convert colors between the working color space and the
            <c>ColorSpace.Named#LINEAR_EXTENDED_SRGB</c> color space:</para>
      <code lang="text/java">vec3 toLinearSrgb(vec3 color);
            vec3 fromLinearSrgb(vec3 color);</code>
      <para>&lt;h3&gt;AGSL and Premultiplied Alpha&lt;/h3&gt;</para>
      <para>When dealing with transparent colors, there are two (common) possible representations:
            straight (unassociated) alpha and premultiplied (associated) alpha. In ASGL the color returned
            by the main function is expected to be premultiplied.  AGSL’s use of premultiplied alpha
            implies:</para>
      <para>&lt;ul&gt;
             &lt;li&gt;If your AGSL shader will return transparent colors, be sure to multiply the RGB by A.  The
             resulting color should be [R*A, G*A, B*A, A], not [R, G, B, A].&lt;/li&gt;
             &lt;li&gt;For more complex shaders, you must understand which of your colors are premultiplied vs.
             straight. Many operations don’t make sense if you mix both kinds of color together.&lt;/li&gt;
            &lt;/ul&gt;
            
            &lt;h3&gt;Uniforms&lt;/h3&gt;</para>
      <para>AGSL, like GLSL, exposes the concept of uniforms. An AGSL uniform is defined as a read-only,
            global variable that is accessible by the AGSL code and is initialized by a number of setter
            methods on <c>RuntimeShader</c>. AGSL exposes two primitive uniform data types (float, int) and
            two specialized types (colors, shaders) that are outlined below.</para>
      <para>&lt;h4&gt;Primitive Uniforms&lt;/h4&gt;</para>
      <para>There are two primitive uniform types supported by AGSL, float and int. For these types and
            uniforms representing a grouping of these types, like arrays and matrices, there are
            corresponding <c>RuntimeShader</c> methods to initialize them.
            &lt;table border="2" width="85%" align="center" cellpadding="5"&gt;
                &lt;thead&gt;
                    &lt;tr&gt;&lt;th&gt;Java Type&lt;/th&gt; &lt;th&gt;AGSL Type&lt;/th&gt; &lt;th&gt;Method&lt;/th&gt; &lt;/tr&gt;
                &lt;/thead&gt;
            
                &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td rowspan="4"&gt;Floats&lt;/td&gt;
                    &lt;td&gt;float&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setFloatUniform(String, float)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;vec2&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setFloatUniform(String, float, float)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;vec3&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setFloatUniform(String, float, float, float)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;vec4&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setFloatUniform(String, float, float, float, float)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td rowspan="4"&gt;Integers&lt;/td&gt;
                    &lt;td&gt;int&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setIntUniform(String, int)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;ivec2&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setIntUniform(String, int, int)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;ivec3&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setIntUniform(String, int, int, int)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;ivec4&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setIntUniform(String, int, int, int, int)</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td rowspan="2"&gt;Matrices and Arrays&lt;/td&gt;
                    &lt;td&gt;mat2, mat3, and mat4, and float[]&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setFloatUniform(String, float[])</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;int[]&lt;/td&gt;
                    &lt;td&gt;<c>RuntimeShader#setIntUniform(String, int[])</c>&lt;/td&gt;
                &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            
            For example, a simple AGSL shader making use of a float uniform to modulate the transparency
            of the output color would look like:</para>
      <code lang="text/java">uniform float alpha;
            vec4 main(vec2 canvas_coordinates) {
                vec3 red = vec3(1.0, 0.0, 0.0);
                return vec4(red * alpha, alpha);
            }</code>
      <para>After creating a <c>RuntimeShader</c> with that program the uniform can then be initialized
            and updated per frame by calling <c>RuntimeShader#setFloatUniform(String, float)</c> with the
            value of alpha.  The value of a primitive uniform defaults to 0 if it is declared in the AGSL
            shader but not initialized.</para>
      <para>&lt;h4&gt;Color Uniforms&lt;/h4&gt;</para>
      <para>AGSL doesn't know if uniform variables contain colors, it won't automatically convert them to
            the working colorspace of the shader at runtime.  However, you can label your vec4 uniform with
            the "layout(color)" qualifier which lets Android know that the uniform will be used as a color.
            Doing so allows AGSL to transform the uniform value to the working color space. In AGSL, declare
            the uniform like this:</para>
      <code lang="text/java">layout(color) uniform vec4 inputColorA;
            layout(color) uniform vec4 inputColorB;
            vec4 main(vec2 canvas_coordinates) {
                // blend the two colors together and return the resulting color
                return mix(inputColorA, inputColorB, 0.5);
            }</code>
      <para>After creating a <c>RuntimeShader</c> with that program the uniforms can
            then be initialized and updated per frame by calling
            <c>RuntimeShader#setColorUniform(String, int)</c>,
            <c>RuntimeShader#setColorUniform(String, long)</c>, or
            <c>RuntimeShader#setColorUniform(String, Color)</c> with the desired colors.  The value of a
            color uniform is undefined if it is declared in the AGSL shader but not initialized.</para>
      <para>&lt;h4&gt;Shader Uniforms&lt;/h4&gt;
            In GLSL, a fragment shader can sample a texture. For AGSL instead of sampling textures you can
            sample from any <c>Shader</c>, which includes but is not limited to <c>BitmapShader</c>. To
            make it clear that you are operating on an <c>Shader</c> object there is no "sample"
            method. Instead, the shader uniform has an "eval()" method. This distinction enables AGSL shaders
            to sample from existing bitmap and gradient shaders as well as other <c>RuntimeShader</c>
            objects.  In AGSL, declare the uniform like this:</para>
      <code lang="text/java">uniform shader myShader;
            vec4 main(vec2 canvas_coordinates) {
                // swap the red and blue color channels when sampling from myShader
                return myShader.eval(canvas_coordinates).bgra;
            }</code>
      <para>After creating a <c>RuntimeShader</c> with that program the shader uniform can
            then be initialized and updated per frame by calling
            <c>RuntimeShader#setInputShader(String, Shader)</c> with the desired shader. The value of a
            shader uniform is undefined if it is declared in the AGSL shader but not initialized.</para>
      <para>Although most <c>BitmapShader</c>s contain colors that should be color managed, some contain
            data that isn’t actually colors. This includes bitmaps storing normals, material properties
            (e.g. roughness), heightmaps, or any other purely mathematical data that happens to be stored in
            a bitmap. When using these kinds of shaders in AGSL, you probably want to initialize them with
            <c>#setInputBuffer(String, BitmapShader)</c>. Shaders initialized this way work much like
            a regular <c>BitmapShader</c> (including filtering and tiling), with a few major differences:
            &lt;ul&gt;
             &lt;li&gt;No color space transformation is applied (the color space of the bitmap is ignored).&lt;/li&gt;
             &lt;li&gt;Bitmaps that return false for <c>Bitmap#isPremultiplied()</c> are not automatically
             premultiplied.&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>In addition, when sampling from a <c>BitmapShader</c> be aware that the shader does not use
            normalized coordinates (like a texture in GLSL). It uses (0, 0) in the upper-left corner, and
            (width, height) in the bottom-right corner. Normally, this is exactly what you want. If you’re
            evaluating the shader with coordinates based on the ones passed to your AGSL program, the scale
            is correct. However, if you want to adjust those coordinates (to do some kind of re-mapping of
            the bitmap), remember that the coordinates are local to the canvas.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/graphics/RuntimeShader" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (shader As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeShader(System::String ^ shader);" />
      <MemberSignature Language="C#" Value="public RuntimeShader (string shader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string shader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.RuntimeShader : string -&gt; Android.Graphics.RuntimeShader" Usage="new Android.Graphics.RuntimeShader shader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="shader" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shader">The text of AGSL shader program to run.</param>
        <summary>Creates a new RuntimeShader.</summary>
        <remarks>
          <para>Creates a new RuntimeShader.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#RuntimeShader(java.lang.String)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.RuntimeShader(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RuntimeShader(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected RuntimeShader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.RuntimeShader : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Graphics.RuntimeShader" Usage="new Android.Graphics.RuntimeShader (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">To be added.</param>
        <param name="transfer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.RuntimeShader.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Graphics.RuntimeShader.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetColorUniform (uniformName As String, color As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetColorUniform(System::String ^ uniformName, Android::Graphics::Color color);" />
      <MemberSignature Language="C#" Value="public virtual void SetColorUniform (string uniformName, Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColorUniform(string uniformName, valuetype Android.Graphics.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetColorUniform(System.String,Android.Graphics.Color)" />
      <MemberSignature Language="F#" Value="abstract member SetColorUniform : string * Android.Graphics.Color -&gt; unit&#xA;override this.SetColorUniform : string * Android.Graphics.Color -&gt; unit" Usage="runtimeShader.SetColorUniform (uniformName, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;I)V", "GetSetColorUniform_Ljava_lang_String_IHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;I)V", "GetSetColorUniform_Ljava_lang_String_IHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="uniformName">name matching the color uniform declared in the AGSL shader program</param>
        <param name="color">the provided sRGB color will be transformed into the shader program's output
                         colorspace and will be available as a vec4 uniform in the program.</param>
        <summary>Sets the uniform color value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform color value corresponding to this shader.  If the shader does not have a
            uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and
            corresponding layout(color) annotation then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setColorUniform(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setColorUniform(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetColorUniform (uniformName As String, color As ColorObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetColorUniform(System::String ^ uniformName, Android::Graphics::ColorObject ^ color);" />
      <MemberSignature Language="C#" Value="public virtual void SetColorUniform (string uniformName, Android.Graphics.ColorObject color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColorUniform(string uniformName, class Android.Graphics.ColorObject color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetColorUniform(System.String,Android.Graphics.ColorObject)" />
      <MemberSignature Language="F#" Value="abstract member SetColorUniform : string * Android.Graphics.ColorObject -&gt; unit&#xA;override this.SetColorUniform : string * Android.Graphics.ColorObject -&gt; unit" Usage="runtimeShader.SetColorUniform (uniformName, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;Landroid/graphics/Color;)V", "GetSetColorUniform_Ljava_lang_String_Landroid_graphics_Color_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;Landroid/graphics/Color;)V", "GetSetColorUniform_Ljava_lang_String_Landroid_graphics_Color_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="color" Type="Android.Graphics.ColorObject" />
      </Parameters>
      <Docs>
        <param name="uniformName">name matching the color uniform declared in the AGSL shader program</param>
        <param name="color">the provided sRGB color will be transformed into the shader program's output
                         colorspace and will be available as a vec4 uniform in the program.</param>
        <summary>Sets the uniform color value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform color value corresponding to this shader.  If the shader does not have a
            uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and
            corresponding layout(color) annotation then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setColorUniform(java.lang.String,%20android.graphics.Color)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setColorUniform(java.lang.String, android.graphics.Color)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetColorUniform (uniformName As String, color As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetColorUniform(System::String ^ uniformName, long color);" />
      <MemberSignature Language="C#" Value="public virtual void SetColorUniform (string uniformName, long color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColorUniform(string uniformName, int64 color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetColorUniform(System.String,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetColorUniform : string * int64 -&gt; unit&#xA;override this.SetColorUniform : string * int64 -&gt; unit" Usage="runtimeShader.SetColorUniform (uniformName, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;J)V", "GetSetColorUniform_Ljava_lang_String_JHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setColorUniform", "(Ljava/lang/String;J)V", "GetSetColorUniform_Ljava_lang_String_JHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="color" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="uniformName">name matching the color uniform declared in the AGSL shader program</param>
        <param name="color">the provided sRGB color will be transformed into the shader program's output
                         colorspace and will be available as a vec4 uniform in the program.</param>
        <summary>Sets the uniform color value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform color value corresponding to this shader.  If the shader does not have a
            uniform with that name or if the uniform is declared with a type other than vec3 or vec4 and
            corresponding layout(color) annotation then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setColorUniform(java.lang.String,%20long)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setColorUniform(java.lang.String, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFloatUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFloatUniform (uniformName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetFloatUniform(System::String ^ uniformName, float value);" />
      <MemberSignature Language="C#" Value="public virtual void SetFloatUniform (string uniformName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFloatUniform(string uniformName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetFloatUniform(System.String,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetFloatUniform : string * single -&gt; unit&#xA;override this.SetFloatUniform : string * single -&gt; unit" Usage="runtimeShader.SetFloatUniform (uniformName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;F)V", "GetSetFloatUniform_Ljava_lang_String_FHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;F)V", "GetSetFloatUniform_Ljava_lang_String_FHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than a float or float[1]
            then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setFloatUniform(java.lang.String,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setFloatUniform(java.lang.String, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFloatUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFloatUniform (uniformName As String, values As Single())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetFloatUniform(System::String ^ uniformName, cli::array &lt;float&gt; ^ values);" />
      <MemberSignature Language="C#" Value="public virtual void SetFloatUniform (string uniformName, float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFloatUniform(string uniformName, float32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetFloatUniform(System.String,System.Single[])" />
      <MemberSignature Language="F#" Value="abstract member SetFloatUniform : string * single[] -&gt; unit&#xA;override this.SetFloatUniform : string * single[] -&gt; unit" Usage="runtimeShader.SetFloatUniform (uniformName, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;[F)V", "GetSetFloatUniform_Ljava_lang_String_arrayFHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;[F)V", "GetSetFloatUniform_Ljava_lang_String_arrayFHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than a float (for N=1), vecN,
            or float[N] where N is the length of the values param then an IllegalArgumentException is
            thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setFloatUniform(java.lang.String,%20float[])" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setFloatUniform(java.lang.String, float[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFloatUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFloatUniform (uniformName As String, value1 As Single, value2 As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetFloatUniform(System::String ^ uniformName, float value1, float value2);" />
      <MemberSignature Language="C#" Value="public virtual void SetFloatUniform (string uniformName, float value1, float value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFloatUniform(string uniformName, float32 value1, float32 value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetFloatUniform(System.String,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetFloatUniform : string * single * single -&gt; unit&#xA;override this.SetFloatUniform : string * single * single -&gt; unit" Usage="runtimeShader.SetFloatUniform (uniformName, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FF)V", "GetSetFloatUniform_Ljava_lang_String_FFHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FF)V", "GetSetFloatUniform_Ljava_lang_String_FFHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than vec2 or float[2] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setFloatUniform(java.lang.String,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setFloatUniform(java.lang.String, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFloatUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFloatUniform (uniformName As String, value1 As Single, value2 As Single, value3 As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetFloatUniform(System::String ^ uniformName, float value1, float value2, float value3);" />
      <MemberSignature Language="C#" Value="public virtual void SetFloatUniform (string uniformName, float value1, float value2, float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFloatUniform(string uniformName, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetFloatUniform(System.String,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetFloatUniform : string * single * single * single -&gt; unit&#xA;override this.SetFloatUniform : string * single * single * single -&gt; unit" Usage="runtimeShader.SetFloatUniform (uniformName, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FFF)V", "GetSetFloatUniform_Ljava_lang_String_FFFHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FFF)V", "GetSetFloatUniform_Ljava_lang_String_FFFHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
        <Parameter Name="value3" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="value3">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than vec3 or float[3] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setFloatUniform(java.lang.String,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setFloatUniform(java.lang.String, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFloatUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFloatUniform (uniformName As String, value1 As Single, value2 As Single, value3 As Single, value4 As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetFloatUniform(System::String ^ uniformName, float value1, float value2, float value3, float value4);" />
      <MemberSignature Language="C#" Value="public virtual void SetFloatUniform (string uniformName, float value1, float value2, float value3, float value4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFloatUniform(string uniformName, float32 value1, float32 value2, float32 value3, float32 value4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetFloatUniform(System.String,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetFloatUniform : string * single * single * single * single -&gt; unit&#xA;override this.SetFloatUniform : string * single * single * single * single -&gt; unit" Usage="runtimeShader.SetFloatUniform (uniformName, value1, value2, value3, value4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FFFF)V", "GetSetFloatUniform_Ljava_lang_String_FFFFHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFloatUniform", "(Ljava/lang/String;FFFF)V", "GetSetFloatUniform_Ljava_lang_String_FFFFHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
        <Parameter Name="value3" Type="System.Single" />
        <Parameter Name="value4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="value3">To be added.</param>
        <param name="value4">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than vec4 or float[4] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setFloatUniform(java.lang.String,%20float,%20float,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setFloatUniform(java.lang.String, float, float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInputBuffer">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetInputBuffer (shaderName As String, shader As BitmapShader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetInputBuffer(System::String ^ shaderName, Android::Graphics::BitmapShader ^ shader);" />
      <MemberSignature Language="C#" Value="public virtual void SetInputBuffer (string shaderName, Android.Graphics.BitmapShader shader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInputBuffer(string shaderName, class Android.Graphics.BitmapShader shader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetInputBuffer(System.String,Android.Graphics.BitmapShader)" />
      <MemberSignature Language="F#" Value="abstract member SetInputBuffer : string * Android.Graphics.BitmapShader -&gt; unit&#xA;override this.SetInputBuffer : string * Android.Graphics.BitmapShader -&gt; unit" Usage="runtimeShader.SetInputBuffer (shaderName, shader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInputBuffer", "(Ljava/lang/String;Landroid/graphics/BitmapShader;)V", "GetSetInputBuffer_Ljava_lang_String_Landroid_graphics_BitmapShader_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInputBuffer", "(Ljava/lang/String;Landroid/graphics/BitmapShader;)V", "GetSetInputBuffer_Ljava_lang_String_Landroid_graphics_BitmapShader_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderName" Type="System.String" />
        <Parameter Name="shader" Type="Android.Graphics.BitmapShader" />
      </Parameters>
      <Docs>
        <param name="shaderName">To be added.</param>
        <param name="shader">To be added.</param>
        <summary>Assigns the uniform shader to the provided shader parameter.</summary>
        <remarks>
          <para>Assigns the uniform shader to the provided shader parameter.  If the shader program does not
            have a uniform shader with that name then an IllegalArgumentException is thrown.</para>
          <para>Unlike setInputShader this method returns samples directly from the bitmap's buffer. This
            means that there will be no transformation of the sampled pixels, such as colorspace
            conversion or alpha premultiplication.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setInputBuffer(java.lang.String,%20android.graphics.BitmapShader)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setInputBuffer(java.lang.String, android.graphics.BitmapShader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInputShader">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetInputShader (shaderName As String, shader As Shader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetInputShader(System::String ^ shaderName, Android::Graphics::Shader ^ shader);" />
      <MemberSignature Language="C#" Value="public virtual void SetInputShader (string shaderName, Android.Graphics.Shader shader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInputShader(string shaderName, class Android.Graphics.Shader shader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetInputShader(System.String,Android.Graphics.Shader)" />
      <MemberSignature Language="F#" Value="abstract member SetInputShader : string * Android.Graphics.Shader -&gt; unit&#xA;override this.SetInputShader : string * Android.Graphics.Shader -&gt; unit" Usage="runtimeShader.SetInputShader (shaderName, shader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInputShader", "(Ljava/lang/String;Landroid/graphics/Shader;)V", "GetSetInputShader_Ljava_lang_String_Landroid_graphics_Shader_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInputShader", "(Ljava/lang/String;Landroid/graphics/Shader;)V", "GetSetInputShader_Ljava_lang_String_Landroid_graphics_Shader_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderName" Type="System.String" />
        <Parameter Name="shader" Type="Android.Graphics.Shader" />
      </Parameters>
      <Docs>
        <param name="shaderName">name matching the uniform declared in the AGSL shader program</param>
        <param name="shader">shader passed into the AGSL shader program for sampling</param>
        <summary>Assigns the uniform shader to the provided shader parameter.</summary>
        <remarks>
          <para>Assigns the uniform shader to the provided shader parameter.  If the shader program does not
            have a uniform shader with that name then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setInputShader(java.lang.String,%20android.graphics.Shader)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setInputShader(java.lang.String, android.graphics.Shader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIntUniform (uniformName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetIntUniform(System::String ^ uniformName, int value);" />
      <MemberSignature Language="C#" Value="public virtual void SetIntUniform (string uniformName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntUniform(string uniformName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetIntUniform(System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetIntUniform : string * int -&gt; unit&#xA;override this.SetIntUniform : string * int -&gt; unit" Usage="runtimeShader.SetIntUniform (uniformName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;I)V", "GetSetIntUniform_Ljava_lang_String_IHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;I)V", "GetSetIntUniform_Ljava_lang_String_IHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than an int or int[1]
            then an IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setIntUniform(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setIntUniform(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIntUniform (uniformName As String, values As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetIntUniform(System::String ^ uniformName, cli::array &lt;int&gt; ^ values);" />
      <MemberSignature Language="C#" Value="public virtual void SetIntUniform (string uniformName, int[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntUniform(string uniformName, int32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetIntUniform(System.String,System.Int32[])" />
      <MemberSignature Language="F#" Value="abstract member SetIntUniform : string * int[] -&gt; unit&#xA;override this.SetIntUniform : string * int[] -&gt; unit" Usage="runtimeShader.SetIntUniform (uniformName, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;[I)V", "GetSetIntUniform_Ljava_lang_String_arrayIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;[I)V", "GetSetIntUniform_Ljava_lang_String_arrayIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="values" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than an int (for N=1), ivecN,
            or int[N] where N is the length of the values param then an IllegalArgumentException is
            thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setIntUniform(java.lang.String,%20int[])" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setIntUniform(java.lang.String, int[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIntUniform (uniformName As String, value1 As Integer, value2 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetIntUniform(System::String ^ uniformName, int value1, int value2);" />
      <MemberSignature Language="C#" Value="public virtual void SetIntUniform (string uniformName, int value1, int value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntUniform(string uniformName, int32 value1, int32 value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetIntUniform(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetIntUniform : string * int * int -&gt; unit&#xA;override this.SetIntUniform : string * int * int -&gt; unit" Usage="runtimeShader.SetIntUniform (uniformName, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;II)V", "GetSetIntUniform_Ljava_lang_String_IIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;II)V", "GetSetIntUniform_Ljava_lang_String_IIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Int32" />
        <Parameter Name="value2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than ivec2 or int[2] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setIntUniform(java.lang.String,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setIntUniform(java.lang.String, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIntUniform (uniformName As String, value1 As Integer, value2 As Integer, value3 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetIntUniform(System::String ^ uniformName, int value1, int value2, int value3);" />
      <MemberSignature Language="C#" Value="public virtual void SetIntUniform (string uniformName, int value1, int value2, int value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntUniform(string uniformName, int32 value1, int32 value2, int32 value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetIntUniform(System.String,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetIntUniform : string * int * int * int -&gt; unit&#xA;override this.SetIntUniform : string * int * int * int -&gt; unit" Usage="runtimeShader.SetIntUniform (uniformName, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;III)V", "GetSetIntUniform_Ljava_lang_String_IIIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;III)V", "GetSetIntUniform_Ljava_lang_String_IIIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Int32" />
        <Parameter Name="value2" Type="System.Int32" />
        <Parameter Name="value3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="value3">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than ivec3 or int[3] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setIntUniform(java.lang.String,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setIntUniform(java.lang.String, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntUniform">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIntUniform (uniformName As String, value1 As Integer, value2 As Integer, value3 As Integer, value4 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetIntUniform(System::String ^ uniformName, int value1, int value2, int value3, int value4);" />
      <MemberSignature Language="C#" Value="public virtual void SetIntUniform (string uniformName, int value1, int value2, int value3, int value4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntUniform(string uniformName, int32 value1, int32 value2, int32 value3, int32 value4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.RuntimeShader.SetIntUniform(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetIntUniform : string * int * int * int * int -&gt; unit&#xA;override this.SetIntUniform : string * int * int * int * int -&gt; unit" Usage="runtimeShader.SetIntUniform (uniformName, value1, value2, value3, value4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;IIII)V", "GetSetIntUniform_Ljava_lang_String_IIIIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setIntUniform", "(Ljava/lang/String;IIII)V", "GetSetIntUniform_Ljava_lang_String_IIIIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniformName" Type="System.String" />
        <Parameter Name="value1" Type="System.Int32" />
        <Parameter Name="value2" Type="System.Int32" />
        <Parameter Name="value3" Type="System.Int32" />
        <Parameter Name="value4" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value1">To be added.</param>
        <param name="value2">To be added.</param>
        <param name="value3">To be added.</param>
        <param name="value4">To be added.</param>
        <param name="uniformName">name matching the uniform declared in the AGSL shader program</param>
        <summary>Sets the uniform value corresponding to this shader.</summary>
        <remarks>
          <para>Sets the uniform value corresponding to this shader.  If the shader does not have a uniform
            with that name or if the uniform is declared with a type other than ivec4 or int[4] then an
            IllegalArgumentException is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/RuntimeShader#setIntUniform(java.lang.String,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.graphics.RuntimeShader.setIntUniform(java.lang.String, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.RuntimeShader.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Graphics.RuntimeShader.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.RuntimeShader.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Graphics.RuntimeShader.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
