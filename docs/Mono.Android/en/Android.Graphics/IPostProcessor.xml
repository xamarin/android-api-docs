<Type Name="IPostProcessor" FullName="Android.Graphics.IPostProcessor">
  <TypeSignature Language="C#" Value="public interface IPostProcessor : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IPostProcessor implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Graphics.IPostProcessor" />
  <TypeSignature Language="F#" Value="type IPostProcessor = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/graphics/PostProcessor", "", "Android.Graphics.IPostProcessorInvoker", ApiSince=28)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/graphics/PostProcessor", "", "Android.Graphics.IPostProcessorInvoker", ApiSince=28)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Helper interface for adding custom processing to an image.</summary>
    <remarks>
      <para>Helper interface for adding custom processing to an image.</para>
      <para />
      <para>The image being processed may be a <c>Drawable</c>, a <c>Bitmap</c>, or
             a frame of an <c>AnimatedImageDrawable</c> produced by <c>ImageDecoder</c>.
             This is called before the requested object is returned.</para>
      <para>This custom processing can even be applied to images that will be returned
             as immutable objects, such as a <c>Bitmap</c> with <c>Config</c><c>Bitmap.Config#HARDWARE</c> returned by <c>ImageDecoder</c>.</para>
      <para>On an <c>AnimatedImageDrawable</c>, the callback will only be called once,
             but the drawing commands will be applied to each frame, as if the <c>Canvas</c>
             had been returned by <c>Picture#beginRecording Picture.beginRecording</c>.</para>
      <para />
      <para>Supplied to ImageDecoder via <c>ImageDecoder#setPostProcessor setPostProcessor</c>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/graphics/PostProcessor" title="Reference documentation">Java documentation for <code>android.graphics.PostProcessor</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnPostProcess">
      <MemberSignature Language="C#" Value="public int OnPostProcess (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 OnPostProcess(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.IPostProcessor.OnPostProcess(Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="abstract member OnPostProcess : Android.Graphics.Canvas -&gt; int" Usage="iPostProcessor.OnPostProcess canvas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPostProcess", "(Landroid/graphics/Canvas;)I", "GetOnPostProcess_Landroid_graphics_Canvas_Handler:Android.Graphics.IPostProcessorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPostProcess", "(Landroid/graphics/Canvas;)I", "GetOnPostProcess_Landroid_graphics_Canvas_Handler:Android.Graphics.IPostProcessorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The <c>Canvas</c> to draw to.</param>
        <summary>Do any processing after (for example) decoding.</summary>
        <returns>Opacity of the result after drawing.
                 <c>PixelFormat#UNKNOWN PixelFormat.UNKNOWN</c> means that the
                 implementation did not change whether the image has alpha. Return
                 this unless you added transparency (e.g. with the code above, in
                 which case you should return
                 <c>PixelFormat#TRANSLUCENT PixelFormat.TRANSLUCENT</c>) or you
                 forced the image to be opaque (e.g. by drawing everywhere with an
                 opaque color and <c>PorterDuff.Mode#DST_OVER PorterDuff.Mode.DST_OVER</c>,
                 in which case you should return <c>PixelFormat#OPAQUE PixelFormat.OPAQUE</c>).
                 <c>PixelFormat#TRANSLUCENT PixelFormat.TRANSLUCENT</c> means that
                 the implementation added transparency. This is safe to return even
                 if the image already had transparency. This is also safe to return
                 if the result is opaque, though it may draw more slowly.
                 <c>PixelFormat#OPAQUE PixelFormat.OPAQUE</c> means that the
                 implementation forced the image to be opaque. This is safe to return
                 even if the image was already opaque.
                 <c>PixelFormat#TRANSPARENT PixelFormat.TRANSPARENT</c> (or any other
                 integer) is not allowed, and will result in throwing an
                 <c>java.lang.IllegalArgumentException</c>.</returns>
        <remarks>
          <para>Do any processing after (for example) decoding.</para>
          <para />
          <para>Drawing to the <c>Canvas</c> will behave as if the initial processing
             (e.g. decoding) already exists in the Canvas. An implementation can draw
             effects on top of this, or it can even draw behind it using
             <c>PorterDuff.Mode#DST_OVER PorterDuff.Mode.DST_OVER</c>. A common
             effect is to add transparency to the corners to achieve rounded corners.
             That can be done with the following code:</para>
          <code lang="text/java">Path path = new Path();
             path.setFillType(Path.FillType.INVERSE_EVEN_ODD);
             int width = canvas.getWidth();
             int height = canvas.getHeight();
             path.addRoundRect(0, 0, width, height, 20, 20, Path.Direction.CW);
             Paint paint = new Paint();
             paint.setAntiAlias(true);
             paint.setColor(Color.TRANSPARENT);
             paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));
             canvas.drawPath(path, paint);
             return PixelFormat.TRANSLUCENT;
             </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/PostProcessor#onPostProcess(android.graphics.Canvas)" title="Reference documentation">Java documentation for <code>android.graphics.PostProcessor.onPostProcess(android.graphics.Canvas)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
