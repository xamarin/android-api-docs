<Type Name="ThreadPoolExecutor" FullName="Java.Util.Concurrent.ThreadPoolExecutor">
  <TypeSignature Language="C#" Value="public class ThreadPoolExecutor : Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadPoolExecutor extends Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.ThreadPoolExecutor" />
  <TypeSignature Language="F#" Value="type ThreadPoolExecutor = class&#xA;    inherit AbstractExecutorService" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.AbstractExecutorService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/ThreadPoolExecutor", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/ThreadPoolExecutor", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An <c>ExecutorService</c> that executes each submitted task using
            one of possibly several pooled threads, normally configured
            using <c>Executors</c> factory methods.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ThreadPoolExecutor (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ThreadPoolExecutor : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.ThreadPoolExecutor" Usage="new Java.Util.Concurrent.ThreadPoolExecutor (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadPoolExecutor (int corePoolSize, int maximumPoolSize, long keepAliveTime, Java.Util.Concurrent.TimeUnit? unit, Java.Util.Concurrent.IBlockingQueue? workQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, int32 maximumPoolSize, int64 keepAliveTime, class Java.Util.Concurrent.TimeUnit unit, class Java.Util.Concurrent.IBlockingQueue workQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.#ctor(System.Int32,System.Int32,System.Int64,Java.Util.Concurrent.TimeUnit,Java.Util.Concurrent.IBlockingQueue)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ThreadPoolExecutor : int * int * int64 * Java.Util.Concurrent.TimeUnit * Java.Util.Concurrent.IBlockingQueue -&gt; Java.Util.Concurrent.ThreadPoolExecutor" Usage="new Java.Util.Concurrent.ThreadPoolExecutor (corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="maximumPoolSize" Type="System.Int32" />
        <Parameter Name="keepAliveTime" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
        <Parameter Name="workQueue" Type="Java.Util.Concurrent.IBlockingQueue" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <param name="maximumPoolSize">the maximum number of threads to allow in the
                   pool</param>
        <param name="keepAliveTime">when the number of threads is greater than
                   the core, this is the maximum time that excess idle threads
                   will wait for new tasks before terminating.</param>
        <param name="unit">the time unit for the <c>keepAliveTime</c> argument</param>
        <param name="workQueue">the queue to use for holding tasks before they are
                   executed.  This queue will hold only the <c>Runnable</c>
                   tasks submitted by the <c>execute</c> method.</param>
        <summary>Creates a new <c>ThreadPoolExecutor</c> with the given initial
            parameters, the default thread factory and the default rejected
            execution handler.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#ThreadPoolExecutor(int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.util.concurrent.BlockingQueue%3Cjava.lang.Runnable%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadPoolExecutor (int corePoolSize, int maximumPoolSize, long keepAliveTime, Java.Util.Concurrent.TimeUnit? unit, Java.Util.Concurrent.IBlockingQueue? workQueue, Java.Util.Concurrent.IRejectedExecutionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, int32 maximumPoolSize, int64 keepAliveTime, class Java.Util.Concurrent.TimeUnit unit, class Java.Util.Concurrent.IBlockingQueue workQueue, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.#ctor(System.Int32,System.Int32,System.Int64,Java.Util.Concurrent.TimeUnit,Java.Util.Concurrent.IBlockingQueue,Java.Util.Concurrent.IRejectedExecutionHandler)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ThreadPoolExecutor : int * int * int64 * Java.Util.Concurrent.TimeUnit * Java.Util.Concurrent.IBlockingQueue * Java.Util.Concurrent.IRejectedExecutionHandler -&gt; Java.Util.Concurrent.ThreadPoolExecutor" Usage="new Java.Util.Concurrent.ThreadPoolExecutor (corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="maximumPoolSize" Type="System.Int32" />
        <Parameter Name="keepAliveTime" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
        <Parameter Name="workQueue" Type="Java.Util.Concurrent.IBlockingQueue" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <param name="maximumPoolSize">the maximum number of threads to allow in the
                   pool</param>
        <param name="keepAliveTime">when the number of threads is greater than
                   the core, this is the maximum time that excess idle threads
                   will wait for new tasks before terminating.</param>
        <param name="unit">the time unit for the <c>keepAliveTime</c> argument</param>
        <param name="workQueue">the queue to use for holding tasks before they are
                   executed.  This queue will hold only the <c>Runnable</c>
                   tasks submitted by the <c>execute</c> method.</param>
        <param name="handler">the handler to use when execution is blocked
                   because the thread bounds and queue capacities are reached</param>
        <summary>Creates a new <c>ThreadPoolExecutor</c> with the given initial
            parameters and
            Executors#defaultThreadFactory default thread factory.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#ThreadPoolExecutor(int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.util.concurrent.BlockingQueue%3Cjava.lang.Runnable%3E,%20java.util.concurrent.RejectedExecutionHandler)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.RejectedExecutionHandler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadPoolExecutor (int corePoolSize, int maximumPoolSize, long keepAliveTime, Java.Util.Concurrent.TimeUnit? unit, Java.Util.Concurrent.IBlockingQueue? workQueue, Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, int32 maximumPoolSize, int64 keepAliveTime, class Java.Util.Concurrent.TimeUnit unit, class Java.Util.Concurrent.IBlockingQueue workQueue, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.#ctor(System.Int32,System.Int32,System.Int64,Java.Util.Concurrent.TimeUnit,Java.Util.Concurrent.IBlockingQueue,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ThreadPoolExecutor : int * int * int64 * Java.Util.Concurrent.TimeUnit * Java.Util.Concurrent.IBlockingQueue * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.ThreadPoolExecutor" Usage="new Java.Util.Concurrent.ThreadPoolExecutor (corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="maximumPoolSize" Type="System.Int32" />
        <Parameter Name="keepAliveTime" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
        <Parameter Name="workQueue" Type="Java.Util.Concurrent.IBlockingQueue" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <param name="maximumPoolSize">the maximum number of threads to allow in the
                   pool</param>
        <param name="keepAliveTime">when the number of threads is greater than
                   the core, this is the maximum time that excess idle threads
                   will wait for new tasks before terminating.</param>
        <param name="unit">the time unit for the <c>keepAliveTime</c> argument</param>
        <param name="workQueue">the queue to use for holding tasks before they are
                   executed.  This queue will hold only the <c>Runnable</c>
                   tasks submitted by the <c>execute</c> method.</param>
        <param name="threadFactory">the factory to use when the executor
                   creates a new thread</param>
        <summary>Creates a new <c>ThreadPoolExecutor</c> with the given initial
            parameters and ThreadPoolExecutor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#ThreadPoolExecutor(int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.util.concurrent.BlockingQueue%3Cjava.lang.Runnable%3E,%20java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadPoolExecutor (int corePoolSize, int maximumPoolSize, long keepAliveTime, Java.Util.Concurrent.TimeUnit? unit, Java.Util.Concurrent.IBlockingQueue? workQueue, Java.Util.Concurrent.IThreadFactory? threadFactory, Java.Util.Concurrent.IRejectedExecutionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, int32 maximumPoolSize, int64 keepAliveTime, class Java.Util.Concurrent.TimeUnit unit, class Java.Util.Concurrent.IBlockingQueue workQueue, class Java.Util.Concurrent.IThreadFactory threadFactory, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.#ctor(System.Int32,System.Int32,System.Int64,Java.Util.Concurrent.TimeUnit,Java.Util.Concurrent.IBlockingQueue,Java.Util.Concurrent.IThreadFactory,Java.Util.Concurrent.IRejectedExecutionHandler)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ThreadPoolExecutor : int * int * int64 * Java.Util.Concurrent.TimeUnit * Java.Util.Concurrent.IBlockingQueue * Java.Util.Concurrent.IThreadFactory * Java.Util.Concurrent.IRejectedExecutionHandler -&gt; Java.Util.Concurrent.ThreadPoolExecutor" Usage="new Java.Util.Concurrent.ThreadPoolExecutor (corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="maximumPoolSize" Type="System.Int32" />
        <Parameter Name="keepAliveTime" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
        <Parameter Name="workQueue" Type="Java.Util.Concurrent.IBlockingQueue" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <param name="maximumPoolSize">the maximum number of threads to allow in the
                   pool</param>
        <param name="keepAliveTime">when the number of threads is greater than
                   the core, this is the maximum time that excess idle threads
                   will wait for new tasks before terminating.</param>
        <param name="unit">the time unit for the <c>keepAliveTime</c> argument</param>
        <param name="workQueue">the queue to use for holding tasks before they are
                   executed.  This queue will hold only the <c>Runnable</c>
                   tasks submitted by the <c>execute</c> method.</param>
        <param name="threadFactory">the factory to use when the executor
                   creates a new thread</param>
        <param name="handler">the handler to use when execution is blocked
                   because the thread bounds and queue capacities are reached</param>
        <summary>Creates a new <c>ThreadPoolExecutor</c> with the given initial
            parameters.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#ThreadPoolExecutor(int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.util.concurrent.BlockingQueue%3Cjava.lang.Runnable%3E,%20java.util.concurrent.ThreadFactory,%20java.util.concurrent.RejectedExecutionHandler)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public virtual int ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.ActiveCount" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int" Usage="Java.Util.Concurrent.ThreadPoolExecutor.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getActiveCount", "()I", "GetGetActiveCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getActiveCount", "()I", "GetGetActiveCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the approximate number of threads that are actively
            executing tasks.</summary>
        <value>the number of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getActiveCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getActiveCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AfterExecute">
      <MemberSignature Language="C#" Value="protected virtual void AfterExecute (Java.Lang.IRunnable? r, Java.Lang.Throwable? t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AfterExecute(class Java.Lang.IRunnable r, class Java.Lang.Throwable t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.AfterExecute(Java.Lang.IRunnable,Java.Lang.Throwable)" />
      <MemberSignature Language="F#" Value="abstract member AfterExecute : Java.Lang.IRunnable * Java.Lang.Throwable -&gt; unit&#xA;override this.AfterExecute : Java.Lang.IRunnable * Java.Lang.Throwable -&gt; unit" Usage="threadPoolExecutor.AfterExecute (r, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("afterExecute", "(Ljava/lang/Runnable;Ljava/lang/Throwable;)V", "GetAfterExecute_Ljava_lang_Runnable_Ljava_lang_Throwable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("afterExecute", "(Ljava/lang/Runnable;Ljava/lang/Throwable;)V", "GetAfterExecute_Ljava_lang_Runnable_Ljava_lang_Throwable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Java.Lang.IRunnable" />
        <Parameter Name="t" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="r">the runnable that has completed</param>
        <param name="t">the exception that caused termination, or null if
            execution completed normally</param>
        <summary>Method invoked upon completion of execution of the given Runnable.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#afterExecute(java.lang.Runnable,%20java.lang.Throwable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AllowCoreThreadTimeOut">
      <MemberSignature Language="C#" Value="public virtual void AllowCoreThreadTimeOut (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllowCoreThreadTimeOut(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.AllowCoreThreadTimeOut(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AllowCoreThreadTimeOut : bool -&gt; unit&#xA;override this.AllowCoreThreadTimeOut : bool -&gt; unit" Usage="threadPoolExecutor.AllowCoreThreadTimeOut value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("allowCoreThreadTimeOut", "(Z)V", "GetAllowCoreThreadTimeOut_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("allowCoreThreadTimeOut", "(Z)V", "GetAllowCoreThreadTimeOut_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <c>true</c> if should time out, else <c>false</c></param>
        <summary>Sets the policy governing whether core threads may time out and
            terminate if no tasks arrive within the keep-alive time, being
            replaced if needed when new tasks arrive.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if value is <c>true</c>
         and the current keep-alive time is not greater than zero</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsCoreThreadTimeOut">
      <MemberSignature Language="C#" Value="public virtual bool AllowsCoreThreadTimeOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowsCoreThreadTimeOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.AllowsCoreThreadTimeOut" />
      <MemberSignature Language="F#" Value="abstract member AllowsCoreThreadTimeOut : unit -&gt; bool&#xA;override this.AllowsCoreThreadTimeOut : unit -&gt; bool" Usage="threadPoolExecutor.AllowsCoreThreadTimeOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("allowsCoreThreadTimeOut", "()Z", "GetAllowsCoreThreadTimeOutHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("allowsCoreThreadTimeOut", "()Z", "GetAllowsCoreThreadTimeOutHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns true if this pool allows core threads to time out and
            terminate if no tasks arrive within the keepAlive time, being
            replaced if needed when new tasks arrive.</summary>
        <returns>
          <c>true</c> if core threads are allowed to time out,
                    else <c>false</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#allowsCoreThreadTimeOut()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AwaitTermination">
      <MemberSignature Language="C#" Value="public override bool AwaitTermination (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AwaitTermination(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.AwaitTermination(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="override this.AwaitTermination : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="threadPoolExecutor.AwaitTermination (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="BeforeExecute">
      <MemberSignature Language="C#" Value="protected virtual void BeforeExecute (Java.Lang.Thread? t, Java.Lang.IRunnable? r);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void BeforeExecute(class Java.Lang.Thread t, class Java.Lang.IRunnable r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.BeforeExecute(Java.Lang.Thread,Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="abstract member BeforeExecute : Java.Lang.Thread * Java.Lang.IRunnable -&gt; unit&#xA;override this.BeforeExecute : Java.Lang.Thread * Java.Lang.IRunnable -&gt; unit" Usage="threadPoolExecutor.BeforeExecute (t, r)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("beforeExecute", "(Ljava/lang/Thread;Ljava/lang/Runnable;)V", "GetBeforeExecute_Ljava_lang_Thread_Ljava_lang_Runnable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("beforeExecute", "(Ljava/lang/Thread;Ljava/lang/Runnable;)V", "GetBeforeExecute_Ljava_lang_Thread_Ljava_lang_Runnable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="Java.Lang.Thread" />
        <Parameter Name="r" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="t">the thread that will run task <c>r</c></param>
        <param name="r">the task that will be executed</param>
        <summary>Method invoked prior to executing the given Runnable in the
            given thread.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#beforeExecute(java.lang.Thread,%20java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.beforeExecute(java.lang.Thread, java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CompletedTaskCount">
      <MemberSignature Language="C#" Value="public virtual long CompletedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CompletedTaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.CompletedTaskCount" />
      <MemberSignature Language="F#" Value="member this.CompletedTaskCount : int64" Usage="Java.Util.Concurrent.ThreadPoolExecutor.CompletedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCompletedTaskCount", "()J", "GetGetCompletedTaskCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCompletedTaskCount", "()J", "GetGetCompletedTaskCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the approximate total number of tasks that have
            completed execution.</summary>
        <value>the number of tasks</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getCompletedTaskCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CorePoolSize">
      <MemberSignature Language="C#" Value="public virtual int CorePoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CorePoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" />
      <MemberSignature Language="F#" Value="member this.CorePoolSize : int with get, set" Usage="Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCorePoolSize", "()I", "GetGetCorePoolSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCorePoolSize", "()I", "GetGetCorePoolSizeHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setCorePoolSize", "(I)V", "GetSetCorePoolSize_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setCorePoolSize", "(I)V", "GetSetCorePoolSize_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="corePoolSize">the new core size</param>
        <summary>Returns the core number of threads. -or- Sets the core number of threads.</summary>
        <value>the core number of threads</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getCorePoolSize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#setCorePoolSize(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public override void Execute (Java.Lang.IRunnable? command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Execute(class Java.Lang.IRunnable command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.Execute(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="override this.Execute : Java.Lang.IRunnable -&gt; unit" Usage="threadPoolExecutor.Execute command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <summary>Executes the given task sometime in the future.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#execute(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">at discretion of
         <c>RejectedExecutionHandler</c>, if the task
         cannot be accepted for execution</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>command</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeepAliveTime">
      <MemberSignature Language="C#" Value="public virtual long GetKeepAliveTime (Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetKeepAliveTime(class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.GetKeepAliveTime(Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member GetKeepAliveTime : Java.Util.Concurrent.TimeUnit -&gt; int64&#xA;override this.GetKeepAliveTime : Java.Util.Concurrent.TimeUnit -&gt; int64" Usage="threadPoolExecutor.GetKeepAliveTime unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getKeepAliveTime", "(Ljava/util/concurrent/TimeUnit;)J", "GetGetKeepAliveTime_Ljava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getKeepAliveTime", "(Ljava/util/concurrent/TimeUnit;)J", "GetGetKeepAliveTime_Ljava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="unit">the desired time unit of the result</param>
        <summary>Returns the thread keep-alive time, which is the amount of time
            that threads may remain idle before being terminated.</summary>
        <returns>the time limit</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getKeepAliveTime(java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Util.Concurrent.ThreadPoolExecutor.SetKeepAliveTime(System.Int64, Java.Util.Concurrent.TimeUnit)" />
      </Docs>
    </Member>
    <Member MemberName="IsShutdown">
      <MemberSignature Language="C#" Value="public override bool IsShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShutdown" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.IsShutdown" />
      <MemberSignature Language="F#" Value="member this.IsShutdown : bool" Usage="Java.Util.Concurrent.ThreadPoolExecutor.IsShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminated">
      <MemberSignature Language="C#" Value="public override bool IsTerminated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminated" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.IsTerminated" />
      <MemberSignature Language="F#" Value="member this.IsTerminated : bool" Usage="Java.Util.Concurrent.ThreadPoolExecutor.IsTerminated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public virtual bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.IsTerminating" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="Java.Util.Concurrent.ThreadPoolExecutor.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this executor is in the process of terminating
            after <c>#shutdown</c> or <c>#shutdownNow</c> but has not
            completely terminated.</summary>
        <value>
          <c>true</c> if terminating but not yet terminated</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#isTerminating()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.isTerminating()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.ThreadPoolExecutor.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestPoolSize">
      <MemberSignature Language="C#" Value="public virtual int LargestPoolSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LargestPoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.LargestPoolSize" />
      <MemberSignature Language="F#" Value="member this.LargestPoolSize : int" Usage="Java.Util.Concurrent.ThreadPoolExecutor.LargestPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLargestPoolSize", "()I", "GetGetLargestPoolSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLargestPoolSize", "()I", "GetGetLargestPoolSizeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the largest number of threads that have ever
            simultaneously been in the pool.</summary>
        <value>the number of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getLargestPoolSize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MaximumPoolSize">
      <MemberSignature Language="C#" Value="public virtual int MaximumPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumPoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.MaximumPoolSize" />
      <MemberSignature Language="F#" Value="member this.MaximumPoolSize : int with get, set" Usage="Java.Util.Concurrent.ThreadPoolExecutor.MaximumPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaximumPoolSize", "()I", "GetGetMaximumPoolSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaximumPoolSize", "()I", "GetGetMaximumPoolSizeHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setMaximumPoolSize", "(I)V", "GetSetMaximumPoolSize_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setMaximumPoolSize", "(I)V", "GetSetMaximumPoolSize_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="maximumPoolSize">the new maximum</param>
        <summary>Returns the maximum allowed number of threads. -or- Sets the maximum allowed number of threads.</summary>
        <value>the maximum allowed number of threads</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getMaximumPoolSize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#setMaximumPoolSize(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.MaximumPoolSize" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new maximum is
         less than or equal to zero, or
         less than the <see cref="P:Java.Util.Concurrent.ThreadPoolExecutor.CorePoolSize" /></exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.MaximumPoolSize" />
      </Docs>
    </Member>
    <Member MemberName="PoolSize">
      <MemberSignature Language="C#" Value="public virtual int PoolSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.PoolSize" />
      <MemberSignature Language="F#" Value="member this.PoolSize : int" Usage="Java.Util.Concurrent.ThreadPoolExecutor.PoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current number of threads in the pool.</summary>
        <value>the number of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getPoolSize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getPoolSize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PrestartAllCoreThreads">
      <MemberSignature Language="C#" Value="public virtual int PrestartAllCoreThreads ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 PrestartAllCoreThreads() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.PrestartAllCoreThreads" />
      <MemberSignature Language="F#" Value="abstract member PrestartAllCoreThreads : unit -&gt; int&#xA;override this.PrestartAllCoreThreads : unit -&gt; int" Usage="threadPoolExecutor.PrestartAllCoreThreads " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prestartAllCoreThreads", "()I", "GetPrestartAllCoreThreadsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prestartAllCoreThreads", "()I", "GetPrestartAllCoreThreadsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts all core threads, causing them to idly wait for work.</summary>
        <returns>the number of threads started</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#prestartAllCoreThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PrestartCoreThread">
      <MemberSignature Language="C#" Value="public virtual bool PrestartCoreThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PrestartCoreThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.PrestartCoreThread" />
      <MemberSignature Language="F#" Value="abstract member PrestartCoreThread : unit -&gt; bool&#xA;override this.PrestartCoreThread : unit -&gt; bool" Usage="threadPoolExecutor.PrestartCoreThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prestartCoreThread", "()Z", "GetPrestartCoreThreadHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prestartCoreThread", "()Z", "GetPrestartCoreThreadHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts a core thread, causing it to idly wait for work.</summary>
        <returns>
          <c>true</c> if a thread was started</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#prestartCoreThread()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.Purge" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; unit&#xA;override this.Purge : unit -&gt; unit" Usage="threadPoolExecutor.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("purge", "()V", "GetPurgeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("purge", "()V", "GetPurgeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tries to remove from the work queue all <c>Future</c>
            tasks that have been cancelled.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#purge()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.purge()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Queue">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IBlockingQueue? Queue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.IBlockingQueue Queue" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.Queue" />
      <MemberSignature Language="F#" Value="member this.Queue : Java.Util.Concurrent.IBlockingQueue" Usage="Java.Util.Concurrent.ThreadPoolExecutor.Queue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueue", "()Ljava/util/concurrent/BlockingQueue;", "GetGetQueueHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueue", "()Ljava/util/concurrent/BlockingQueue;", "GetGetQueueHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IBlockingQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the task queue used by this executor.</summary>
        <value>the task queue</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getQueue()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getQueue()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RejectedExecutionHandler">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IRejectedExecutionHandler? RejectedExecutionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.IRejectedExecutionHandler RejectedExecutionHandler" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.RejectedExecutionHandler" />
      <MemberSignature Language="F#" Value="member this.RejectedExecutionHandler : Java.Util.Concurrent.IRejectedExecutionHandler with get, set" Usage="Java.Util.Concurrent.ThreadPoolExecutor.RejectedExecutionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRejectedExecutionHandler", "()Ljava/util/concurrent/RejectedExecutionHandler;", "GetGetRejectedExecutionHandlerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRejectedExecutionHandler", "()Ljava/util/concurrent/RejectedExecutionHandler;", "GetGetRejectedExecutionHandlerHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setRejectedExecutionHandler", "(Ljava/util/concurrent/RejectedExecutionHandler;)V", "GetSetRejectedExecutionHandler_Ljava_util_concurrent_RejectedExecutionHandler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setRejectedExecutionHandler", "(Ljava/util/concurrent/RejectedExecutionHandler;)V", "GetSetRejectedExecutionHandler_Ljava_util_concurrent_RejectedExecutionHandler_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IRejectedExecutionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="handler">the new handler</param>
        <summary>Returns the current handler for unexecutable tasks. -or- Sets a new handler for unexecutable tasks.</summary>
        <value>the current handler</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getRejectedExecutionHandler()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.RejectedExecutionHandler" />
        <exception cref="T:Java.Lang.NullPointerException">if handler is null</exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.RejectedExecutionHandler" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual bool Remove (Java.Lang.IRunnable? task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class Java.Lang.IRunnable task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.Remove(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="abstract member Remove : Java.Lang.IRunnable -&gt; bool&#xA;override this.Remove : Java.Lang.IRunnable -&gt; bool" Usage="threadPoolExecutor.Remove task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("remove", "(Ljava/lang/Runnable;)Z", "GetRemove_Ljava_lang_Runnable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("remove", "(Ljava/lang/Runnable;)Z", "GetRemove_Ljava_lang_Runnable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">the task to remove</param>
        <summary>Removes this task from the executor's internal queue if it is
            present, thus causing it not to be run if it has not already
            started.</summary>
        <returns>
          <c>true</c> if the task was removed</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#remove(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetKeepAliveTime">
      <MemberSignature Language="C#" Value="public virtual void SetKeepAliveTime (long time, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetKeepAliveTime(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.SetKeepAliveTime(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member SetKeepAliveTime : int64 * Java.Util.Concurrent.TimeUnit -&gt; unit&#xA;override this.SetKeepAliveTime : int64 * Java.Util.Concurrent.TimeUnit -&gt; unit" Usage="threadPoolExecutor.SetKeepAliveTime (time, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setKeepAliveTime", "(JLjava/util/concurrent/TimeUnit;)V", "GetSetKeepAliveTime_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setKeepAliveTime", "(JLjava/util/concurrent/TimeUnit;)V", "GetSetKeepAliveTime_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the time to wait.  A time value of zero will cause
                   excess threads to terminate immediately after executing tasks.</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Sets the thread keep-alive time, which is the amount of time
            that threads may remain idle before being terminated.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#setKeepAliveTime(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>time</c> less than zero or
         if <c>time</c> is zero and <c>allowsCoreThreadTimeOut</c></exception>
        <altmember cref="M:Java.Util.Concurrent.ThreadPoolExecutor.GetKeepAliveTime(Java.Util.Concurrent.TimeUnit)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.Shutdown" />
      <MemberSignature Language="F#" Value="override this.Shutdown : unit -&gt; unit" Usage="threadPoolExecutor.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initiates an orderly shutdown in which previously submitted
            tasks are executed, but no new tasks will be accepted.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#shutdown()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.shutdown()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownNow">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;? ShutdownNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class Java.Lang.IRunnable&gt; ShutdownNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.ShutdownNow" />
      <MemberSignature Language="F#" Value="override this.ShutdownNow : unit -&gt; System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;" Usage="threadPoolExecutor.ShutdownNow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to stop all actively executing tasks, halts the
            processing of waiting tasks, and returns a list of the tasks
            that were awaiting execution.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#shutdownNow()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.shutdownNow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TaskCount">
      <MemberSignature Language="C#" Value="public virtual long TaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.TaskCount" />
      <MemberSignature Language="F#" Value="member this.TaskCount : int64" Usage="Java.Util.Concurrent.ThreadPoolExecutor.TaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTaskCount", "()J", "GetGetTaskCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTaskCount", "()J", "GetGetTaskCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the approximate total number of tasks that have ever been
            scheduled for execution.</summary>
        <value>the number of tasks</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getTaskCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getTaskCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Terminated">
      <MemberSignature Language="C#" Value="protected virtual void Terminated ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Terminated() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ThreadPoolExecutor.Terminated" />
      <MemberSignature Language="F#" Value="abstract member Terminated : unit -&gt; unit&#xA;override this.Terminated : unit -&gt; unit" Usage="threadPoolExecutor.Terminated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("terminated", "()V", "GetTerminatedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("terminated", "()V", "GetTerminatedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method invoked when the Executor has terminated.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#terminated()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.terminated()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThreadFactory">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IThreadFactory? ThreadFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.IThreadFactory ThreadFactory" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.ThreadFactory" />
      <MemberSignature Language="F#" Value="member this.ThreadFactory : Java.Util.Concurrent.IThreadFactory with get, set" Usage="Java.Util.Concurrent.ThreadPoolExecutor.ThreadFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "GetGetThreadFactoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "GetGetThreadFactoryHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setThreadFactory", "(Ljava/util/concurrent/ThreadFactory;)V", "GetSetThreadFactory_Ljava_util_concurrent_ThreadFactory_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setThreadFactory", "(Ljava/util/concurrent/ThreadFactory;)V", "GetSetThreadFactory_Ljava_util_concurrent_ThreadFactory_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="threadFactory">the new thread factory</param>
        <summary>Returns the thread factory used to create new threads. -or- Sets the thread factory used to create new threads.</summary>
        <value>the current thread factory</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#getThreadFactory()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.getThreadFactory()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#setThreadFactory(java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.ThreadFactory" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <altmember cref="P:Java.Util.Concurrent.ThreadPoolExecutor.ThreadFactory" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.ThreadPoolExecutor.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ThreadPoolExecutor.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.ThreadPoolExecutor.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
