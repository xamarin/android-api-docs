<Type Name="CyclicBarrier" FullName="Java.Util.Concurrent.CyclicBarrier">
  <TypeSignature Language="C#" Value="public class CyclicBarrier : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CyclicBarrier extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.CyclicBarrier" />
  <TypeSignature Language="F#" Value="type CyclicBarrier = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/CyclicBarrier", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/CyclicBarrier", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A synchronization aid that allows a set of threads to all wait for
            each other to reach a common barrier point.</summary>
    <remarks>
      <para>A synchronization aid that allows a set of threads to all wait for
            each other to reach a common barrier point.  CyclicBarriers are
            useful in programs involving a fixed sized party of threads that
            must occasionally wait for each other. The barrier is called
            &lt;em&gt;cyclic&lt;/em&gt; because it can be re-used after the waiting threads
            are released.</para>
      <para>A <c>CyclicBarrier</c> supports an optional <c>Runnable</c> command
            that is run once per barrier point, after the last thread in the party
            arrives, but before any threads are released.
            This &lt;em&gt;barrier action&lt;/em&gt; is useful
            for updating shared-state before any of the parties continue.</para>
      <para>&lt;b&gt;Sample usage:&lt;/b&gt; Here is an example of using a barrier in a
            parallel decomposition design:</para>
      <code lang="text/java">{@code
            class Solver {
              final int N;
              final float[][] data;
              final CyclicBarrier barrier;
            
              class Worker implements Runnable {
                int myRow;
                Worker(int row) { myRow = row; }
                public void run() {
                  while (!done()) {
                    processRow(myRow);
            
                    try {
                      barrier.await();
                    } catch (InterruptedException ex) {
                      return;
                    } catch (BrokenBarrierException ex) {
                      return;
                    }
                  }
                }
              }
            
              public Solver(float[][] matrix) {
                data = matrix;
                N = matrix.length;
                Runnable barrierAction = () -&gt; mergeRows(...);
                barrier = new CyclicBarrier(N, barrierAction);
            
                List&lt;Thread&gt; threads = new ArrayList&lt;&gt;(N);
                for (int i = 0; i &lt; N; i++) {
                  Thread thread = new Thread(new Worker(i));
                  threads.add(thread);
                  thread.start();
                }
            
                // wait until done
                for (Thread thread : threads)
                  try {
                    thread.join();
                  } catch (InterruptedException ex) { }
              }
            }}</code>
      <para>Here, each worker thread processes a row of the matrix, then waits at the
            barrier until all rows have been processed. When all rows are processed the
            supplied <c>Runnable</c> barrier action is executed and merges the rows.
            If the merger determines that a solution has been found then <c>done()</c>
            will return <c>true</c> and each worker will terminate.</para>
      <para>If the barrier action does not rely on the parties being suspended when
            it is executed, then any of the threads in the party could execute that
            action when it is released. To facilitate this, each invocation of
            <c>#await</c> returns the arrival index of that thread at the barrier.
            You can then choose which thread should execute the barrier action, for
            example:</para>
      <code lang="text/java">{@code
            if (barrier.await() == 0) {
              // log the completion of this iteration
            }}</code>
      <para>The <c>CyclicBarrier</c> uses an all-or-none breakage model
            for failed synchronization attempts: If a thread leaves a barrier
            point prematurely because of interruption, failure, or timeout, all
            other threads waiting at that barrier point will also leave
            abnormally via <c>BrokenBarrierException</c> (or
            <c>InterruptedException</c> if they too were interrupted at about
            the same time).</para>
      <para>Memory consistency effects: Actions in a thread prior to calling
            <c>await()</c>&lt;i&gt;happen-before&lt;/i&gt;
            actions that are part of the barrier action, which in turn
            <i>happen-before</i> actions following a successful return from the
            corresponding <c>await()</c> in other threads.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CyclicBarrier (int parties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.CyclicBarrier : int -&gt; Java.Util.Concurrent.CyclicBarrier" Usage="new Java.Util.Concurrent.CyclicBarrier parties" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parties">the number of threads that must invoke <c>#await</c>
                   before the barrier is tripped</param>
        <summary>Creates a new <c>CyclicBarrier</c> that will trip when the
            given number of parties (threads) are waiting upon it, and
            does not perform a predefined action when the barrier is tripped.</summary>
        <remarks>
          <para>Creates a new <c>CyclicBarrier</c> that will trip when the
            given number of parties (threads) are waiting upon it, and
            does not perform a predefined action when the barrier is tripped.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#CyclicBarrier(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.CyclicBarrier(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>parties</c> is less than 1
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CyclicBarrier (int parties, Java.Lang.IRunnable? barrierAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parties, class Java.Lang.IRunnable barrierAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.#ctor(System.Int32,Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.CyclicBarrier : int * Java.Lang.IRunnable -&gt; Java.Util.Concurrent.CyclicBarrier" Usage="new Java.Util.Concurrent.CyclicBarrier (parties, barrierAction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/lang/Runnable;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/lang/Runnable;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
        <Parameter Name="barrierAction" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="parties">the number of threads that must invoke <c>#await</c>
                   before the barrier is tripped</param>
        <param name="barrierAction">the command to execute when the barrier is
                   tripped, or <c>null</c> if there is no action</param>
        <summary>Creates a new <c>CyclicBarrier</c> that will trip when the
            given number of parties (threads) are waiting upon it, and which
            will execute the given barrier action when the barrier is tripped,
            performed by the last thread entering the barrier.</summary>
        <remarks>
          <para>Creates a new <c>CyclicBarrier</c> that will trip when the
            given number of parties (threads) are waiting upon it, and which
            will execute the given barrier action when the barrier is tripped,
            performed by the last thread entering the barrier.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#CyclicBarrier(int,%20java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.CyclicBarrier(int, java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>parties</c> is less than 1
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CyclicBarrier (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.CyclicBarrier : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.CyclicBarrier" Usage="new Java.Util.Concurrent.CyclicBarrier (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public virtual int Await ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Await() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.Await" />
      <MemberSignature Language="F#" Value="abstract member Await : unit -&gt; int&#xA;override this.Await : unit -&gt; int" Usage="cyclicBarrier.Await " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "()I", "GetAwaitHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("await", "()I", "GetAwaitHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits until all #getParties parties have invoked
            <c>await</c> on this barrier.</summary>
        <returns>the arrival index of the current thread, where index
                    <c>getParties() - 1</c> indicates the first
                    to arrive and zero indicates the last to arrive</returns>
        <remarks>
          <para>Waits until all #getParties parties have invoked
            <c>await</c> on this barrier.</para>
          <para>If the current thread is not the last to arrive then it is
            disabled for thread scheduling purposes and lies dormant until
            one of the following things happens:
            &lt;ul&gt;
            &lt;li&gt;The last thread arrives; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            the current thread; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            one of the other waiting threads; or
            &lt;li&gt;Some other thread times out while waiting for barrier; or
            &lt;li&gt;Some other thread invokes <c>#reset</c> on this barrier.
            &lt;/ul&gt;</para>
          <para>If the current thread:
            &lt;ul&gt;
            &lt;li&gt;has its interrupted status set on entry to this method; or
            &lt;li&gt;is Thread#interrupt interrupted while waiting
            &lt;/ul&gt;
            then <c>InterruptedException</c> is thrown and the current thread's
            interrupted status is cleared.</para>
          <para>If the barrier is <c>#reset</c> while any thread is waiting,
            or if the barrier #isBroken is broken when
            <c>await</c> is invoked, or while any thread is waiting, then
            <c>BrokenBarrierException</c> is thrown.</para>
          <para>If any thread is Thread#interrupt interrupted while waiting,
            then all other waiting threads will throw
            <c>BrokenBarrierException</c> and the barrier is placed in the broken
            state.</para>
          <para>If the current thread is the last thread to arrive, and a
            non-null barrier action was supplied in the constructor, then the
            current thread runs the action before allowing the other threads to
            continue.
            If an exception occurs during the barrier action then that exception
            will be propagated in the current thread and the barrier is placed in
            the broken state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#await()" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.await()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
         while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.BrokenBarrierException">if <i>another</i> thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was
         broken when <c>await</c> was called, or the barrier
         action (if present) failed due to an exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public virtual int Await (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Await(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.Await(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Await : int64 * Java.Util.Concurrent.TimeUnit -&gt; int&#xA;override this.Await : int64 * Java.Util.Concurrent.TimeUnit -&gt; int" Usage="cyclicBarrier.Await (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)I", "GetAwait_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)I", "GetAwait_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the time to wait for the barrier</param>
        <param name="unit">the time unit of the timeout parameter</param>
        <summary>Waits until all #getParties parties have invoked
            <c>await</c> on this barrier, or the specified waiting time elapses.</summary>
        <returns>the arrival index of the current thread, where index
                    <c>getParties() - 1</c> indicates the first
                    to arrive and zero indicates the last to arrive</returns>
        <remarks>
          <para>Waits until all #getParties parties have invoked
            <c>await</c> on this barrier, or the specified waiting time elapses.</para>
          <para>If the current thread is not the last to arrive then it is
            disabled for thread scheduling purposes and lies dormant until
            one of the following things happens:
            &lt;ul&gt;
            &lt;li&gt;The last thread arrives; or
            &lt;li&gt;The specified timeout elapses; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            the current thread; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            one of the other waiting threads; or
            &lt;li&gt;Some other thread times out while waiting for barrier; or
            &lt;li&gt;Some other thread invokes <c>#reset</c> on this barrier.
            &lt;/ul&gt;</para>
          <para>If the current thread:
            &lt;ul&gt;
            &lt;li&gt;has its interrupted status set on entry to this method; or
            &lt;li&gt;is Thread#interrupt interrupted while waiting
            &lt;/ul&gt;
            then <c>InterruptedException</c> is thrown and the current thread's
            interrupted status is cleared.</para>
          <para>If the specified waiting time elapses then <c>TimeoutException</c>
            is thrown. If the time is less than or equal to zero, the
            method will not wait at all.</para>
          <para>If the barrier is <c>#reset</c> while any thread is waiting,
            or if the barrier #isBroken is broken when
            <c>await</c> is invoked, or while any thread is waiting, then
            <c>BrokenBarrierException</c> is thrown.</para>
          <para>If any thread is Thread#interrupt interrupted while
            waiting, then all other waiting threads will throw <c>BrokenBarrierException</c> and the barrier is placed in the broken
            state.</para>
          <para>If the current thread is the last thread to arrive, and a
            non-null barrier action was supplied in the constructor, then the
            current thread runs the action before allowing the other threads to
            continue.
            If an exception occurs during the barrier action then that exception
            will be propagated in the current thread and the barrier is placed in
            the broken state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#await(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.await(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
         while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the specified timeout elapses</exception>
        <exception cref="T:Java.Util.Concurrent.BrokenBarrierException">if <i>another</i> thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was broken
         when <c>await</c> was called, or the barrier action (if
         present) failed due to an exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="AwaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; AwaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; AwaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.AwaitAsync" />
      <MemberSignature Language="F#" Value="member this.AwaitAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="cyclicBarrier.AwaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; AwaitAsync (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; AwaitAsync(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.AwaitAsync(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="member this.AwaitAsync : int64 * Java.Util.Concurrent.TimeUnit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="cyclicBarrier.AwaitAsync (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBroken">
      <MemberSignature Language="C#" Value="public virtual bool IsBroken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBroken" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.IsBroken" />
      <MemberSignature Language="F#" Value="member this.IsBroken : bool" Usage="Java.Util.Concurrent.CyclicBarrier.IsBroken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isBroken", "()Z", "GetIsBrokenHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isBroken", "()Z", "GetIsBrokenHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries if this barrier is in a broken state.</summary>
        <value>
          <c>true</c> if one or more parties broke out of this
                    barrier due to interruption or timeout since
                    construction or the last reset, or a barrier action
                    failed due to an exception; <c>false</c> otherwise.</value>
        <remarks>
          <para>Queries if this barrier is in a broken state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#isBroken()" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.isBroken()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.CyclicBarrier.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberWaiting">
      <MemberSignature Language="C#" Value="public virtual int NumberWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberWaiting" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.NumberWaiting" />
      <MemberSignature Language="F#" Value="member this.NumberWaiting : int" Usage="Java.Util.Concurrent.CyclicBarrier.NumberWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNumberWaiting", "()I", "GetGetNumberWaitingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNumberWaiting", "()I", "GetGetNumberWaitingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of parties currently waiting at the barrier.</summary>
        <value>the number of parties currently blocked in <c>#await</c></value>
        <remarks>
          <para>Returns the number of parties currently waiting at the barrier.
            This method is primarily useful for debugging and assertions.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#getNumberWaiting()" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.getNumberWaiting()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parties">
      <MemberSignature Language="C#" Value="public virtual int Parties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Parties" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.Parties" />
      <MemberSignature Language="F#" Value="member this.Parties : int" Usage="Java.Util.Concurrent.CyclicBarrier.Parties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParties", "()I", "GetGetPartiesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParties", "()I", "GetGetPartiesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of parties required to trip this barrier.</summary>
        <value>the number of parties required to trip this barrier</value>
        <remarks>
          <para>Returns the number of parties required to trip this barrier.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#getParties()" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.getParties()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.CyclicBarrier.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="cyclicBarrier.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "GetResetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "GetResetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the barrier to its initial state.</summary>
        <remarks>
          <para>Resets the barrier to its initial state.  If any parties are
            currently waiting at the barrier, they will return with a
            <c>BrokenBarrierException</c>. Note that resets &lt;em&gt;after&lt;/em&gt;
            a breakage has occurred for other reasons can be complicated to
            carry out; threads need to re-synchronize in some other way,
            and choose one to perform the reset.  It may be preferable to
            instead create a new barrier for subsequent use.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/CyclicBarrier#reset()" title="Reference documentation">Java documentation for <code>java.util.concurrent.CyclicBarrier.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.CyclicBarrier.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.CyclicBarrier.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.CyclicBarrier.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
