<Type Name="Executors" FullName="Java.Util.Concurrent.Executors">
  <TypeSignature Language="C#" Value="public class Executors : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Executors extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Executors" />
  <TypeSignature Language="F#" Value="type Executors = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/Executors", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Factory and utility methods for <c>Executor</c>, <c>ExecutorService</c>, <c>ScheduledExecutorService</c>, <c>ThreadFactory</c>, and <c>Callable</c> classes defined in this
            package.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/Executors" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Executors (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Executors : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Executors" Usage="new Java.Util.Concurrent.Executors (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable Callable (Java.Lang.IRunnable task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Lang.IRunnable task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Lang.IRunnable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">the task to run</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if task null
</exception>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable Callable (Java.Security.IPrivilegedAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Security.IPrivilegedAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Security.IPrivilegedAction)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Security.IPrivilegedAction -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callable", "(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Security.IPrivilegedAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable Callable (Java.Security.IPrivilegedExceptionAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Security.IPrivilegedExceptionAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Security.IPrivilegedExceptionAction)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Security.IPrivilegedExceptionAction -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callable", "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Security.IPrivilegedExceptionAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable Callable (Java.Lang.IRunnable task, Java.Lang.Object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Lang.IRunnable task, class Java.Lang.Object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Lang.IRunnable,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Lang.IRunnable * Java.Lang.Object -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable (task, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Java.Interop.JavaTypeParameters(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="task">the task to run</param>
        <param name="result">To be added.</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IThreadFactory DefaultThreadFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IThreadFactory DefaultThreadFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.DefaultThreadFactory" />
      <MemberSignature Language="F#" Value="static member DefaultThreadFactory : unit -&gt; Java.Util.Concurrent.IThreadFactory" Usage="Java.Util.Concurrent.Executors.DefaultThreadFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IThreadFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a default thread factory used to create new threads.</summary>
        <returns>a thread factory</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Executors.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewCachedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewCachedThreadPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewCachedThreadPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewCachedThreadPool" />
      <MemberSignature Language="F#" Value="static member NewCachedThreadPool : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewCachedThreadPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewCachedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewCachedThreadPool (Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewCachedThreadPool(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewCachedThreadPool(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewCachedThreadPool : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewCachedThreadPool threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewFixedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewFixedThreadPool (int nThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewFixedThreadPool(int32 nThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewFixedThreadPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewFixedThreadPool : int -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewFixedThreadPool nThreads" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nThreads">the number of threads in the pool</param>
        <summary>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>nThreads &lt;= 0</c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewFixedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewFixedThreadPool (int nThreads, Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewFixedThreadPool(int32 nThreads, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewFixedThreadPool(System.Int32,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewFixedThreadPool : int * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewFixedThreadPool (nThreads, threadFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nThreads" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="nThreads">the number of threads in the pool</param>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>nThreads &lt;= 0</c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewScheduledThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool (int corePoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool(int32 corePoolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewScheduledThreadPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewScheduledThreadPool : int -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewScheduledThreadPool corePoolSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool,
            even if they are idle</param>
        <summary>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</summary>
        <returns>a newly created scheduled thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewScheduledThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool (int corePoolSize, Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewScheduledThreadPool(System.Int32,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewScheduledThreadPool : int * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewScheduledThreadPool (corePoolSize, threadFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool,
            even if they are idle</param>
        <param name="threadFactory">the factory to use when the executor
 creates a new thread</param>
        <summary>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</summary>
        <returns>a newly created scheduled thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadExecutor" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadExecutor : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadExecutor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an Executor that uses a single worker thread operating
            off an unbounded queue.</summary>
        <returns>the newly created single-threaded Executor</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor (Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadExecutor(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadExecutor : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadExecutor threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new
 threads</param>
        <summary>Creates an Executor that uses a single worker thread operating
            off an unbounded queue.</summary>
        <returns>the newly created single-threaded Executor</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadScheduledExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadScheduledExecutor : unit -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled executor</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadScheduledExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor (Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadScheduledExecutor : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new
 threads</param>
        <summary>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled executor</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewWorkStealingPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewWorkStealingPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewWorkStealingPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewWorkStealingPool" />
      <MemberSignature Language="F#" Value="static member NewWorkStealingPool : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewWorkStealingPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a work-stealing thread pool using the number of
            Runtime#availableProcessors available processors
            as its target parallelism level.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWorkStealingPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService NewWorkStealingPool (int parallelism);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewWorkStealingPool(int32 parallelism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewWorkStealingPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewWorkStealingPool : int -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewWorkStealingPool parallelism" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <summary>Creates a work-stealing thread pool using the number of
            Runtime#availableProcessors available processors
            as its target parallelism level.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedCallable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable PrivilegedCallable (Java.Util.Concurrent.ICallable callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable PrivilegedCallable(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedCallable(Java.Util.Concurrent.ICallable)" />
      <MemberSignature Language="F#" Value="static member PrivilegedCallable : Java.Util.Concurrent.ICallable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.PrivilegedCallable callable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Java.Interop.JavaTypeParameters(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedCallableUsingCurrentClassLoader">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable PrivilegedCallableUsingCurrentClassLoader (Java.Util.Concurrent.ICallable callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable PrivilegedCallableUsingCurrentClassLoader(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader(Java.Util.Concurrent.ICallable)" />
      <MemberSignature Language="F#" Value="static member PrivilegedCallableUsingCurrentClassLoader : Java.Util.Concurrent.ICallable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader callable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Java.Interop.JavaTypeParameters(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IThreadFactory PrivilegedThreadFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IThreadFactory PrivilegedThreadFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedThreadFactory" />
      <MemberSignature Language="F#" Value="static member PrivilegedThreadFactory : unit -&gt; Java.Util.Concurrent.IThreadFactory" Usage="Java.Util.Concurrent.Executors.PrivilegedThreadFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IThreadFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Executors.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Executors.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnconfigurableExecutorService">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService UnconfigurableExecutorService (Java.Util.Concurrent.IExecutorService executor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService UnconfigurableExecutorService(class Java.Util.Concurrent.IExecutorService executor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.UnconfigurableExecutorService(Java.Util.Concurrent.IExecutorService)" />
      <MemberSignature Language="F#" Value="static member UnconfigurableExecutorService : Java.Util.Concurrent.IExecutorService -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.UnconfigurableExecutorService executor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutorService" />
      </Parameters>
      <Docs>
        <param name="executor">the underlying implementation</param>
        <summary>Returns an object that delegates all defined <c>ExecutorService</c> methods to the given executor, but not any
            other methods that might otherwise be accessible using
            casts.</summary>
        <returns>an <c>ExecutorService</c> instance</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if executor null
</exception>
      </Docs>
    </Member>
    <Member MemberName="UnconfigurableScheduledExecutorService">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService UnconfigurableScheduledExecutorService (Java.Util.Concurrent.IScheduledExecutorService executor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService UnconfigurableScheduledExecutorService(class Java.Util.Concurrent.IScheduledExecutorService executor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.UnconfigurableScheduledExecutorService(Java.Util.Concurrent.IScheduledExecutorService)" />
      <MemberSignature Language="F#" Value="static member UnconfigurableScheduledExecutorService : Java.Util.Concurrent.IScheduledExecutorService -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.UnconfigurableScheduledExecutorService executor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IScheduledExecutorService" />
      </Parameters>
      <Docs>
        <param name="executor">the underlying implementation</param>
        <summary>Returns an object that delegates all defined <c>ScheduledExecutorService</c> methods to the given executor, but
            not any other methods that might otherwise be accessible using
            casts.</summary>
        <returns>a <c>ScheduledExecutorService</c> instance</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if executor null
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
