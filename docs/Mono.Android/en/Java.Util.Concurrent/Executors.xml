<Type Name="Executors" FullName="Java.Util.Concurrent.Executors">
  <TypeSignature Language="C#" Value="public class Executors : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Executors extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Executors" />
  <TypeSignature Language="F#" Value="type Executors = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/Executors", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/Executors", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Factory and utility methods for <c>Executor</c>, <c>ExecutorService</c>, <c>ScheduledExecutorService</c>, <c>ThreadFactory</c>, and <c>Callable</c> classes defined in this
            package.</summary>
    <remarks>
      <para>Factory and utility methods for <c>Executor</c>, <c>ExecutorService</c>, <c>ScheduledExecutorService</c>, <c>ThreadFactory</c>, and <c>Callable</c> classes defined in this
            package. This class supports the following kinds of methods:
            
            &lt;ul&gt;
              &lt;li&gt;Methods that create and return an <c>ExecutorService</c>
                  set up with commonly useful configuration settings.
              &lt;li&gt;Methods that create and return a <c>ScheduledExecutorService</c>
                  set up with commonly useful configuration settings.
              &lt;li&gt;Methods that create and return a "wrapped" ExecutorService, that
                  disables reconfiguration by making implementation-specific methods
                  inaccessible.
              &lt;li&gt;Methods that create and return a <c>ThreadFactory</c>
                  that sets newly created threads to a known state.
              &lt;li&gt;Methods that create and return a <c>Callable</c>
                  out of other closure-like forms, so they can be used
                  in execution methods requiring <c>Callable</c>.
            &lt;/ul&gt;</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/Executors" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Executors (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Executors : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Executors" Usage="new Java.Util.Concurrent.Executors (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? Callable (Java.Lang.IRunnable? task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Lang.IRunnable task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Lang.IRunnable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">the task to run</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns <c>null</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#callable(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.callable(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if task null
</exception>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? Callable (Java.Security.IPrivilegedAction? action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Security.IPrivilegedAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Security.IPrivilegedAction)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Security.IPrivilegedAction -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("callable", "(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("callable", "(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Security.IPrivilegedAction" />
      </Parameters>
      <Docs>
        <param name="action">the privileged action to run</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given privileged action and returns its result.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Returns a <c>Callable</c> object that, when
            called, runs the given privileged action and returns its result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#callable(java.security.PrivilegedAction%3C?%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.callable(java.security.PrivilegedAction&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? Callable (Java.Security.IPrivilegedExceptionAction? action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Security.IPrivilegedExceptionAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Security.IPrivilegedExceptionAction)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Security.IPrivilegedExceptionAction -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("callable", "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("callable", "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Security.IPrivilegedExceptionAction" />
      </Parameters>
      <Docs>
        <param name="action">the privileged exception action to run</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given privileged exception action and returns
            its result.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Returns a <c>Callable</c> object that, when
            called, runs the given privileged exception action and returns
            its result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#callable(java.security.PrivilegedExceptionAction%3C?%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.callable(java.security.PrivilegedExceptionAction&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? Callable (Java.Lang.IRunnable? task, Java.Lang.Object? result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable Callable(class Java.Lang.IRunnable task, class Java.Lang.Object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.Callable(Java.Lang.IRunnable,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="static member Callable : Java.Lang.IRunnable * Java.Lang.Object -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.Callable (task, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="task">the task to run</param>
        <param name="result">the result to return</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the result</param>
        <summary>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns the given result.</summary>
        <returns>a callable object</returns>
        <remarks>
          <para>Returns a <c>Callable</c> object that, when
            called, runs the given task and returns the given result.  This
            can be useful when applying methods requiring a
            <c>Callable</c> to an otherwise resultless action.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#callable(java.lang.Runnable,%20T)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.callable(java.lang.Runnable, T)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IThreadFactory? DefaultThreadFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IThreadFactory DefaultThreadFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.DefaultThreadFactory" />
      <MemberSignature Language="F#" Value="static member DefaultThreadFactory : unit -&gt; Java.Util.Concurrent.IThreadFactory" Usage="Java.Util.Concurrent.Executors.DefaultThreadFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IThreadFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a default thread factory used to create new threads.</summary>
        <returns>a thread factory</returns>
        <remarks>
          <para>Returns a default thread factory used to create new threads.
            This factory creates all new threads used by an Executor in the
            same <c>ThreadGroup</c>. Each new
            thread is created as a non-daemon thread with priority set to
            the smaller of <c>Thread.NORM_PRIORITY</c> and the maximum
            priority permitted in the thread group.  New threads have names
            accessible via <c>Thread#getName</c> of
            &lt;em&gt;pool-N-thread-M&lt;/em&gt;, where &lt;em&gt;N&lt;/em&gt; is the sequence
            number of this factory, and &lt;em&gt;M&lt;/em&gt; is the sequence number
            of the thread created by this factory.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#defaultThreadFactory()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.defaultThreadFactory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Executors.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewCachedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewCachedThreadPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewCachedThreadPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewCachedThreadPool" />
      <MemberSignature Language="F#" Value="static member NewCachedThreadPool : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewCachedThreadPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available.  These pools will typically improve the performance
            of programs that execute many short-lived asynchronous tasks.
            Calls to <c>execute</c> will reuse previously constructed
            threads if available. If no existing thread is available, a new
            thread will be created and added to the pool. Threads that have
            not been used for sixty seconds are terminated and removed from
            the cache. Thus, a pool that remains idle for long enough will
            not consume any resources. Note that pools with similar
            properties but different details (for example, timeout parameters)
            may be created using <c>ThreadPoolExecutor</c> constructors.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newCachedThreadPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newCachedThreadPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewCachedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewCachedThreadPool (Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewCachedThreadPool(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewCachedThreadPool(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewCachedThreadPool : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewCachedThreadPool threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available, and uses the provided
            ThreadFactory to create new threads when needed.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a thread pool that creates new threads as needed, but
            will reuse previously constructed threads when they are
            available, and uses the provided
            ThreadFactory to create new threads when needed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newCachedThreadPool(java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewFixedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewFixedThreadPool (int nThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewFixedThreadPool(int32 nThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewFixedThreadPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewFixedThreadPool : int -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewFixedThreadPool nThreads" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nThreads">the number of threads in the pool</param>
        <summary>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue.  At any point, at most
            <c>nThreads</c> threads will be active processing tasks.
            If additional tasks are submitted when all threads are active,
            they will wait in the queue until a thread is available.
            If any thread terminates due to a failure during execution
            prior to shutdown, a new one will take its place if needed to
            execute subsequent tasks.  The threads in the pool will exist
            until it is explicitly <c>ExecutorService#shutdown shutdown</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newFixedThreadPool(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newFixedThreadPool(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>nThreads &lt;= 0</c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewFixedThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewFixedThreadPool (int nThreads, Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewFixedThreadPool(int32 nThreads, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewFixedThreadPool(System.Int32,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewFixedThreadPool : int * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewFixedThreadPool (nThreads, threadFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nThreads" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="nThreads">the number of threads in the pool</param>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue, using the provided
            ThreadFactory to create new threads when needed.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a thread pool that reuses a fixed number of threads
            operating off a shared unbounded queue, using the provided
            ThreadFactory to create new threads when needed.  At any point,
            at most <c>nThreads</c> threads will be active processing
            tasks.  If additional tasks are submitted when all threads are
            active, they will wait in the queue until a thread is
            available.  If any thread terminates due to a failure during
            execution prior to shutdown, a new one will take its place if
            needed to execute subsequent tasks.  The threads in the pool will
            exist until it is explicitly <c>ExecutorService#shutdown
            shutdown</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newFixedThreadPool(int,%20java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newFixedThreadPool(int, java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>nThreads &lt;= 0</c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewScheduledThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService? NewScheduledThreadPool (int corePoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool(int32 corePoolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewScheduledThreadPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewScheduledThreadPool : int -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewScheduledThreadPool corePoolSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool,
            even if they are idle</param>
        <summary>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled thread pool</returns>
        <remarks>
          <para>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newScheduledThreadPool(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newScheduledThreadPool(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
      </Docs>
    </Member>
    <Member MemberName="NewScheduledThreadPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService? NewScheduledThreadPool (int corePoolSize, Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewScheduledThreadPool(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewScheduledThreadPool(System.Int32,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewScheduledThreadPool : int * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewScheduledThreadPool (corePoolSize, threadFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool,
            even if they are idle</param>
        <param name="threadFactory">the factory to use when the executor
            creates a new thread</param>
        <summary>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled thread pool</returns>
        <remarks>
          <para>Creates a thread pool that can schedule commands to run after a
            given delay, or to execute periodically.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newScheduledThreadPool(int,%20java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newScheduledThreadPool(int, java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewSingleThreadExecutor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadExecutor" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadExecutor : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadExecutor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an Executor that uses a single worker thread operating
            off an unbounded queue.</summary>
        <returns>the newly created single-threaded Executor</returns>
        <remarks>
          <para>Creates an Executor that uses a single worker thread operating
            off an unbounded queue. (Note however that if this single
            thread terminates due to a failure during execution prior to
            shutdown, a new one will take its place if needed to execute
            subsequent tasks.)  Tasks are guaranteed to execute
            sequentially, and no more than one task will be active at any
            given time. Unlike the otherwise equivalent
            <c>newFixedThreadPool(1)</c> the returned executor is
            guaranteed not to be reconfigurable to use additional threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newSingleThreadExecutor()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newSingleThreadExecutor()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewSingleThreadExecutor (Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewSingleThreadExecutor(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadExecutor(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadExecutor : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadExecutor threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates an Executor that uses a single worker thread operating
            off an unbounded queue, and uses the provided ThreadFactory to
            create a new thread when needed.</summary>
        <returns>the newly created single-threaded Executor</returns>
        <remarks>
          <para>Creates an Executor that uses a single worker thread operating
            off an unbounded queue, and uses the provided ThreadFactory to
            create a new thread when needed. Unlike the otherwise
            equivalent <c>newFixedThreadPool(1, threadFactory)</c> the
            returned executor is guaranteed not to be reconfigurable to use
            additional threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newSingleThreadExecutor(java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadScheduledExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService? NewSingleThreadScheduledExecutor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadScheduledExecutor : unit -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled executor</returns>
        <remarks>
          <para>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.
            (Note however that if this single
            thread terminates due to a failure during execution prior to
            shutdown, a new one will take its place if needed to execute
            subsequent tasks.)  Tasks are guaranteed to execute
            sequentially, and no more than one task will be active at any
            given time. Unlike the otherwise equivalent
            <c>newScheduledThreadPool(1)</c> the returned executor is
            guaranteed not to be reconfigurable to use additional threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newSingleThreadScheduledExecutor()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newSingleThreadScheduledExecutor()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewSingleThreadScheduledExecutor">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService? NewSingleThreadScheduledExecutor (Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService NewSingleThreadScheduledExecutor(class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor(Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="static member NewSingleThreadScheduledExecutor : Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.NewSingleThreadScheduledExecutor threadFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">the factory to use when creating new threads</param>
        <summary>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.</summary>
        <returns>the newly created scheduled executor</returns>
        <remarks>
          <para>Creates a single-threaded executor that can schedule commands
            to run after a given delay, or to execute periodically.  (Note
            however that if this single thread terminates due to a failure
            during execution prior to shutdown, a new one will take its
            place if needed to execute subsequent tasks.)  Tasks are
            guaranteed to execute sequentially, and no more than one task
            will be active at any given time. Unlike the otherwise
            equivalent <c>newScheduledThreadPool(1, threadFactory)</c>
            the returned executor is guaranteed not to be reconfigurable to
            use additional threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if threadFactory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewWorkStealingPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewWorkStealingPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewWorkStealingPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewWorkStealingPool" />
      <MemberSignature Language="F#" Value="static member NewWorkStealingPool : unit -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewWorkStealingPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a work-stealing thread pool using the number of
            Runtime#availableProcessors available processors
            as its target parallelism level.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a work-stealing thread pool using the number of
            Runtime#availableProcessors available processors
            as its target parallelism level.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newWorkStealingPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newWorkStealingPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWorkStealingPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? NewWorkStealingPool (int parallelism);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService NewWorkStealingPool(int32 parallelism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.NewWorkStealingPool(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewWorkStealingPool : int -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.NewWorkStealingPool parallelism" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parallelism">the targeted parallelism level</param>
        <summary>Creates a thread pool that maintains enough threads to support
            the given parallelism level, and may use multiple queues to
            reduce contention.</summary>
        <returns>the newly created thread pool</returns>
        <remarks>
          <para>Creates a thread pool that maintains enough threads to support
            the given parallelism level, and may use multiple queues to
            reduce contention. The parallelism level corresponds to the
            maximum number of threads actively engaged in, or available to
            engage in, task processing. The actual number of threads may
            grow and shrink dynamically. A work-stealing pool makes no
            guarantees about the order in which submitted tasks are
            executed.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#newWorkStealingPool(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.newWorkStealingPool(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedCallable">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? PrivilegedCallable (Java.Util.Concurrent.ICallable? callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable PrivilegedCallable(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedCallable(Java.Util.Concurrent.ICallable)" />
      <MemberSignature Language="F#" Value="static member PrivilegedCallable : Java.Util.Concurrent.ICallable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.PrivilegedCallable callable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Legacy security code; do not use.</para>
          <para>This member is deprecated. This method is only useful in conjunction with
                  SecurityManager the Security Manager, which is
                  deprecated and subject to removal in a future release.
                  Consequently, this method is also deprecated and subject to
                  removal. There is no replacement for the Security Manager or this
                  method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#privilegedCallable(java.util.concurrent.Callable%3CT%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.privilegedCallable(java.util.concurrent.Callable&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedCallableUsingCurrentClassLoader">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ICallable? PrivilegedCallableUsingCurrentClassLoader (Java.Util.Concurrent.ICallable? callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ICallable PrivilegedCallableUsingCurrentClassLoader(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader(Java.Util.Concurrent.ICallable)" />
      <MemberSignature Language="F#" Value="static member PrivilegedCallableUsingCurrentClassLoader : Java.Util.Concurrent.ICallable -&gt; Java.Util.Concurrent.ICallable" Usage="Java.Util.Concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader callable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ICallable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Legacy security code; do not use.</para>
          <para>This member is deprecated. This method is only useful in conjunction with
                  SecurityManager the Security Manager, which is
                  deprecated and subject to removal in a future release.
                  Consequently, this method is also deprecated and subject to
                  removal. There is no replacement for the Security Manager or this
                  method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable%3CT%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IThreadFactory? PrivilegedThreadFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IThreadFactory PrivilegedThreadFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.PrivilegedThreadFactory" />
      <MemberSignature Language="F#" Value="static member PrivilegedThreadFactory : unit -&gt; Java.Util.Concurrent.IThreadFactory" Usage="Java.Util.Concurrent.Executors.PrivilegedThreadFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IThreadFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legacy security code; do not use.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Legacy security code; do not use.</para>
          <para>This member is deprecated. This method is only useful in conjunction with
                  SecurityManager the Security Manager, which is
                  deprecated and subject to removal in a future release.
                  Consequently, this method is also deprecated and subject to
                  removal. There is no replacement for the Security Manager or this
                  method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#privilegedThreadFactory()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.privilegedThreadFactory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Executors.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Executors.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Executors.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnconfigurableExecutorService">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IExecutorService? UnconfigurableExecutorService (Java.Util.Concurrent.IExecutorService? executor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IExecutorService UnconfigurableExecutorService(class Java.Util.Concurrent.IExecutorService executor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.UnconfigurableExecutorService(Java.Util.Concurrent.IExecutorService)" />
      <MemberSignature Language="F#" Value="static member UnconfigurableExecutorService : Java.Util.Concurrent.IExecutorService -&gt; Java.Util.Concurrent.IExecutorService" Usage="Java.Util.Concurrent.Executors.UnconfigurableExecutorService executor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutorService" />
      </Parameters>
      <Docs>
        <param name="executor">the underlying implementation</param>
        <summary>Returns an object that delegates all defined <c>ExecutorService</c> methods to the given executor, but not any
            other methods that might otherwise be accessible using
            casts.</summary>
        <returns>an <c>ExecutorService</c> instance</returns>
        <remarks>
          <para>Returns an object that delegates all defined <c>ExecutorService</c> methods to the given executor, but not any
            other methods that might otherwise be accessible using
            casts. This provides a way to safely "freeze" configuration and
            disallow tuning of a given concrete implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#unconfigurableExecutorService(java.util.concurrent.ExecutorService)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.unconfigurableExecutorService(java.util.concurrent.ExecutorService)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if executor null
</exception>
      </Docs>
    </Member>
    <Member MemberName="UnconfigurableScheduledExecutorService">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.IScheduledExecutorService? UnconfigurableScheduledExecutorService (Java.Util.Concurrent.IScheduledExecutorService? executor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.IScheduledExecutorService UnconfigurableScheduledExecutorService(class Java.Util.Concurrent.IScheduledExecutorService executor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Executors.UnconfigurableScheduledExecutorService(Java.Util.Concurrent.IScheduledExecutorService)" />
      <MemberSignature Language="F#" Value="static member UnconfigurableScheduledExecutorService : Java.Util.Concurrent.IScheduledExecutorService -&gt; Java.Util.Concurrent.IScheduledExecutorService" Usage="Java.Util.Concurrent.Executors.UnconfigurableScheduledExecutorService executor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledExecutorService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IScheduledExecutorService" />
      </Parameters>
      <Docs>
        <param name="executor">the underlying implementation</param>
        <summary>Returns an object that delegates all defined <c>ScheduledExecutorService</c> methods to the given executor, but
            not any other methods that might otherwise be accessible using
            casts.</summary>
        <returns>a <c>ScheduledExecutorService</c> instance</returns>
        <remarks>
          <para>Returns an object that delegates all defined <c>ScheduledExecutorService</c> methods to the given executor, but
            not any other methods that might otherwise be accessible using
            casts. This provides a way to safely "freeze" configuration and
            disallow tuning of a given concrete implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executors#unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executors.unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if executor null
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
