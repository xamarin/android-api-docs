<Type Name="ForkJoinTask" FullName="Java.Util.Concurrent.ForkJoinTask">
  <TypeSignature Language="C#" Value="public abstract class ForkJoinTask : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable, Java.Util.Concurrent.IFuture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ForkJoinTask extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class Java.Util.Concurrent.IFuture, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.ForkJoinTask" />
  <TypeSignature Language="F#" Value="type ForkJoinTask = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IFuture" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IFuture</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/ForkJoinTask", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/ForkJoinTask", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Abstract base class for tasks that run within a <c>ForkJoinPool</c>.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinTask (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinTask : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="new Java.Util.Concurrent.ForkJoinTask (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask? Adapt (Java.Lang.IRunnable? runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Lang.IRunnable runnable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Adapt(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="static member Adapt : Java.Lang.IRunnable -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.Adapt runnable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="runnable">the runnable action</param>
        <summary>Returns a new <c>ForkJoinTask</c> that performs the <c>run</c>
            method of the given <c>Runnable</c> as its action, and returns
            a null result upon <c>#join</c>.</summary>
        <returns>the task</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#adapt(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask? Adapt (Java.Util.Concurrent.ICallable? callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Adapt(Java.Util.Concurrent.ICallable)" />
      <MemberSignature Language="F#" Value="static member Adapt : Java.Util.Concurrent.ICallable -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.Adapt callable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("adapt", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("adapt", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <param name="runnable">the runnable action</param>
        <summary>Returns a new <c>ForkJoinTask</c> that performs the <c>run</c>
            method of the given <c>Runnable</c> as its action, and returns
            a null result upon <c>#join</c>.</summary>
        <returns>the task</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#adapt(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask? Adapt (Java.Lang.IRunnable? runnable, Java.Lang.Object? result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Lang.IRunnable runnable, class Java.Lang.Object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Adapt(Java.Lang.IRunnable,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="static member Adapt : Java.Lang.IRunnable * Java.Lang.Object -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.Adapt (runnable, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <param name="runnable">the runnable action</param>
        <summary>Returns a new <c>ForkJoinTask</c> that performs the <c>run</c>
            method of the given <c>Runnable</c> as its action, and returns
            a null result upon <c>#join</c>.</summary>
        <returns>the task</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#adapt(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual bool Cancel (bool mayInterruptIfRunning);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cancel(bool mayInterruptIfRunning) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Cancel(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Cancel : bool -&gt; bool&#xA;override this.Cancel : bool -&gt; bool" Usage="forkJoinTask.Cancel mayInterruptIfRunning" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IFuture.Cancel(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mayInterruptIfRunning" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mayInterruptIfRunning">this value has no effect in the
            default implementation because interrupts are not used to
            control cancellation.</param>
        <summary>Attempts to cancel execution of this task.</summary>
        <returns>
          <c>true</c> if this task is now cancelled</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#cancel(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.cancel(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSetForkJoinTaskTag">
      <MemberSignature Language="C#" Value="public bool CompareAndSetForkJoinTaskTag (short expect, short update);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CompareAndSetForkJoinTaskTag(int16 expect, int16 update) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.CompareAndSetForkJoinTaskTag(System.Int16,System.Int16)" />
      <MemberSignature Language="F#" Value="member this.CompareAndSetForkJoinTaskTag : int16 * int16 -&gt; bool" Usage="forkJoinTask.CompareAndSetForkJoinTaskTag (expect, update)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndSetForkJoinTaskTag", "(SS)Z", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndSetForkJoinTaskTag", "(SS)Z", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expect" Type="System.Int16" />
        <Parameter Name="update" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="expect">the expected tag value</param>
        <param name="update">the new tag value</param>
        <summary>Atomically conditionally sets the tag value for this task.</summary>
        <returns>
          <c>true</c> if successful; i.e., the current value was
            equal to <c>expect</c> and was changed to <c>update</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#compareAndSetForkJoinTaskTag(short,%20short)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short, short)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public virtual void Complete (Java.Lang.Object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(class Java.Lang.Object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Complete(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Complete : Java.Lang.Object -&gt; unit&#xA;override this.Complete : Java.Lang.Object -&gt; unit" Usage="forkJoinTask.Complete value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("complete", "(Ljava/lang/Object;)V", "GetComplete_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("complete", "(Ljava/lang/Object;)V", "GetComplete_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="value">the result value for this task</param>
        <summary>Completes this task, and if not already aborted or cancelled,
            returning the given value as the result of subsequent
            invocations of <c>join</c> and related operations.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#complete(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.complete(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteExceptionally">
      <MemberSignature Language="C#" Value="public virtual void CompleteExceptionally (Java.Lang.Throwable? ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CompleteExceptionally(class Java.Lang.Throwable ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.CompleteExceptionally(Java.Lang.Throwable)" />
      <MemberSignature Language="F#" Value="abstract member CompleteExceptionally : Java.Lang.Throwable -&gt; unit&#xA;override this.CompleteExceptionally : Java.Lang.Throwable -&gt; unit" Usage="forkJoinTask.CompleteExceptionally ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("completeExceptionally", "(Ljava/lang/Throwable;)V", "GetCompleteExceptionally_Ljava_lang_Throwable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("completeExceptionally", "(Ljava/lang/Throwable;)V", "GetCompleteExceptionally_Ljava_lang_Throwable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="ex">the exception to throw. If this exception is not a
            <c>RuntimeException</c> or <c>Error</c>, the actual exception
            thrown will be a <c>RuntimeException</c> with cause <c>ex</c>.</param>
        <summary>Completes this task abnormally, and if not already aborted or
            cancelled, causes it to throw the given exception upon
            <c>join</c> and related operations.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#completeExceptionally(java.lang.Throwable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.completeExceptionally(java.lang.Throwable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Java.Lang.Throwable? Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Throwable Exception" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.Exception" />
      <MemberSignature Language="F#" Value="member this.Exception : Java.Lang.Throwable" Usage="Java.Util.Concurrent.ForkJoinTask.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getException", "()Ljava/lang/Throwable;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getException", "()Ljava/lang/Throwable;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Throwable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the exception thrown by the base computation, or a
            <c>CancellationException</c> if cancelled, or <c>null</c> if
            none or if the method has not yet completed.</summary>
        <value>the exception, or <c>null</c> if none</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#getException()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.getException()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="protected abstract bool Exec ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Exec() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Exec" />
      <MemberSignature Language="F#" Value="abstract member Exec : unit -&gt; bool" Usage="forkJoinTask.Exec " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "()Z", "GetExecHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "()Z", "GetExecHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Immediately performs the base action of this task and returns
            true if, upon return from this method, this task is guaranteed
            to have completed normally.</summary>
        <returns>
          <c>true</c> if this task is known to have completed normally</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#exec()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.exec()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fork">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.ForkJoinTask? Fork ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Concurrent.ForkJoinTask Fork() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Fork" />
      <MemberSignature Language="F#" Value="member this.Fork : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="forkJoinTask.Fork " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("fork", "()Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("fork", "()Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arranges to asynchronously execute this task in the pool the
            current task is running in, if applicable, or using the <c>ForkJoinPool#commonPool()</c> if not <c>#inForkJoinPool</c>.</summary>
        <returns>
          <c>this</c>, to simplify usage</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#fork()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.fork()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForkJoinTaskTag">
      <MemberSignature Language="C#" Value="public short ForkJoinTaskTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 ForkJoinTaskTag" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.ForkJoinTaskTag" />
      <MemberSignature Language="F#" Value="member this.ForkJoinTaskTag : int16" Usage="Java.Util.Concurrent.ForkJoinTask.ForkJoinTaskTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getForkJoinTaskTag", "()S", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getForkJoinTaskTag", "()S", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the tag for this task.</summary>
        <value>the tag for this task</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#getForkJoinTaskTag()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.getForkJoinTaskTag()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Get" />
      <MemberSignature Language="F#" Value="abstract member Get : unit -&gt; Java.Lang.Object&#xA;override this.Get : unit -&gt; Java.Lang.Object" Usage="forkJoinTask.Get " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IFuture.Get</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "()Ljava/lang/Object;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "()Ljava/lang/Object;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits if necessary for the computation to complete, and then
            retrieves its result.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#get()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.get()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Get (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Get(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Get : int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Lang.Object&#xA;override this.Get : int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Lang.Object" Usage="forkJoinTask.Get (timeout, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IFuture.Get(System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Waits if necessary for the computation to complete, and then
            retrieves its result.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#get()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.get()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the wait timed out
</exception>
      </Docs>
    </Member>
    <Member MemberName="HelpQuiesce">
      <MemberSignature Language="C#" Value="public static void HelpQuiesce ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HelpQuiesce() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.HelpQuiesce" />
      <MemberSignature Language="F#" Value="static member HelpQuiesce : unit -&gt; unit" Usage="Java.Util.Concurrent.ForkJoinTask.HelpQuiesce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("helpQuiesce", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("helpQuiesce", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly executes tasks until the pool hosting the current task
            ForkJoinPool#isQuiescent is quiescent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#helpQuiesce()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.helpQuiesce()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InForkJoinPool">
      <MemberSignature Language="C#" Value="public static bool InForkJoinPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InForkJoinPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.InForkJoinPool" />
      <MemberSignature Language="F#" Value="static member InForkJoinPool : unit -&gt; bool" Usage="Java.Util.Concurrent.ForkJoinTask.InForkJoinPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("inForkJoinPool", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("inForkJoinPool", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns <c>true</c> if the current thread is a <c>ForkJoinWorkerThread</c> executing as a ForkJoinPool computation.</summary>
        <returns>
          <c>true</c> if the current thread is a <c>ForkJoinWorkerThread</c> executing as a ForkJoinPool computation,
            or <c>false</c> otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#inForkJoinPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.inForkJoinPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Invoke" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; Java.Lang.Object" Usage="forkJoinTask.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invoke", "()Ljava/lang/Object;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invoke", "()Ljava/lang/Object;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commences performing this task, awaits its completion if
            necessary, and returns its result, or throws an (unchecked)
            <c>RuntimeException</c> or <c>Error</c> if the underlying
            computation did so.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#invoke()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.invoke()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static void InvokeAll (params Java.Util.Concurrent.ForkJoinTask[]? tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeAll(class Java.Util.Concurrent.ForkJoinTask[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.InvokeAll(Java.Util.Concurrent.ForkJoinTask[])" />
      <MemberSignature Language="F#" Value="static member InvokeAll : Java.Util.Concurrent.ForkJoinTask[] -&gt; unit" Usage="Java.Util.Concurrent.ForkJoinTask.InvokeAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invokeAll", "([Ljava/util/concurrent/ForkJoinTask;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invokeAll", "([Ljava/util/concurrent/ForkJoinTask;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="Java.Util.Concurrent.ForkJoinTask[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">the collection of tasks</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the values returned from the tasks</param>
        <summary>Forks all tasks in the specified collection, returning when
            <c>isDone</c> holds for each task or an (unchecked) exception
            is encountered, in which case the exception is rethrown.</summary>
        <returns>the tasks argument, to simplify usage</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#invokeAll(java.util.Collection)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.invokeAll(java.util.Collection)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection? InvokeAll (System.Collections.ICollection? tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ICollection InvokeAll(class System.Collections.ICollection tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.InvokeAll(System.Collections.ICollection)" />
      <MemberSignature Language="F#" Value="static member InvokeAll : System.Collections.ICollection -&gt; System.Collections.ICollection" Usage="Java.Util.Concurrent.ForkJoinTask.InvokeAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invokeAll", "(Ljava/util/Collection;)Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invokeAll", "(Ljava/util/Collection;)Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.util.concurrent.ForkJoinTask&lt;?&gt;" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.util.concurrent.ForkJoinTask&lt;?&gt;" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="tasks">the collection of tasks</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the values returned from the tasks</param>
        <summary>Forks all tasks in the specified collection, returning when
            <c>isDone</c> holds for each task or an (unchecked) exception
            is encountered, in which case the exception is rethrown.</summary>
        <returns>the tasks argument, to simplify usage</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#invokeAll(java.util.Collection)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.invokeAll(java.util.Collection)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static void InvokeAll (Java.Util.Concurrent.ForkJoinTask? t1, Java.Util.Concurrent.ForkJoinTask? t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeAll(class Java.Util.Concurrent.ForkJoinTask t1, class Java.Util.Concurrent.ForkJoinTask t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.InvokeAll(Java.Util.Concurrent.ForkJoinTask,Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="static member InvokeAll : Java.Util.Concurrent.ForkJoinTask * Java.Util.Concurrent.ForkJoinTask -&gt; unit" Usage="Java.Util.Concurrent.ForkJoinTask.InvokeAll (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invokeAll", "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invokeAll", "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="Java.Util.Concurrent.ForkJoinTask" />
        <Parameter Name="t2" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <param name="tasks">the collection of tasks</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the values returned from the tasks</param>
        <summary>Forks all tasks in the specified collection, returning when
            <c>isDone</c> holds for each task or an (unchecked) exception
            is encountered, in which case the exception is rethrown.</summary>
        <returns>the tasks argument, to simplify usage</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#invokeAll(java.util.Collection)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.invokeAll(java.util.Collection)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.IsCancelled" />
      <MemberSignature Language="F#" Value="member this.IsCancelled : bool" Usage="Java.Util.Concurrent.ForkJoinTask.IsCancelled" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Util.Concurrent.IFuture.IsCancelled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isCancelled", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isCancelled", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task was cancelled before it completed
 normally.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedAbnormally">
      <MemberSignature Language="C#" Value="public bool IsCompletedAbnormally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedAbnormally" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.IsCompletedAbnormally" />
      <MemberSignature Language="F#" Value="member this.IsCompletedAbnormally : bool" Usage="Java.Util.Concurrent.ForkJoinTask.IsCompletedAbnormally" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isCompletedAbnormally", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isCompletedAbnormally", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task threw an exception or was cancelled.</summary>
        <value>
          <c>true</c> if this task threw an exception or was cancelled</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#isCompletedAbnormally()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.isCompletedAbnormally()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedNormally">
      <MemberSignature Language="C#" Value="public bool IsCompletedNormally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedNormally" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.IsCompletedNormally" />
      <MemberSignature Language="F#" Value="member this.IsCompletedNormally : bool" Usage="Java.Util.Concurrent.ForkJoinTask.IsCompletedNormally" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isCompletedNormally", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isCompletedNormally", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed without throwing an
            exception and was not cancelled.</summary>
        <value>
          <c>true</c> if this task completed without throwing an
            exception and was not cancelled</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#isCompletedNormally()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.isCompletedNormally()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="C#" Value="public bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.IsDone" />
      <MemberSignature Language="F#" Value="member this.IsDone : bool" Usage="Java.Util.Concurrent.ForkJoinTask.IsDone" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Util.Concurrent.IFuture.IsDone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isDone", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isDone", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.ForkJoinTask.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Join" />
      <MemberSignature Language="F#" Value="member this.Join : unit -&gt; Java.Lang.Object" Usage="forkJoinTask.Join " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("join", "()Ljava/lang/Object;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("join", "()Ljava/lang/Object;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the result of the computation when it <c>#isDone is
            done</c>.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#join()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.join()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekNextLocalTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask? PeekNextLocalTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PeekNextLocalTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.PeekNextLocalTask" />
      <MemberSignature Language="F#" Value="static member PeekNextLocalTask : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.PeekNextLocalTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("peekNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("peekNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns, but does not unschedule or execute, a task queued by
            the current thread but not yet executed, if one is immediately
            available.</summary>
        <returns>the next task, or <c>null</c> if none are available</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#peekNextLocalTask()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.peekNextLocalTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollNextLocalTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask? PollNextLocalTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PollNextLocalTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.PollNextLocalTask" />
      <MemberSignature Language="F#" Value="static member PollNextLocalTask : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.PollNextLocalTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pollNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pollNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unschedules and returns, without executing, the next task
            queued by the current thread but not yet executed, if the
            current thread is operating in a ForkJoinPool.</summary>
        <returns>the next task, or <c>null</c> if none are available</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#pollNextLocalTask()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.pollNextLocalTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask? PollTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PollTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.PollTask" />
      <MemberSignature Language="F#" Value="static member PollTask : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="Java.Util.Concurrent.ForkJoinTask.PollTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pollTask", "()Ljava/util/concurrent/ForkJoinTask;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pollTask", "()Ljava/util/concurrent/ForkJoinTask;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If the current thread is operating in a ForkJoinPool,
            unschedules and returns, without executing, the next task
            queued by the current thread but not yet executed, if one is
            available, or if not available, a task that was forked by some
            other thread, if available.</summary>
        <returns>a task, or <c>null</c> if none are available</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#pollTask()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.pollTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool? Pool { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Concurrent.ForkJoinPool Pool" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.Pool" />
      <MemberSignature Language="F#" Value="member this.Pool : Java.Util.Concurrent.ForkJoinPool" Usage="Java.Util.Concurrent.ForkJoinTask.Pool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPool", "()Ljava/util/concurrent/ForkJoinPool;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPool", "()Ljava/util/concurrent/ForkJoinPool;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the pool hosting the current thread, or <c>null</c>
            if the current thread is executing outside of any ForkJoinPool.</summary>
        <value>the pool, or <c>null</c> if none</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#getPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.getPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Java.Util.Concurrent.ForkJoinTask.InForkJoinPool" />
      </Docs>
    </Member>
    <Member MemberName="QueuedTaskCount">
      <MemberSignature Language="C#" Value="public static int QueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 QueuedTaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.QueuedTaskCount" />
      <MemberSignature Language="F#" Value="member this.QueuedTaskCount : int" Usage="Java.Util.Concurrent.ForkJoinTask.QueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueuedTaskCount", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueuedTaskCount", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of tasks that have been
            forked by the current worker thread but not yet executed.</summary>
        <value>the number of tasks</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#getQueuedTaskCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.getQueuedTaskCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuietlyComplete">
      <MemberSignature Language="C#" Value="public void QuietlyComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QuietlyComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.QuietlyComplete" />
      <MemberSignature Language="F#" Value="member this.QuietlyComplete : unit -&gt; unit" Usage="forkJoinTask.QuietlyComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quietlyComplete", "()V", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quietlyComplete", "()V", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes this task normally without setting a value.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#quietlyComplete()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.quietlyComplete()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuietlyInvoke">
      <MemberSignature Language="C#" Value="public void QuietlyInvoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QuietlyInvoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.QuietlyInvoke" />
      <MemberSignature Language="F#" Value="member this.QuietlyInvoke : unit -&gt; unit" Usage="forkJoinTask.QuietlyInvoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quietlyInvoke", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quietlyInvoke", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commences performing this task and awaits its completion if
            necessary, without returning its result or throwing its
            exception.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#quietlyInvoke()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.quietlyInvoke()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuietlyJoin">
      <MemberSignature Language="C#" Value="public void QuietlyJoin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QuietlyJoin() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.QuietlyJoin" />
      <MemberSignature Language="F#" Value="member this.QuietlyJoin : unit -&gt; unit" Usage="forkJoinTask.QuietlyJoin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quietlyJoin", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quietlyJoin", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Joins this task, without returning its result or throwing its
            exception.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#quietlyJoin()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.quietlyJoin()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawRawResult">
      <MemberSignature Language="C#" Value="protected abstract Java.Lang.Object? RawRawResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object RawRawResult" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.RawRawResult" />
      <MemberSignature Language="F#" Value="member this.RawRawResult : Java.Lang.Object" Usage="Java.Util.Concurrent.ForkJoinTask.RawRawResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawResult", "()Ljava/lang/Object;", "GetGetRawResultHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawResult", "()Ljava/lang/Object;", "GetGetRawResultHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the result that would be returned by <see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" />, even
 if this task completed abnormally, or <c>null</c> if this task
 is not known to have been completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reinitialize">
      <MemberSignature Language="C#" Value="public virtual void Reinitialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reinitialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.Reinitialize" />
      <MemberSignature Language="F#" Value="abstract member Reinitialize : unit -&gt; unit&#xA;override this.Reinitialize : unit -&gt; unit" Usage="forkJoinTask.Reinitialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reinitialize", "()V", "GetReinitializeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reinitialize", "()V", "GetReinitializeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the internal bookkeeping state of this task, allowing a
            subsequent <c>fork</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#reinitialize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.reinitialize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetForkJoinTaskTag">
      <MemberSignature Language="C#" Value="public short SetForkJoinTaskTag (short newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 SetForkJoinTaskTag(int16 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.SetForkJoinTaskTag(System.Int16)" />
      <MemberSignature Language="F#" Value="member this.SetForkJoinTaskTag : int16 -&gt; int16" Usage="forkJoinTask.SetForkJoinTaskTag newValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setForkJoinTaskTag", "(S)S", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setForkJoinTaskTag", "(S)S", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newValue" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="newValue">the new tag value</param>
        <summary>Atomically sets the tag value for this task and returns the old value.</summary>
        <returns>the previous value of the tag</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#setForkJoinTaskTag(short)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRawResult">
      <MemberSignature Language="C#" Value="protected abstract void SetRawResult (Java.Lang.Object? value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetRawResult(class Java.Lang.Object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.SetRawResult(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member SetRawResult : Java.Lang.Object -&gt; unit" Usage="forkJoinTask.SetRawResult value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRawResult", "(Ljava/lang/Object;)V", "GetSetRawResult_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRawResult", "(Ljava/lang/Object;)V", "GetSetRawResult_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="value">the value</param>
        <summary>Forces the given value to be returned as a result.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#setRawResult(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.setRawResult(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SurplusQueuedTaskCount">
      <MemberSignature Language="C#" Value="public static int SurplusQueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 SurplusQueuedTaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.SurplusQueuedTaskCount" />
      <MemberSignature Language="F#" Value="member this.SurplusQueuedTaskCount : int" Usage="Java.Util.Concurrent.ForkJoinTask.SurplusQueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSurplusQueuedTaskCount", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSurplusQueuedTaskCount", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of how many more locally queued tasks are
            held by the current worker thread than there are other worker
            threads that might steal them, or zero if this thread is not
            operating in a ForkJoinPool.</summary>
        <value>the surplus number of tasks, which may be negative</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#getSurplusQueuedTaskCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.ForkJoinTask.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinTask.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.ForkJoinTask.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnfork">
      <MemberSignature Language="C#" Value="public virtual bool TryUnfork ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnfork() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinTask.TryUnfork" />
      <MemberSignature Language="F#" Value="abstract member TryUnfork : unit -&gt; bool&#xA;override this.TryUnfork : unit -&gt; bool" Usage="forkJoinTask.TryUnfork " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryUnfork", "()Z", "GetTryUnforkHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryUnfork", "()Z", "GetTryUnforkHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tries to unschedule this task for execution.</summary>
        <returns>
          <c>true</c> if unforked</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinTask#tryUnfork()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinTask.tryUnfork()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
