<Type Name="IBlockingQueue" FullName="Java.Util.Concurrent.IBlockingQueue">
  <TypeSignature Language="C#" Value="public interface IBlockingQueue : IDisposable, Java.Util.IQueue" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBlockingQueue implements class Android.Runtime.IJavaObject, class Java.Lang.IIterable, class Java.Util.ICollection, class Java.Util.IQueue, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Util.IQueue</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/BlockingQueue", "", "Java.Util.Concurrent.IBlockingQueueInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c><see cref="T:Java.Util.IQueue" /></c> that additionally supports operations
 that wait for the queue to become non-empty when retrieving an
 element, and wait for space to become available in the queue when
 storing an element.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c><see cref="T:Java.Util.IQueue" /></c> that additionally supports operations
 that wait for the queue to become non-empty when retrieving an
 element, and wait for space to become available in the queue when
 storing an element.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>BlockingQueue</c> methods come in four forms, with different ways
 of handling operations that cannot be satisfied immediately, but may be
 satisfied at some point in the future:
 one throws an exception, the second returns a special value (either
 <c>null</c> or <c>false</c>, depending on the operation), the third
 blocks the current thread indefinitely until the operation can succeed,
 and the fourth blocks for only a given maximum time limit before giving
 up.  These methods are summarized in the following table:

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table border="" cellpadding="3" cellspacing="1">
            <caption>Summary of BlockingQueue methods</caption>
            <tr>
              <td />
              <td align="CENTER">
                <i>Throws exception</i>
              </td>
              <td align="CENTER">
                <i>Special value</i>
              </td>
              <td align="CENTER">
                <i>Blocks</i>
              </td>
              <td align="CENTER">
                <i>Times out</i>
              </td>
            </tr>
            <tr>
              <td>
                <b>Insert</b>
              </td>
              <td>
                <c>
                  <see cref="!:Java.Util.Concurrent.IBlockingQueue.add(E)" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="!:Java.Util.Concurrent.IBlockingQueue.offer(E)" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="!:Java.Util.Concurrent.IBlockingQueue.put(E)" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="!:Java.Util.Concurrent.IBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)" />
                </c>
              </td>
            </tr>
            <tr>
              <td>
                <b>Remove</b>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.IQueue.Remove" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.IQueue.Poll" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.Concurrent.IBlockingQueue.Take" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" />
                </c>
              </td>
            </tr>
            <tr>
              <td>
                <b>Examine</b>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.IQueue.Element" />
                </c>
              </td>
              <td>
                <c>
                  <see cref="M:Java.Util.IQueue.Peek" />
                </c>
              </td>
              <td>
                <i>not applicable</i>
              </td>
              <td>
                <i>not applicable</i>
              </td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">A <c>BlockingQueue</c> does not accept <c>null</c> elements.
 Implementations throw <c>NullPointerException</c> on attempts
 to <c>add</c>, <c>put</c> or <c>offer</c> a <c>null</c>.  A
 <c>null</c> is used as a sentinel value to indicate failure of
 <c>poll</c> operations.

 </para>
      <para tool="javadoc-to-mdoc">A <c>BlockingQueue</c> may be capacity bounded. At any given
 time it may have a <c>remainingCapacity</c> beyond which no
 additional elements can be <c>put</c> without blocking.
 A <c>BlockingQueue</c> without any intrinsic capacity constraints always
 reports a remaining capacity of <c>Integer.MAX_VALUE</c>.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>BlockingQueue</c> implementations are designed to be used
 primarily for producer-consumer queues, but additionally support
 the <c><see cref="T:Android.Runtime.JavaCollection" /></c> interface.  So, for example, it is
 possible to remove an arbitrary element from a queue using
 <c>remove(x)</c>. However, such operations are in general
 <i>not</i> performed very efficiently, and are intended for only
 occasional use, such as when a queued message is cancelled.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>BlockingQueue</c> implementations are thread-safe.  All
 queuing methods achieve their effects atomically using internal
 locks or other forms of concurrency control. However, the
 <i>bulk</i> Collection operations <c>addAll</c>,
 <c>containsAll</c>, <c>retainAll</c> and <c>removeAll</c> are
 <i>not</i> necessarily performed atomically unless specified
 otherwise in an implementation. So it is possible, for example, for
 <c>addAll(c)</c> to fail (throwing an exception) after adding
 only some of the elements in <c>c</c>.

 </para>
      <para tool="javadoc-to-mdoc">A <c>BlockingQueue</c> does <i>not</i> intrinsically support
 any kind of "close" or "shutdown" operation to
 indicate that no more items will be added.  The needs and usage of
 such features tend to be implementation-dependent. For example, a
 common tactic is for producers to insert special
 <i>end-of-stream</i> or <i>poison</i> objects, that are
 interpreted accordingly when taken by consumers.

 </para>
      <para tool="javadoc-to-mdoc">
 Usage example, based on a typical producer-consumer scenario.
 Note that a <c>BlockingQueue</c> can safely be used with multiple
 producers and multiple consumers.
  <example><code lang="java">class Producer implements Runnable {
   private final BlockingQueue queue;
   Producer(BlockingQueue q) { queue = q; 
   public void run() {
     try {
       while (true) { queue.put(produce()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   Object produce() { ... }
 }

 class Consumer implements Runnable {
   private final BlockingQueue queue;
   Consumer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { consume(queue.take()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   void consume(Object x) { ... }
 }

 class Setup {
   void main() {
     BlockingQueue q = new SomeQueueImplementation();
     Producer p = new Producer(q);
     Consumer c1 = new Consumer(q);
     Consumer c2 = new Consumer(q);
     new Thread(p).start();
     new Thread(c1).start();
     new Thread(c2).start();
   }
 }}</code></example></para>
      <para tool="javadoc-to-mdoc">Memory consistency effects: As with other concurrent
 collections, actions in a thread prior to placing an object into a
 <c>BlockingQueue</c>
 actions subsequent to the access or removal of that element from
 the <c>BlockingQueue</c> in another thread.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (Java.Lang.Object e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Add(class Java.Lang.Object e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("add", "(Ljava/lang/Object;)Z", "GetAdd_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class Java.Lang.Object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("contains", "(Ljava/lang/Object;)Z", "GetContains_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">object to be checked for containment in this queue</param>
        <summary>Returns <c>true</c> if this queue contains the specified element.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this queue contains the specified element.
 More formally, returns <c>true</c> if and only if this queue contains
 at least one element <c>e</c> such that <c>o.equals(e)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html#contains(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.ClassCastException">if the class of the specified element
         is incompatible with this queue
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the specified element is null
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)
</exception>
      </Docs>
    </Member>
    <Member MemberName="DrainTo">
      <MemberSignature Language="C#" Value="public int DrainTo (System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DrainTo(class System.Collections.ICollection c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drainTo", "(Ljava/util/Collection;)I", "GetDrainTo_Ljava_util_Collection_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrainTo">
      <MemberSignature Language="C#" Value="public int DrainTo (System.Collections.ICollection c, int maxElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DrainTo(class System.Collections.ICollection c, int32 maxElements) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drainTo", "(Ljava/util/Collection;I)I", "GetDrainTo_Ljava_util_Collection_IHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
        <Parameter Name="maxElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c">To be added.</param>
        <param name="maxElements">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offer">
      <MemberSignature Language="C#" Value="public bool Offer (Java.Lang.Object e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Offer(class Java.Lang.Object e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offer", "(Ljava/lang/Object;)Z", "GetOffer_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offer">
      <MemberSignature Language="C#" Value="public bool Offer (Java.Lang.Object e, long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Offer(class Java.Lang.Object e, int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offer", "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", "GetOffer_Ljava_lang_Object_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Poll (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Poll(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("poll", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetPoll_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">how long to wait before giving up, in units of
        <c>unit</c></param>
        <param name="unit">a <c>TimeUnit</c> determining how to interpret the
        <c>timeout</c> parameter</param>
        <summary>Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html#poll(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public void Put (Java.Lang.Object e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Put(class Java.Lang.Object e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(Ljava/lang/Object;)V", "GetPut_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemainingCapacity">
      <MemberSignature Language="C#" Value="public int RemainingCapacity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 RemainingCapacity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("remainingCapacity", "()I", "GetRemainingCapacityHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking, or <c>Integer.MAX_VALUE</c> if there is no intrinsic
 limit.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking, or <c>Integer.MAX_VALUE</c> if there is no intrinsic
 limit.

 </para>
          <para tool="javadoc-to-mdoc">Note that you <i>cannot</i> always tell if an attempt to insert
 an element will succeed by inspecting <c>remainingCapacity</c>
 because it may be the case that another thread is about to
 insert or remove an element.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html#remainingCapacity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class Java.Lang.Object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("remove", "(Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">element to be removed from this queue, if present</param>
        <summary>Removes a single instance of the specified element from this queue,
 if it is present.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element <c>e</c> such
 that <c>o.equals(e)</c>, if this queue contains one or more such
 elements.
 Returns <c>true</c> if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html#remove(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.ClassCastException">if the class of the specified element
         is incompatible with this queue
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the specified element is null
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Take ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Take() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("take", "()Ljava/lang/Object;", "GetTakeHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html#take()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
