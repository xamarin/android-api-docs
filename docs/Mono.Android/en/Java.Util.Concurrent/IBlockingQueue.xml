<Type Name="IBlockingQueue" FullName="Java.Util.Concurrent.IBlockingQueue">
  <TypeSignature Language="C#" Value="public interface IBlockingQueue : IDisposable, Java.Interop.IJavaPeerable, Java.Util.IQueue" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBlockingQueue implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IIterable, class Java.Util.ICollection, class Java.Util.IQueue, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.IBlockingQueue" />
  <TypeSignature Language="F#" Value="type IBlockingQueue = interface&#xA;    interface IQueue&#xA;    interface ICollection&#xA;    interface IIterable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IIterable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.IQueue</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/BlockingQueue", "", "Java.Util.Concurrent.IBlockingQueueInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/BlockingQueue", "", "Java.Util.Concurrent.IBlockingQueueInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "E" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "E" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;E&gt;&lt;E&gt;">the type of elements held in this queue</param>
    <summary>A <c>Queue</c> that additionally supports operations that wait for
            the queue to become non-empty when retrieving an element, and wait
            for space to become available in the queue when storing an element.</summary>
    <remarks>
      <para>A <c>Queue</c> that additionally supports operations that wait for
            the queue to become non-empty when retrieving an element, and wait
            for space to become available in the queue when storing an element.</para>
      <para>
        <c>BlockingQueue</c> methods come in four forms, with different ways
            of handling operations that cannot be satisfied immediately, but may be
            satisfied at some point in the future:
            one throws an exception, the second returns a special value (either
            <c>null</c> or <c>false</c>, depending on the operation), the third
            blocks the current thread indefinitely until the operation can succeed,
            and the fourth blocks for only a given maximum time limit before giving
            up.  These methods are summarized in the following table:
            
            &lt;table class="plain"&gt;
            &lt;caption&gt;Summary of BlockingQueue methods&lt;/caption&gt;
             &lt;tr&gt;
               &lt;td&gt;&lt;/td&gt;
               &lt;th scope="col" style="font-weight:normal; font-style:italic"&gt;Throws exception&lt;/th&gt;
               &lt;th scope="col" style="font-weight:normal; font-style:italic"&gt;Special value&lt;/th&gt;
               &lt;th scope="col" style="font-weight:normal; font-style:italic"&gt;Blocks&lt;/th&gt;
               &lt;th scope="col" style="font-weight:normal; font-style:italic"&gt;Times out&lt;/th&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt;Insert&lt;/th&gt;
               &lt;td&gt;<c>#add(Object) add(e)</c>&lt;/td&gt;
               &lt;td&gt;<c>#offer(Object) offer(e)</c>&lt;/td&gt;
               &lt;td&gt;<c>#put(Object) put(e)</c>&lt;/td&gt;
               &lt;td&gt;<c>#offer(Object, long, TimeUnit) offer(e, time, unit)</c>&lt;/td&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt;Remove&lt;/th&gt;
               &lt;td&gt;<c>#remove() remove()</c>&lt;/td&gt;
               &lt;td&gt;<c>#poll() poll()</c>&lt;/td&gt;
               &lt;td&gt;<c>#take() take()</c>&lt;/td&gt;
               &lt;td&gt;<c>#poll(long, TimeUnit) poll(time, unit)</c>&lt;/td&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt;Examine&lt;/th&gt;
               &lt;td&gt;<c>#element() element()</c>&lt;/td&gt;
               &lt;td&gt;<c>#peek() peek()</c>&lt;/td&gt;
               &lt;td style="font-style: italic"&gt;not applicable&lt;/td&gt;
               &lt;td style="font-style: italic"&gt;not applicable&lt;/td&gt;
             &lt;/tr&gt;
            &lt;/table&gt;</para>
      <para>A <c>BlockingQueue</c> does not accept <c>null</c> elements.
            Implementations throw <c>NullPointerException</c> on attempts
            to <c>add</c>, <c>put</c> or <c>offer</c> a <c>null</c>.  A
            <c>null</c> is used as a sentinel value to indicate failure of
            <c>poll</c> operations.</para>
      <para>A <c>BlockingQueue</c> may be capacity bounded. At any given
            time it may have a <c>remainingCapacity</c> beyond which no
            additional elements can be <c>put</c> without blocking.
            A <c>BlockingQueue</c> without any intrinsic capacity constraints always
            reports a remaining capacity of <c>Integer.MAX_VALUE</c>.</para>
      <para>
        <c>BlockingQueue</c> implementations are designed to be used
            primarily for producer-consumer queues, but additionally support
            the <c>Collection</c> interface.  So, for example, it is
            possible to remove an arbitrary element from a queue using
            <c>remove(x)</c>. However, such operations are in general
            &lt;em&gt;not&lt;/em&gt; performed very efficiently, and are intended for only
            occasional use, such as when a queued message is cancelled.</para>
      <para>
        <c>BlockingQueue</c> implementations are thread-safe.  All
            queuing methods achieve their effects atomically using internal
            locks or other forms of concurrency control. However, the
            &lt;em&gt;bulk&lt;/em&gt; Collection operations <c>addAll</c>,
            <c>containsAll</c>, <c>retainAll</c> and <c>removeAll</c> are
            &lt;em&gt;not&lt;/em&gt; necessarily performed atomically unless specified
            otherwise in an implementation. So it is possible, for example, for
            <c>addAll(c)</c> to fail (throwing an exception) after adding
            only some of the elements in <c>c</c>.</para>
      <para>A <c>BlockingQueue</c> does &lt;em&gt;not&lt;/em&gt; intrinsically support
            any kind of &amp;quot;close&amp;quot; or &amp;quot;shutdown&amp;quot; operation to
            indicate that no more items will be added.  The needs and usage of
            such features tend to be implementation-dependent. For example, a
            common tactic is for producers to insert special
            &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are
            interpreted accordingly when taken by consumers.</para>
      <para>Usage example, based on a typical producer-consumer scenario.
            Note that a <c>BlockingQueue</c> can safely be used with multiple
            producers and multiple consumers.</para>
      <code lang="text/java">{@code
            class Producer implements Runnable {
              private final BlockingQueue queue;
              Producer(BlockingQueue q) { queue = q; }
              public void run() {
                try {
                  while (true) { queue.put(produce()); }
                } catch (InterruptedException ex) { ... handle ...}
              }
              Object produce() { ... }
            }
            
            class Consumer implements Runnable {
              private final BlockingQueue queue;
              Consumer(BlockingQueue q) { queue = q; }
              public void run() {
                try {
                  while (true) { consume(queue.take()); }
                } catch (InterruptedException ex) { ... handle ...}
              }
              void consume(Object x) { ... }
            }
            
            class Setup {
              void main() {
                BlockingQueue q = new SomeQueueImplementation();
                Producer p = new Producer(q);
                Consumer c1 = new Consumer(q);
                Consumer c2 = new Consumer(q);
                new Thread(p).start();
                new Thread(c1).start();
                new Thread(c2).start();
              }
            }}</code>
      <para>Memory consistency effects: As with other concurrent
            collections, actions in a thread prior to placing an object into a
            <c>BlockingQueue</c>&lt;i&gt;happen-before&lt;/i&gt;
            actions subsequent to the access or removal of that element from
            the <c>BlockingQueue</c> in another thread.</para>
      <para>This interface is a member of the
            <see href="https://developer.android.com//java.base/java/util/package-summary.html#CollectionsFramework">
            Java Collections Framework</see>.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (Java.Lang.Object? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Add(class Java.Lang.Object e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Add(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Add : Java.Lang.Object -&gt; bool" Usage="iBlockingQueue.Add e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IQueue.Add(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("add", "(Ljava/lang/Object;)Z", "GetAdd_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("add", "(Ljava/lang/Object;)Z", "GetAdd_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">the element to add</param>
        <summary>Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions, returning
            <c>true</c> upon success and throwing an
            <c>IllegalStateException</c> if no space is currently available.</summary>
        <returns>
          <c>true</c> (as specified by <c>Collection#add</c>)</returns>
        <remarks>
          <para>Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions, returning
            <c>true</c> upon success and throwing an
            <c>IllegalStateException</c> if no space is currently available.
            When using a capacity-restricted queue, it is generally preferable to
            use <c>#offer(Object) offer</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#add(E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.add(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (Java.Lang.Object? o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Contains(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Contains : Java.Lang.Object -&gt; bool" Usage="iBlockingQueue.Contains o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.ICollection.Contains(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("contains", "(Ljava/lang/Object;)Z", "GetContains_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("contains", "(Ljava/lang/Object;)Z", "GetContains_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">object to be checked for containment in this queue</param>
        <summary>Returns <c>true</c> if this queue contains the specified element.</summary>
        <returns>
          <c>true</c> if this queue contains the specified element</returns>
        <remarks>
          <para>Returns <c>true</c> if this queue contains the specified element.
            More formally, returns <c>true</c> if and only if this queue contains
            at least one element <c>e</c> such that <c>o.equals(e)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#contains(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.contains(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.ClassCastException">if the class of the specified element
         is incompatible with this queue
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the specified element is null
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)
</exception>
      </Docs>
    </Member>
    <Member MemberName="DrainTo">
      <MemberSignature Language="C#" Value="public int DrainTo (System.Collections.ICollection? c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DrainTo(class System.Collections.ICollection c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.DrainTo(System.Collections.ICollection)" />
      <MemberSignature Language="F#" Value="abstract member DrainTo : System.Collections.ICollection -&gt; int" Usage="iBlockingQueue.DrainTo c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drainTo", "(Ljava/util/Collection;)I", "GetDrainTo_Ljava_util_Collection_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drainTo", "(Ljava/util/Collection;)I", "GetDrainTo_Ljava_util_Collection_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">the collection to transfer elements into</param>
        <summary>Removes all available elements from this queue and adds them
            to the given collection.</summary>
        <returns>the number of elements transferred</returns>
        <remarks>
          <para>Removes all available elements from this queue and adds them
            to the given collection.  This operation may be more
            efficient than repeatedly polling this queue.  A failure
            encountered while attempting to add elements to
            collection <c>c</c> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <c>IllegalArgumentException</c>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#drainTo(java.util.Collection%3C?%20super%20E%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.drainTo(java.util.Collection&lt;? super E&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrainTo">
      <MemberSignature Language="C#" Value="public int DrainTo (System.Collections.ICollection? c, int maxElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DrainTo(class System.Collections.ICollection c, int32 maxElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.DrainTo(System.Collections.ICollection,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DrainTo : System.Collections.ICollection * int -&gt; int" Usage="iBlockingQueue.DrainTo (c, maxElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drainTo", "(Ljava/util/Collection;I)I", "GetDrainTo_Ljava_util_Collection_IHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drainTo", "(Ljava/util/Collection;I)I", "GetDrainTo_Ljava_util_Collection_IHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
        <Parameter Name="maxElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c">the collection to transfer elements into</param>
        <param name="maxElements">the maximum number of elements to transfer</param>
        <summary>Removes at most the given number of available elements from
            this queue and adds them to the given collection.</summary>
        <returns>the number of elements transferred</returns>
        <remarks>
          <para>Removes at most the given number of available elements from
            this queue and adds them to the given collection.  A failure
            encountered while attempting to add elements to
            collection <c>c</c> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <c>IllegalArgumentException</c>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#drainTo(java.util.Collection%3C?%20super%20E%3E,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.drainTo(java.util.Collection&lt;? super E&gt;, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offer">
      <MemberSignature Language="C#" Value="public bool Offer (Java.Lang.Object? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Offer(class Java.Lang.Object e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Offer(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Offer : Java.Lang.Object -&gt; bool" Usage="iBlockingQueue.Offer e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IQueue.Offer(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("offer", "(Ljava/lang/Object;)Z", "GetOffer_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("offer", "(Ljava/lang/Object;)Z", "GetOffer_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">the element to add</param>
        <summary>Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions, returning
            <c>true</c> upon success and <c>false</c> if no space is currently
            available.</summary>
        <returns>
          <c>true</c> if the element was added to this queue, else
                    <c>false</c></returns>
        <remarks>
          <para>Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions, returning
            <c>true</c> upon success and <c>false</c> if no space is currently
            available.  When using a capacity-restricted queue, this method is
            generally preferable to <c>#add</c>, which can fail to insert an
            element only by throwing an exception.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#offer(E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.offer(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offer">
      <MemberSignature Language="C#" Value="public bool Offer (Java.Lang.Object? e, long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Offer(class Java.Lang.Object e, int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Offer(Java.Lang.Object,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Offer : Java.Lang.Object * int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="iBlockingQueue.Offer (e, timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("offer", "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", "GetOffer_Ljava_lang_Object_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("offer", "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", "GetOffer_Ljava_lang_Object_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="e">the element to add</param>
        <param name="timeout">how long to wait before giving up, in units of
                   <c>unit</c></param>
        <param name="unit">a <c>TimeUnit</c> determining how to interpret the
                   <c>timeout</c> parameter</param>
        <summary>Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for space to become available.</summary>
        <returns>
          <c>true</c> if successful, or <c>false</c> if
                    the specified waiting time elapses before space is available</returns>
        <remarks>
          <para>Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for space to become available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#offer(E,%20long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Poll (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Poll(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Poll : int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Lang.Object" Usage="iBlockingQueue.Poll (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("poll", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetPoll_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("poll", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetPoll_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">how long to wait before giving up, in units of
                   <c>unit</c></param>
        <param name="unit">a <c>TimeUnit</c> determining how to interpret the
                   <c>timeout</c> parameter</param>
        <summary>Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for an element to become available.</summary>
        <returns>the head of this queue, or <c>null</c> if the
                    specified waiting time elapses before an element is available</returns>
        <remarks>
          <para>Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for an element to become available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#poll(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.poll(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public void Put (Java.Lang.Object? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Put(class Java.Lang.Object e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Put(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Put : Java.Lang.Object -&gt; unit" Usage="iBlockingQueue.Put e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(Ljava/lang/Object;)V", "GetPut_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(Ljava/lang/Object;)V", "GetPut_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">the element to add</param>
        <summary>Inserts the specified element into this queue, waiting if necessary
            for space to become available.</summary>
        <remarks>
          <para>Inserts the specified element into this queue, waiting if necessary
            for space to become available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#put(E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.put(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemainingCapacity">
      <MemberSignature Language="C#" Value="public int RemainingCapacity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 RemainingCapacity() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.RemainingCapacity" />
      <MemberSignature Language="F#" Value="abstract member RemainingCapacity : unit -&gt; int" Usage="iBlockingQueue.RemainingCapacity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("remainingCapacity", "()I", "GetRemainingCapacityHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("remainingCapacity", "()I", "GetRemainingCapacityHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of additional elements that this queue can ideally
            (in the absence of memory or resource constraints) accept without
            blocking, or <c>Integer.MAX_VALUE</c> if there is no intrinsic
            limit.</summary>
        <returns>the remaining capacity</returns>
        <remarks>
          <para>Returns the number of additional elements that this queue can ideally
            (in the absence of memory or resource constraints) accept without
            blocking, or <c>Integer.MAX_VALUE</c> if there is no intrinsic
            limit.</para>
          <para>Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert
            an element will succeed by inspecting <c>remainingCapacity</c>
            because it may be the case that another thread is about to
            insert or remove an element.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#remainingCapacity()" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.remainingCapacity()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (Java.Lang.Object? o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Remove(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Remove : Java.Lang.Object -&gt; bool" Usage="iBlockingQueue.Remove o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.ICollection.Remove(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("remove", "(Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("remove", "(Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Handler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">element to be removed from this queue, if present</param>
        <summary>Removes a single instance of the specified element from this queue,
            if it is present.</summary>
        <returns>
          <c>true</c> if this queue changed as a result of the call</returns>
        <remarks>
          <para>Removes a single instance of the specified element from this queue,
            if it is present.  More formally, removes an element <c>e</c> such
            that <c>o.equals(e)</c>, if this queue contains one or more such
            elements.
            Returns <c>true</c> if this queue contained the specified element
            (or equivalently, if this queue changed as a result of the call).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#remove(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.remove(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.ClassCastException">if the class of the specified element
         is incompatible with this queue
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the specified element is null
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Take ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Take() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IBlockingQueue.Take" />
      <MemberSignature Language="F#" Value="abstract member Take : unit -&gt; Java.Lang.Object" Usage="iBlockingQueue.Take " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("take", "()Ljava/lang/Object;", "GetTakeHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("take", "()Ljava/lang/Object;", "GetTakeHandler:Java.Util.Concurrent.IBlockingQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.</summary>
        <returns>the head of this queue</returns>
        <remarks>
          <para>Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/BlockingQueue#take()" title="Reference documentation">Java documentation for <code>java.util.concurrent.BlockingQueue.take()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
