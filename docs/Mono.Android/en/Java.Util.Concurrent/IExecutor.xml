<Type Name="IExecutor" FullName="Java.Util.Concurrent.IExecutor">
  <TypeSignature Language="C#" Value="public interface IExecutor : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IExecutor implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.IExecutor" />
  <TypeSignature Language="F#" Value="type IExecutor = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/Executor", "", "Java.Util.Concurrent.IExecutorInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/Executor", "", "Java.Util.Concurrent.IExecutorInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An object that executes submitted <c>Runnable</c> tasks.</summary>
    <remarks>
      <para>An object that executes submitted <c>Runnable</c> tasks. This
            interface provides a way of decoupling task submission from the
            mechanics of how each task will be run, including details of thread
            use, scheduling, etc.  An <c>Executor</c> is normally used
            instead of explicitly creating threads. For example, rather than
            invoking <c>new Thread(new RunnableTask()).start()</c> for each
            of a set of tasks, you might use:</para>
      <code lang="text/java">{@code
            Executor executor = anExecutor();
            executor.execute(new RunnableTask1());
            executor.execute(new RunnableTask2());
            ...}</code>
      <para>However, the <c>Executor</c> interface does not strictly require
            that execution be asynchronous. In the simplest case, an executor
            can run the submitted task immediately in the caller's thread:</para>
      <code lang="text/java">{@code
            class DirectExecutor implements Executor {
              public void execute(Runnable r) {
                r.run();
              }
            }}</code>
      <para>More typically, tasks are executed in some thread other than the
            caller's thread.  The executor below spawns a new thread for each
            task.</para>
      <code lang="text/java">{@code
            class ThreadPerTaskExecutor implements Executor {
              public void execute(Runnable r) {
                new Thread(r).start();
              }
            }}</code>
      <para>Many <c>Executor</c> implementations impose some sort of
            limitation on how and when tasks are scheduled.  The executor below
            serializes the submission of tasks to a second executor,
            illustrating a composite executor.</para>
      <code lang="text/java">{@code
            class SerialExecutor implements Executor {
              final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;&gt;();
              final Executor executor;
              Runnable active;
            
              SerialExecutor(Executor executor) {
                this.executor = executor;
              }
            
              public synchronized void execute(Runnable r) {
                tasks.add(() -&gt; {
                  try {
                    r.run();
                  } finally {
                    scheduleNext();
                  }
                });
                if (active == null) {
                  scheduleNext();
                }
              }
            
              protected synchronized void scheduleNext() {
                if ((active = tasks.poll()) != null) {
                  executor.execute(active);
                }
              }
            }}</code>
      <para>The <c>Executor</c> implementations provided in this package
            implement <c>ExecutorService</c>, which is a more extensive
            interface.  The <c>ThreadPoolExecutor</c> class provides an
            extensible thread pool implementation. The <c>Executors</c> class
            provides convenient factory methods for these Executors.</para>
      <para>Memory consistency effects: Actions in a thread prior to
            submitting a <c>Runnable</c> object to an <c>Executor</c>&lt;i&gt;happen-before&lt;/i&gt;
            its execution begins, perhaps in another thread.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/Executor" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executor</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (Java.Lang.IRunnable? command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Java.Lang.IRunnable command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IExecutor.Execute(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="abstract member Execute : Java.Lang.IRunnable -&gt; unit" Usage="iExecutor.Execute command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler:Java.Util.Concurrent.IExecutorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler:Java.Util.Concurrent.IExecutorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="command">the runnable task</param>
        <summary>Executes the given command at some time in the future.</summary>
        <remarks>
          <para>Executes the given command at some time in the future.  The command
            may execute in a new thread, in a pooled thread, or in the calling
            thread, at the discretion of the <c>Executor</c> implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Executor#execute(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Executor.execute(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">if this task cannot be
 accepted for execution</exception>
        <exception cref="T:Java.Lang.NullPointerException">if command is null
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
