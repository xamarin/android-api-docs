<Type Name="IConcurrentMap" FullName="Java.Util.Concurrent.IConcurrentMap">
  <TypeSignature Language="C#" Value="public interface IConcurrentMap : IDisposable, Java.Interop.IJavaPeerable, Java.Util.IMap" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConcurrentMap implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Util.IMap, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.IConcurrentMap" />
  <TypeSignature Language="F#" Value="type IConcurrentMap = interface&#xA;    interface IMap&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.IMap</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/ConcurrentMap", "", "Java.Util.Concurrent.IConcurrentMapInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/ConcurrentMap", "", "Java.Util.Concurrent.IConcurrentMapInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "K", "V" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "K", "V" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;K&gt;&lt;K&gt;">the type of keys maintained by this map</param>
    <param name="&lt;V&gt;&lt;V&gt;">the type of mapped values</param>
    <summary>A <c>java.util.Map</c> providing thread safety and atomicity
            guarantees.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Java.Util.IMap.Compute">
      <MemberSignature Language="C#" Value=" override sealed Java.Lang.Object? IMap.Compute (Java.Lang.Object? key, Java.Util.Functions.IBiFunction? remappingFunction);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance class Java.Lang.Object Java.Util.IMap.Compute(class Java.Lang.Object key, class Java.Util.Functions.IBiFunction remappingFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#Compute(Java.Lang.Object,Java.Util.Functions.IBiFunction)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.Compute : Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object&#xA;override this.Java.Util.IMap.Compute : Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object" Usage="iConcurrentMap.Java.Util.IMap.Compute (key, remappingFunction)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.Compute(Java.Lang.Object,Java.Util.Functions.IBiFunction)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetCompute_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetCompute_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="remappingFunction" Type="Java.Util.Functions.IBiFunction" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="remappingFunction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.ComputeIfAbsent">
      <MemberSignature Language="C#" Value=" override sealed Java.Lang.Object? IMap.ComputeIfAbsent (Java.Lang.Object? key, Java.Util.Functions.IFunction? mappingFunction);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance class Java.Lang.Object Java.Util.IMap.ComputeIfAbsent(class Java.Lang.Object key, class Java.Util.Functions.IFunction mappingFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#ComputeIfAbsent(Java.Lang.Object,Java.Util.Functions.IFunction)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.ComputeIfAbsent : Java.Lang.Object * Java.Util.Functions.IFunction -&gt; Java.Lang.Object&#xA;override this.Java.Util.IMap.ComputeIfAbsent : Java.Lang.Object * Java.Util.Functions.IFunction -&gt; Java.Lang.Object" Usage="iConcurrentMap.Java.Util.IMap.ComputeIfAbsent (key, mappingFunction)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.ComputeIfAbsent(Java.Lang.Object,Java.Util.Functions.IFunction)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", "GetComputeIfAbsent_Ljava_lang_Object_Ljava_util_function_Function_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;", "GetComputeIfAbsent_Ljava_lang_Object_Ljava_util_function_Function_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="mappingFunction" Type="Java.Util.Functions.IFunction" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="mappingFunction">To be added.</param>
        <summary>[TODO: @inheritDoc]</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#computeIfAbsent(java.lang.Object,%20java.util.function.Function)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.computeIfAbsent(java.lang.Object, java.util.function.Function)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.ComputeIfPresent">
      <MemberSignature Language="C#" Value=" override sealed Java.Lang.Object? IMap.ComputeIfPresent (Java.Lang.Object? key, Java.Util.Functions.IBiFunction? remappingFunction);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance class Java.Lang.Object Java.Util.IMap.ComputeIfPresent(class Java.Lang.Object key, class Java.Util.Functions.IBiFunction remappingFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#ComputeIfPresent(Java.Lang.Object,Java.Util.Functions.IBiFunction)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.ComputeIfPresent : Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object&#xA;override this.Java.Util.IMap.ComputeIfPresent : Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object" Usage="iConcurrentMap.Java.Util.IMap.ComputeIfPresent (key, remappingFunction)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.ComputeIfPresent(Java.Lang.Object,Java.Util.Functions.IBiFunction)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetComputeIfPresent_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetComputeIfPresent_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="remappingFunction" Type="Java.Util.Functions.IBiFunction" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="remappingFunction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.ForEach">
      <MemberSignature Language="C#" Value=" override sealed void IMap.ForEach (Java.Util.Functions.IBiConsumer? action);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance void Java.Util.IMap.ForEach(class Java.Util.Functions.IBiConsumer action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#ForEach(Java.Util.Functions.IBiConsumer)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.ForEach : Java.Util.Functions.IBiConsumer -&gt; unit&#xA;override this.Java.Util.IMap.ForEach : Java.Util.Functions.IBiConsumer -&gt; unit" Usage="iConcurrentMap.Java.Util.IMap.ForEach action" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.ForEach(Java.Util.Functions.IBiConsumer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("forEach", "(Ljava/util/function/BiConsumer;)V", "GetForEach_Ljava_util_function_BiConsumer_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("forEach", "(Ljava/util/function/BiConsumer;)V", "GetForEach_Ljava_util_function_BiConsumer_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IBiConsumer" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.GetOrDefault">
      <MemberSignature Language="C#" Value=" override sealed Java.Lang.Object? IMap.GetOrDefault (Java.Lang.Object? key, Java.Lang.Object? defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance class Java.Lang.Object Java.Util.IMap.GetOrDefault(class Java.Lang.Object key, class Java.Lang.Object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#GetOrDefault(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.GetOrDefault : Java.Lang.Object * Java.Lang.Object -&gt; Java.Lang.Object&#xA;override this.Java.Util.IMap.GetOrDefault : Java.Lang.Object * Java.Lang.Object -&gt; Java.Lang.Object" Usage="iConcurrentMap.Java.Util.IMap.GetOrDefault (key, defaultValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.GetOrDefault(Java.Lang.Object,Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetGetOrDefault_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetGetOrDefault_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="defaultValue" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="defaultValue">To be added.</param>
        <summary>[TODO: @inheritDoc]</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#getOrDefault(java.lang.Object,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.getOrDefault(java.lang.Object, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.Merge">
      <MemberSignature Language="C#" Value=" override sealed Java.Lang.Object? IMap.Merge (Java.Lang.Object? key, Java.Lang.Object? value, Java.Util.Functions.IBiFunction? remappingFunction);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance class Java.Lang.Object Java.Util.IMap.Merge(class Java.Lang.Object key, class Java.Lang.Object value, class Java.Util.Functions.IBiFunction remappingFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#Merge(Java.Lang.Object,Java.Lang.Object,Java.Util.Functions.IBiFunction)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.Merge : Java.Lang.Object * Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object&#xA;override this.Java.Util.IMap.Merge : Java.Lang.Object * Java.Lang.Object * Java.Util.Functions.IBiFunction -&gt; Java.Lang.Object" Usage="iConcurrentMap.Java.Util.IMap.Merge (key, value, remappingFunction)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.Merge(Java.Lang.Object,Java.Lang.Object,Java.Util.Functions.IBiFunction)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetMerge_Ljava_lang_Object_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;", "GetMerge_Ljava_lang_Object_Ljava_lang_Object_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="value" Type="Java.Lang.Object" />
        <Parameter Name="remappingFunction" Type="Java.Util.Functions.IBiFunction" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <param name="remappingFunction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IMap.ReplaceAll">
      <MemberSignature Language="C#" Value=" override sealed void IMap.ReplaceAll (Java.Util.Functions.IBiFunction? function);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance void Java.Util.IMap.ReplaceAll(class Java.Util.Functions.IBiFunction function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Java#Util#IMap#ReplaceAll(Java.Util.Functions.IBiFunction)" />
      <MemberSignature Language="F#" Value="abstract member Java.Util.IMap.ReplaceAll : Java.Util.Functions.IBiFunction -&gt; unit&#xA;override this.Java.Util.IMap.ReplaceAll : Java.Util.Functions.IBiFunction -&gt; unit" Usage="iConcurrentMap.Java.Util.IMap.ReplaceAll function" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.ReplaceAll(Java.Util.Functions.IBiFunction)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replaceAll", "(Ljava/util/function/BiFunction;)V", "GetReplaceAll_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replaceAll", "(Ljava/util/function/BiFunction;)V", "GetReplaceAll_Ljava_util_function_BiFunction_Handler:Java.Util.Concurrent.IConcurrentMap, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Java.Util.Functions.IBiFunction" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PutIfAbsent">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? PutIfAbsent (Java.Lang.Object? key, Java.Lang.Object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object PutIfAbsent(class Java.Lang.Object key, class Java.Lang.Object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.PutIfAbsent(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member PutIfAbsent : Java.Lang.Object * Java.Lang.Object -&gt; Java.Lang.Object" Usage="iConcurrentMap.PutIfAbsent (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.PutIfAbsent(Java.Lang.Object,Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetPutIfAbsent_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetPutIfAbsent_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">key with which the specified value is to be associated</param>
        <param name="value">value to be associated with the specified key</param>
        <summary>If the specified key is not already associated
            with a value, associates it with the given value.</summary>
        <returns>the previous value associated with the specified key, or
                    <c>null</c> if there was no mapping for the key.
                    (A <c>null</c> return can also indicate that the map
                    previously associated <c>null</c> with the key,
                    if the implementation supports null values.)</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#putIfAbsent(java.lang.Object,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Object, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (Java.Lang.Object? key, Java.Lang.Object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class Java.Lang.Object key, class Java.Lang.Object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Remove(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Remove : Java.Lang.Object * Java.Lang.Object -&gt; bool" Usage="iConcurrentMap.Remove (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.Remove(Java.Lang.Object,Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">key with which the specified value is associated</param>
        <param name="value">value expected to be associated with the specified key</param>
        <summary>Removes the entry for a key only if currently mapped to a given value.</summary>
        <returns>
          <c>true</c> if the value was removed</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#remove(java.lang.Object,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.remove(java.lang.Object, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if the <c>remove</c> operation
         is not supported by this map</exception>
        <exception cref="T:Java.Lang.ClassCastException">if the key or value is of an inappropriate
         type for this map
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the specified key or value is null,
         and this map does not permit null keys or values
         (<format type="text/html"><a href="http://developer.android.com/reference/../Collection.html#optional-restrictions">optional</a></format>)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Replace (Java.Lang.Object? key, Java.Lang.Object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Replace(class Java.Lang.Object key, class Java.Lang.Object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Replace(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Replace : Java.Lang.Object * Java.Lang.Object -&gt; Java.Lang.Object" Usage="iConcurrentMap.Replace (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.Replace(Java.Lang.Object,Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetReplace_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetReplace_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">key with which the specified value is associated</param>
        <param name="value">value to be associated with the specified key</param>
        <summary>Replaces the entry for a key only if currently mapped to some value.</summary>
        <returns>the previous value associated with the specified key, or
                    <c>null</c> if there was no mapping for the key.
                    (A <c>null</c> return can also indicate that the map
                    previously associated <c>null</c> with the key,
                    if the implementation supports null values.)</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#replace(java.lang.Object,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.replace(java.lang.Object, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (Java.Lang.Object? key, Java.Lang.Object? oldValue, Java.Lang.Object? newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Replace(class Java.Lang.Object key, class Java.Lang.Object oldValue, class Java.Lang.Object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IConcurrentMap.Replace(Java.Lang.Object,Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Replace : Java.Lang.Object * Java.Lang.Object * Java.Lang.Object -&gt; bool" Usage="iConcurrentMap.Replace (key, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.IMap.Replace(Java.Lang.Object,Java.Lang.Object,Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", "GetReplace_Ljava_lang_Object_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", "GetReplace_Ljava_lang_Object_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.Concurrent.IConcurrentMapInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Lang.Object" />
        <Parameter Name="oldValue" Type="Java.Lang.Object" />
        <Parameter Name="newValue" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="key">key with which the specified value is associated</param>
        <param name="oldValue">value expected to be associated with the specified key</param>
        <param name="newValue">value to be associated with the specified key</param>
        <summary>Replaces the entry for a key only if currently mapped to a given value.</summary>
        <returns>
          <c>true</c> if the value was replaced</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ConcurrentMap#replace(java.lang.Object,%20java.lang.Object,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ConcurrentMap.replace(java.lang.Object, java.lang.Object, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
