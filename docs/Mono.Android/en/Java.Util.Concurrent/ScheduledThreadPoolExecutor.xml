<Type Name="ScheduledThreadPoolExecutor" FullName="Java.Util.Concurrent.ScheduledThreadPoolExecutor">
  <TypeSignature Language="C#" Value="public class ScheduledThreadPoolExecutor : Java.Util.Concurrent.ThreadPoolExecutor, IDisposable, Java.Interop.IJavaPeerable, Java.Util.Concurrent.IScheduledExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScheduledThreadPoolExecutor extends Java.Util.Concurrent.ThreadPoolExecutor implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Util.Concurrent.IExecutor, class Java.Util.Concurrent.IExecutorService, class Java.Util.Concurrent.IScheduledExecutorService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.ScheduledThreadPoolExecutor" />
  <TypeSignature Language="F#" Value="type ScheduledThreadPoolExecutor = class&#xA;    inherit ThreadPoolExecutor&#xA;    interface IScheduledExecutorService&#xA;    interface IExecutorService&#xA;    interface IExecutor&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.ThreadPoolExecutor</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IExecutor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IExecutorService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IScheduledExecutorService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/ScheduledThreadPoolExecutor", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/ScheduledThreadPoolExecutor", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>ThreadPoolExecutor</c> that can additionally schedule
            commands to run after a given delay, or to execute periodically.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ScheduledThreadPoolExecutor : int -&gt; Java.Util.Concurrent.ScheduledThreadPoolExecutor" Usage="new Java.Util.Concurrent.ScheduledThreadPoolExecutor corePoolSize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
            given core pool size.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IRejectedExecutionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.#ctor(System.Int32,Java.Util.Concurrent.IRejectedExecutionHandler)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ScheduledThreadPoolExecutor : int * Java.Util.Concurrent.IRejectedExecutionHandler -&gt; Java.Util.Concurrent.ScheduledThreadPoolExecutor" Usage="new Java.Util.Concurrent.ScheduledThreadPoolExecutor (corePoolSize, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/RejectedExecutionHandler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/RejectedExecutionHandler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
            given core pool size.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>handler</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IThreadFactory? threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.#ctor(System.Int32,Java.Util.Concurrent.IThreadFactory)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ScheduledThreadPoolExecutor : int * Java.Util.Concurrent.IThreadFactory -&gt; Java.Util.Concurrent.ScheduledThreadPoolExecutor" Usage="new Java.Util.Concurrent.ScheduledThreadPoolExecutor (corePoolSize, threadFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="threadFactory">To be added.</param>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
            given core pool size.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>threadFactory</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ScheduledThreadPoolExecutor (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ScheduledThreadPoolExecutor : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.ScheduledThreadPoolExecutor" Usage="new Java.Util.Concurrent.ScheduledThreadPoolExecutor (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IThreadFactory? threadFactory, Java.Util.Concurrent.IRejectedExecutionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.#ctor(System.Int32,Java.Util.Concurrent.IThreadFactory,Java.Util.Concurrent.IRejectedExecutionHandler)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ScheduledThreadPoolExecutor : int * Java.Util.Concurrent.IThreadFactory * Java.Util.Concurrent.IRejectedExecutionHandler -&gt; Java.Util.Concurrent.ScheduledThreadPoolExecutor" Usage="new Java.Util.Concurrent.ScheduledThreadPoolExecutor (corePoolSize, threadFactory, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="threadFactory">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="corePoolSize">the number of threads to keep in the pool, even
                   if they are idle, unless <c>allowCoreThreadTimeOut</c> is set</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
            given core pool size.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>threadFactory</c> or
         <c>handler</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueExistingPeriodicTasksAfterShutdownPolicy">
      <MemberSignature Language="C#" Value="public virtual bool ContinueExistingPeriodicTasksAfterShutdownPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      <MemberSignature Language="F#" Value="member this.ContinueExistingPeriodicTasksAfterShutdownPolicy : bool with get, set" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getContinueExistingPeriodicTasksAfterShutdownPolicy", "()Z", "GetGetContinueExistingPeriodicTasksAfterShutdownPolicyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getContinueExistingPeriodicTasksAfterShutdownPolicy", "()Z", "GetGetContinueExistingPeriodicTasksAfterShutdownPolicyHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setContinueExistingPeriodicTasksAfterShutdownPolicy", "(Z)V", "GetSetContinueExistingPeriodicTasksAfterShutdownPolicy_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setContinueExistingPeriodicTasksAfterShutdownPolicy", "(Z)V", "GetSetContinueExistingPeriodicTasksAfterShutdownPolicy_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="value">if <c>true</c>, continue after shutdown, else don't</param>
        <summary>Gets the policy on whether to continue executing existing
            periodic tasks even when this executor has been <c>shutdown</c>. -or- Sets the policy on whether to continue executing existing
            periodic tasks even when this executor has been <c>shutdown</c>.</summary>
        <value>
          <c>true</c> if will continue after shutdown</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      </Docs>
    </Member>
    <Member MemberName="DecorateTask">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.IRunnableScheduledFuture? DecorateTask (Java.Lang.IRunnable? runnable, Java.Util.Concurrent.IRunnableScheduledFuture? task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask(class Java.Lang.IRunnable runnable, class Java.Util.Concurrent.IRunnableScheduledFuture task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.DecorateTask(Java.Lang.IRunnable,Java.Util.Concurrent.IRunnableScheduledFuture)" />
      <MemberSignature Language="F#" Value="abstract member DecorateTask : Java.Lang.IRunnable * Java.Util.Concurrent.IRunnableScheduledFuture -&gt; Java.Util.Concurrent.IRunnableScheduledFuture&#xA;override this.DecorateTask : Java.Lang.IRunnable * Java.Util.Concurrent.IRunnableScheduledFuture -&gt; Java.Util.Concurrent.IRunnableScheduledFuture" Usage="scheduledThreadPoolExecutor.DecorateTask (runnable, task)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("decorateTask", "(Ljava/lang/Runnable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_lang_Runnable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("decorateTask", "(Ljava/lang/Runnable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_lang_Runnable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IRunnableScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="task" Type="Java.Util.Concurrent.IRunnableScheduledFuture" />
      </Parameters>
      <Docs>
        <param name="runnable">the submitted Runnable</param>
        <param name="task">the task created to execute the runnable</param>
        <param name="&lt;V&gt;&lt;V&gt;">the type of the task's result</param>
        <summary>Modifies or replaces the task used to execute a runnable.</summary>
        <returns>a task that can execute the runnable</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#decorateTask(java.lang.Runnable,%20java.util.concurrent.RunnableScheduledFuture)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecorateTask">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.IRunnableScheduledFuture? DecorateTask (Java.Util.Concurrent.ICallable? callable, Java.Util.Concurrent.IRunnableScheduledFuture? task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask(class Java.Util.Concurrent.ICallable callable, class Java.Util.Concurrent.IRunnableScheduledFuture task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.DecorateTask(Java.Util.Concurrent.ICallable,Java.Util.Concurrent.IRunnableScheduledFuture)" />
      <MemberSignature Language="F#" Value="abstract member DecorateTask : Java.Util.Concurrent.ICallable * Java.Util.Concurrent.IRunnableScheduledFuture -&gt; Java.Util.Concurrent.IRunnableScheduledFuture&#xA;override this.DecorateTask : Java.Util.Concurrent.ICallable * Java.Util.Concurrent.IRunnableScheduledFuture -&gt; Java.Util.Concurrent.IRunnableScheduledFuture" Usage="scheduledThreadPoolExecutor.DecorateTask (callable, task)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("decorateTask", "(Ljava/util/concurrent/Callable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_util_concurrent_Callable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("decorateTask", "(Ljava/util/concurrent/Callable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_util_concurrent_Callable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IRunnableScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
        <Parameter Name="task" Type="Java.Util.Concurrent.IRunnableScheduledFuture" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <param name="runnable">the submitted Runnable</param>
        <param name="task">the task created to execute the runnable</param>
        <param name="&lt;V&gt;&lt;V&gt;">the type of the task's result</param>
        <summary>Modifies or replaces the task used to execute a runnable.</summary>
        <returns>a task that can execute the runnable</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#decorateTask(java.lang.Runnable,%20java.util.concurrent.RunnableScheduledFuture)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteExistingDelayedTasksAfterShutdownPolicy">
      <MemberSignature Language="C#" Value="public virtual bool ExecuteExistingDelayedTasksAfterShutdownPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      <MemberSignature Language="F#" Value="member this.ExecuteExistingDelayedTasksAfterShutdownPolicy : bool with get, set" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getExecuteExistingDelayedTasksAfterShutdownPolicy", "()Z", "GetGetExecuteExistingDelayedTasksAfterShutdownPolicyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getExecuteExistingDelayedTasksAfterShutdownPolicy", "()Z", "GetGetExecuteExistingDelayedTasksAfterShutdownPolicyHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setExecuteExistingDelayedTasksAfterShutdownPolicy", "(Z)V", "GetSetExecuteExistingDelayedTasksAfterShutdownPolicy_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setExecuteExistingDelayedTasksAfterShutdownPolicy", "(Z)V", "GetSetExecuteExistingDelayedTasksAfterShutdownPolicy_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="value">if <c>true</c>, execute after shutdown, else don't</param>
        <summary>Gets the policy on whether to execute existing delayed
            tasks even when this executor has been <c>shutdown</c>. -or- Sets the policy on whether to execute existing delayed
            tasks even when this executor has been <c>shutdown</c>.</summary>
        <value>
          <c>true</c> if will execute after shutdown</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnCancelPolicy">
      <MemberSignature Language="C#" Value="public virtual bool RemoveOnCancelPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemoveOnCancelPolicy" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
      <MemberSignature Language="F#" Value="member this.RemoveOnCancelPolicy : bool with get, set" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRemoveOnCancelPolicy", "()Z", "GetGetRemoveOnCancelPolicyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRemoveOnCancelPolicy", "()Z", "GetGetRemoveOnCancelPolicyHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setRemoveOnCancelPolicy", "(Z)V", "GetSetRemoveOnCancelPolicy_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setRemoveOnCancelPolicy", "(Z)V", "GetSetRemoveOnCancelPolicy_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="value">if <c>true</c>, remove on cancellation, else don't</param>
        <summary>Gets the policy on whether cancelled tasks should be immediately
            removed from the work queue at time of cancellation. -or- Sets the policy on whether cancelled tasks should be immediately
            removed from the work queue at time of cancellation.</summary>
        <value>
          <c>true</c> if cancelled tasks are immediately removed
                    from the queue</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture? Schedule (Java.Lang.IRunnable? command, long delay, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture Schedule(class Java.Lang.IRunnable command, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.Schedule(Java.Lang.IRunnable,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Lang.IRunnable * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture&#xA;override this.Schedule : Java.Lang.IRunnable * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture" Usage="scheduledThreadPoolExecutor.Schedule (command, delay, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IScheduledExecutorService.Schedule(Java.Lang.IRunnable,System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_lang_Runnable_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_lang_Runnable_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="delay">the time from now to delay execution</param>
        <param name="unit">the time unit of the delay parameter</param>
        <summary>Creates and executes a one-shot action that becomes enabled
 after the given delay.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#schedule(java.lang.Runnable,%20long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture? Schedule (Java.Util.Concurrent.ICallable? callable, long delay, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture Schedule(class Java.Util.Concurrent.ICallable callable, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.Schedule(Java.Util.Concurrent.ICallable,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Util.Concurrent.ICallable * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture&#xA;override this.Schedule : Java.Util.Concurrent.ICallable * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture" Usage="scheduledThreadPoolExecutor.Schedule (callable, delay, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IScheduledExecutorService.Schedule(Java.Util.Concurrent.ICallable,System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_util_concurrent_Callable_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_util_concurrent_Callable_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <param name="delay">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#schedule(java.lang.Runnable,%20long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture? ScheduleAtFixedRate (Java.Lang.IRunnable? command, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture ScheduleAtFixedRate(class Java.Lang.IRunnable command, int64 initialDelay, int64 period, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ScheduleAtFixedRate(Java.Lang.IRunnable,System.Int64,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleAtFixedRate : Java.Lang.IRunnable * int64 * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture&#xA;override this.ScheduleAtFixedRate : Java.Lang.IRunnable * int64 * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture" Usage="scheduledThreadPoolExecutor.ScheduleAtFixedRate (command, initialDelay, period, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IScheduledExecutorService.ScheduleAtFixedRate(Java.Lang.IRunnable,System.Int64,System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleAtFixedRate_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleAtFixedRate_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="initialDelay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="initialDelay">the time to delay first execution</param>
        <param name="period">the period between successive executions</param>
        <param name="unit">the time unit of the initialDelay and period parameters</param>
        <summary ToolPath="TrimmedButTooLong" tool="FirstSentenceInLongSummaries">To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#scheduleAtFixedRate(java.lang.Runnable,%20long,%20long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleWithFixedDelay">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture? ScheduleWithFixedDelay (Java.Lang.IRunnable? command, long initialDelay, long delay, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture ScheduleWithFixedDelay(class Java.Lang.IRunnable command, int64 initialDelay, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ScheduleWithFixedDelay(Java.Lang.IRunnable,System.Int64,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleWithFixedDelay : Java.Lang.IRunnable * int64 * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture&#xA;override this.ScheduleWithFixedDelay : Java.Lang.IRunnable * int64 * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.IScheduledFuture" Usage="scheduledThreadPoolExecutor.ScheduleWithFixedDelay (command, initialDelay, delay, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.IScheduledExecutorService.ScheduleWithFixedDelay(Java.Lang.IRunnable,System.Int64,System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scheduleWithFixedDelay", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleWithFixedDelay_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scheduleWithFixedDelay", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleWithFixedDelay_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="initialDelay" Type="System.Int64" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="initialDelay">the time to delay first execution</param>
        <param name="delay">the delay between the termination of one
 execution and the commencement of the next</param>
        <param name="unit">the time unit of the initialDelay and delay parameters</param>
        <summary ToolPath="TrimmedButTooLong" tool="FirstSentenceInLongSummaries">To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor#scheduleWithFixedDelay(java.lang.Runnable,%20long,%20long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.ScheduledThreadPoolExecutor.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
