<Type Name="ScheduledThreadPoolExecutor" FullName="Java.Util.Concurrent.ScheduledThreadPoolExecutor">
  <TypeSignature Language="C#" Value="public class ScheduledThreadPoolExecutor : Java.Util.Concurrent.ThreadPoolExecutor, IDisposable, Java.Util.Concurrent.IScheduledExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScheduledThreadPoolExecutor extends Java.Util.Concurrent.ThreadPoolExecutor implements class Android.Runtime.IJavaObject, class Java.Util.Concurrent.IExecutor, class Java.Util.Concurrent.IExecutorService, class Java.Util.Concurrent.IScheduledExecutorService, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.ThreadPoolExecutor</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IScheduledExecutorService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ScheduledThreadPoolExecutor", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c> that can additionally schedule
 commands to run after a given delay, or to execute periodically.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c> that can additionally schedule
 commands to run after a given delay, or to execute periodically.
 This class is preferable to <c><see cref="T:Java.Util.Timer" /></c> when multiple
 worker threads are needed, or when the additional flexibility or
 capabilities of <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c> (which this class
 extends) are required.

 </para>
      <para tool="javadoc-to-mdoc">Delayed tasks execute no sooner than they are enabled, but
 without any real-time guarantees about when, after they are
 enabled, they will commence. Tasks scheduled for exactly the same
 execution time are enabled in first-in-first-out (FIFO) order of
 submission.

 </para>
      <para tool="javadoc-to-mdoc">When a submitted task is cancelled before it is run, execution
 is suppressed. By default, such a cancelled task is not
 automatically removed from the work queue until its delay
 elapses. While this enables further inspection and monitoring, it
 may also cause unbounded retention of cancelled tasks.

 </para>
      <para tool="javadoc-to-mdoc">Successive executions of a periodic task scheduled via
 <c><see cref="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ScheduleAtFixedRate(Java.Lang.IRunnable,System.Int64,System.Int64,System.Int64)" /></c> or
 <c><see cref="M:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ScheduleWithFixedDelay(Java.Lang.IRunnable,System.Int64,System.Int64,System.Int64)" /></c> do not overlap. While different
 executions may be performed by different threads, the effects of
 prior executions 
 those of subsequent ones.

 </para>
      <para tool="javadoc-to-mdoc">While this class inherits from <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c>, a few
 of the inherited tuning methods are not useful for it. In
 particular, because it acts as a fixed-sized pool using
 <c>corePoolSize</c> threads and an unbounded queue, adjustments
 to <c>maximumPoolSize</c> have no useful effect. Additionally, it
 is almost never a good idea to set <c>corePoolSize</c> to zero or
 use <c>allowCoreThreadTimeOut</c> because this may leave the pool
 without threads to handle tasks once they become eligible to run.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Extension notes:</b>
        </format> This class overrides the
 <c><see cref="M:Java.Util.Concurrent.ThreadPoolExecutor.Execute(Java.Lang.IRunnable)" /></c> and
 <c><see cref="M:Java.Util.Concurrent.AbstractExecutorService.Submit(Java.Lang.IRunnable)" /></c>
 methods to generate internal <c><see cref="T:Java.Util.Concurrent.IScheduledFuture" /></c> objects to
 control per-task delays and scheduling.  To preserve
 functionality, any further overrides of these methods in
 subclasses must invoke superclass versions, which effectively
 disables additional task customization.  However, this class
 provides alternative protected extension method
 <c>decorateTask</c> (one version each for <c>Runnable</c> and
 <c>Callable</c>) that can be used to customize the concrete task
 types used to execute commands entered via <c>execute</c>,
 <c>submit</c>, <c>schedule</c>, <c>scheduleAtFixedRate</c>,
 and <c>scheduleWithFixedDelay</c>.  By default, a
 <c>ScheduledThreadPoolExecutor</c> uses a task type extending
 <c><see cref="T:Java.Util.Concurrent.FutureTask" /></c>. However, this may be modified or replaced using
 subclasses of the form:

  <example><code lang="java">public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {

   static class CustomTask implements RunnableScheduledFuture { ... 

   protected  RunnableScheduledFuture decorateTask(
                Runnable r, RunnableScheduledFuture task) {
       return new CustomTask(r, task);
   }

   protected  RunnableScheduledFuture decorateTask(
                Callable c, RunnableScheduledFuture task) {
       return new CustomTask(c, task);
   }
   // ... add constructors, etc.
 }}</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">To be added.</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given core pool size.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given core pool size.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IRejectedExecutionHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/RejectedExecutionHandler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int, java.util.concurrent.RejectedExecutionHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>handler</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IThreadFactory threadFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">To be added.</param>
        <param name="threadFactory">To be added.</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>threadFactory</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ScheduledThreadPoolExecutor (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScheduledThreadPoolExecutor (int corePoolSize, Java.Util.Concurrent.IThreadFactory threadFactory, Java.Util.Concurrent.IRejectedExecutionHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 corePoolSize, class Java.Util.Concurrent.IThreadFactory threadFactory, class Java.Util.Concurrent.IRejectedExecutionHandler handler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="threadFactory" Type="Java.Util.Concurrent.IThreadFactory" />
        <Parameter Name="handler" Type="Java.Util.Concurrent.IRejectedExecutionHandler" />
      </Parameters>
      <Docs>
        <param name="corePoolSize">To be added.</param>
        <param name="threadFactory">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>ScheduledThreadPoolExecutor</c> with the
 given initial parameters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>corePoolSize </c></exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>threadFactory</c> or
         <c>handler</c> is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueExistingPeriodicTasksAfterShutdownPolicy">
      <MemberSignature Language="C#" Value="public virtual bool ContinueExistingPeriodicTasksAfterShutdownPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContinueExistingPeriodicTasksAfterShutdownPolicy", "()Z", "GetGetContinueExistingPeriodicTasksAfterShutdownPolicyHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setContinueExistingPeriodicTasksAfterShutdownPolicy", "(Z)V", "GetSetContinueExistingPeriodicTasksAfterShutdownPolicy_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the policy on whether to continue executing existing
 periodic tasks even when this executor has been <c>shutdown</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#getContinueExistingPeriodicTasksAfterShutdownPolicy()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the policy on whether to continue executing existing
 periodic tasks even when this executor has been <c>shutdown</c>.
 In this case, these tasks will only terminate upon
 <c>shutdownNow</c> or after setting the policy to
 <c>false</c> when already shutdown.
 This value is by default <c>false</c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the policy on whether to continue executing existing
 periodic tasks even when this executor has been <c>shutdown</c>.
 In this case, these tasks will only terminate upon
 <c>shutdownNow</c> or after setting the policy to
 <c>false</c> when already shutdown.
 This value is by default <c>false</c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ContinueExistingPeriodicTasksAfterShutdownPolicy" />
      </Docs>
    </Member>
    <Member MemberName="DecorateTask">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask (Java.Lang.IRunnable runnable, Java.Util.Concurrent.IRunnableScheduledFuture task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask(class Java.Lang.IRunnable runnable, class Java.Util.Concurrent.IRunnableScheduledFuture task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("decorateTask", "(Ljava/lang/Runnable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_lang_Runnable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IRunnableScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Lang.IRunnable" />
        <Parameter Name="p1" Type="Java.Util.Concurrent.IRunnableScheduledFuture" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecorateTask">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask (Java.Util.Concurrent.ICallable callable, Java.Util.Concurrent.IRunnableScheduledFuture task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.IRunnableScheduledFuture DecorateTask(class Java.Util.Concurrent.ICallable callable, class Java.Util.Concurrent.IRunnableScheduledFuture task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("decorateTask", "(Ljava/util/concurrent/Callable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "GetDecorateTask_Ljava_util_concurrent_Callable_Ljava_util_concurrent_RunnableScheduledFuture_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IRunnableScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Util.Concurrent.ICallable" />
        <Parameter Name="p1" Type="Java.Util.Concurrent.IRunnableScheduledFuture" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteExistingDelayedTasksAfterShutdownPolicy">
      <MemberSignature Language="C#" Value="public virtual bool ExecuteExistingDelayedTasksAfterShutdownPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExecuteExistingDelayedTasksAfterShutdownPolicy", "()Z", "GetGetExecuteExistingDelayedTasksAfterShutdownPolicyHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setExecuteExistingDelayedTasksAfterShutdownPolicy", "(Z)V", "GetSetExecuteExistingDelayedTasksAfterShutdownPolicy_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the policy on whether to execute existing delayed
 tasks even when this executor has been <c>shutdown</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#getExecuteExistingDelayedTasksAfterShutdownPolicy()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the policy on whether to execute existing delayed
 tasks even when this executor has been <c>shutdown</c>.
 In this case, these tasks will only terminate upon
 <c>shutdownNow</c>, or after setting the policy to
 <c>false</c> when already shutdown.
 This value is by default <c>true</c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the policy on whether to execute existing delayed
 tasks even when this executor has been <c>shutdown</c>.
 In this case, these tasks will only terminate upon
 <c>shutdownNow</c>, or after setting the policy to
 <c>false</c> when already shutdown.
 This value is by default <c>true</c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.ExecuteExistingDelayedTasksAfterShutdownPolicy" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnCancelPolicy">
      <MemberSignature Language="C#" Value="public virtual bool RemoveOnCancelPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemoveOnCancelPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRemoveOnCancelPolicy", "()Z", "GetGetRemoveOnCancelPolicyHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRemoveOnCancelPolicy", "(Z)V", "GetSetRemoveOnCancelPolicy_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the policy on whether cancelled tasks should be immediately
 removed from the work queue at time of cancellation.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#getRemoveOnCancelPolicy()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the policy on whether cancelled tasks should be immediately
 removed from the work queue at time of cancellation.  This value is
 by default <c>false</c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#setRemoveOnCancelPolicy(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the policy on whether cancelled tasks should be immediately
 removed from the work queue at time of cancellation.  This value is
 by default <c>false</c>.</para>
        </remarks>
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
        <altmember cref="P:Java.Util.Concurrent.ScheduledThreadPoolExecutor.RemoveOnCancelPolicy" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture Schedule (Java.Lang.IRunnable command, long delay, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture Schedule(class Java.Lang.IRunnable command, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_lang_Runnable_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="delay">the time from now to delay execution</param>
        <param name="unit">the time unit of the delay parameter</param>
        <summary>Creates and executes a one-shot action that becomes enabled
 after the given delay.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates and executes a one-shot action that becomes enabled
 after the given delay.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture Schedule (Java.Util.Concurrent.ICallable callable, long delay, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture Schedule(class Java.Util.Concurrent.ICallable callable, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetSchedule_Ljava_util_concurrent_Callable_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <param name="delay">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture ScheduleAtFixedRate (Java.Lang.IRunnable command, long initialDelay, long period, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture ScheduleAtFixedRate(class Java.Lang.IRunnable command, int64 initialDelay, int64 period, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleAtFixedRate_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="initialDelay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="initialDelay">the time to delay first execution</param>
        <param name="period">the period between successive executions</param>
        <param name="unit">the time unit of the initialDelay and period parameters</param>
        <summary>Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the given
 period; that is executions will commence after
 <c>initialDelay</c> then <c>initialDelay+period</c>, then
 <c>initialDelay + 2 * period</c>, and so on.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the given
 period; that is executions will commence after
 <c>initialDelay</c> then <c>initialDelay+period</c>, then
 <c>initialDelay + 2 * period</c>, and so on.
 If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.  If any execution of this task
 takes longer than its period, then subsequent executions
 may start late, but will not concurrently execute.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleWithFixedDelay">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.IScheduledFuture ScheduleWithFixedDelay (Java.Lang.IRunnable command, long initialDelay, long delay, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IScheduledFuture ScheduleWithFixedDelay(class Java.Lang.IRunnable command, int64 initialDelay, int64 delay, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleWithFixedDelay", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "GetScheduleWithFixedDelay_Ljava_lang_Runnable_JJLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IScheduledFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
        <Parameter Name="initialDelay" Type="System.Int64" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="command">the task to execute</param>
        <param name="initialDelay">the time to delay first execution</param>
        <param name="delay">the delay between the termination of one
 execution and the commencement of the next</param>
        <param name="unit">the time unit of the initialDelay and delay parameters</param>
        <summary>Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the
 given delay between the termination of one execution and the
 commencement of the next.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the
 given delay between the termination of one execution and the
 commencement of the next.  If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException" />
        <exception cref="T:Java.Lang.NullPointerException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
