<Type Name="Phaser" FullName="Java.Util.Concurrent.Phaser">
  <TypeSignature Language="C#" Value="public class Phaser : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Phaser extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Phaser" />
  <TypeSignature Language="F#" Value="type Phaser = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/Phaser", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A reusable synchronization barrier, similar in functionality to
            <c>java.util.concurrent.CyclicBarrier CyclicBarrier</c> and
            <c>java.util.concurrent.CountDownLatch CountDownLatch</c>
            but supporting more flexible usage.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/Phaser" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Phaser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new phaser with no initially registered parties, no
            parent, and initial phase number 0.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Phaser (Java.Util.Concurrent.Phaser parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Phaser parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.#ctor(Java.Util.Concurrent.Phaser)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Phaser : Java.Util.Concurrent.Phaser -&gt; Java.Util.Concurrent.Phaser" Usage="new Java.Util.Concurrent.Phaser parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/Phaser;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="Java.Util.Concurrent.Phaser" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <summary>Creates a new phaser with no initially registered parties, no
            parent, and initial phase number 0.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Phaser (int parties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Phaser : int -&gt; Java.Util.Concurrent.Phaser" Usage="new Java.Util.Concurrent.Phaser parties" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parties">To be added.</param>
        <summary>Creates a new phaser with no initially registered parties, no
            parent, and initial phase number 0.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parties less than zero
 or greater than the maximum number of parties supported
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Phaser (Java.Util.Concurrent.Phaser parent, int parties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Phaser parent, int32 parties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.#ctor(Java.Util.Concurrent.Phaser,System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Phaser : Java.Util.Concurrent.Phaser * int -&gt; Java.Util.Concurrent.Phaser" Usage="new Java.Util.Concurrent.Phaser (parent, parties)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/Phaser;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="Java.Util.Concurrent.Phaser" />
        <Parameter Name="parties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="parties">To be added.</param>
        <summary>Creates a new phaser with no initially registered parties, no
            parent, and initial phase number 0.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parties less than zero
 or greater than the maximum number of parties supported
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Phaser (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Phaser : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Phaser" Usage="new Java.Util.Concurrent.Phaser (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrive">
      <MemberSignature Language="C#" Value="public virtual int Arrive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Arrive() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.Arrive" />
      <MemberSignature Language="F#" Value="abstract member Arrive : unit -&gt; int&#xA;override this.Arrive : unit -&gt; int" Usage="phaser.Arrive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("arrive", "()I", "GetArriveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrives at this phaser, without waiting for others to arrive.</summary>
        <returns>the arrival phase number, or a negative value if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not terminated and the number
 of unarrived parties would become negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArriveAndAwaitAdvance">
      <MemberSignature Language="C#" Value="public virtual int ArriveAndAwaitAdvance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ArriveAndAwaitAdvance() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.ArriveAndAwaitAdvance" />
      <MemberSignature Language="F#" Value="abstract member ArriveAndAwaitAdvance : unit -&gt; int&#xA;override this.ArriveAndAwaitAdvance : unit -&gt; int" Usage="phaser.ArriveAndAwaitAdvance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("arriveAndAwaitAdvance", "()I", "GetArriveAndAwaitAdvanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrives at this phaser and awaits others.</summary>
        <returns>the arrival phase number, or the (negative)
            #getPhase() current phase if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not terminated and the number
 of unarrived parties would become negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArriveAndDeregister">
      <MemberSignature Language="C#" Value="public virtual int ArriveAndDeregister ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ArriveAndDeregister() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.ArriveAndDeregister" />
      <MemberSignature Language="F#" Value="abstract member ArriveAndDeregister : unit -&gt; int&#xA;override this.ArriveAndDeregister : unit -&gt; int" Usage="phaser.ArriveAndDeregister " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("arriveAndDeregister", "()I", "GetArriveAndDeregisterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrives at this phaser and deregisters from it without waiting
            for others to arrive.</summary>
        <returns>the arrival phase number, or a negative value if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not terminated and the number
 of registered or unarrived parties would become negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrivedParties">
      <MemberSignature Language="C#" Value="public virtual int ArrivedParties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArrivedParties" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.ArrivedParties" />
      <MemberSignature Language="F#" Value="member this.ArrivedParties : int" Usage="Java.Util.Concurrent.Phaser.ArrivedParties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getArrivedParties", "()I", "GetGetArrivedPartiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of registered parties that have arrived at
            the current phase of this phaser.</summary>
        <value>the number of arrived parties</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitAdvance">
      <MemberSignature Language="C#" Value="public virtual int AwaitAdvance (int phase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AwaitAdvance(int32 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.AwaitAdvance(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member AwaitAdvance : int -&gt; int&#xA;override this.AwaitAdvance : int -&gt; int" Usage="phaser.AwaitAdvance phase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitAdvance", "(I)I", "GetAwaitAdvance_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phase">an arrival phase number, or negative value if
            terminated; this argument is normally the value returned by a
            previous call to <c>arrive</c> or <c>arriveAndDeregister</c>.</param>
        <summary>Awaits the phase of this phaser to advance from the given phase
            value, returning immediately if the current phase is not equal
            to the given phase value or this phaser is terminated.</summary>
        <returns>the next arrival phase number, or the argument if it is
            negative, or the (negative) #getPhase() current phase
            if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitAdvanceInterruptibly">
      <MemberSignature Language="C#" Value="public virtual int AwaitAdvanceInterruptibly (int phase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AwaitAdvanceInterruptibly(int32 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.AwaitAdvanceInterruptibly(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member AwaitAdvanceInterruptibly : int -&gt; int&#xA;override this.AwaitAdvanceInterruptibly : int -&gt; int" Usage="phaser.AwaitAdvanceInterruptibly phase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitAdvanceInterruptibly", "(I)I", "GetAwaitAdvanceInterruptibly_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phase">an arrival phase number, or negative value if
            terminated; this argument is normally the value returned by a
            previous call to <c>arrive</c> or <c>arriveAndDeregister</c>.</param>
        <summary>Awaits the phase of this phaser to advance from the given phase
            value, throwing <c>InterruptedException</c> if interrupted
            while waiting, or returning immediately if the current phase is
            not equal to the given phase value or this phaser is
            terminated.</summary>
        <returns>the next arrival phase number, or the argument if it is
            negative, or the (negative) #getPhase() current phase
            if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if thread interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="AwaitAdvanceInterruptibly">
      <MemberSignature Language="C#" Value="public virtual int AwaitAdvanceInterruptibly (int phase, long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AwaitAdvanceInterruptibly(int32 phase, int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.AwaitAdvanceInterruptibly(System.Int32,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member AwaitAdvanceInterruptibly : int * int64 * Java.Util.Concurrent.TimeUnit -&gt; int&#xA;override this.AwaitAdvanceInterruptibly : int * int64 * Java.Util.Concurrent.TimeUnit -&gt; int" Usage="phaser.AwaitAdvanceInterruptibly (phase, timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitAdvanceInterruptibly", "(IJLjava/util/concurrent/TimeUnit;)I", "GetAwaitAdvanceInterruptibly_IJLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="phase">an arrival phase number, or negative value if
            terminated; this argument is normally the value returned by a
            previous call to <c>arrive</c> or <c>arriveAndDeregister</c>.</param>
        <param name="timeout">how long to wait before giving up, in units of
        <c>unit</c></param>
        <param name="unit">a <c>TimeUnit</c> determining how to interpret the
        <c>timeout</c> parameter</param>
        <summary>Awaits the phase of this phaser to advance from the given phase
            value, throwing <c>InterruptedException</c> if interrupted
            while waiting, or returning immediately if the current phase is
            not equal to the given phase value or this phaser is
            terminated.</summary>
        <returns>the next arrival phase number, or the argument if it is
            negative, or the (negative) #getPhase() current phase
            if terminated</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if thread interrupted while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if timed out while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="BulkRegister">
      <MemberSignature Language="C#" Value="public virtual int BulkRegister (int parties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BulkRegister(int32 parties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.BulkRegister(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member BulkRegister : int -&gt; int&#xA;override this.BulkRegister : int -&gt; int" Usage="phaser.BulkRegister parties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bulkRegister", "(I)I", "GetBulkRegister_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parties">the number of additional parties required to
            advance to the next phase</param>
        <summary>Adds the given number of new unarrived parties to this phaser.</summary>
        <returns>the arrival phase number to which this registration
            applied.  If this value is negative, then this phaser has
            terminated, in which case registration has no effect.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if attempting to register more
 than the maximum supported number of parties</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>parties </c></exception>
      </Docs>
    </Member>
    <Member MemberName="ForceTermination">
      <MemberSignature Language="C#" Value="public virtual void ForceTermination ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForceTermination() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.ForceTermination" />
      <MemberSignature Language="F#" Value="abstract member ForceTermination : unit -&gt; unit&#xA;override this.ForceTermination : unit -&gt; unit" Usage="phaser.ForceTermination " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forceTermination", "()V", "GetForceTerminationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces this phaser to enter termination state.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminated">
      <MemberSignature Language="C#" Value="public virtual bool IsTerminated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminated" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.IsTerminated" />
      <MemberSignature Language="F#" Value="member this.IsTerminated : bool" Usage="Java.Util.Concurrent.Phaser.IsTerminated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this phaser has been terminated.</summary>
        <value>
          <c>true</c> if this phaser has been terminated</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Phaser.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAdvance">
      <MemberSignature Language="C#" Value="protected virtual bool OnAdvance (int phase, int registeredParties);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAdvance(int32 phase, int32 registeredParties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.OnAdvance(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnAdvance : int * int -&gt; bool&#xA;override this.OnAdvance : int * int -&gt; bool" Usage="phaser.OnAdvance (phase, registeredParties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAdvance", "(II)Z", "GetOnAdvance_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.Int32" />
        <Parameter Name="registeredParties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phase">the current phase number on entry to this method,
            before this phaser is advanced</param>
        <param name="registeredParties">the current number of registered parties</param>
        <summary>Overridable method to perform an action upon impending phase
            advance, and to control termination.</summary>
        <returns>
          <c>true</c> if this phaser should terminate</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.Phaser Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.Phaser Parent" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Java.Util.Concurrent.Phaser" Usage="Java.Util.Concurrent.Phaser.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParent", "()Ljava/util/concurrent/Phaser;", "GetGetParentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Phaser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the parent of this phaser, or <c>null</c> if none.</summary>
        <value>the parent of this phaser, or <c>null</c> if none</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phase">
      <MemberSignature Language="C#" Value="public int Phase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Phase" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.Phase" />
      <MemberSignature Language="F#" Value="member this.Phase : int" Usage="Java.Util.Concurrent.Phaser.Phase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPhase", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current phase number.</summary>
        <value>the phase number, or a negative value if terminated</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual int Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Phaser.Register" />
      <MemberSignature Language="F#" Value="abstract member Register : unit -&gt; int&#xA;override this.Register : unit -&gt; int" Usage="phaser.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("register", "()I", "GetRegisterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Adds a new unarrived party to this phaser.</summary>
        <returns>the arrival phase number to which this registration
            applied.  If this value is negative, then this phaser has
            terminated, in which case registration has no effect.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if attempting to register more
 than the maximum supported number of parties
</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisteredParties">
      <MemberSignature Language="C#" Value="public virtual int RegisteredParties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RegisteredParties" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.RegisteredParties" />
      <MemberSignature Language="F#" Value="member this.RegisteredParties : int" Usage="Java.Util.Concurrent.Phaser.RegisteredParties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRegisteredParties", "()I", "GetGetRegisteredPartiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of parties registered at this phaser.</summary>
        <value>the number of parties</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.Phaser Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.Phaser Root" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.Root" />
      <MemberSignature Language="F#" Value="member this.Root : Java.Util.Concurrent.Phaser" Usage="Java.Util.Concurrent.Phaser.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRoot", "()Ljava/util/concurrent/Phaser;", "GetGetRootHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Phaser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the root ancestor of this phaser, which is the same as
            this phaser if it has no parent.</summary>
        <value>the root ancestor of this phaser</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Phaser.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Phaser.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnarrivedParties">
      <MemberSignature Language="C#" Value="public virtual int UnarrivedParties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UnarrivedParties" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Phaser.UnarrivedParties" />
      <MemberSignature Language="F#" Value="member this.UnarrivedParties : int" Usage="Java.Util.Concurrent.Phaser.UnarrivedParties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUnarrivedParties", "()I", "GetGetUnarrivedPartiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of registered parties that have not yet
            arrived at the current phase of this phaser.</summary>
        <value>the number of unarrived parties</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
