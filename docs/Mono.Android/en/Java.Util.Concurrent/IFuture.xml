<Type Name="IFuture" FullName="Java.Util.Concurrent.IFuture">
  <TypeSignature Language="VB.NET" Value="Public Interface IFuture&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFuture : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface IFuture : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IFuture implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.IFuture" />
  <TypeSignature Language="F#" Value="type IFuture = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/Future", "", "Java.Util.Concurrent.IFutureInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/Future", "", "Java.Util.Concurrent.IFutureInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;V&gt;&lt;V&gt;">The result type returned by this Future's <c>get</c> method</param>
    <summary>A <c>Future</c> represents the result of an asynchronous
            computation.</summary>
    <remarks>
      <para>A <c>Future</c> represents the result of an asynchronous
            computation.  Methods are provided to check if the computation is
            complete, to wait for its completion, and to retrieve the result of
            the computation.  The result can only be retrieved using method
            <c>get</c> when the computation has completed, blocking if
            necessary until it is ready.  Cancellation is performed by the
            <c>cancel</c> method.  Additional methods are provided to
            determine if the task completed normally or was cancelled. Once a
            computation has completed, the computation cannot be cancelled.
            If you would like to use a <c>Future</c> for the sake
            of cancellability but not provide a usable result, you can
            declare types of the form <c>Future&lt;?&gt;</c> and
            return <c>null</c> as a result of the underlying task.</para>
      <para>&lt;b&gt;Sample Usage&lt;/b&gt; (Note that the following classes are all
            made-up.)</para>
      <code lang="text/java">{@code
            interface ArchiveSearcher { String search(String target); }
            class App {
              ExecutorService executor = ...;
              ArchiveSearcher searcher = ...;
              void showSearch(String target) throws InterruptedException {
                Callable&lt;String&gt; task = () -&gt; searcher.search(target);
                Future&lt;String&gt; future = executor.submit(task);
                displayOtherThings(); // do other things while searching
                try {
                  displayText(future.get()); // use future
                } catch (ExecutionException ex) { cleanup(); return; }
              }
            }}</code>
      <para>The <c>FutureTask</c> class is an implementation of <c>Future</c> that
            implements <c>Runnable</c>, and so may be executed by an <c>Executor</c>.
            For example, the above construction with <c>submit</c> could be replaced by:</para>
      <code lang="text/java">{@code
            FutureTask&lt;String&gt; future = new FutureTask&lt;&gt;(task);
            executor.execute(future);}</code>
      <para>Memory consistency effects: Actions taken by the asynchronous computation
             &lt;i&gt;happen-before&lt;/i&gt;
            actions following the corresponding <c>Future.get()</c> in another thread.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/Future" title="Reference documentation">Java documentation for <code>java.util.concurrent.Future</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="VB.NET" Value="Public Function Cancel (mayInterruptIfRunning As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel(bool mayInterruptIfRunning);" />
      <MemberSignature Language="C#" Value="public bool Cancel (bool mayInterruptIfRunning);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cancel(bool mayInterruptIfRunning) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IFuture.Cancel(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Cancel : bool -&gt; bool" Usage="iFuture.Cancel mayInterruptIfRunning" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mayInterruptIfRunning" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mayInterruptIfRunning">
          <c>true</c> if the thread
            executing this task should be interrupted (if the thread is
            known to the implementation); otherwise, in-progress tasks are
            allowed to complete</param>
        <summary>Attempts to cancel execution of this task.</summary>
        <returns>
          <c>false</c> if the task could not be cancelled,
            typically because it has already completed; <c>true</c>
            otherwise. If two or more threads cause a task to be cancelled,
            then at least one of them returns <c>true</c>. Implementations
            may provide stronger guarantees.</returns>
        <remarks>
          <para>Attempts to cancel execution of this task.  This method has no
            effect if the task is already completed or cancelled, or could
            not be cancelled for some other reason.  Otherwise, if this
            task has not started when <c>cancel</c> is called, this task
            should never run.  If the task has already started, then the
            <c>mayInterruptIfRunning</c> parameter determines whether the
            thread executing this task (when known by the implementation)
            is interrupted in an attempt to stop the task.</para>
          <para>The return value from this method does not necessarily
            indicate whether the task is now cancelled; use <c>#isCancelled</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Future#cancel(boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Future.cancel(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public Function Get () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ Get();" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IFuture.Get" />
      <MemberSignature Language="F#" Value="abstract member Get : unit -&gt; Java.Lang.Object" Usage="iFuture.Get " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "()Ljava/lang/Object;", "GetGetHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "()Ljava/lang/Object;", "GetGetHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits if necessary for the computation to complete, and then
            retrieves its result.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>Waits if necessary for the computation to complete, and then
            retrieves its result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Future#get()" title="Reference documentation">Java documentation for <code>java.util.concurrent.Future.get()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
 while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public Function Get (timeout As Long, unit As TimeUnit) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ Get(long timeout, Java::Util::Concurrent::TimeUnit ^ unit);" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Get (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.IFuture.Get(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Get : int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Lang.Object" Usage="iFuture.Get (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetGet_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetGet_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Waits if necessary for at most the given time for the computation
            to complete, and then retrieves its result, if available.</summary>
        <returns>the computed result</returns>
        <remarks>
          <para>Waits if necessary for at most the given time for the computation
            to complete, and then retrieves its result, if available.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/Future#get(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.Future.get(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
 while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the wait timed out
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancelled { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.IFuture.IsCancelled" />
      <MemberSignature Language="F#" Value="member this.IsCancelled : bool" Usage="Java.Util.Concurrent.IFuture.IsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isCancelled", "()Z", "GetIsCancelledHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isCancelled", "()Z", "GetIsCancelledHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task was cancelled before it completed
 normally.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDone As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDone { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.IFuture.IsDone" />
      <MemberSignature Language="F#" Value="member this.IsDone : bool" Usage="Java.Util.Concurrent.IFuture.IsDone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isDone", "()Z", "GetIsDoneHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isDone", "()Z", "GetIsDoneHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
