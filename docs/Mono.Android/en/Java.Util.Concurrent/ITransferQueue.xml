<Type Name="ITransferQueue" FullName="Java.Util.Concurrent.ITransferQueue">
  <TypeSignature Language="C#" Value="public interface ITransferQueue : IDisposable, Java.Util.Concurrent.IBlockingQueue" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITransferQueue implements class Android.Runtime.IJavaObject, class Java.Lang.IIterable, class Java.Util.Concurrent.IBlockingQueue, class Java.Util.ICollection, class Java.Util.IQueue, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IBlockingQueue</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/TransferQueue", "", "Java.Util.Concurrent.ITransferQueueInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A <c><see cref="T:Java.Util.Concurrent.IBlockingQueue" /></c> in which producers may wait for consumers
 to receive elements.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c><see cref="T:Java.Util.Concurrent.IBlockingQueue" /></c> in which producers may wait for consumers
 to receive elements.  A <c>TransferQueue</c> may be useful for
 example in message passing applications in which producers
 sometimes (using method <c><see cref="!:Java.Util.Concurrent.ITransferQueue.transfer(E)" /></c>) await receipt of
 elements by consumers invoking <c>take</c> or <c>poll</c>, while
 at other times enqueue elements (via method <c>put</c>) without
 waiting for receipt.
 <see cref="!:Java.Util.Concurrent.ITransferQueue.tryTransfer(E)" /> and
 <see cref="!:Java.Util.Concurrent.ITransferQueue.tryTransfer(E,long,java.util.concurrent.TimeUnit)" /> versions of
 <c>tryTransfer</c> are also available.
 A <c>TransferQueue</c> may also be queried, via <c><see cref="P:Java.Util.Concurrent.ITransferQueue.HasWaitingConsumer" /></c>, whether there are any threads waiting for
 items, which is a converse analogy to a <c>peek</c> operation.

 </para>
      <para tool="javadoc-to-mdoc">Like other blocking queues, a <c>TransferQueue</c> may be
 capacity bounded.  If so, an attempted transfer operation may
 initially block waiting for available space, and/or subsequently
 block waiting for reception by a consumer.  Note that in a queue
 with zero capacity, such as <c><see cref="T:Java.Util.Concurrent.SynchronousQueue" /></c>, <c>put</c>
 and <c>transfer</c> are effectively synonymous.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/TransferQueue.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HasWaitingConsumer">
      <MemberSignature Language="C#" Value="public bool HasWaitingConsumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWaitingConsumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasWaitingConsumer", "()Z", "GetHasWaitingConsumerHandler:Java.Util.Concurrent.ITransferQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if there is at least one consumer waiting
 to receive an element via <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Take" /></c> or
 timed <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if there is at least one consumer waiting
 to receive an element via <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Take" /></c> or
 timed <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.
 The return value represents a momentary state of affairs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/TransferQueue.html#hasWaitingConsumer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (Java.Lang.Object e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Transfer(class Java.Lang.Object e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transfer", "(Ljava/lang/Object;)V", "GetTransfer_Ljava_lang_Object_Handler:Java.Util.Concurrent.ITransferQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryTransfer">
      <MemberSignature Language="C#" Value="public bool TryTransfer (Java.Lang.Object e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryTransfer(class Java.Lang.Object e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryTransfer", "(Ljava/lang/Object;)Z", "GetTryTransfer_Ljava_lang_Object_Handler:Java.Util.Concurrent.ITransferQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryTransfer">
      <MemberSignature Language="C#" Value="public bool TryTransfer (Java.Lang.Object e, long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryTransfer(class Java.Lang.Object e, int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryTransfer", "(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", "GetTryTransfer_Ljava_lang_Object_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.ITransferQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Java.Lang.Object" />
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingConsumerCount">
      <MemberSignature Language="C#" Value="public int WaitingConsumerCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingConsumerCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWaitingConsumerCount", "()I", "GetGetWaitingConsumerCountHandler:Java.Util.Concurrent.ITransferQueueInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of consumers waiting to
 receive elements via <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Take" /></c> or timed
 <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of consumers waiting to
 receive elements via <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Take" /></c> or timed
 <c><see cref="M:Java.Util.Concurrent.IBlockingQueue.Poll(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.  The return value is an
 approximation of a momentary state of affairs, that may be
 inaccurate if consumers have completed or given up waiting.
 The value may be useful for monitoring and heuristics, but
 not for synchronization control.  Implementations of this
 method are likely to be noticeably slower than those for
 <c><see cref="P:Java.Util.Concurrent.ITransferQueue.HasWaitingConsumer" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/TransferQueue.html#getWaitingConsumerCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
