<Type Name="ForkJoinPool" FullName="Java.Util.Concurrent.ForkJoinPool">
  <TypeSignature Language="C#" Value="public class ForkJoinPool : Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ForkJoinPool extends Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.ForkJoinPool" />
  <TypeSignature Language="F#" Value="type ForkJoinPool = class&#xA;    inherit AbstractExecutorService" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.AbstractExecutorService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ForkJoinPool", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>An <c>ExecutorService</c> for running <c>ForkJoinTask</c>s.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using the #defaultForkJoinWorkerThreadFactory default thread factory,
            no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : int -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool parallelism" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using the #defaultForkJoinWorkerThreadFactory default thread factory,
            no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinPool (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism, Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory factory, Java.Lang.Thread.IUncaughtExceptionHandler handler, bool asyncMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism, class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory factory, class Java.Lang.Thread/IUncaughtExceptionHandler handler, bool asyncMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.Int32,Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory,Java.Lang.Thread.IUncaughtExceptionHandler,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : int * Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory * Java.Lang.Thread.IUncaughtExceptionHandler * bool -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool (parallelism, factory, handler, asyncMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
        <Parameter Name="factory" Type="Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory" />
        <Parameter Name="handler" Type="Java.Lang.Thread+IUncaughtExceptionHandler" />
        <Parameter Name="asyncMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="asyncMode">To be added.</param>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using the #defaultForkJoinWorkerThreadFactory default thread factory,
            no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the factory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="ActiveThreadCount">
      <MemberSignature Language="C#" Value="public virtual int ActiveThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ActiveThreadCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ActiveThreadCount" />
      <MemberSignature Language="F#" Value="member this.ActiveThreadCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.ActiveThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActiveThreadCount", "()I", "GetGetActiveThreadCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads that are currently
            stealing or executing tasks.</summary>
        <value>the number of active threads</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncMode">
      <MemberSignature Language="C#" Value="public virtual bool AsyncMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncMode" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.AsyncMode" />
      <MemberSignature Language="F#" Value="member this.AsyncMode : bool" Usage="Java.Util.Concurrent.ForkJoinPool.AsyncMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAsyncMode", "()Z", "GetGetAsyncModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool uses local first-in-first-out
            scheduling mode for forked tasks that are never joined.</summary>
        <value>
          <c>true</c> if this pool uses async mode</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitQuiescence">
      <MemberSignature Language="C#" Value="public virtual bool AwaitQuiescence (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AwaitQuiescence(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.AwaitQuiescence(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member AwaitQuiescence : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool&#xA;override this.AwaitQuiescence : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="forkJoinPool.AwaitQuiescence (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitQuiescence", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitQuiescence_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>If called by a ForkJoinTask operating in this pool, equivalent
            in effect to <c>ForkJoinTask#helpQuiesce</c>.</summary>
        <returns>
          <c>true</c> if quiescent; <c>false</c> if the
            timeout elapsed.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitTermination">
      <MemberSignature Language="C#" Value="public override bool AwaitTermination (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AwaitTermination(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.AwaitTermination(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="override this.AwaitTermination : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="forkJoinPool.AwaitTermination (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Blocks until all tasks have completed execution after a
            shutdown request, or the timeout occurs, or the current thread
            is interrupted, whichever happens first.</summary>
        <returns>
          <c>true</c> if this executor terminated and
                    <c>false</c> if the timeout elapsed before termination</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="CommonPool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool CommonPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinPool CommonPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.CommonPool" />
      <MemberSignature Language="F#" Value="static member CommonPool : unit -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="Java.Util.Concurrent.ForkJoinPool.CommonPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commonPool", "()Ljava/util/concurrent/ForkJoinPool;", "", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the common pool instance.</summary>
        <returns>the common pool instance</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonPoolParallelism">
      <MemberSignature Language="C#" Value="public static int CommonPoolParallelism { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CommonPoolParallelism" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.CommonPoolParallelism" />
      <MemberSignature Language="F#" Value="member this.CommonPoolParallelism : int" Usage="Java.Util.Concurrent.ForkJoinPool.CommonPoolParallelism" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCommonPoolParallelism", "()I", "", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the targeted parallelism level of the common pool.</summary>
        <value>the targeted parallelism level of the common pool</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultForkJoinWorkerThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />
      <MemberSignature Language="F#" Value="member this.DefaultForkJoinWorkerThreadFactory : Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory" Usage="Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("defaultForkJoinWorkerThreadFactory")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a new ForkJoinWorkerThread.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrainTasksTo">
      <MemberSignature Language="C#" Value="protected virtual int DrainTasksTo (System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 DrainTasksTo(class System.Collections.Generic.ICollection`1&lt;class Java.Util.Concurrent.ForkJoinTask&gt; c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.DrainTasksTo(System.Collections.Generic.ICollection{Java.Util.Concurrent.ForkJoinTask})" />
      <MemberSignature Language="F#" Value="abstract member DrainTasksTo : System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; -&gt; int&#xA;override this.DrainTasksTo : System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; -&gt; int" Usage="forkJoinPool.DrainTasksTo c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drainTasksTo", "(Ljava/util/Collection;)I", "GetDrainTasksTo_Ljava_util_Collection_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt;" />
      </Parameters>
      <Docs>
        <param name="c">the collection to transfer elements into</param>
        <summary>Removes all available unexecuted submitted and forked tasks
            from scheduling queues and adds them to the given collection,
            without altering their execution status.</summary>
        <returns>the number of elements transferred</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public override void Execute (Java.Lang.IRunnable task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Execute(class Java.Lang.IRunnable task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Execute(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="override this.Execute : Java.Lang.IRunnable -&gt; unit" Usage="forkJoinPool.Execute task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.NullPointerException">if the task is null</exception>
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">if the task cannot be
         scheduled for execution
</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public virtual void Execute (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Execute(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="override this.Execute : Java.Util.Concurrent.ForkJoinTask -&gt; unit" Usage="forkJoinPool.Execute task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "(Ljava/util/concurrent/ForkJoinTask;)V", "GetExecute_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory Factory" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.Factory" />
      <MemberSignature Language="F#" Value="member this.Factory : Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory" Usage="Java.Util.Concurrent.ForkJoinPool.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFactory", "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;", "GetGetFactoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the factory used for constructing new workers.</summary>
        <value>the factory used for constructing new workers</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedSubmissions">
      <MemberSignature Language="C#" Value="public virtual bool HasQueuedSubmissions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedSubmissions" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.HasQueuedSubmissions" />
      <MemberSignature Language="F#" Value="member this.HasQueuedSubmissions : bool" Usage="Java.Util.Concurrent.ForkJoinPool.HasQueuedSubmissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedSubmissions", "()Z", "GetHasQueuedSubmissionsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if there are any tasks submitted to this
            pool that have not yet begun executing.</summary>
        <value>
          <c>true</c> if there are any queued submissions</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Invoke (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Invoke(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Invoke(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Lang.Object&#xA;override this.Invoke : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Lang.Object" Usage="forkJoinPool.Invoke task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invoke", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;", "GetInvoke_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Java.Interop.JavaTypeParameters(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">the task</param>
        <summary>Performs the given task, returning its result upon completion.</summary>
        <returns>the task's result</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQuiescent">
      <MemberSignature Language="C#" Value="public virtual bool IsQuiescent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQuiescent" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsQuiescent" />
      <MemberSignature Language="F#" Value="member this.IsQuiescent : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsQuiescent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isQuiescent", "()Z", "GetIsQuiescentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all worker threads are currently idle.</summary>
        <value>
          <c>true</c> if all threads are currently idle</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShutdown">
      <MemberSignature Language="C#" Value="public override bool IsShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShutdown" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsShutdown" />
      <MemberSignature Language="F#" Value="member this.IsShutdown : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool has been shut down.</summary>
        <value>
          <c>true</c> if this pool has been shut down</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminated">
      <MemberSignature Language="C#" Value="public override bool IsTerminated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminated" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsTerminated" />
      <MemberSignature Language="F#" Value="member this.IsTerminated : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsTerminated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all tasks have completed following shut down.</summary>
        <value>
          <c>true</c> if all tasks have completed following shut down</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public virtual bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsTerminating" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the process of termination has
            commenced but not yet completed.</summary>
        <value>
          <c>true</c> if terminating but not yet terminated</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.ForkJoinPool.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagedBlock">
      <MemberSignature Language="C#" Value="public static void ManagedBlock (Java.Util.Concurrent.ForkJoinPool.IManagedBlocker blocker);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ManagedBlock(class Java.Util.Concurrent.ForkJoinPool/IManagedBlocker blocker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.ManagedBlock(Java.Util.Concurrent.ForkJoinPool.IManagedBlocker)" />
      <MemberSignature Language="F#" Value="static member ManagedBlock : Java.Util.Concurrent.ForkJoinPool.IManagedBlocker -&gt; unit" Usage="Java.Util.Concurrent.ForkJoinPool.ManagedBlock blocker" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("managedBlock", "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocker" Type="Java.Util.Concurrent.ForkJoinPool+IManagedBlocker" />
      </Parameters>
      <Docs>
        <param name="blocker">the blocker task</param>
        <summary>Runs the given possibly blocking task.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if blocker.block did so
</exception>
      </Docs>
    </Member>
    <Member MemberName="Parallelism">
      <MemberSignature Language="C#" Value="public virtual int Parallelism { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Parallelism" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.Parallelism" />
      <MemberSignature Language="F#" Value="member this.Parallelism : int" Usage="Java.Util.Concurrent.ForkJoinPool.Parallelism" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParallelism", "()I", "GetGetParallelismHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the targeted parallelism level of this pool.</summary>
        <value>the targeted parallelism level of this pool</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollSubmission">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.ForkJoinTask PollSubmission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask PollSubmission() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.PollSubmission" />
      <MemberSignature Language="F#" Value="abstract member PollSubmission : unit -&gt; Java.Util.Concurrent.ForkJoinTask&#xA;override this.PollSubmission : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="forkJoinPool.PollSubmission " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pollSubmission", "()Ljava/util/concurrent/ForkJoinTask;", "GetPollSubmissionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes and returns the next unexecuted submission if one is
            available.</summary>
        <returns>the next submission, or <c>null</c> if none</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolSize">
      <MemberSignature Language="C#" Value="public virtual int PoolSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.PoolSize" />
      <MemberSignature Language="F#" Value="member this.PoolSize : int" Usage="Java.Util.Concurrent.ForkJoinPool.PoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of worker threads that have started but not
            yet terminated.</summary>
        <value>the number of worker threads</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedSubmissionCount">
      <MemberSignature Language="C#" Value="public virtual int QueuedSubmissionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueuedSubmissionCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.QueuedSubmissionCount" />
      <MemberSignature Language="F#" Value="member this.QueuedSubmissionCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.QueuedSubmissionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedSubmissionCount", "()I", "GetGetQueuedSubmissionCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of tasks submitted to this
            pool that have not yet begun executing.</summary>
        <value>the number of queued submissions</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedTaskCount">
      <MemberSignature Language="C#" Value="public virtual long QueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 QueuedTaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.QueuedTaskCount" />
      <MemberSignature Language="F#" Value="member this.QueuedTaskCount : int64" Usage="Java.Util.Concurrent.ForkJoinPool.QueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedTaskCount", "()J", "GetGetQueuedTaskCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of tasks currently held
            in queues by worker threads (but not including tasks submitted
            to the pool that have not begun executing).</summary>
        <value>the number of queued tasks</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningThreadCount">
      <MemberSignature Language="C#" Value="public virtual int RunningThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RunningThreadCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.RunningThreadCount" />
      <MemberSignature Language="F#" Value="member this.RunningThreadCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.RunningThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRunningThreadCount", "()I", "GetGetRunningThreadCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of worker threads that are
            not blocked waiting to join tasks or for other managed
            synchronization.</summary>
        <value>the number of worker threads</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Shutdown" />
      <MemberSignature Language="F#" Value="override this.Shutdown : unit -&gt; unit" Usage="forkJoinPool.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly initiates an orderly shutdown in which previously
            submitted tasks are executed, but no new tasks will be
            accepted.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownNow">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt; ShutdownNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class Java.Lang.IRunnable&gt; ShutdownNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.ShutdownNow" />
      <MemberSignature Language="F#" Value="override this.ShutdownNow : unit -&gt; System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;" Usage="forkJoinPool.ShutdownNow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly attempts to cancel and/or stop all tasks, and reject
            all subsequently submitted tasks.</summary>
        <returns>an empty list</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StealCount">
      <MemberSignature Language="C#" Value="public virtual long StealCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StealCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.StealCount" />
      <MemberSignature Language="F#" Value="member this.StealCount : int64" Usage="Java.Util.Concurrent.ForkJoinPool.StealCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStealCount", "()J", "GetGetStealCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of tasks stolen from
            one thread's work queue by another.</summary>
        <value>the number of steals</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinTask Submit (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask Submit(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Submit(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="override this.Submit : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="forkJoinPool.Submit task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("submit", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;", "GetSubmit_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Java.Interop.JavaTypeParameters(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.ForkJoinPool.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.ForkJoinPool.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.IUncaughtExceptionHandler UncaughtExceptionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread/IUncaughtExceptionHandler UncaughtExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.UncaughtExceptionHandler" />
      <MemberSignature Language="F#" Value="member this.UncaughtExceptionHandler : Java.Lang.Thread.IUncaughtExceptionHandler" Usage="Java.Util.Concurrent.ForkJoinPool.UncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the handler for internal worker threads that terminate
            due to unrecoverable errors encountered while executing tasks.</summary>
        <value>the handler, or <c>null</c> if none</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
