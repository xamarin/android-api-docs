<Type Name="ForkJoinPool" FullName="Java.Util.Concurrent.ForkJoinPool">
  <TypeSignature Language="VB.NET" Value="Public Class ForkJoinPool&#xA;Inherits AbstractExecutorService" />
  <TypeSignature Language="C++ CLI" Value="public ref class ForkJoinPool : Java::Util::Concurrent::AbstractExecutorService" />
  <TypeSignature Language="C#" Value="public class ForkJoinPool : Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ForkJoinPool extends Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.ForkJoinPool" />
  <TypeSignature Language="F#" Value="type ForkJoinPool = class&#xA;    inherit AbstractExecutorService" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.AbstractExecutorService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/ForkJoinPool", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/ForkJoinPool", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>An <c>ExecutorService</c> for running <c>ForkJoinTask</c>s.</summary>
    <remarks>
      <para>An <c>ExecutorService</c> for running <c>ForkJoinTask</c>s.
            A <c>ForkJoinPool</c> provides the entry point for submissions
            from non-<c>ForkJoinTask</c> clients, as well as management and
            monitoring operations.</para>
      <para>A <c>ForkJoinPool</c> differs from other kinds of <c>ExecutorService</c> mainly by virtue of employing
            &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and
            execute tasks submitted to the pool and/or created by other active
            tasks (eventually blocking waiting for work if none exist). This
            enables efficient processing when most tasks spawn other subtasks
            (as do most <c>ForkJoinTask</c>s), as well as when many small
            tasks are submitted to the pool from external clients.  Especially
            when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, <c>ForkJoinPool</c>s may also be appropriate for use with event-style
            tasks that are never joined. All worker threads are initialized
            with <c>Thread#isDaemon</c> set <c>true</c>.</para>
      <para>A static <c>#commonPool()</c> is available and appropriate for
            most applications. The common pool is used by any ForkJoinTask that
            is not explicitly submitted to a specified pool. Using the common
            pool normally reduces resource usage (its threads are slowly
            reclaimed during periods of non-use, and reinstated upon subsequent
            use).</para>
      <para>For applications that require separate or custom pools, a <c>ForkJoinPool</c> may be constructed with a given target parallelism
            level; by default, equal to the number of available processors.
            The pool attempts to maintain enough active (or available) threads
            by dynamically adding, suspending, or resuming internal worker
            threads, even if some tasks are stalled waiting to join others.
            However, no such adjustments are guaranteed in the face of blocked
            I/O or other unmanaged synchronization. The nested <c>ManagedBlocker</c> interface enables extension of the kinds of
            synchronization accommodated. The default policies may be
            overridden using a constructor with parameters corresponding to
            those documented in class <c>ThreadPoolExecutor</c>.</para>
      <para>In addition to execution and lifecycle control methods, this
            class provides status check methods (for example
            <c>#getStealCount</c>) that are intended to aid in developing,
            tuning, and monitoring fork/join applications. Also, method
            <c>#toString</c> returns indications of pool state in a
            convenient form for informal monitoring.</para>
      <para>As is the case with other ExecutorServices, there are three
            main task execution methods summarized in the following table.
            These are designed to be used primarily by clients not already
            engaged in fork/join computations in the current pool.  The main
            forms of these methods accept instances of <c>ForkJoinTask</c>,
            but overloaded forms also allow mixed execution of plain <c>Runnable</c>- or <c>Callable</c>- based activities as well.  However,
            tasks that are already executing in a pool should normally instead
            use the within-computation forms listed in the table unless using
            async event-style tasks that are not usually joined, in which case
            there is little difference among choice of methods.
            
            &lt;table class="plain"&gt;
            &lt;caption&gt;Summary of task execution methods&lt;/caption&gt;
             &lt;tr&gt;
               &lt;td&gt;&lt;/td&gt;
               &lt;th scope="col"&gt; Call from non-fork/join clients&lt;/th&gt;
               &lt;th scope="col"&gt; Call from within fork/join computations&lt;/th&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt; Arrange async execution&lt;/th&gt;
               &lt;td&gt; <c>#execute(ForkJoinTask)</c>&lt;/td&gt;
               &lt;td&gt; <c>ForkJoinTask#fork</c>&lt;/td&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt; Await and obtain result&lt;/th&gt;
               &lt;td&gt; <c>#invoke(ForkJoinTask)</c>&lt;/td&gt;
               &lt;td&gt; <c>ForkJoinTask#invoke</c>&lt;/td&gt;
             &lt;/tr&gt;
             &lt;tr&gt;
               &lt;th scope="row" style="text-align:left"&gt; Arrange exec and obtain Future&lt;/th&gt;
               &lt;td&gt; <c>#submit(ForkJoinTask)</c>&lt;/td&gt;
               &lt;td&gt; <c>ForkJoinTask#fork</c> (ForkJoinTasks &lt;em&gt;are&lt;/em&gt; Futures)&lt;/td&gt;
             &lt;/tr&gt;
            &lt;/table&gt;</para>
      <para>The parameters used to construct the common pool may be controlled by
            setting the following System#getProperty system properties:
            &lt;ul&gt;
            &lt;li&gt;<c>java.util.concurrent.ForkJoinPool.common.parallelism</c>
            - the parallelism level, a non-negative integer
            &lt;li&gt;<c>java.util.concurrent.ForkJoinPool.common.threadFactory</c>
            - the class name of a <c>ForkJoinWorkerThreadFactory</c>.
            The ClassLoader#getSystemClassLoader() system class loader
            is used to load this class.
            &lt;li&gt;<c>java.util.concurrent.ForkJoinPool.common.exceptionHandler</c>
            - the class name of a <c>UncaughtExceptionHandler</c>.
            The ClassLoader#getSystemClassLoader() system class loader
            is used to load this class.
            &lt;li&gt;<c>java.util.concurrent.ForkJoinPool.common.maximumSpares</c>
            - the maximum number of allowed extra threads to maintain target
            parallelism (default 256).
            &lt;/ul&gt;
            If no thread factory is supplied via a system property, then the
            common pool uses a factory that uses the system class loader as the
            Thread#getContextClassLoader() thread context class loader.
            In addition, if a <c>SecurityManager</c> is present, then
            the common pool uses a factory supplying threads that have no
            <c>Permissions</c> enabled.
            
            Upon any error in establishing these settings, default parameters
            are used. It is possible to disable or limit the use of threads in
            the common pool by setting the parallelism property to zero, and/or
            using a factory that may return <c>null</c>. However doing so may
            cause unjoined tasks to never be executed.</para>
      <para>&lt;b&gt;Implementation notes:&lt;/b&gt; This implementation restricts the
            maximum number of running threads to 32767. Attempts to create
            pools with greater than the maximum number result in
            <c>IllegalArgumentException</c>.</para>
      <para>This implementation rejects submitted tasks (that is, by throwing
            <c>RejectedExecutionException</c>) only when the pool is shut down
            or internal resources have been exhausted.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ForkJoinPool();" />
      <MemberSignature Language="C#" Value="public ForkJoinPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using defaults for all
            other parameters (see <c>#ForkJoinPool(int,
            ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean,
            int, int, int, Predicate, long, TimeUnit)</c>).</summary>
        <remarks>
          <para>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using defaults for all
            other parameters (see <c>#ForkJoinPool(int,
            ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean,
            int, int, int, Predicate, long, TimeUnit)</c>).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#ForkJoinPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.ForkJoinPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (parallelism As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ForkJoinPool(int parallelism);" />
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : int -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool parallelism" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parallelism">the parallelism level</param>
        <summary>Creates a <c>ForkJoinPool</c> with the indicated parallelism
            level, using defaults for all other parameters (see <c>#ForkJoinPool(int, ForkJoinWorkerThreadFactory,
            UncaughtExceptionHandler, boolean, int, int, int, Predicate,
            long, TimeUnit)</c>).</summary>
        <remarks>
          <para>Creates a <c>ForkJoinPool</c> with the indicated parallelism
            level, using defaults for all other parameters (see <c>#ForkJoinPool(int, ForkJoinWorkerThreadFactory,
            UncaughtExceptionHandler, boolean, int, int, int, Predicate,
            long, TimeUnit)</c>).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#ForkJoinPool(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.ForkJoinPool(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ForkJoinPool(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected ForkJoinPool (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (parallelism As Integer, factory As ForkJoinPool.IForkJoinWorkerThreadFactory, handler As Thread.IUncaughtExceptionHandler, asyncMode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ForkJoinPool(int parallelism, Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ factory, Java::Lang::Thread::IUncaughtExceptionHandler ^ handler, bool asyncMode);" />
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism, Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory? factory, Java.Lang.Thread.IUncaughtExceptionHandler? handler, bool asyncMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism, class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory factory, class Java.Lang.Thread/IUncaughtExceptionHandler handler, bool asyncMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.Int32,Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory,Java.Lang.Thread.IUncaughtExceptionHandler,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : int * Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory * Java.Lang.Thread.IUncaughtExceptionHandler * bool -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool (parallelism, factory, handler, asyncMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
        <Parameter Name="factory" Type="Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory" />
        <Parameter Name="handler" Type="Java.Lang.Thread+IUncaughtExceptionHandler" />
        <Parameter Name="asyncMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="asyncMode">To be added.</param>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c>java.lang.Runtime#availableProcessors</c>, using the #defaultForkJoinWorkerThreadFactory default thread factory,
            no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#ForkJoinPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.ForkJoinPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the factory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (parallelism As Integer, factory As ForkJoinPool.IForkJoinWorkerThreadFactory, handler As Thread.IUncaughtExceptionHandler, asyncMode As Boolean, corePoolSize As Integer, maximumPoolSize As Integer, minimumRunnable As Integer, saturate As IPredicate, keepAliveTime As Long, unit As TimeUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ForkJoinPool(int parallelism, Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ factory, Java::Lang::Thread::IUncaughtExceptionHandler ^ handler, bool asyncMode, int corePoolSize, int maximumPoolSize, int minimumRunnable, Java::Util::Functions::IPredicate ^ saturate, long keepAliveTime, Java::Util::Concurrent::TimeUnit ^ unit);" />
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism, Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory? factory, Java.Lang.Thread.IUncaughtExceptionHandler? handler, bool asyncMode, int corePoolSize, int maximumPoolSize, int minimumRunnable, Java.Util.Functions.IPredicate? saturate, long keepAliveTime, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism, class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory factory, class Java.Lang.Thread/IUncaughtExceptionHandler handler, bool asyncMode, int32 corePoolSize, int32 maximumPoolSize, int32 minimumRunnable, class Java.Util.Functions.IPredicate saturate, int64 keepAliveTime, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.#ctor(System.Int32,Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory,Java.Lang.Thread.IUncaughtExceptionHandler,System.Boolean,System.Int32,System.Int32,System.Int32,Java.Util.Functions.IPredicate,System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.ForkJoinPool : int * Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory * Java.Lang.Thread.IUncaughtExceptionHandler * bool * int * int * int * Java.Util.Functions.IPredicate * int64 * Java.Util.Concurrent.TimeUnit -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="new Java.Util.Concurrent.ForkJoinPool (parallelism, factory, handler, asyncMode, corePoolSize, maximumPoolSize, minimumRunnable, saturate, keepAliveTime, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;ZIIILjava/util/function/Predicate;JLjava/util/concurrent/TimeUnit;)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;ZIIILjava/util/function/Predicate;JLjava/util/concurrent/TimeUnit;)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
        <Parameter Name="factory" Type="Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory" />
        <Parameter Name="handler" Type="Java.Lang.Thread+IUncaughtExceptionHandler" />
        <Parameter Name="asyncMode" Type="System.Boolean" />
        <Parameter Name="corePoolSize" Type="System.Int32" />
        <Parameter Name="maximumPoolSize" Type="System.Int32" />
        <Parameter Name="minimumRunnable" Type="System.Int32" />
        <Parameter Name="saturate" Type="Java.Util.Functions.IPredicate" />
        <Parameter Name="keepAliveTime" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="asyncMode">To be added.</param>
        <param name="corePoolSize">To be added.</param>
        <param name="maximumPoolSize">To be added.</param>
        <param name="minimumRunnable">To be added.</param>
        <param name="saturate">To be added.</param>
        <param name="keepAliveTime">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveThreadCount">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ActiveThreadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ActiveThreadCount { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int ActiveThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ActiveThreadCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ActiveThreadCount" />
      <MemberSignature Language="F#" Value="member this.ActiveThreadCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.ActiveThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getActiveThreadCount", "()I", "GetGetActiveThreadCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getActiveThreadCount", "()I", "GetGetActiveThreadCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads that are currently
            stealing or executing tasks.</summary>
        <value>the number of active threads</value>
        <remarks>
          <para>Returns an estimate of the number of threads that are currently
            stealing or executing tasks. This method may overestimate the
            number of active threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getActiveThreadCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getActiveThreadCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncMode">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AsyncMode { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool AsyncMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncMode" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.AsyncMode" />
      <MemberSignature Language="F#" Value="member this.AsyncMode : bool" Usage="Java.Util.Concurrent.ForkJoinPool.AsyncMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getAsyncMode", "()Z", "GetGetAsyncModeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getAsyncMode", "()Z", "GetGetAsyncModeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool uses local first-in-first-out
            scheduling mode for forked tasks that are never joined.</summary>
        <value>
          <c>true</c> if this pool uses async mode</value>
        <remarks>
          <para>Returns <c>true</c> if this pool uses local first-in-first-out
            scheduling mode for forked tasks that are never joined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getAsyncMode()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getAsyncMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitQuiescence">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AwaitQuiescence (timeout As Long, unit As TimeUnit) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AwaitQuiescence(long timeout, Java::Util::Concurrent::TimeUnit ^ unit);" />
      <MemberSignature Language="C#" Value="public virtual bool AwaitQuiescence (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AwaitQuiescence(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.AwaitQuiescence(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member AwaitQuiescence : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool&#xA;override this.AwaitQuiescence : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="forkJoinPool.AwaitQuiescence (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitQuiescence", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitQuiescence_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitQuiescence", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitQuiescence_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>If called by a ForkJoinTask operating in this pool, equivalent
            in effect to <c>ForkJoinTask#helpQuiesce</c>.</summary>
        <returns>
          <c>true</c> if quiescent; <c>false</c> if the
            timeout elapsed.</returns>
        <remarks>
          <para>If called by a ForkJoinTask operating in this pool, equivalent
            in effect to <c>ForkJoinTask#helpQuiesce</c>. Otherwise,
            waits and/or attempts to assist performing tasks until this
            pool <c>#isQuiescent</c> or the indicated timeout elapses.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#awaitQuiescence(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.awaitQuiescence(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitTermination">
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AwaitTermination (timeout As Long, unit As TimeUnit) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool AwaitTermination(long timeout, Java::Util::Concurrent::TimeUnit ^ unit);" />
      <MemberSignature Language="C#" Value="public override bool AwaitTermination (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AwaitTermination(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.AwaitTermination(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="override this.AwaitTermination : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="forkJoinPool.AwaitTermination (timeout, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Blocks until all tasks have completed execution after a
            shutdown request, or the timeout occurs, or the current thread
            is interrupted, whichever happens first.</summary>
        <returns>
          <c>true</c> if this executor terminated and
                    <c>false</c> if the timeout elapsed before termination</returns>
        <remarks>
          <para>Blocks until all tasks have completed execution after a
            shutdown request, or the timeout occurs, or the current thread
            is interrupted, whichever happens first. Because the <c>#commonPool()</c> never terminates until program shutdown, when
            applied to the common pool, this method is equivalent to <c>#awaitQuiescence(long, TimeUnit)</c> but always returns <c>false</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#awaitTermination(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.awaitTermination(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="CommonPool">
      <MemberSignature Language="VB.NET" Value="Public Shared Function CommonPool () As ForkJoinPool" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::Concurrent::ForkJoinPool ^ CommonPool();" />
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool? CommonPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinPool CommonPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.CommonPool" />
      <MemberSignature Language="F#" Value="static member CommonPool : unit -&gt; Java.Util.Concurrent.ForkJoinPool" Usage="Java.Util.Concurrent.ForkJoinPool.CommonPool " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("commonPool", "()Ljava/util/concurrent/ForkJoinPool;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("commonPool", "()Ljava/util/concurrent/ForkJoinPool;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the common pool instance.</summary>
        <returns>the common pool instance</returns>
        <remarks>
          <para>Returns the common pool instance. This pool is statically
            constructed; its run state is unaffected by attempts to <c>#shutdown</c> or <c>#shutdownNow</c>. However this pool and any
            ongoing processing are automatically terminated upon program
            <c>System#exit</c>.  Any program that relies on asynchronous
            task processing to complete before program termination should
            invoke <c>commonPool().</c><c>#awaitQuiescence awaitQuiescence</c>,
            before exit.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#commonPool()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.commonPool()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonPoolParallelism">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonPoolParallelism As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CommonPoolParallelism { int get(); };" />
      <MemberSignature Language="C#" Value="public static int CommonPoolParallelism { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CommonPoolParallelism" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.CommonPoolParallelism" />
      <MemberSignature Language="F#" Value="member this.CommonPoolParallelism : int" Usage="Java.Util.Concurrent.ForkJoinPool.CommonPoolParallelism" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCommonPoolParallelism", "()I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCommonPoolParallelism", "()I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the targeted parallelism level of the common pool.</summary>
        <value>the targeted parallelism level of the common pool</value>
        <remarks>
          <para>Returns the targeted parallelism level of the common pool.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getCommonPoolParallelism()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getCommonPoolParallelism()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultForkJoinWorkerThreadFactory">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultForkJoinWorkerThreadFactory As ForkJoinPool.IForkJoinWorkerThreadFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ DefaultForkJoinWorkerThreadFactory { Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory? DefaultForkJoinWorkerThreadFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />
      <MemberSignature Language="F#" Value="member this.DefaultForkJoinWorkerThreadFactory : Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory" Usage="Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("defaultForkJoinWorkerThreadFactory")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("defaultForkJoinWorkerThreadFactory")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a new ForkJoinWorkerThread.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#defaultForkJoinWorkerThreadFactory" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.defaultForkJoinWorkerThreadFactory</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrainTasksTo">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DrainTasksTo (c As ICollection(Of ForkJoinTask)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int DrainTasksTo(System::Collections::Generic::ICollection&lt;Java::Util::Concurrent::ForkJoinTask ^&gt; ^ c);" />
      <MemberSignature Language="C#" Value="protected virtual int DrainTasksTo (System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt;? c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 DrainTasksTo(class System.Collections.Generic.ICollection`1&lt;class Java.Util.Concurrent.ForkJoinTask&gt; c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.DrainTasksTo(System.Collections.Generic.ICollection{Java.Util.Concurrent.ForkJoinTask})" />
      <MemberSignature Language="F#" Value="abstract member DrainTasksTo : System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; -&gt; int&#xA;override this.DrainTasksTo : System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; -&gt; int" Usage="forkJoinPool.DrainTasksTo c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drainTasksTo", "(Ljava/util/Collection;)I", "GetDrainTasksTo_Ljava_util_Collection_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drainTasksTo", "(Ljava/util/Collection;)I", "GetDrainTasksTo_Ljava_util_Collection_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="c">the collection to transfer elements into</param>
        <summary>Removes all available unexecuted submitted and forked tasks
            from scheduling queues and adds them to the given collection,
            without altering their execution status.</summary>
        <returns>the number of elements transferred</returns>
        <remarks>
          <para>Removes all available unexecuted submitted and forked tasks
            from scheduling queues and adds them to the given collection,
            without altering their execution status. These may include
            artificially generated or wrapped tasks. This method is
            designed to be invoked only when the pool is known to be
            quiescent. Invocations at other times may not remove all
            tasks. A failure encountered while attempting to add elements
            to collection <c>c</c> may result in elements being in
            neither, either or both collections when the associated
            exception is thrown.  The behavior of this operation is
            undefined if the specified collection is modified while the
            operation is in progress.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#drainTasksTo(java.util.Collection%3C?%20super%20java.util.concurrent.ForkJoinTask%3C?%3E%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.drainTasksTo(java.util.Collection&lt;? super java.util.concurrent.ForkJoinTask&lt;?&gt;&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Execute (task As IRunnable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Execute(Java::Lang::IRunnable ^ task);" />
      <MemberSignature Language="C#" Value="public override void Execute (Java.Lang.IRunnable? task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Execute(class Java.Lang.IRunnable task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Execute(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="override this.Execute : Java.Lang.IRunnable -&gt; unit" Usage="forkJoinPool.Execute task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#execute(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.execute(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.NullPointerException">if the task is null</exception>
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">if the task cannot be
         scheduled for execution
</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Execute (task As ForkJoinTask)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Execute(Java::Util::Concurrent::ForkJoinTask ^ task);" />
      <MemberSignature Language="C#" Value="public virtual void Execute (Java.Util.Concurrent.ForkJoinTask? task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Execute(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="override this.Execute : Java.Util.Concurrent.ForkJoinTask -&gt; unit" Usage="forkJoinPool.Execute task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("execute", "(Ljava/util/concurrent/ForkJoinTask;)V", "GetExecute_Ljava_util_concurrent_ForkJoinTask_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("execute", "(Ljava/util/concurrent/ForkJoinTask;)V", "GetExecute_Ljava_util_concurrent_ForkJoinTask_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">the task</param>
        <summary>Arranges for (asynchronous) execution of the given task.</summary>
        <remarks>
          <para>Arranges for (asynchronous) execution of the given task.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#execute(java.util.concurrent.ForkJoinTask%3C?%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.execute(java.util.concurrent.ForkJoinTask&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Factory As ForkJoinPool.IForkJoinWorkerThreadFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ Factory { Java::Util::Concurrent::ForkJoinPool::IForkJoinWorkerThreadFactory ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory? Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory Factory" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.Factory" />
      <MemberSignature Language="F#" Value="member this.Factory : Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory" Usage="Java.Util.Concurrent.ForkJoinPool.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFactory", "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;", "GetGetFactoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFactory", "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;", "GetGetFactoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the factory used for constructing new workers.</summary>
        <value>the factory used for constructing new workers</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getFactory()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getFactory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedSubmissions">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasQueuedSubmissions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasQueuedSubmissions { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool HasQueuedSubmissions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedSubmissions" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.HasQueuedSubmissions" />
      <MemberSignature Language="F#" Value="member this.HasQueuedSubmissions : bool" Usage="Java.Util.Concurrent.ForkJoinPool.HasQueuedSubmissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasQueuedSubmissions", "()Z", "GetHasQueuedSubmissionsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasQueuedSubmissions", "()Z", "GetHasQueuedSubmissionsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if there are any tasks submitted to this
            pool that have not yet begun executing.</summary>
        <value>
          <c>true</c> if there are any queued submissions</value>
        <remarks>
          <para>Returns <c>true</c> if there are any tasks submitted to this
            pool that have not yet begun executing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#hasQueuedSubmissions()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.hasQueuedSubmissions()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Invoke (task As ForkJoinTask) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Object ^ Invoke(Java::Util::Concurrent::ForkJoinTask ^ task);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? Invoke (Java.Util.Concurrent.ForkJoinTask? task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Invoke(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Invoke(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Lang.Object&#xA;override this.Invoke : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Lang.Object" Usage="forkJoinPool.Invoke task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invoke", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;", "GetInvoke_Ljava_util_concurrent_ForkJoinTask_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invoke", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;", "GetInvoke_Ljava_util_concurrent_ForkJoinTask_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">the task</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the task's result</param>
        <summary>Performs the given task, returning its result upon completion.</summary>
        <returns>the task's result</returns>
        <remarks>
          <para>Performs the given task, returning its result upon completion.
            If the computation encounters an unchecked Exception or Error,
            it is rethrown as the outcome of this invocation.  Rethrown
            exceptions behave in the same way as regular exceptions, but,
            when possible, contain stack traces (as displayed for example
            using <c>ex.printStackTrace()</c>) of both the current thread
            as well as the thread actually encountering the exception;
            minimally only the latter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#invoke(java.util.concurrent.ForkJoinTask%3CT%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.invoke(java.util.concurrent.ForkJoinTask&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQuiescent">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsQuiescent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsQuiescent { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsQuiescent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQuiescent" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsQuiescent" />
      <MemberSignature Language="F#" Value="member this.IsQuiescent : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsQuiescent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isQuiescent", "()Z", "GetIsQuiescentHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isQuiescent", "()Z", "GetIsQuiescentHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all worker threads are currently idle.</summary>
        <value>
          <c>true</c> if all threads are currently idle</value>
        <remarks>
          <para>Returns <c>true</c> if all worker threads are currently idle.
            An idle worker is one that cannot obtain a task to execute
            because none are available to steal from other threads, and
            there are no pending submissions to the pool. This method is
            conservative; it might not return <c>true</c> immediately upon
            idleness of all threads, but will eventually become true if
            threads remain inactive.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#isQuiescent()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.isQuiescent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShutdown">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsShutdown { bool get(); };" />
      <MemberSignature Language="C#" Value="public override bool IsShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShutdown" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsShutdown" />
      <MemberSignature Language="F#" Value="member this.IsShutdown : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool has been shut down.</summary>
        <value>
          <c>true</c> if this pool has been shut down</value>
        <remarks>
          <para>Returns <c>true</c> if this pool has been shut down.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#isShutdown()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.isShutdown()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminated">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTerminated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTerminated { bool get(); };" />
      <MemberSignature Language="C#" Value="public override bool IsTerminated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminated" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsTerminated" />
      <MemberSignature Language="F#" Value="member this.IsTerminated : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsTerminated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all tasks have completed following shut down.</summary>
        <value>
          <c>true</c> if all tasks have completed following shut down</value>
        <remarks>
          <para>Returns <c>true</c> if all tasks have completed following shut down.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#isTerminated()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.isTerminated()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.IsTerminating" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="Java.Util.Concurrent.ForkJoinPool.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the process of termination has
            commenced but not yet completed.</summary>
        <value>
          <c>true</c> if terminating but not yet terminated</value>
        <remarks>
          <para>Returns <c>true</c> if the process of termination has
            commenced but not yet completed.  This method may be useful for
            debugging. A return of <c>true</c> reported a sufficient
            period after shutdown may indicate that submitted tasks have
            ignored or suppressed interruption, or are waiting for I/O,
            causing this executor not to properly terminate. (See the
            advisory notes for class <c>ForkJoinTask</c> stating that
            tasks should not normally entail blocking operations.  But if
            they do, they must abort them on interrupt.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#isTerminating()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.isTerminating()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.ForkJoinPool.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagedBlock">
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ManagedBlock (blocker As ForkJoinPool.IManagedBlocker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ManagedBlock(Java::Util::Concurrent::ForkJoinPool::IManagedBlocker ^ blocker);" />
      <MemberSignature Language="C#" Value="public static void ManagedBlock (Java.Util.Concurrent.ForkJoinPool.IManagedBlocker? blocker);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ManagedBlock(class Java.Util.Concurrent.ForkJoinPool/IManagedBlocker blocker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.ManagedBlock(Java.Util.Concurrent.ForkJoinPool.IManagedBlocker)" />
      <MemberSignature Language="F#" Value="static member ManagedBlock : Java.Util.Concurrent.ForkJoinPool.IManagedBlocker -&gt; unit" Usage="Java.Util.Concurrent.ForkJoinPool.ManagedBlock blocker" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("managedBlock", "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("managedBlock", "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocker" Type="Java.Util.Concurrent.ForkJoinPool+IManagedBlocker" />
      </Parameters>
      <Docs>
        <param name="blocker">the blocker task</param>
        <summary>Runs the given possibly blocking task.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#managedBlock(java.util.concurrent.ManagedBlocker)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.managedBlock(java.util.concurrent.ManagedBlocker)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if blocker.block did so
</exception>
      </Docs>
    </Member>
    <Member MemberName="Parallelism">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parallelism As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Parallelism { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int Parallelism { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Parallelism" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.Parallelism" />
      <MemberSignature Language="F#" Value="member this.Parallelism : int" Usage="Java.Util.Concurrent.ForkJoinPool.Parallelism" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParallelism", "()I", "GetGetParallelismHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParallelism", "()I", "GetGetParallelismHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the targeted parallelism level of this pool.</summary>
        <value>the targeted parallelism level of this pool</value>
        <remarks>
          <para>Returns the targeted parallelism level of this pool.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getParallelism()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getParallelism()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollSubmission">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PollSubmission () As ForkJoinTask" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Java::Util::Concurrent::ForkJoinTask ^ PollSubmission();" />
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.ForkJoinTask? PollSubmission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask PollSubmission() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.PollSubmission" />
      <MemberSignature Language="F#" Value="abstract member PollSubmission : unit -&gt; Java.Util.Concurrent.ForkJoinTask&#xA;override this.PollSubmission : unit -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="forkJoinPool.PollSubmission " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pollSubmission", "()Ljava/util/concurrent/ForkJoinTask;", "GetPollSubmissionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pollSubmission", "()Ljava/util/concurrent/ForkJoinTask;", "GetPollSubmissionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes and returns the next unexecuted submission if one is
            available.</summary>
        <returns>the next submission, or <c>null</c> if none</returns>
        <remarks>
          <para>Removes and returns the next unexecuted submission if one is
            available.  This method may be useful in extensions to this
            class that re-assign work in systems with multiple pools.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#pollSubmission()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.pollSubmission()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolSize">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PoolSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int PoolSize { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int PoolSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolSize" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.PoolSize" />
      <MemberSignature Language="F#" Value="member this.PoolSize : int" Usage="Java.Util.Concurrent.ForkJoinPool.PoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of worker threads that have started but not
            yet terminated.</summary>
        <value>the number of worker threads</value>
        <remarks>
          <para>Returns the number of worker threads that have started but not
            yet terminated.  The result returned by this method may differ
            from <c>#getParallelism</c> when threads are created to
            maintain parallelism when others are cooperatively blocked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getPoolSize()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getPoolSize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedSubmissionCount">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueuedSubmissionCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int QueuedSubmissionCount { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int QueuedSubmissionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueuedSubmissionCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.QueuedSubmissionCount" />
      <MemberSignature Language="F#" Value="member this.QueuedSubmissionCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.QueuedSubmissionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueuedSubmissionCount", "()I", "GetGetQueuedSubmissionCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueuedSubmissionCount", "()I", "GetGetQueuedSubmissionCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of tasks submitted to this
            pool that have not yet begun executing.</summary>
        <value>the number of queued submissions</value>
        <remarks>
          <para>Returns an estimate of the number of tasks submitted to this
            pool that have not yet begun executing.  This method may take
            time proportional to the number of submissions.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getQueuedSubmissionCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedTaskCount">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueuedTaskCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long QueuedTaskCount { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long QueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 QueuedTaskCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.QueuedTaskCount" />
      <MemberSignature Language="F#" Value="member this.QueuedTaskCount : int64" Usage="Java.Util.Concurrent.ForkJoinPool.QueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueuedTaskCount", "()J", "GetGetQueuedTaskCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueuedTaskCount", "()J", "GetGetQueuedTaskCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of tasks currently held
            in queues by worker threads (but not including tasks submitted
            to the pool that have not begun executing).</summary>
        <value>the number of queued tasks</value>
        <remarks>
          <para>Returns an estimate of the total number of tasks currently held
            in queues by worker threads (but not including tasks submitted
            to the pool that have not begun executing). This value is only
            an approximation, obtained by iterating across all threads in
            the pool. This method may be useful for tuning task
            granularities.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getQueuedTaskCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getQueuedTaskCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningThreadCount">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RunningThreadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int RunningThreadCount { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int RunningThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RunningThreadCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.RunningThreadCount" />
      <MemberSignature Language="F#" Value="member this.RunningThreadCount : int" Usage="Java.Util.Concurrent.ForkJoinPool.RunningThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRunningThreadCount", "()I", "GetGetRunningThreadCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRunningThreadCount", "()I", "GetGetRunningThreadCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of worker threads that are
            not blocked waiting to join tasks or for other managed
            synchronization.</summary>
        <value>the number of worker threads</value>
        <remarks>
          <para>Returns an estimate of the number of worker threads that are
            not blocked waiting to join tasks or for other managed
            synchronization. This method may overestimate the
            number of running threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getRunningThreadCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getRunningThreadCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Shutdown();" />
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Shutdown" />
      <MemberSignature Language="F#" Value="override this.Shutdown : unit -&gt; unit" Usage="forkJoinPool.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly initiates an orderly shutdown in which previously
            submitted tasks are executed, but no new tasks will be
            accepted.</summary>
        <remarks>
          <para>Possibly initiates an orderly shutdown in which previously
            submitted tasks are executed, but no new tasks will be
            accepted. Invocation has no effect on execution state if this
            is the <c>#commonPool()</c>, and no additional effect if
            already shut down.  Tasks that are in the process of being
            submitted concurrently during the course of this method may or
            may not be rejected.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#shutdown()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.shutdown()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownNow">
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ShutdownNow () As IList(Of IRunnable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;Java::Lang::IRunnable ^&gt; ^ ShutdownNow();" />
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;? ShutdownNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class Java.Lang.IRunnable&gt; ShutdownNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.ShutdownNow" />
      <MemberSignature Language="F#" Value="override this.ShutdownNow : unit -&gt; System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;" Usage="forkJoinPool.ShutdownNow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly attempts to cancel and/or stop all tasks, and reject
            all subsequently submitted tasks.</summary>
        <returns>an empty list</returns>
        <remarks>
          <para>Possibly attempts to cancel and/or stop all tasks, and reject
            all subsequently submitted tasks.  Invocation has no effect on
            execution state if this is the <c>#commonPool()</c>, and no
            additional effect if already shut down. Otherwise, tasks that
            are in the process of being submitted or executed concurrently
            during the course of this method may or may not be
            rejected. This method cancels both existing and unexecuted
            tasks, in order to permit termination in the presence of task
            dependencies. So the method always returns an empty list
            (unlike the case for some other Executors).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#shutdownNow()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.shutdownNow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StealCount">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StealCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long StealCount { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long StealCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StealCount" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.StealCount" />
      <MemberSignature Language="F#" Value="member this.StealCount : int64" Usage="Java.Util.Concurrent.ForkJoinPool.StealCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getStealCount", "()J", "GetGetStealCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getStealCount", "()J", "GetGetStealCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of completed tasks that
            were executed by a thread other than their submitter.</summary>
        <value>the number of steals</value>
        <remarks>
          <para>Returns an estimate of the total number of completed tasks that
            were executed by a thread other than their submitter. The
            reported value underestimates the actual total number of steals
            when the pool is not quiescent. This value may be useful for
            monitoring and tuning fork/join programs: in general, steal
            counts should be high enough to keep threads busy, but low
            enough to avoid overhead and contention across threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getStealCount()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getStealCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Submit (task As ForkJoinTask) As ForkJoinTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::Concurrent::ForkJoinTask ^ Submit(Java::Util::Concurrent::ForkJoinTask ^ task);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinTask? Submit (Java.Util.Concurrent.ForkJoinTask? task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask Submit(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.ForkJoinPool.Submit(Java.Util.Concurrent.ForkJoinTask)" />
      <MemberSignature Language="F#" Value="override this.Submit : Java.Util.Concurrent.ForkJoinTask -&gt; Java.Util.Concurrent.ForkJoinTask" Usage="forkJoinPool.Submit task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("submit", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;", "GetSubmit_Ljava_util_concurrent_ForkJoinTask_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("submit", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;", "GetSubmit_Ljava_util_concurrent_ForkJoinTask_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">the task to submit</param>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the task's result</param>
        <summary>Submits a ForkJoinTask for execution.</summary>
        <returns>the task</returns>
        <remarks>
          <para>Submits a ForkJoinTask for execution.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#submit(java.util.concurrent.ForkJoinTask%3CT%3E)" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.submit(java.util.concurrent.ForkJoinTask&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.ForkJoinPool.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.ForkJoinPool.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UncaughtExceptionHandler">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property UncaughtExceptionHandler As Thread.IUncaughtExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Lang::Thread::IUncaughtExceptionHandler ^ UncaughtExceptionHandler { Java::Lang::Thread::IUncaughtExceptionHandler ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.IUncaughtExceptionHandler? UncaughtExceptionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread/IUncaughtExceptionHandler UncaughtExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.ForkJoinPool.UncaughtExceptionHandler" />
      <MemberSignature Language="F#" Value="member this.UncaughtExceptionHandler : Java.Lang.Thread.IUncaughtExceptionHandler" Usage="Java.Util.Concurrent.ForkJoinPool.UncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the handler for internal worker threads that terminate
            due to unrecoverable errors encountered while executing tasks.</summary>
        <value>the handler, or <c>null</c> if none</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/ForkJoinPool#getUncaughtExceptionHandler()" title="Reference documentation">Java documentation for <code>java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
