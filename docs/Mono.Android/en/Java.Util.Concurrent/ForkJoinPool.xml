<Type Name="ForkJoinPool" FullName="Java.Util.Concurrent.ForkJoinPool">
  <TypeSignature Language="C#" Value="public class ForkJoinPool : Java.Util.Concurrent.AbstractExecutorService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ForkJoinPool extends Java.Util.Concurrent.AbstractExecutorService" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.AbstractExecutorService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ForkJoinPool", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>An <c><see cref="T:Java.Util.Concurrent.IExecutorService" /></c> for running <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>s.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An <c><see cref="T:Java.Util.Concurrent.IExecutorService" /></c> for running <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>s.
 A <c>ForkJoinPool</c> provides the entry point for submissions
 from non-<c>ForkJoinTask</c> clients, as well as management and
 monitoring operations.

 </para>
      <para tool="javadoc-to-mdoc">A <c>ForkJoinPool</c> differs from other kinds of <c><see cref="T:Java.Util.Concurrent.IExecutorService" /></c> mainly by virtue of employing
 <i>work-stealing</i>: all threads in the pool attempt to find and
 execute tasks submitted to the pool and/or created by other active
 tasks (eventually blocking waiting for work if none exist). This
 enables efficient processing when most tasks spawn other subtasks
 (as do most <c>ForkJoinTask</c>s), as well as when many small
 tasks are submitted to the pool from external clients.  Especially
 when setting <i>asyncMode</i> to true in constructors, <c>ForkJoinPool</c>s may also be appropriate for use with event-style
 tasks that are never joined.

 </para>
      <para tool="javadoc-to-mdoc">A static <c>commonPool()</c> is available and appropriate for
 most applications. The common pool is used by any ForkJoinTask that
 is not explicitly submitted to a specified pool. Using the common
 pool normally reduces resource usage (its threads are slowly
 reclaimed during periods of non-use, and reinstated upon subsequent
 use).

 </para>
      <para tool="javadoc-to-mdoc">For applications that require separate or custom pools, a <c>ForkJoinPool</c> may be constructed with a given target parallelism
 level; by default, equal to the number of available processors. The
 pool attempts to maintain enough active (or available) threads by
 dynamically adding, suspending, or resuming internal worker
 threads, even if some tasks are stalled waiting to join others.
 However, no such adjustments are guaranteed in the face of blocked
 I/O or other unmanaged synchronization. The nested <c><see cref="!:NoType:java/util/concurrent/ForkJoinPool$ManagedBlocker;Href=../../../../reference/java/util/concurrent/ForkJoinPool.ManagedBlocker.html" /></c> interface enables extension of the kinds of
 synchronization accommodated.

 </para>
      <para tool="javadoc-to-mdoc">In addition to execution and lifecycle control methods, this
 class provides status check methods (for example
 <c><see cref="P:Java.Util.Concurrent.ForkJoinPool.StealCount" /></c>) that are intended to aid in developing,
 tuning, and monitoring fork/join applications. Also, method
 <c><see cref="!:Java.Util.Concurrent.ForkJoinPool.toString()" /></c> returns indications of pool state in a
 convenient form for informal monitoring.

 </para>
      <para tool="javadoc-to-mdoc">As is the case with other ExecutorServices, there are three
 main task execution methods summarized in the following table.
 These are designed to be used primarily by clients not already
 engaged in fork/join computations in the current pool.  The main
 forms of these methods accept instances of <c>ForkJoinTask</c>,
 but overloaded forms also allow mixed execution of plain <c>Runnable</c>- or <c>Callable</c>- based activities as well.  However,
 tasks that are already executing in a pool should normally instead
 use the within-computation forms listed in the table unless using
 async event-style tasks that are not usually joined, in which case
 there is little difference among choice of methods.

 <format type="text/html"><table border="" cellpadding="3" cellspacing="1"><caption>Summary of task execution methods</caption><tr><td /><td align="CENTER"><b>Call from non-fork/join clients</b></td><td align="CENTER"><b>Call from within fork/join computations</b></td></tr><tr><td><b>Arrange async execution</b></td><td><c><see cref="!:Java.Util.Concurrent.ForkJoinPool.execute(java.util.concurrent.ForkJoinTask&lt;?&gt;)" /></c></td><td><c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Fork" /></c></td></tr><tr><td><b>Await and obtain result</b></td><td><c><see cref="!:Java.Util.Concurrent.ForkJoinPool.invoke(java.util.concurrent.ForkJoinTask&lt;T&gt;)" /></c></td><td><c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Invoke" /></c></td></tr><tr><td><b>Arrange exec and obtain Future</b></td><td><c><see cref="!:Java.Util.Concurrent.ForkJoinPool.submit(java.util.concurrent.ForkJoinTask&lt;T&gt;)" /></c></td><td><c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Fork" /></c> (ForkJoinTasks <i>are</i> Futures)</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">The common pool is by default constructed with default
 parameters, but these may be controlled by setting three
 <see cref="M:Java.Lang.JavaSystem.GetProperty(System.String)" />:
 <list type="bullet"><item><term><c>java.util.concurrent.ForkJoinPool.common.parallelism</c>
 - the parallelism level, a non-negative integer
 </term></item><item><term><c>java.util.concurrent.ForkJoinPool.common.threadFactory</c>
 - the class name of a <c><see cref="!:NoType:java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Href=../../../../reference/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" /></c></term></item><item><term><c>java.util.concurrent.ForkJoinPool.common.exceptionHandler</c>
 - the class name of a <c><see cref="!:NoType:java/lang/Thread$UncaughtExceptionHandler;Href=../../../../reference/java/lang/Thread.UncaughtExceptionHandler.html" /></c></term></item></list>
 The system class loader is used to load these classes.
 Upon any error in establishing these settings, default parameters
 are used. It is possible to disable or limit the use of threads in
 the common pool by setting the parallelism property to zero, and/or
 using a factory that may return <c>null</c>.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Implementation notes</b>
        </format>: This implementation restricts the
 maximum number of running threads to 32767. Attempts to create
 pools with greater than the maximum number result in
 <c>IllegalArgumentException</c>.

 </para>
      <para tool="javadoc-to-mdoc">This implementation rejects submitted tasks (that is, by throwing
 <c><see cref="T:Java.Util.Concurrent.RejectedExecutionException" /></c>) only when the pool is shut down
 or internal resources have been exhausted.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a <c>ForkJoinPool</c> with parallelism equal to <c><see cref="M:Java.Lang.Runtime.AvailableProcessors" /></c>, using the <see cref="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />,
 no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>ForkJoinPool</c> with parallelism equal to <c><see cref="M:Java.Lang.Runtime.AvailableProcessors" /></c>, using the <see cref="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />,
 no UncaughtExceptionHandler, and non-async LIFO processing mode.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <summary>Creates a <c>ForkJoinPool</c> with the indicated parallelism
 level, the <see cref="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />,
 no UncaughtExceptionHandler, and non-async LIFO processing mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>ForkJoinPool</c> with the indicated parallelism
 level, the <see cref="P:Java.Util.Concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory" />,
 no UncaughtExceptionHandler, and non-async LIFO processing mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinPool (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinPool (int parallelism, Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory factory, Java.Lang.Thread.IUncaughtExceptionHandler handler, bool asyncMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parallelism, class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory factory, class Java.Lang.Thread/IUncaughtExceptionHandler handler, bool asyncMode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parallelism" Type="System.Int32" />
        <Parameter Name="factory" Type="Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory" />
        <Parameter Name="handler" Type="Java.Lang.Thread+IUncaughtExceptionHandler" />
        <Parameter Name="asyncMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parallelism">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="asyncMode">To be added.</param>
        <summary>Creates a <c>ForkJoinPool</c> with the given parameters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>ForkJoinPool</c> with the given parameters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool(int, java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory, java.lang.Thread.UncaughtExceptionHandler, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if parallelism less than or
         equal to zero, or greater than implementation limit</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the factory is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="ActiveThreadCount">
      <MemberSignature Language="C#" Value="public virtual int ActiveThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ActiveThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActiveThreadCount", "()I", "GetGetActiveThreadCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads that are currently
 stealing or executing tasks.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads that are currently
 stealing or executing tasks. This method may overestimate the
 number of active threads.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getActiveThreadCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncMode">
      <MemberSignature Language="C#" Value="public virtual bool AsyncMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAsyncMode", "()Z", "GetGetAsyncModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool uses local first-in-first-out
 scheduling mode for forked tasks that are never joined.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this pool uses local first-in-first-out
 scheduling mode for forked tasks that are never joined.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getAsyncMode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitTermination">
      <MemberSignature Language="C#" Value="public override bool AwaitTermination (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AwaitTermination(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Blocks until all tasks have completed execution after a
 shutdown request, or the timeout occurs, or the current thread
 is interrupted, whichever happens first.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Blocks until all tasks have completed execution after a
 shutdown request, or the timeout occurs, or the current thread
 is interrupted, whichever happens first. Because the <c>commonPool()</c> never terminates until program shutdown, when
 applied to the common pool, this method is equivalent to <c><see cref="!:Java.Util.Concurrent.ForkJoinPool.awaitQuiescence(long,java.util.concurrent.TimeUnit)" /></c> but always returns <c>false</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#awaitTermination(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultForkJoinWorkerThreadFactory">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("defaultForkJoinWorkerThreadFactory")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a new ForkJoinWorkerThread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new ForkJoinWorkerThread. This factory is used unless
 overridden in ForkJoinPool constructors.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrainTasksTo">
      <MemberSignature Language="C#" Value="protected virtual int DrainTasksTo (System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt; c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 DrainTasksTo(class System.Collections.Generic.ICollection`1&lt;class Java.Util.Concurrent.ForkJoinTask&gt; c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drainTasksTo", "(Ljava/util/Collection;)I", "GetDrainTasksTo_Ljava_util_Collection_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.Generic.ICollection&lt;Java.Util.Concurrent.ForkJoinTask&gt;" />
      </Parameters>
      <Docs>
        <param name="c">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public override void Execute (Java.Lang.IRunnable task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Execute(class Java.Lang.IRunnable task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#execute(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.NullPointerException">if the task is null</exception>
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">if the task cannot be
         scheduled for execution
</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public virtual void Execute (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "(Ljava/util/concurrent/ForkJoinTask;)V", "GetExecute_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinPool.IForkJoinWorkerThreadFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.ForkJoinPool/IForkJoinWorkerThreadFactory Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFactory", "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;", "GetGetFactoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool+IForkJoinWorkerThreadFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the factory used for constructing new workers.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the factory used for constructing new workers.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getFactory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedSubmissions">
      <MemberSignature Language="C#" Value="public virtual bool HasQueuedSubmissions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedSubmissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedSubmissions", "()Z", "GetHasQueuedSubmissionsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if there are any tasks submitted to this
 pool that have not yet begun executing.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if there are any tasks submitted to this
 pool that have not yet begun executing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#hasQueuedSubmissions()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Invoke (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Invoke(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invoke", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;", "GetInvoke_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQuiescent">
      <MemberSignature Language="C#" Value="public virtual bool IsQuiescent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQuiescent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isQuiescent", "()Z", "GetIsQuiescentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all worker threads are currently idle.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if all worker threads are currently idle.
 An idle worker is one that cannot obtain a task to execute
 because none are available to steal from other threads, and
 there are no pending submissions to the pool. This method is
 conservative; it might not return <c>true</c> immediately upon
 idleness of all threads, but will eventually become true if
 threads remain inactive.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isQuiescent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShutdown">
      <MemberSignature Language="C#" Value="public override bool IsShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isShutdown", "()Z", "GetIsShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this pool has been shut down.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this pool has been shut down.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isShutdown()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminated">
      <MemberSignature Language="C#" Value="public override bool IsTerminated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTerminated", "()Z", "GetIsTerminatedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if all tasks have completed following shut down.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if all tasks have completed following shut down.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isTerminated()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public virtual bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTerminating", "()Z", "GetIsTerminatingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the process of termination has
 commenced but not yet completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if the process of termination has
 commenced but not yet completed.  This method may be useful for
 debugging. A return of <c>true</c> reported a sufficient
 period after shutdown may indicate that submitted tasks have
 ignored or suppressed interruption, or are waiting for I/O,
 causing this executor not to properly terminate. (See the
 advisory notes for class <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c> stating that
 tasks should not normally entail blocking operations.  But if
 they do, they must abort them on interrupt.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isTerminating()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagedBlock">
      <MemberSignature Language="C#" Value="public static void ManagedBlock (Java.Util.Concurrent.ForkJoinPool.IManagedBlocker blocker);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ManagedBlock(class Java.Util.Concurrent.ForkJoinPool/IManagedBlocker blocker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("managedBlock", "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocker" Type="Java.Util.Concurrent.ForkJoinPool+IManagedBlocker" />
      </Parameters>
      <Docs>
        <param name="blocker">the blocker</param>
        <summary>Blocks in accord with the given blocker.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Blocks in accord with the given blocker.  If the current thread
 is a <c><see cref="T:Java.Util.Concurrent.ForkJoinWorkerThread" /></c>, this method possibly
 arranges for a spare thread to be activated if necessary to
 ensure sufficient parallelism while the current thread is blocked.

 </para>
          <para tool="javadoc-to-mdoc">If the caller is not a <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>, this method is
 behaviorally equivalent to
  <sample external-id="F1033AE5A7F221E025FCC82DEC962C50" />

 If the caller is a <c>ForkJoinTask</c>, then the pool may
 first be expanded to ensure parallelism, and later adjusted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.InterruptedException">if blocker.block did so
</exception>
      </Docs>
    </Member>
    <Member MemberName="Parallelism">
      <MemberSignature Language="C#" Value="public virtual int Parallelism { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Parallelism" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParallelism", "()I", "GetGetParallelismHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the targeted parallelism level of this pool.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the targeted parallelism level of this pool.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getParallelism()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollSubmission">
      <MemberSignature Language="C#" Value="protected virtual Java.Util.Concurrent.ForkJoinTask PollSubmission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask PollSubmission() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pollSubmission", "()Ljava/util/concurrent/ForkJoinTask;", "GetPollSubmissionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes and returns the next unexecuted submission if one is
 available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes and returns the next unexecuted submission if one is
 available.  This method may be useful in extensions to this
 class that re-assign work in systems with multiple pools.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#pollSubmission()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolSize">
      <MemberSignature Language="C#" Value="public virtual int PoolSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPoolSize", "()I", "GetGetPoolSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of worker threads that have started but not
 yet terminated.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of worker threads that have started but not
 yet terminated.  The result returned by this method may differ
 from <c><see cref="P:Java.Util.Concurrent.ForkJoinPool.Parallelism" /></c> when threads are created to
 maintain parallelism when others are cooperatively blocked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getPoolSize()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedSubmissionCount">
      <MemberSignature Language="C#" Value="public virtual int QueuedSubmissionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueuedSubmissionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedSubmissionCount", "()I", "GetGetQueuedSubmissionCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of tasks submitted to this
 pool that have not yet begun executing.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of tasks submitted to this
 pool that have not yet begun executing.  This method may take
 time proportional to the number of submissions.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getQueuedSubmissionCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuedTaskCount">
      <MemberSignature Language="C#" Value="public virtual long QueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 QueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedTaskCount", "()J", "GetGetQueuedTaskCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of tasks currently held
 in queues by worker threads (but not including tasks submitted
 to the pool that have not begun executing).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the total number of tasks currently held
 in queues by worker threads (but not including tasks submitted
 to the pool that have not begun executing). This value is only
 an approximation, obtained by iterating across all threads in
 the pool. This method may be useful for tuning task
 granularities.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getQueuedTaskCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningThreadCount">
      <MemberSignature Language="C#" Value="public virtual int RunningThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RunningThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRunningThreadCount", "()I", "GetGetRunningThreadCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of worker threads that are
 not blocked waiting to join tasks or for other managed
 synchronization.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of worker threads that are
 not blocked waiting to join tasks or for other managed
 synchronization. This method may overestimate the
 number of running threads.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getRunningThreadCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly initiates an orderly shutdown in which previously
 submitted tasks are executed, but no new tasks will be
 accepted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Possibly initiates an orderly shutdown in which previously
 submitted tasks are executed, but no new tasks will be
 accepted. Invocation has no effect on execution state if this
 is the <c>commonPool()</c>, and no additional effect if
 already shut down.  Tasks that are in the process of being
 submitted concurrently during the course of this method may or
 may not be rejected.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#shutdown()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownNow">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt; ShutdownNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class Java.Lang.IRunnable&gt; ShutdownNow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.IRunnable&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly attempts to cancel and/or stop all tasks, and reject
 all subsequently submitted tasks.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Possibly attempts to cancel and/or stop all tasks, and reject
 all subsequently submitted tasks.  Invocation has no effect on
 execution state if this is the <c>commonPool()</c>, and no
 additional effect if already shut down. Otherwise, tasks that
 are in the process of being submitted or executed concurrently
 during the course of this method may or may not be
 rejected. This method cancels both existing and unexecuted
 tasks, in order to permit termination in the presence of task
 dependencies. So the method always returns an empty list
 (unlike the case for some other Executors).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#shutdownNow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StealCount">
      <MemberSignature Language="C#" Value="public virtual long StealCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StealCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStealCount", "()J", "GetGetStealCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the total number of tasks stolen from
 one thread's work queue by another.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the total number of tasks stolen from
 one thread's work queue by another. The reported value
 underestimates the actual total number of steals when the pool
 is not quiescent. This value may be useful for monitoring and
 tuning fork/join programs: in general, steal counts should be
 high enough to keep threads busy, but low enough to avoid
 overhead and contention across threads.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getStealCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinTask Submit (Java.Util.Concurrent.ForkJoinTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.ForkJoinTask Submit(class Java.Util.Concurrent.ForkJoinTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("submit", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;", "GetSubmit_Ljava_util_concurrent_ForkJoinTask_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.IUncaughtExceptionHandler UncaughtExceptionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread/IUncaughtExceptionHandler UncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the handler for internal worker threads that terminate
 due to unrecoverable errors encountered while executing tasks.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the handler for internal worker threads that terminate
 due to unrecoverable errors encountered while executing tasks.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getUncaughtExceptionHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
