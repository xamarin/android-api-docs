<Type Name="Semaphore" FullName="Java.Util.Concurrent.Semaphore">
  <TypeSignature Language="C#" Value="public class Semaphore : Java.Lang.Object, IDisposable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Semaphore extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/Semaphore", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A counting semaphore.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A counting semaphore.  Conceptually, a semaphore maintains a set of
 permits.  Each <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c> blocks if necessary until a permit is
 available, and then takes it.  Each <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c> adds a permit,
 potentially releasing a blocking acquirer.
 However, no actual permit objects are used; the <c>Semaphore</c> just
 keeps a count of the number available and acts accordingly.

 </para>
      <para tool="javadoc-to-mdoc">Semaphores are often used to restrict the number of threads than can
 access some (physical or logical) resource. For example, here is
 a class that uses a semaphore to control access to a pool of items:
  <example><code lang="java">class Pool {
   private static final int MAX_AVAILABLE = 100;
   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);

   public Object getItem() throws InterruptedException {
     available.acquire();
     return getNextAvailableItem();
   

   public void putItem(Object x) {
     if (markAsUnused(x))
       available.release();
   }

   // Not a particularly efficient data structure; just for demo

   protected Object[] items = ... whatever kinds of items being managed
   protected boolean[] used = new boolean[MAX_AVAILABLE];

   protected synchronized Object getNextAvailableItem() {
     for (int i = 0; i </code></example></para>
      <para tool="javadoc-to-mdoc">Before obtaining an item each thread must acquire a permit from
 the semaphore, guaranteeing that an item is available for use. When
 the thread has finished with the item it is returned back to the
 pool and a permit is returned to the semaphore, allowing another
 thread to acquire that item.  Note that no synchronization lock is
 held when <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c> is called as that would prevent an item
 from being returned to the pool.  The semaphore encapsulates the
 synchronization needed to restrict access to the pool, separately
 from any synchronization needed to maintain the consistency of the
 pool itself.

 </para>
      <para tool="javadoc-to-mdoc">A semaphore initialized to one, and which is used such that it
 only has at most one permit available, can serve as a mutual
 exclusion lock.  This is more commonly known as a <i>binary
 semaphore</i>, because it only has two states: one permit
 available, or zero permits available.  When used in this way, the
 binary semaphore has the property (unlike many <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c>
 implementations), that the "lock" can be released by a
 thread other than the owner (as semaphores have no notion of
 ownership).  This can be useful in some specialized contexts, such
 as deadlock recovery.

 </para>
      <para tool="javadoc-to-mdoc">The constructor for this class optionally accepts a
 <i>fairness</i> parameter. When set false, this class makes no
 guarantees about the order in which threads acquire permits. In
 particular, <i>barging</i> is permitted, that is, a thread
 invoking <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c> can be allocated a permit ahead of a
 thread that has been waiting - logically the new thread places itself at
 the head of the queue of waiting threads. When fairness is set true, the
 semaphore guarantees that threads invoking any of the <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c> methods are selected to obtain permits in the order in
 which their invocation of those methods was processed
 (first-in-first-out; FIFO). Note that FIFO ordering necessarily
 applies to specific internal points of execution within these
 methods.  So, it is possible for one thread to invoke
 <c>acquire</c> before another, but reach the ordering point after
 the other, and similarly upon return from the method.
 Also note that the untimed <c><see cref="M:Java.Util.Concurrent.Semaphore.TryAcquire" /></c> methods do not
 honor the fairness setting, but will take any permits that are
 available.

 </para>
      <para tool="javadoc-to-mdoc">Generally, semaphores used to control resource access should be
 initialized as fair, to ensure that no thread is starved out from
 accessing a resource. When using semaphores for other kinds of
 synchronization control, the throughput advantages of non-fair
 ordering often outweigh fairness considerations.

 </para>
      <para tool="javadoc-to-mdoc">This class also provides convenience methods to <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire(System.Int32)" /></c> and <c><see cref="M:Java.Util.Concurrent.Semaphore.Release(System.Int32)" /></c> multiple
 permits at a time.  Beware of the increased risk of indefinite
 postponement when these methods are used without fairness set true.

 </para>
      <para tool="javadoc-to-mdoc">Memory consistency effects: Actions in a thread prior to calling
 a "release" method such as <c>release()</c>
 actions following a successful "acquire" method such as <c>acquire()</c>
 in another thread.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int permits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 permits) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permits">To be added.</param>
        <summary>Creates a <c>Semaphore</c> with the given number of
 permits and nonfair fairness setting.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Semaphore</c> with the given number of
 permits and nonfair fairness setting.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#Semaphore(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int permits, bool fair);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 permits, bool fair) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
        <Parameter Name="fair" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="permits">To be added.</param>
        <param name="fair">To be added.</param>
        <summary>Creates a <c>Semaphore</c> with the given number of
 permits and the given fairness setting.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Semaphore</c> with the given number of
 permits and the given fairness setting.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#Semaphore(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Semaphore (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual void Acquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acquire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "()V", "GetAcquireHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires a permit from this semaphore, blocking until one is
 available, or the thread is <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires a permit from this semaphore, blocking until one is
 available, or the thread is <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 </para>
          <para tool="javadoc-to-mdoc">If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 <list type="bullet"><item><term>Some other thread invokes the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c> method for this
 semaphore and the current thread is next to be assigned a permit; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" />
 the current thread.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while waiting
 for a permit,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#acquire()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual void Acquire (int permits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acquire(int32 permits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "(I)V", "GetAcquire_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permits">the number of permits to acquire</param>
        <summary>Acquires the given number of permits from this semaphore,
 blocking until all are available,
 or the thread is <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits from this semaphore,
 blocking until all are available,
 or the thread is <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits, if they are available,
 and returns immediately, reducing the number of available permits
 by the given amount.

 </para>
          <para tool="javadoc-to-mdoc">If insufficient permits are available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 <list type="bullet"><item><term>Some other thread invokes one of the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" />
 the current thread.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while waiting
 for a permit,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.
 Any permits that were to be assigned to this thread are instead
 assigned to other threads trying to acquire permits, as if
 permits had been made available by a call to <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#acquire(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>permits</c> is negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireUninterruptibly">
      <MemberSignature Language="C#" Value="public virtual void AcquireUninterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcquireUninterruptibly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireUninterruptibly", "()V", "GetAcquireUninterruptiblyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires a permit from this semaphore, blocking until one is
 available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires a permit from this semaphore, blocking until one is
 available.

 </para>
          <para tool="javadoc-to-mdoc">Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 </para>
          <para tool="javadoc-to-mdoc">If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 some other thread invokes the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c> method for this
 semaphore and the current thread is next to be assigned a permit.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is <see cref="M:Java.Lang.Thread.Interrupt" />
 while waiting for a permit then it will continue to wait, but the
 time at which the thread is assigned a permit may change compared to
 the time it would have received the permit had no interruption
 occurred.  When the thread does return from this method its interrupt
 status will be set.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#acquireUninterruptibly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquireUninterruptibly">
      <MemberSignature Language="C#" Value="public virtual void AcquireUninterruptibly (int permits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcquireUninterruptibly(int32 permits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireUninterruptibly", "(I)V", "GetAcquireUninterruptibly_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permits">the number of permits to acquire</param>
        <summary>Acquires the given number of permits from this semaphore,
 blocking until all are available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits from this semaphore,
 blocking until all are available.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits, if they are available,
 and returns immediately, reducing the number of available permits
 by the given amount.

 </para>
          <para tool="javadoc-to-mdoc">If insufficient permits are available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 some other thread invokes one of the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is <see cref="M:Java.Lang.Thread.Interrupt" />
 while waiting for permits then it will continue to wait and its
 position in the queue is not affected.  When the thread does return
 from this method its interrupt status will be set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#acquireUninterruptibly(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>permits</c> is negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="AvailablePermits">
      <MemberSignature Language="C#" Value="public virtual int AvailablePermits ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AvailablePermits() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("availablePermits", "()I", "GetAvailablePermitsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current number of permits available in this semaphore.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current number of permits available in this semaphore.

 </para>
          <para tool="javadoc-to-mdoc">This method is typically used for debugging and testing purposes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#availablePermits()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DrainPermits">
      <MemberSignature Language="C#" Value="public virtual int DrainPermits ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DrainPermits() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drainPermits", "()I", "GetDrainPermitsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires and returns all permits that are immediately available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires and returns all permits that are immediately available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#drainPermits()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasQueuedThreads">
      <MemberSignature Language="C#" Value="public bool HasQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedThreads", "()Z", "GetHasQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting to acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting to acquire. Note that
 because cancellations may occur at any time, a <c>true</c>
 return does not guarantee that any other thread will ever
 acquire.  This method is designed primarily for use in
 monitoring of the system state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#hasQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsFair">
      <MemberSignature Language="C#" Value="public virtual bool IsFair { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFair" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFair", "()Z", "GetIsFairHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this semaphore has fairness set true.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this semaphore has fairness set true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#isFair()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueuedThreads">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; QueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; QueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "GetGetQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to acquire.
 Because the actual set of threads may change dynamically while
 constructing this result, the returned collection is only a best-effort
 estimate.  The elements of the returned collection are in no particular
 order.  This method is designed to facilitate construction of
 subclasses that provide more extensive monitoring facilities.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#getQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueueLength">
      <MemberSignature Language="C#" Value="public int QueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueueLength", "()I", "GetGetQueueLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting to acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting to acquire.
 The value is only an estimate because the number of threads may
 change dynamically while this method traverses internal data
 structures.  This method is designed for use in monitoring of the
 system state, not for synchronization control.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#getQueueLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReducePermits">
      <MemberSignature Language="C#" Value="protected virtual void ReducePermits (int reduction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReducePermits(int32 reduction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reducePermits", "(I)V", "GetReducePermits_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reduction" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reduction">the number of permits to remove</param>
        <summary>Shrinks the number of available permits by the indicated
 reduction.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Shrinks the number of available permits by the indicated
 reduction. This method can be useful in subclasses that use
 semaphores to track resources that become unavailable. This
 method differs from <c>acquire</c> in that it does not block
 waiting for permits to become available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#reducePermits(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>reduction</c> is negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases a permit, returning it to the semaphore.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases a permit, returning it to the semaphore.

 </para>
          <para tool="javadoc-to-mdoc">Releases a permit, increasing the number of available permits by
 one.  If any threads are trying to acquire a permit, then one is
 selected and given the permit that was just released.  That thread
 is (re)enabled for thread scheduling purposes.

 </para>
          <para tool="javadoc-to-mdoc">There is no requirement that a thread that releases a permit must
 have acquired that permit by calling <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c>.
 Correct usage of a semaphore is established by programming convention
 in the application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release (int permits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release(int32 permits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "(I)V", "GetRelease_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permits">the number of permits to release</param>
        <summary>Releases the given number of permits, returning them to the semaphore.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases the given number of permits, returning them to the semaphore.

 </para>
          <para tool="javadoc-to-mdoc">Releases the given number of permits, increasing the number of
 available permits by that amount.
 If any threads are trying to acquire permits, then one
 is selected and given the permits that were just released.
 If the number of available permits satisfies that thread's request
 then that thread is (re)enabled for thread scheduling purposes;
 otherwise the thread will wait until sufficient permits are available.
 If there are still permits available
 after this thread's request has been satisfied, then those permits
 are assigned in turn to other threads trying to acquire permits.

 </para>
          <para tool="javadoc-to-mdoc">There is no requirement that a thread that releases a permit must
 have acquired that permit by calling <c><see cref="M:Java.Util.Concurrent.Semaphore.Acquire" /></c>.
 Correct usage of a semaphore is established by programming convention
 in the application.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#release(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>permits</c> is negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="public virtual bool TryAcquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAcquire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "()Z", "GetTryAcquireHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires a permit from this semaphore, only if one is available at the
 time of invocation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires a permit from this semaphore, only if one is available at the
 time of invocation.

 </para>
          <para tool="javadoc-to-mdoc">Acquires a permit, if one is available and returns immediately,
 with the value <c>true</c>,
 reducing the number of available permits by one.

 </para>
          <para tool="javadoc-to-mdoc">If no permit is available then this method will return
 immediately with the value <c>false</c>.

 </para>
          <para tool="javadoc-to-mdoc">Even when this semaphore has been set to use a
 fair ordering policy, a call to <c>tryAcquire()</c><i>will</i>
 immediately acquire a permit if one is available, whether or not
 other threads are currently waiting.
 This "barging" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to honor
 the fairness setting, then use
 <c><see cref="M:Java.Util.Concurrent.Semaphore.TryAcquire(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>
 which is almost equivalent (it also detects interruption).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#tryAcquire()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="public virtual bool TryAcquire (int permits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAcquire(int32 permits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "(I)Z", "GetTryAcquire_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permits">the number of permits to acquire</param>
        <summary>Acquires the given number of permits from this semaphore, only
 if all are available at the time of invocation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits from this semaphore, only
 if all are available at the time of invocation.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits, if they are available, and
 returns immediately, with the value <c>true</c>,
 reducing the number of available permits by the given amount.

 </para>
          <para tool="javadoc-to-mdoc">If insufficient permits are available then this method will return
 immediately with the value <c>false</c> and the number of available
 permits is unchanged.

 </para>
          <para tool="javadoc-to-mdoc">Even when this semaphore has been set to use a fair ordering
 policy, a call to <c>tryAcquire</c><i>will</i>
 immediately acquire a permit if one is available, whether or
 not other threads are currently waiting.  This
 "barging" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to
 honor the fairness setting, then use <c><see cref="M:Java.Util.Concurrent.Semaphore.TryAcquire(System.Int32,System.Int64,System.Int64)" /></c>
 which is almost equivalent (it also detects interruption).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#tryAcquire(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>permits</c> is negative
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="public virtual bool TryAcquire (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAcquire(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryAcquire_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait for a permit</param>
        <param name="unit">the time unit of the <c>timeout</c> argument</param>
        <summary>Acquires a permit from this semaphore, if one becomes available
 within the given waiting time and the current thread has not
 been <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires a permit from this semaphore, if one becomes available
 within the given waiting time and the current thread has not
 been <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">Acquires a permit, if one is available and returns immediately,
 with the value <c>true</c>,
 reducing the number of available permits by one.

 </para>
          <para tool="javadoc-to-mdoc">If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of three things happens:
 <list type="bullet"><item><term>Some other thread invokes the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c> method for this
 semaphore and the current thread is next to be assigned a permit; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" />
 the current thread; or
 </term></item><item><term>The specified waiting time elapses.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If a permit is acquired then the value <c>true</c> is returned.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while waiting
 to acquire a permit,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then the value <c>false</c>
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#tryAcquire(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="public virtual bool TryAcquire (int permits, long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAcquire(int32 permits, int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "(IJLjava/util/concurrent/TimeUnit;)Z", "GetTryAcquire_IJLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permits" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="permits">the number of permits to acquire</param>
        <param name="timeout">the maximum time to wait for the permits</param>
        <param name="unit">the time unit of the <c>timeout</c> argument</param>
        <summary>Acquires the given number of permits from this semaphore, if all
 become available within the given waiting time and the current
 thread has not been <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits from this semaphore, if all
 become available within the given waiting time and the current
 thread has not been <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the given number of permits, if they are available and
 returns immediately, with the value <c>true</c>,
 reducing the number of available permits by the given amount.

 </para>
          <para tool="javadoc-to-mdoc">If insufficient permits are available then
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:
 <list type="bullet"><item><term>Some other thread invokes one of the <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" />
 the current thread; or
 </term></item><item><term>The specified waiting time elapses.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the permits are acquired then the value <c>true</c> is returned.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while waiting
 to acquire the permits,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.
 Any permits that were to be assigned to this thread, are instead
 assigned to other threads trying to acquire permits, as if
 the permits had been made available by a call to <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then the value <c>false</c>
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.  Any permits that were to be assigned to this
 thread, are instead assigned to other threads trying to acquire
 permits, as if the permits had been made available by a call to
 <c><see cref="M:Java.Util.Concurrent.Semaphore.Release" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Semaphore.html#tryAcquire(int, long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>permits</c> is negative
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
