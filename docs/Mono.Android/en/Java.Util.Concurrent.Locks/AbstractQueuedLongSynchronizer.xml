<Type Name="AbstractQueuedLongSynchronizer" FullName="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer">
  <TypeSignature Language="C#" Value="public abstract class AbstractQueuedLongSynchronizer : Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AbstractQueuedLongSynchronizer extends Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" />
  <TypeSignature Language="F#" Value="type AbstractQueuedLongSynchronizer = class&#xA;    inherit AbstractOwnableSynchronizer&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>A version of <c>AbstractQueuedSynchronizer</c> in
            which synchronization state is maintained as a <c>long</c>.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedLongSynchronizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>AbstractQueuedLongSynchronizer</c> instance
            with initial synchronization state of zero.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#AbstractQueuedLongSynchronizer()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.AbstractQueuedLongSynchronizer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedLongSynchronizer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" Usage="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public void Acquire (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Acquire(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.Acquire : int64 -&gt; unit" Usage="abstractQueuedLongSynchronizer.Acquire arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquire", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquire", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Acquires in exclusive mode, ignoring interrupts.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#acquire(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AcquireInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireInterruptibly (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireInterruptibly(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.AcquireInterruptibly(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.AcquireInterruptibly : int64 -&gt; unit" Usage="abstractQueuedLongSynchronizer.AcquireInterruptibly arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireInterruptibly", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireInterruptibly", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Acquires in exclusive mode, aborting if interrupted.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#acquireInterruptibly(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireShared">
      <MemberSignature Language="C#" Value="public void AcquireShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireShared(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.AcquireShared(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.AcquireShared : int64 -&gt; unit" Usage="abstractQueuedLongSynchronizer.AcquireShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireShared", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireShared", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquireShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Acquires in shared mode, ignoring interrupts.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#acquireShared(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AcquireSharedInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireSharedInterruptibly (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireSharedInterruptibly(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.AcquireSharedInterruptibly(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.AcquireSharedInterruptibly : int64 -&gt; unit" Usage="abstractQueuedLongSynchronizer.AcquireSharedInterruptibly arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireSharedInterruptibly", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireSharedInterruptibly", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.
            This value is conveyed to <c>#tryAcquireShared</c> but is
            otherwise uninterpreted and can represent anything
            you like.</param>
        <summary>Acquires in shared mode, aborting if interrupted.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#acquireSharedInterruptibly(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSetState">
      <MemberSignature Language="C#" Value="protected bool CompareAndSetState (long expect, long update);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool CompareAndSetState(int64 expect, int64 update) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.CompareAndSetState(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.CompareAndSetState : int64 * int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.CompareAndSetState (expect, update)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndSetState", "(JJ)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndSetState", "(JJ)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expect" Type="System.Int64" />
        <Parameter Name="update" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expect">the expected value</param>
        <param name="update">the new value</param>
        <summary>Atomically sets synchronization state to the given updated
            value if the current state value equals the expected value.</summary>
        <returns>
          <c>true</c> if successful. False return indicates that the actual
                    value was not equal to the expected value.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#compareAndSetState(long,%20long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ExclusiveQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? ExclusiveQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; ExclusiveQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ExclusiveQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.ExclusiveQueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ExclusiveQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire in exclusive mode.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getExclusiveQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="FirstQueuedThread">
      <MemberSignature Language="C#" Value="public Java.Lang.Thread? FirstQueuedThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread FirstQueuedThread" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.FirstQueuedThread" />
      <MemberSignature Language="F#" Value="member this.FirstQueuedThread : Java.Lang.Thread" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.FirstQueuedThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the first (longest-waiting) thread in the queue, or
            <c>null</c> if no threads are currently queued.</summary>
        <value>the first (longest-waiting) thread in the queue, or
                    <c>null</c> if no threads are currently queued</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getFirstQueuedThread()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetWaitingThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? GetWaitingThreads (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; GetWaitingThreads(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.GetWaitingThreads(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.GetWaitingThreads : Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject -&gt; System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="abstractQueuedLongSynchronizer.GetWaitingThreads condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns a collection containing those threads that may be
            waiting on the given condition associated with this
            synchronizer.</summary>
        <returns>the collection of threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getWaitingThreads(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWaitQueueLength">
      <MemberSignature Language="C#" Value="public int GetWaitQueueLength (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetWaitQueueLength(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.GetWaitQueueLength(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.GetWaitQueueLength : Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject -&gt; int" Usage="abstractQueuedLongSynchronizer.GetWaitQueueLength condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns an estimate of the number of threads waiting on the
            given condition associated with this synchronizer.</summary>
        <returns>the estimated number of waiting threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getWaitQueueLength(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasContended">
      <MemberSignature Language="C#" Value="public bool HasContended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContended" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasContended" />
      <MemberSignature Language="F#" Value="member this.HasContended : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasContended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasContended", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasContended", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have ever contended to acquire this
            synchronizer; that is, if an acquire method has ever blocked.</summary>
        <value>
          <c>true</c> if there has ever been contention</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#hasContended()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="HasQueuedPredecessors">
      <MemberSignature Language="C#" Value="public bool HasQueuedPredecessors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedPredecessors" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasQueuedPredecessors" />
      <MemberSignature Language="F#" Value="member this.HasQueuedPredecessors : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasQueuedPredecessors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have been waiting to acquire longer
            than the current thread.</summary>
        <value>
          <c>true</c> if there is a queued thread preceding the
                    current thread, and <c>false</c> if the current thread
                    is at the head of the queue or the queue is empty</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#hasQueuedPredecessors()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedThreads">
      <MemberSignature Language="C#" Value="public bool HasQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.HasQueuedThreads : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasQueuedThreads", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasQueuedThreads", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting to acquire.</summary>
        <value>
          <c>true</c> if there may be other threads waiting to acquire</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#hasQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="C#" Value="public bool HasWaiters (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasWaiters(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasWaiters(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.HasWaiters : Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject -&gt; bool" Usage="abstractQueuedLongSynchronizer.HasWaiters condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether any threads are waiting on the given condition
            associated with this synchronizer.</summary>
        <returns>
          <c>true</c> if there are any waiting threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#hasWaiters(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeldExclusively">
      <MemberSignature Language="C#" Value="protected virtual bool IsHeldExclusively { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldExclusively" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.IsHeldExclusively" />
      <MemberSignature Language="F#" Value="member this.IsHeldExclusively : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.IsHeldExclusively" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if synchronization is held exclusively with
            respect to the current (calling) thread.</summary>
        <value>
          <c>true</c> if synchronization is held exclusively;
                    <c>false</c> otherwise</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#isHeldExclusively()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if conditions are not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued (Java.Lang.Thread? thread);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsQueued(class Java.Lang.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.IsQueued(Java.Lang.Thread)" />
      <MemberSignature Language="F#" Value="member this.IsQueued : Java.Lang.Thread -&gt; bool" Usage="abstractQueuedLongSynchronizer.IsQueued thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">the thread</param>
        <summary>Returns true if the given thread is currently queued.</summary>
        <returns>
          <c>true</c> if the given thread is on the queue</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#isQueued(java.lang.Thread)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(java.lang.Thread)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.NullPointerException">if the thread is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public bool Owns (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Owns(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Owns(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.Owns : Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject -&gt; bool" Usage="abstractQueuedLongSynchronizer.Owns condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether the given ConditionObject
            uses this synchronizer as its lock.</summary>
        <returns>
          <c>true</c> if owned</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#owns(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="QueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? QueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; QueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueuedThreads" />
      <MemberSignature Language="F#" Value="member this.QueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="QueueLength">
      <MemberSignature Language="C#" Value="public int QueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueueLength" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueueLength" />
      <MemberSignature Language="F#" Value="member this.QueueLength : int" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueueLength", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueueLength", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting to
            acquire.</summary>
        <value>the estimated number of threads waiting to acquire</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getQueueLength()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public bool Release (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Release(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.Release : int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.Release arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("release", "(J)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("release", "(J)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
                   <c>#tryRelease</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Releases in exclusive mode.</summary>
        <returns>the value returned from <c>#tryRelease</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#release(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseShared">
      <MemberSignature Language="C#" Value="public bool ReleaseShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseShared(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ReleaseShared(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.ReleaseShared : int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.ReleaseShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseShared", "(J)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseShared", "(J)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
                   <c>#tryReleaseShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Releases in shared mode.</summary>
        <returns>the value returned from <c>#tryReleaseShared</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#releaseShared(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SharedQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? SharedQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; SharedQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.SharedQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.SharedQueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.SharedQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire in shared mode.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getSharedQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected long State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 State" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.State" />
      <MemberSignature Language="F#" Value="member this.State : int64 with get, set" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getState", "()J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getState", "()J", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setState", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setState", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newState">the new state value</param>
        <summary>Returns the current value of synchronization state. -or- Sets the value of synchronization state.</summary>
        <value>current state value</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#getState()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#setState(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="protected virtual bool TryAcquire (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryAcquire(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TryAcquire : int64 -&gt; bool&#xA;override this.TryAcquire : int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.TryAcquire arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquire", "(J)Z", "GetTryAcquire_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquire", "(J)Z", "GetTryAcquire_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
                   passed to an acquire method, or is the value saved on entry
                   to a condition wait.  The value is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Attempts to acquire in exclusive mode.</summary>
        <returns>
          <c>true</c> if successful. Upon success, this object has
                    been acquired.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryAcquire(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireNanos (long arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireNanos(int64 arg, int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireNanos(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TryAcquireNanos : int64 * int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.TryAcquireNanos (arg, nanosTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireNanos", "(JJ)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireNanos", "(JJ)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in exclusive mode, aborting if interrupted,
            and failing if the given timeout elapses.</summary>
        <returns>
          <c>true</c> if acquired; <c>false</c> if timed out</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryAcquireNanos(long,%20long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireShared">
      <MemberSignature Language="C#" Value="protected virtual long TryAcquireShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int64 TryAcquireShared(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TryAcquireShared : int64 -&gt; int64&#xA;override this.TryAcquireShared : int64 -&gt; int64" Usage="abstractQueuedLongSynchronizer.TryAcquireShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireShared", "(J)J", "GetTryAcquireShared_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireShared", "(J)J", "GetTryAcquireShared_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
                   passed to an acquire method, or is the value saved on entry
                   to a condition wait.  The value is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Attempts to acquire in shared mode.</summary>
        <returns>a negative value on failure; zero if acquisition in shared
                    mode succeeded but no subsequent shared-mode acquire can
                    succeed; and a positive value if acquisition in shared
                    mode succeeded and subsequent shared-mode acquires might
                    also succeed, in which case a subsequent waiting thread
                    must check availability. (Support for three different
                    return values enables this method to be used in contexts
                    where acquires only sometimes act exclusively.)  Upon
                    success, this object has been acquired.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryAcquireShared(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireSharedNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireSharedNanos (long arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireSharedNanos(int64 arg, int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireSharedNanos(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TryAcquireSharedNanos : int64 * int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.TryAcquireSharedNanos (arg, nanosTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireSharedNanos", "(JJ)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireSharedNanos", "(JJ)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquireShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in shared mode, aborting if interrupted, and
            failing if the given timeout elapses.</summary>
        <returns>
          <c>true</c> if acquired; <c>false</c> if timed out</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryAcquireSharedNanos(long,%20long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRelease">
      <MemberSignature Language="C#" Value="protected virtual bool TryRelease (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryRelease(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryRelease(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TryRelease : int64 -&gt; bool&#xA;override this.TryRelease : int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.TryRelease arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryRelease", "(J)Z", "GetTryRelease_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryRelease", "(J)Z", "GetTryRelease_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
                   passed to a release method, or the current state value upon
                   entry to a condition wait.  The value is otherwise
                   uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in exclusive
            mode.</summary>
        <returns>
          <c>true</c> if this object is now in a fully released
                    state, so that any waiting threads may attempt to acquire;
                    and <c>false</c> otherwise.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryRelease(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReleaseShared">
      <MemberSignature Language="C#" Value="protected virtual bool TryReleaseShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryReleaseShared(int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryReleaseShared(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TryReleaseShared : int64 -&gt; bool&#xA;override this.TryReleaseShared : int64 -&gt; bool" Usage="abstractQueuedLongSynchronizer.TryReleaseShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryReleaseShared", "(J)Z", "GetTryReleaseShared_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryReleaseShared", "(J)Z", "GetTryReleaseShared_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
                   passed to a release method, or the current state value upon
                   entry to a condition wait.  The value is otherwise
                   uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in shared mode.</summary>
        <returns>
          <c>true</c> if this release of shared mode may permit a
                    waiting acquire (shared or exclusive) to succeed; and
                    <c>false</c> otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer#tryReleaseShared(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
