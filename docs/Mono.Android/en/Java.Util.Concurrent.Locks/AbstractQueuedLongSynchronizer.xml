<Type Name="AbstractQueuedLongSynchronizer" FullName="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer">
  <TypeSignature Language="C#" Value="public abstract class AbstractQueuedLongSynchronizer : Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AbstractQueuedLongSynchronizer extends Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>A version of <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" /></c> in
 which synchronization state is maintained as a <c>long</c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A version of <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" /></c> in
 which synchronization state is maintained as a <c>long</c>.
 This class has exactly the same structure, properties, and methods
 as <c>AbstractQueuedSynchronizer</c> with the exception
 that all state-related parameters and results are defined
 as <c>long</c> rather than <c>int</c>. This class
 may be useful when creating synchronizers such as
 multilevel locks and barriers that require
 64 bits of state.

 </para>
      <para tool="javadoc-to-mdoc">See <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" /></c> for usage
 notes and examples.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedLongSynchronizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>AbstractQueuedLongSynchronizer</c> instance
 with initial synchronization state of zero.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>AbstractQueuedLongSynchronizer</c> instance
 with initial synchronization state of zero.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#AbstractQueuedLongSynchronizer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedLongSynchronizer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public void Acquire (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Acquire(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> but is otherwise uninterpreted and
        can represent anything you like.
</param>
        <summary>Acquires in exclusive mode, ignoring interrupts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in exclusive mode, ignoring interrupts.  Implemented
 by invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c>,
 returning on success.  Otherwise the thread is queued, possibly
 repeatedly blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> until success.  This method can be used
 to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.Lock" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#acquire(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AcquireInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireInterruptibly (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireInterruptibly(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireInterruptibly", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <summary>Acquires in exclusive mode, aborting if interrupted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in exclusive mode, aborting if interrupted.
 Implemented by first checking interrupt status, then invoking
 at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c>, returning on
 success.  Otherwise the thread is queued, possibly repeatedly
 blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c>
 until success or the thread is interrupted.  This method can be
 used to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.LockInterruptibly" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#acquireInterruptibly(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireShared">
      <MemberSignature Language="C#" Value="public void AcquireShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireShared(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireShared", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> but is otherwise uninterpreted
        and can represent anything you like.
</param>
        <summary>Acquires in shared mode, ignoring interrupts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in shared mode, ignoring interrupts.  Implemented by
 first invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c>,
 returning on success.  Otherwise the thread is queued, possibly
 repeatedly blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> until success.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#acquireShared(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AcquireSharedInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireSharedInterruptibly (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireSharedInterruptibly(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireSharedInterruptibly", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.
 This value is conveyed to <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> but is
 otherwise uninterpreted and can represent anything
 you like.</param>
        <summary>Acquires in shared mode, aborting if interrupted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in shared mode, aborting if interrupted.  Implemented
 by first checking interrupt status, then invoking at least once
 <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c>, returning on success.  Otherwise the
 thread is queued, possibly repeatedly blocking and unblocking,
 invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> until success or the thread
 is interrupted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#acquireSharedInterruptibly(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSetState">
      <MemberSignature Language="C#" Value="protected bool CompareAndSetState (long expect, long update);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool CompareAndSetState(int64 expect, int64 update) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compareAndSetState", "(JJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expect" Type="System.Int64" />
        <Parameter Name="update" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expect">the expected value</param>
        <param name="update">the new value</param>
        <summary>Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.
 This operation has memory semantics of a <c>volatile</c> read
 and write.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#compareAndSetState(long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ExclusiveQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; ExclusiveQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; ExclusiveQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "GetGetExclusiveQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire in exclusive mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire in exclusive mode. This has the same properties
 as <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueuedThreads" /></c> except that it only returns
 those threads waiting due to an exclusive acquire.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getExclusiveQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="FirstQueuedThread">
      <MemberSignature Language="C#" Value="public Java.Lang.Thread FirstQueuedThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread FirstQueuedThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "GetGetFirstQueuedThreadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the first (longest-waiting) thread in the queue, or
 <c>null</c> if no threads are currently queued.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the first (longest-waiting) thread in the queue, or
 <c>null</c> if no threads are currently queued.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation normally returns in
 constant time, but may iterate upon contention if other threads are
 concurrently modifying the queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getFirstQueuedThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetWaitingThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; GetWaitingThreads (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; GetWaitingThreads(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Ljava/util/Collection;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns a collection containing those threads that may be
 waiting on the given condition associated with this
 synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing those threads that may be
 waiting on the given condition associated with this
 synchronizer.  Because the actual set of threads may change
 dynamically while constructing this result, the returned
 collection is only a best-effort estimate. The elements of the
 returned collection are in no particular order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWaitQueueLength">
      <MemberSignature Language="C#" Value="public int GetWaitQueueLength (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetWaitQueueLength(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns an estimate of the number of threads waiting on the
 given condition associated with this synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting on the
 given condition associated with this synchronizer. Note that
 because timeouts and interrupts may occur at any time, the
 estimate serves only as an upper bound on the actual number of
 waiters.  This method is designed for use in monitoring of the
 system state, not for synchronization control.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasContended">
      <MemberSignature Language="C#" Value="public bool HasContended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasContended", "()Z", "GetHasContendedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have ever contended to acquire this
 synchronizer; that is if an acquire method has ever blocked.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads have ever contended to acquire this
 synchronizer; that is if an acquire method has ever blocked.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation returns in
 constant time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#hasContended()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="HasQueuedPredecessors">
      <MemberSignature Language="C#" Value="public bool HasQueuedPredecessors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedPredecessors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "GetHasQueuedPredecessorsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have been waiting to acquire longer
 than the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads have been waiting to acquire longer
 than the current thread.

 </para>
          <para tool="javadoc-to-mdoc">An invocation of this method is equivalent to (but may be
 more efficient than):
  <example><code lang="java">getFirstQueuedThread() != Thread.currentThread() &amp;&amp;
 hasQueuedThreads()</code></example></para>
          <para tool="javadoc-to-mdoc">Note that because cancellations due to interrupts and
 timeouts may occur at any time, a <c>true</c> return does not
 guarantee that some other thread will acquire before the current
 thread.  Likewise, it is possible for another thread to win a
 race to enqueue after this method has returned <c>false</c>,
 due to the queue being empty.

 </para>
          <para tool="javadoc-to-mdoc">This method is designed to be used by a fair synchronizer to
 avoid .
 Such a synchronizer's <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> method should return
 <c>false</c>, and its <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> method should
 return a negative value, if this method returns <c>true</c>
 (unless this is a reentrant acquire).  For example, the <c>tryAcquire</c> method for a fair, reentrant, exclusive mode
 synchronizer might look like this:

  <example><code lang="java">protected boolean tryAcquire(int arg) {
   if (isHeldExclusively()) {
     // A reentrant acquire; increment hold count
     return true;
    else if (hasQueuedPredecessors()) {
     return false;
   } else {
     // try to acquire normally
   }
 }}</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#hasQueuedPredecessors()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedThreads">
      <MemberSignature Language="C#" Value="public bool HasQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedThreads", "()Z", "GetHasQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting to acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting to acquire. Note that
 because cancellations due to interrupts and timeouts may occur
 at any time, a <c>true</c> return does not guarantee that any
 other thread will ever acquire.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation returns in
 constant time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#hasQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="C#" Value="public bool HasWaiters (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasWaiters(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether any threads are waiting on the given condition
 associated with this synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting on the given condition
 associated with this synchronizer. Note that because timeouts
 and interrupts may occur at any time, a <c>true</c> return
 does not guarantee that a future <c>signal</c> will awaken
 any threads.  This method is designed primarily for use in
 monitoring of the system state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeldExclusively">
      <MemberSignature Language="C#" Value="protected virtual bool IsHeldExclusively { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldExclusively" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if synchronization is held exclusively with
 respect to the current (calling) thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if synchronization is held exclusively with
 respect to the current (calling) thread.  This method is invoked
 upon each call to a non-waiting <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html" /></c> method.
 (Waiting methods instead invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c>.)

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>. This method is invoked
 internally only within <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html" /></c> methods, so need
 not be defined if conditions are not used.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if conditions are not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued (Java.Lang.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsQueued(class Java.Lang.Thread thread) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">the thread</param>
        <summary>Returns true if the given thread is currently queued.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the given thread is currently queued.

 </para>
          <para tool="javadoc-to-mdoc">This implementation traverses the queue to determine
 presence of the given thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isQueued(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.NullPointerException">if the thread is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public bool Owns (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Owns(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether the given ConditionObject
 uses this synchronizer as its lock.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether the given ConditionObject
 uses this synchronizer as its lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="QueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; QueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; QueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "GetGetQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire.  Because the actual set of threads may change
 dynamically while constructing this result, the returned
 collection is only a best-effort estimate.  The elements of the
 returned collection are in no particular order.  This method is
 designed to facilitate construction of subclasses that provide
 more extensive monitoring facilities.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="QueueLength">
      <MemberSignature Language="C#" Value="public int QueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueueLength", "()I", "GetGetQueueLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting to
 acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting to
 acquire.  The value is only an estimate because the number of
 threads may change dynamically while this method traverses
 internal data structures.  This method is designed for use in
 monitoring system state, not for synchronization
 control.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getQueueLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public bool Release (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Release(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "(J)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryRelease(System.Int64)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <summary>Releases in exclusive mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases in exclusive mode.  Implemented by unblocking one or
 more threads if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryRelease(System.Int64)" /></c> returns true.
 This method can be used to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.Unlock" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#release(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseShared">
      <MemberSignature Language="C#" Value="public bool ReleaseShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseShared(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseShared", "(J)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryReleaseShared(System.Int64)" /></c> but is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Releases in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases in shared mode.  Implemented by unblocking one or more
 threads if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryReleaseShared(System.Int64)" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#releaseShared(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SharedQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; SharedQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; SharedQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "GetGetSharedQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire in shared mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire in shared mode. This has the same properties
 as <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.QueuedThreads" /></c> except that it only returns
 those threads waiting due to a shared acquire.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getSharedQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected long State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()J", "GetGetStateHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setState", "(J)V", "GetSetState_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current value of synchronization state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#getState()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current value of synchronization state.
 This operation has memory semantics of a <c>volatile</c> read.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#setState(long)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the value of synchronization state.
 This operation has memory semantics of a <c>volatile</c> write.</para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="protected virtual bool TryAcquire (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryAcquire(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "(J)Z", "GetTryAcquire_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
        passed to an acquire method, or is the value saved on entry
        to a condition wait.  The value is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Attempts to acquire in exclusive mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in exclusive mode. This method should query
 if the state of the object permits it to be acquired in the
 exclusive mode, and if so to acquire it.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing
 acquire.  If this method reports failure, the acquire method
 may queue the thread, if it is not already queued, until it is
 signalled by a release from some other thread. This can be used
 to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The default
 implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryAcquire(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireNanos (long arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireNanos(int64 arg, int64 nanosTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireNanos", "(JJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.  Implemented by first
 checking interrupt status, then invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c>, returning on success.  Otherwise, the thread is
 queued, possibly repeatedly blocking and unblocking, invoking
 <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquire(System.Int64)" /></c> until success or the thread is interrupted
 or the timeout elapses.  This method can be used to implement
 method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryAcquireNanos(long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireShared">
      <MemberSignature Language="C#" Value="protected virtual long TryAcquireShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int64 TryAcquireShared(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireShared", "(J)J", "GetTryAcquireShared_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
        passed to an acquire method, or is the value saved on entry
        to a condition wait.  The value is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Attempts to acquire in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in shared mode. This method should query if
 the state of the object permits it to be acquired in the shared
 mode, and if so to acquire it.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing
 acquire.  If this method reports failure, the acquire method
 may queue the thread, if it is not already queued, until it is
 signalled by a release from some other thread.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryAcquireShared(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireSharedNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireSharedNanos (long arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireSharedNanos(int64 arg, int64 nanosTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireSharedNanos", "(JJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> but is otherwise uninterpreted
        and can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.  Implemented by first
 checking interrupt status, then invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c>, returning on success.  Otherwise, the
 thread is queued, possibly repeatedly blocking and unblocking,
 invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.TryAcquireShared(System.Int64)" /></c> until success or the thread
 is interrupted or the timeout elapses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryAcquireSharedNanos(long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRelease">
      <MemberSignature Language="C#" Value="protected virtual bool TryRelease (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryRelease(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryRelease", "(J)Z", "GetTryRelease_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
        passed to a release method, or the current state value upon
        entry to a condition wait.  The value is otherwise
        uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in exclusive
 mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to set the state to reflect a release in exclusive
 mode.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing release.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws
 <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryRelease(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReleaseShared">
      <MemberSignature Language="C#" Value="protected virtual bool TryReleaseShared (long arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryReleaseShared(int64 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryReleaseShared", "(J)Z", "GetTryReleaseShared_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
        passed to a release method, or the current state value upon
        entry to a condition wait.  The value is otherwise
        uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to set the state to reflect a release in shared mode.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing release.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws
 <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#tryReleaseShared(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
