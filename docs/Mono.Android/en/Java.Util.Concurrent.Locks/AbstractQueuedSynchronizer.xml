<Type Name="AbstractQueuedSynchronizer" FullName="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer">
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AbstractQueuedSynchronizer&#xA;Inherits AbstractOwnableSynchronizer&#xA;Implements IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class AbstractQueuedSynchronizer abstract : Java::Util::Concurrent::Locks::AbstractOwnableSynchronizer, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public abstract class AbstractQueuedSynchronizer : Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AbstractQueuedSynchronizer extends Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" />
  <TypeSignature Language="F#" Value="type AbstractQueuedSynchronizer = class&#xA;    inherit AbstractOwnableSynchronizer&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedSynchronizer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedSynchronizer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Provides a framework for implementing blocking locks and related
            synchronizers (semaphores, events, etc) that rely on
            first-in-first-out (FIFO) wait queues.</summary>
    <remarks>
      <para>Provides a framework for implementing blocking locks and related
            synchronizers (semaphores, events, etc) that rely on
            first-in-first-out (FIFO) wait queues.  This class is designed to
            be a useful basis for most kinds of synchronizers that rely on a
            single atomic <c>int</c> value to represent state. Subclasses
            must define the protected methods that change this state, and which
            define what that state means in terms of this object being acquired
            or released.  Given these, the other methods in this class carry
            out all queuing and blocking mechanics. Subclasses can maintain
            other state fields, but only the atomically updated <c>int</c>
            value manipulated using methods <c>#getState</c>, <c>#setState</c> and <c>#compareAndSetState</c> is tracked with respect
            to synchronization.</para>
      <para>Subclasses should be defined as non-public internal helper
            classes that are used to implement the synchronization properties
            of their enclosing class.  Class
            <c>AbstractQueuedSynchronizer</c> does not implement any
            synchronization interface.  Instead it defines methods such as
            <c>#acquireInterruptibly</c> that can be invoked as
            appropriate by concrete locks and related synchronizers to
            implement their public methods.</para>
      <para>This class supports either or both a default &lt;em&gt;exclusive&lt;/em&gt;
            mode and a &lt;em&gt;shared&lt;/em&gt; mode. When acquired in exclusive mode,
            attempted acquires by other threads cannot succeed. Shared mode
            acquires by multiple threads may (but need not) succeed. This class
            does not &amp;quot;understand&amp;quot; these differences except in the
            mechanical sense that when a shared mode acquire succeeds, the next
            waiting thread (if one exists) must also determine whether it can
            acquire as well. Threads waiting in the different modes share the
            same FIFO queue. Usually, implementation subclasses support only
            one of these modes, but both can come into play for example in a
            <c>ReadWriteLock</c>. Subclasses that support only exclusive or
            only shared modes need not define the methods supporting the unused mode.</para>
      <para>This class defines a nested <c>ConditionObject</c> class that
            can be used as a <c>Condition</c> implementation by subclasses
            supporting exclusive mode for which method <c>#isHeldExclusively</c> reports whether synchronization is exclusively
            held with respect to the current thread, method <c>#release</c>
            invoked with the current <c>#getState</c> value fully releases
            this object, and <c>#acquire</c>, given this saved state value,
            eventually restores this object to its previous acquired state.  No
            <c>AbstractQueuedSynchronizer</c> method otherwise creates such a
            condition, so if this constraint cannot be met, do not use it.  The
            behavior of <c>ConditionObject</c> depends of course on the
            semantics of its synchronizer implementation.</para>
      <para>This class provides inspection, instrumentation, and monitoring
            methods for the internal queue, as well as similar methods for
            condition objects. These can be exported as desired into classes
            using an <c>AbstractQueuedSynchronizer</c> for their
            synchronization mechanics.</para>
      <para>Serialization of this class stores only the underlying atomic
            integer maintaining state, so deserialized objects have empty
            thread queues. Typical subclasses requiring serializability will
            define a <c>readObject</c> method that restores this to a known
            initial state upon deserialization.
            
            &lt;h2&gt;Usage&lt;/h2&gt;</para>
      <para>To use this class as the basis of a synchronizer, redefine the
            following methods, as applicable, by inspecting and/or modifying
            the synchronization state using <c>#getState</c>, <c>#setState</c> and/or <c>#compareAndSetState</c>:
            
            &lt;ul&gt;
            &lt;li&gt;<c>#tryAcquire</c>&lt;li&gt;<c>#tryRelease</c>&lt;li&gt;<c>#tryAcquireShared</c>&lt;li&gt;<c>#tryReleaseShared</c>&lt;li&gt;<c>#isHeldExclusively</c>&lt;/ul&gt;
            
            Each of these methods by default throws <c>UnsupportedOperationException</c>.  Implementations of these methods
            must be internally thread-safe, and should in general be short and
            not block. Defining these methods is the &lt;em&gt;only&lt;/em&gt; supported
            means of using this class. All other methods are declared
            <c>final</c> because they cannot be independently varied.</para>
      <para>You may also find the inherited methods from <c>AbstractOwnableSynchronizer</c> useful to keep track of the thread
            owning an exclusive synchronizer.  You are encouraged to use them
            -- this enables monitoring and diagnostic tools to assist users in
            determining which threads hold locks.</para>
      <para>Even though this class is based on an internal FIFO queue, it
            does not automatically enforce FIFO acquisition policies.  The core
            of exclusive synchronization takes the form:</para>
      <code lang="text/java">&lt;em&gt;Acquire:&lt;/em&gt;
                while (!tryAcquire(arg)) {
                   &lt;em&gt;enqueue thread if it is not already queued&lt;/em&gt;;
                   &lt;em&gt;possibly block current thread&lt;/em&gt;;
                }
            
            &lt;em&gt;Release:&lt;/em&gt;
                if (tryRelease(arg))
                   &lt;em&gt;unblock the first queued thread&lt;/em&gt;;
            </code>
      <para>(Shared mode is similar but may involve cascading signals.)
            
            &lt;p id="barging"&gt;Because checks in acquire are invoked before
            enqueuing, a newly acquiring thread may &lt;em&gt;barge&lt;/em&gt; ahead of
            others that are blocked and queued.  However, you can, if desired,
            define <c>tryAcquire</c> and/or <c>tryAcquireShared</c> to
            disable barging by internally invoking one or more of the inspection
            methods, thereby providing a &lt;em&gt;fair&lt;/em&gt; FIFO acquisition order.
            In particular, most fair synchronizers can define <c>tryAcquire</c>
            to return <c>false</c> if <c>#hasQueuedPredecessors</c> (a method
            specifically designed to be used by fair synchronizers) returns
            <c>true</c>.  Other variations are possible.</para>
      <para>Throughput and scalability are generally highest for the
            default barging (also known as &lt;em&gt;greedy&lt;/em&gt;,
            &lt;em&gt;renouncement&lt;/em&gt;, and &lt;em&gt;convoy-avoidance&lt;/em&gt;) strategy.
            While this is not guaranteed to be fair or starvation-free, earlier
            queued threads are allowed to recontend before later queued
            threads, and each recontention has an unbiased chance to succeed
            against incoming threads.  Also, while acquires do not
            &amp;quot;spin&amp;quot; in the usual sense, they may perform multiple
            invocations of <c>tryAcquire</c> interspersed with other
            computations before blocking.  This gives most of the benefits of
            spins when exclusive synchronization is only briefly held, without
            most of the liabilities when it isn't. If so desired, you can
            augment this by preceding calls to acquire methods with
            "fast-path" checks, possibly prechecking <c>#hasContended</c>
            and/or <c>#hasQueuedThreads</c> to only do so if the synchronizer
            is likely not to be contended.</para>
      <para>This class provides an efficient and scalable basis for
            synchronization in part by specializing its range of use to
            synchronizers that can rely on <c>int</c> state, acquire, and
            release parameters, and an internal FIFO wait queue. When this does
            not suffice, you can build synchronizers from a lower level using
            <c>java.util.concurrent.atomic atomic</c> classes, your own custom
            <c>java.util.Queue</c> classes, and <c>LockSupport</c> blocking
            support.
            
            &lt;h2&gt;Usage Examples&lt;/h2&gt;</para>
      <para>Here is a non-reentrant mutual exclusion lock class that uses
            the value zero to represent the unlocked state, and one to
            represent the locked state. While a non-reentrant lock
            does not strictly require recording of the current owner
            thread, this class does so anyway to make usage easier to monitor.
            It also supports conditions and exposes some instrumentation methods:</para>
      <code lang="text/java">{@code
            class Mutex implements Lock, java.io.Serializable {
            
              // Our internal helper class
              private static class Sync extends AbstractQueuedSynchronizer {
                // Acquires the lock if state is zero
                public boolean tryAcquire(int acquires) {
                  assert acquires == 1; // Otherwise unused
                  if (compareAndSetState(0, 1)) {
                    setExclusiveOwnerThread(Thread.currentThread());
                    return true;
                  }
                  return false;
                }
            
                // Releases the lock by setting state to zero
                protected boolean tryRelease(int releases) {
                  assert releases == 1; // Otherwise unused
                  if (!isHeldExclusively())
                    throw new IllegalMonitorStateException();
                  setExclusiveOwnerThread(null);
                  setState(0);
                  return true;
                }
            
                // Reports whether in locked state
                public boolean isLocked() {
                  return getState() != 0;
                }
            
                public boolean isHeldExclusively() {
                  // a data race, but safe due to out-of-thin-air guarantees
                  return getExclusiveOwnerThread() == Thread.currentThread();
                }
            
                // Provides a Condition
                public Condition newCondition() {
                  return new ConditionObject();
                }
            
                // Deserializes properly
                private void readObject(ObjectInputStream s)
                    throws IOException, ClassNotFoundException {
                  s.defaultReadObject();
                  setState(0); // reset to unlocked state
                }
              }
            
              // The sync object does all the hard work. We just forward to it.
              private final Sync sync = new Sync();
            
              public void lock()              { sync.acquire(1); }
              public boolean tryLock()        { return sync.tryAcquire(1); }
              public void unlock()            { sync.release(1); }
              public Condition newCondition() { return sync.newCondition(); }
              public boolean isLocked()       { return sync.isLocked(); }
              public boolean isHeldByCurrentThread() {
                return sync.isHeldExclusively();
              }
              public boolean hasQueuedThreads() {
                return sync.hasQueuedThreads();
              }
              public void lockInterruptibly() throws InterruptedException {
                sync.acquireInterruptibly(1);
              }
              public boolean tryLock(long timeout, TimeUnit unit)
                  throws InterruptedException {
                return sync.tryAcquireNanos(1, unit.toNanos(timeout));
              }
            }}</code>
      <para>Here is a latch class that is like a
            <c>java.util.concurrent.CountDownLatch CountDownLatch</c>
            except that it only requires a single <c>signal</c> to
            fire. Because a latch is non-exclusive, it uses the <c>shared</c>
            acquire and release methods.</para>
      <code lang="text/java">{@code
            class BooleanLatch {
            
              private static class Sync extends AbstractQueuedSynchronizer {
                boolean isSignalled() { return getState() != 0; }
            
                protected int tryAcquireShared(int ignore) {
                  return isSignalled() ? 1 : -1;
                }
            
                protected boolean tryReleaseShared(int ignore) {
                  setState(1);
                  return true;
                }
              }
            
              private final Sync sync = new Sync();
              public boolean isSignalled() { return sync.isSignalled(); }
              public void signal()         { sync.releaseShared(1); }
              public void await() throws InterruptedException {
                sync.acquireSharedInterruptibly(1);
              }
            }}</code>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AbstractQueuedSynchronizer();" />
      <MemberSignature Language="C#" Value="protected AbstractQueuedSynchronizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>AbstractQueuedSynchronizer</c> instance
            with initial synchronization state of zero.</summary>
        <remarks>
          <para>Creates a new <c>AbstractQueuedSynchronizer</c> instance
            with initial synchronization state of zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#AbstractQueuedSynchronizer()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.AbstractQueuedSynchronizer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AbstractQueuedSynchronizer(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected AbstractQueuedSynchronizer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" Usage="new Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="VB.NET" Value="Public Sub Acquire (arg As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Acquire(int arg);" />
      <MemberSignature Language="C#" Value="public void Acquire (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Acquire(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Acquire(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Acquire : int -&gt; unit" Usage="abstractQueuedSynchronizer.Acquire arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquire", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquire", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Acquires in exclusive mode, ignoring interrupts.</summary>
        <remarks>
          <para>Acquires in exclusive mode, ignoring interrupts.  Implemented
            by invoking at least once <c>#tryAcquire</c>,
            returning on success.  Otherwise the thread is queued, possibly
            repeatedly blocking and unblocking, invoking <c>#tryAcquire</c> until success.  This method can be used
            to implement method <c>Lock#lock</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#acquire(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquireInterruptibly">
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireInterruptibly (arg As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireInterruptibly(int arg);" />
      <MemberSignature Language="C#" Value="public void AcquireInterruptibly (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireInterruptibly(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.AcquireInterruptibly(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.AcquireInterruptibly : int -&gt; unit" Usage="abstractQueuedSynchronizer.AcquireInterruptibly arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireInterruptibly", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireInterruptibly", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Acquires in exclusive mode, aborting if interrupted.</summary>
        <remarks>
          <para>Acquires in exclusive mode, aborting if interrupted.
            Implemented by first checking interrupt status, then invoking
            at least once <c>#tryAcquire</c>, returning on
            success.  Otherwise the thread is queued, possibly repeatedly
            blocking and unblocking, invoking <c>#tryAcquire</c>
            until success or the thread is interrupted.  This method can be
            used to implement method <c>Lock#lockInterruptibly</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#acquireInterruptibly(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireShared">
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireShared (arg As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireShared(int arg);" />
      <MemberSignature Language="C#" Value="public void AcquireShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireShared(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.AcquireShared(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.AcquireShared : int -&gt; unit" Usage="abstractQueuedSynchronizer.AcquireShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireShared", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireShared", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquireShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Acquires in shared mode, ignoring interrupts.</summary>
        <remarks>
          <para>Acquires in shared mode, ignoring interrupts.  Implemented by
            first invoking at least once <c>#tryAcquireShared</c>,
            returning on success.  Otherwise the thread is queued, possibly
            repeatedly blocking and unblocking, invoking <c>#tryAcquireShared</c> until success.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#acquireShared(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquireSharedInterruptibly">
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireSharedInterruptibly (arg As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireSharedInterruptibly(int arg);" />
      <MemberSignature Language="C#" Value="public void AcquireSharedInterruptibly (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireSharedInterruptibly(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.AcquireSharedInterruptibly(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.AcquireSharedInterruptibly : int -&gt; unit" Usage="abstractQueuedSynchronizer.AcquireSharedInterruptibly arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireSharedInterruptibly", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireSharedInterruptibly", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.
            This value is conveyed to <c>#tryAcquireShared</c> but is
            otherwise uninterpreted and can represent anything
            you like.</param>
        <summary>Acquires in shared mode, aborting if interrupted.</summary>
        <remarks>
          <para>Acquires in shared mode, aborting if interrupted.  Implemented
            by first checking interrupt status, then invoking at least once
            <c>#tryAcquireShared</c>, returning on success.  Otherwise the
            thread is queued, possibly repeatedly blocking and unblocking,
            invoking <c>#tryAcquireShared</c> until success or the thread
            is interrupted.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#acquireSharedInterruptibly(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSetState">
      <MemberSignature Language="VB.NET" Value="Protected Function CompareAndSetState (expect As Integer, update As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool CompareAndSetState(int expect, int update);" />
      <MemberSignature Language="C#" Value="protected bool CompareAndSetState (int expect, int update);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool CompareAndSetState(int32 expect, int32 update) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.CompareAndSetState(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.CompareAndSetState : int * int -&gt; bool" Usage="abstractQueuedSynchronizer.CompareAndSetState (expect, update)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndSetState", "(II)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndSetState", "(II)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expect" Type="System.Int32" />
        <Parameter Name="update" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expect">the expected value</param>
        <param name="update">the new value</param>
        <summary>Atomically sets synchronization state to the given updated
            value if the current state value equals the expected value.</summary>
        <returns>
          <c>true</c> if successful. False return indicates that the actual
                    value was not equal to the expected value.</returns>
        <remarks>
          <para>Atomically sets synchronization state to the given updated
            value if the current state value equals the expected value.
            This operation has memory semantics of a <c>volatile</c> read
            and write.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#compareAndSetState(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ExclusiveQueuedThreads">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExclusiveQueuedThreads As ICollection(Of Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ ExclusiveQueuedThreads { System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? ExclusiveQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; ExclusiveQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ExclusiveQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.ExclusiveQueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ExclusiveQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire in exclusive mode.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>Returns a collection containing threads that may be waiting to
            acquire in exclusive mode. This has the same properties
            as <c>#getQueuedThreads</c> except that it only returns
            those threads waiting due to an exclusive acquire.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getExclusiveQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FirstQueuedThread">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstQueuedThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Lang::Thread ^ FirstQueuedThread { Java::Lang::Thread ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Lang.Thread? FirstQueuedThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread FirstQueuedThread" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.FirstQueuedThread" />
      <MemberSignature Language="F#" Value="member this.FirstQueuedThread : Java.Lang.Thread" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.FirstQueuedThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the first (longest-waiting) thread in the queue, or
            <c>null</c> if no threads are currently queued.</summary>
        <value>the first (longest-waiting) thread in the queue, or
                    <c>null</c> if no threads are currently queued</value>
        <remarks>
          <para>Returns the first (longest-waiting) thread in the queue, or
            <c>null</c> if no threads are currently queued.</para>
          <para>In this implementation, this operation normally returns in
            constant time, but may iterate upon contention if other threads are
            concurrently modifying the queue.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getFirstQueuedThread()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetWaitingThreads">
      <MemberSignature Language="VB.NET" Value="Public Function GetWaitingThreads (condition As AbstractQueuedSynchronizer.ConditionObject) As ICollection(Of Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ GetWaitingThreads(Java::Util::Concurrent::Locks::AbstractQueuedSynchronizer::ConditionObject ^ condition);" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? GetWaitingThreads (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; GetWaitingThreads(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.GetWaitingThreads(Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.GetWaitingThreads : Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject -&gt; System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="abstractQueuedSynchronizer.GetWaitingThreads condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns a collection containing those threads that may be
            waiting on the given condition associated with this
            synchronizer.</summary>
        <returns>the collection of threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getWaitingThreads(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWaitQueueLength">
      <MemberSignature Language="VB.NET" Value="Public Function GetWaitQueueLength (condition As AbstractQueuedSynchronizer.ConditionObject) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetWaitQueueLength(Java::Util::Concurrent::Locks::AbstractQueuedSynchronizer::ConditionObject ^ condition);" />
      <MemberSignature Language="C#" Value="public int GetWaitQueueLength (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetWaitQueueLength(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.GetWaitQueueLength(Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.GetWaitQueueLength : Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject -&gt; int" Usage="abstractQueuedSynchronizer.GetWaitQueueLength condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns an estimate of the number of threads waiting on the
            given condition associated with this synchronizer.</summary>
        <returns>the estimated number of waiting threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getWaitQueueLength(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasContended">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasContended As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasContended { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool HasContended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContended" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasContended" />
      <MemberSignature Language="F#" Value="member this.HasContended : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasContended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasContended", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasContended", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have ever contended to acquire this
            synchronizer; that is, if an acquire method has ever blocked.</summary>
        <value>
          <c>true</c> if there has ever been contention</value>
        <remarks>
          <para>Queries whether any threads have ever contended to acquire this
            synchronizer; that is, if an acquire method has ever blocked.</para>
          <para>In this implementation, this operation returns in
            constant time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#hasContended()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasQueuedPredecessors">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasQueuedPredecessors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasQueuedPredecessors { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool HasQueuedPredecessors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedPredecessors" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasQueuedPredecessors" />
      <MemberSignature Language="F#" Value="member this.HasQueuedPredecessors : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasQueuedPredecessors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have been waiting to acquire longer
            than the current thread.</summary>
        <value>
          <c>true</c> if there is a queued thread preceding the
                    current thread, and <c>false</c> if the current thread
                    is at the head of the queue or the queue is empty</value>
        <remarks>
          <para>Queries whether any threads have been waiting to acquire longer
            than the current thread.</para>
          <para>An invocation of this method is equivalent to (but may be
            more efficient than):</para>
          <code lang="text/java">{@code
            getFirstQueuedThread() != Thread.currentThread()
              &amp;&amp; hasQueuedThreads()}</code>
          <para>Note that because cancellations due to interrupts and
            timeouts may occur at any time, a <c>true</c> return does not
            guarantee that some other thread will acquire before the current
            thread.  Likewise, it is possible for another thread to win a
            race to enqueue after this method has returned <c>false</c>,
            due to the queue being empty.</para>
          <para>This method is designed to be used by a fair synchronizer to
            avoid barging.
            Such a synchronizer's <c>#tryAcquire</c> method should return
            <c>false</c>, and its <c>#tryAcquireShared</c> method should
            return a negative value, if this method returns <c>true</c>
            (unless this is a reentrant acquire).  For example, the <c>tryAcquire</c> method for a fair, reentrant, exclusive mode
            synchronizer might look like this:</para>
          <code lang="text/java">{@code
            protected boolean tryAcquire(int arg) {
              if (isHeldExclusively()) {
                // A reentrant acquire; increment hold count
                return true;
              } else if (hasQueuedPredecessors()) {
                return false;
              } else {
                // try to acquire normally
              }
            }}</code>
          <para>Added in 1.7.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#hasQueuedPredecessors()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedThreads">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasQueuedThreads As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasQueuedThreads { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool HasQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.HasQueuedThreads : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasQueuedThreads", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasQueuedThreads", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting to acquire.</summary>
        <value>
          <c>true</c> if there may be other threads waiting to acquire</value>
        <remarks>
          <para>Queries whether any threads are waiting to acquire. Note that
            because cancellations due to interrupts and timeouts may occur
            at any time, a <c>true</c> return does not guarantee that any
            other thread will ever acquire.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#hasQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="VB.NET" Value="Public Function HasWaiters (condition As AbstractQueuedSynchronizer.ConditionObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasWaiters(Java::Util::Concurrent::Locks::AbstractQueuedSynchronizer::ConditionObject ^ condition);" />
      <MemberSignature Language="C#" Value="public bool HasWaiters (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasWaiters(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasWaiters(Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.HasWaiters : Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject -&gt; bool" Usage="abstractQueuedSynchronizer.HasWaiters condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether any threads are waiting on the given condition
            associated with this synchronizer.</summary>
        <returns>
          <c>true</c> if there are any waiting threads</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#hasWaiters(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeldExclusively">
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsHeldExclusively As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsHeldExclusively { bool get(); };" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHeldExclusively { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldExclusively" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.IsHeldExclusively" />
      <MemberSignature Language="F#" Value="member this.IsHeldExclusively : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.IsHeldExclusively" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if synchronization is held exclusively with
            respect to the current (calling) thread.</summary>
        <value>
          <c>true</c> if synchronization is held exclusively;
                    <c>false</c> otherwise</value>
        <remarks>
          <para>Returns <c>true</c> if synchronization is held exclusively with
            respect to the current (calling) thread.  This method is invoked
            upon each call to a <c>ConditionObject</c> method.</para>
          <para>The default implementation throws <c>UnsupportedOperationException</c>. This method is invoked
            internally only within <c>ConditionObject</c> methods, so need
            not be defined if conditions are not used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#isHeldExclusively()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if conditions are not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="VB.NET" Value="Public Function IsQueued (thread As Thread) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsQueued(Java::Lang::Thread ^ thread);" />
      <MemberSignature Language="C#" Value="public bool IsQueued (Java.Lang.Thread? thread);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsQueued(class Java.Lang.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.IsQueued(Java.Lang.Thread)" />
      <MemberSignature Language="F#" Value="member this.IsQueued : Java.Lang.Thread -&gt; bool" Usage="abstractQueuedSynchronizer.IsQueued thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">the thread</param>
        <summary>Returns true if the given thread is currently queued.</summary>
        <returns>
          <c>true</c> if the given thread is on the queue</returns>
        <remarks>
          <para>Returns true if the given thread is currently queued.</para>
          <para>This implementation traverses the queue to determine
            presence of the given thread.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#isQueued(java.lang.Thread)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(java.lang.Thread)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the thread is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="VB.NET" Value="Public Function Owns (condition As AbstractQueuedSynchronizer.ConditionObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Owns(Java::Util::Concurrent::Locks::AbstractQueuedSynchronizer::ConditionObject ^ condition);" />
      <MemberSignature Language="C#" Value="public bool Owns (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject? condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Owns(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Owns(Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject)" />
      <MemberSignature Language="F#" Value="member this.Owns : Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject -&gt; bool" Usage="abstractQueuedSynchronizer.Owns condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether the given ConditionObject
            uses this synchronizer as its lock.</summary>
        <returns>
          <c>true</c> if owned</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#owns(java.util.concurrent.locks.ConditionObject)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(java.util.concurrent.locks.ConditionObject)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="QueuedThreads">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueuedThreads As ICollection(Of Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ QueuedThreads { System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? QueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; QueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueuedThreads" />
      <MemberSignature Language="F#" Value="member this.QueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>Returns a collection containing threads that may be waiting to
            acquire.  Because the actual set of threads may change
            dynamically while constructing this result, the returned
            collection is only a best-effort estimate.  The elements of the
            returned collection are in no particular order.  This method is
            designed to facilitate construction of subclasses that provide
            more extensive monitoring facilities.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueueLength">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int QueueLength { int get(); };" />
      <MemberSignature Language="C#" Value="public int QueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueueLength" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueueLength" />
      <MemberSignature Language="F#" Value="member this.QueueLength : int" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQueueLength", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQueueLength", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting to
            acquire.</summary>
        <value>the estimated number of threads waiting to acquire</value>
        <remarks>
          <para>Returns an estimate of the number of threads waiting to
            acquire.  The value is only an estimate because the number of
            threads may change dynamically while this method traverses
            internal data structures.  This method is designed for use in
            monitoring system state, not for synchronization control.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getQueueLength()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="VB.NET" Value="Public Function Release (arg As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Release(int arg);" />
      <MemberSignature Language="C#" Value="public bool Release (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Release(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Release(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; bool" Usage="abstractQueuedSynchronizer.Release arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("release", "(I)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("release", "(I)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
                   <c>#tryRelease</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <summary>Releases in exclusive mode.</summary>
        <returns>the value returned from <c>#tryRelease</c></returns>
        <remarks>
          <para>Releases in exclusive mode.  Implemented by unblocking one or
            more threads if <c>#tryRelease</c> returns true.
            This method can be used to implement method <c>Lock#unlock</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#release(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseShared">
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseShared (arg As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseShared(int arg);" />
      <MemberSignature Language="C#" Value="public bool ReleaseShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseShared(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ReleaseShared(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReleaseShared : int -&gt; bool" Usage="abstractQueuedSynchronizer.ReleaseShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseShared", "(I)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseShared", "(I)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
                   <c>#tryReleaseShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Releases in shared mode.</summary>
        <returns>the value returned from <c>#tryReleaseShared</c></returns>
        <remarks>
          <para>Releases in shared mode.  Implemented by unblocking one or more
            threads if <c>#tryReleaseShared</c> returns true.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#releaseShared(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SharedQueuedThreads">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SharedQueuedThreads As ICollection(Of Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ SharedQueuedThreads { System::Collections::Generic::ICollection&lt;Java::Lang::Thread ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? SharedQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; SharedQueuedThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.SharedQueuedThreads" />
      <MemberSignature Language="F#" Value="member this.SharedQueuedThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.SharedQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
            acquire in shared mode.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>Returns a collection containing threads that may be waiting to
            acquire in shared mode. This has the same properties
            as <c>#getQueuedThreads</c> except that it only returns
            those threads waiting due to a shared acquire.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getSharedQueuedThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="VB.NET" Value="Protected Property State As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int State { int get(); void set(int value); };" />
      <MemberSignature Language="C#" Value="protected int State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 State" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" />
      <MemberSignature Language="F#" Value="member this.State : int with get, set" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getState", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getState", "()I", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setState", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setState", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newState">the new state value</param>
        <summary>Returns the current value of synchronization state. -or- Sets the value of synchronization state.</summary>
        <value>current state value</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns the current value of synchronization state.
            This operation has memory semantics of a <c>volatile</c> read.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#getState()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the value of synchronization state.
            This operation has memory semantics of a <c>volatile</c> write.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#setState(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryAcquire (arg As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryAcquire(int arg);" />
      <MemberSignature Language="C#" Value="protected virtual bool TryAcquire (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryAcquire(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member TryAcquire : int -&gt; bool&#xA;override this.TryAcquire : int -&gt; bool" Usage="abstractQueuedSynchronizer.TryAcquire arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquire", "(I)Z", "GetTryAcquire_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquire", "(I)Z", "GetTryAcquire_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
                   passed to an acquire method, or is the value saved on entry
                   to a condition wait.  The value is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Attempts to acquire in exclusive mode.</summary>
        <returns>
          <c>true</c> if successful. Upon success, this object has
                    been acquired.</returns>
        <remarks>
          <para>Attempts to acquire in exclusive mode. This method should query
            if the state of the object permits it to be acquired in the
            exclusive mode, and if so to acquire it.</para>
          <para>This method is always invoked by the thread performing
            acquire.  If this method reports failure, the acquire method
            may queue the thread, if it is not already queued, until it is
            signalled by a release from some other thread. This can be used
            to implement method <c>Lock#tryLock()</c>.</para>
          <para>The default
            implementation throws <c>UnsupportedOperationException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryAcquire(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireNanos">
      <MemberSignature Language="VB.NET" Value="Public Function TryAcquireNanos (arg As Integer, nanosTimeout As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryAcquireNanos(int arg, long nanosTimeout);" />
      <MemberSignature Language="C#" Value="public bool TryAcquireNanos (int arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireNanos(int32 arg, int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireNanos(System.Int32,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TryAcquireNanos : int * int64 -&gt; bool" Usage="abstractQueuedSynchronizer.TryAcquireNanos (arg, nanosTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireNanos", "(IJ)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireNanos", "(IJ)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquire</c> but is otherwise uninterpreted and
                   can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in exclusive mode, aborting if interrupted,
            and failing if the given timeout elapses.</summary>
        <returns>
          <c>true</c> if acquired; <c>false</c> if timed out</returns>
        <remarks>
          <para>Attempts to acquire in exclusive mode, aborting if interrupted,
            and failing if the given timeout elapses.  Implemented by first
            checking interrupt status, then invoking at least once <c>#tryAcquire</c>, returning on success.  Otherwise, the thread is
            queued, possibly repeatedly blocking and unblocking, invoking
            <c>#tryAcquire</c> until success or the thread is interrupted
            or the timeout elapses.  This method can be used to implement
            method <c>Lock#tryLock(long, TimeUnit)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryAcquireNanos(int,%20long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireShared">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryAcquireShared (arg As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int TryAcquireShared(int arg);" />
      <MemberSignature Language="C#" Value="protected virtual int TryAcquireShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 TryAcquireShared(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member TryAcquireShared : int -&gt; int&#xA;override this.TryAcquireShared : int -&gt; int" Usage="abstractQueuedSynchronizer.TryAcquireShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireShared", "(I)I", "GetTryAcquireShared_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireShared", "(I)I", "GetTryAcquireShared_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
                   passed to an acquire method, or is the value saved on entry
                   to a condition wait.  The value is otherwise uninterpreted
                   and can represent anything you like.</param>
        <summary>Attempts to acquire in shared mode.</summary>
        <returns>a negative value on failure; zero if acquisition in shared
                    mode succeeded but no subsequent shared-mode acquire can
                    succeed; and a positive value if acquisition in shared
                    mode succeeded and subsequent shared-mode acquires might
                    also succeed, in which case a subsequent waiting thread
                    must check availability. (Support for three different
                    return values enables this method to be used in contexts
                    where acquires only sometimes act exclusively.)  Upon
                    success, this object has been acquired.</returns>
        <remarks>
          <para>Attempts to acquire in shared mode. This method should query if
            the state of the object permits it to be acquired in the shared
            mode, and if so to acquire it.</para>
          <para>This method is always invoked by the thread performing
            acquire.  If this method reports failure, the acquire method
            may queue the thread, if it is not already queued, until it is
            signalled by a release from some other thread.</para>
          <para>The default implementation throws <c>UnsupportedOperationException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryAcquireShared(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireSharedNanos">
      <MemberSignature Language="VB.NET" Value="Public Function TryAcquireSharedNanos (arg As Integer, nanosTimeout As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryAcquireSharedNanos(int arg, long nanosTimeout);" />
      <MemberSignature Language="C#" Value="public bool TryAcquireSharedNanos (int arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireSharedNanos(int32 arg, int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireSharedNanos(System.Int32,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TryAcquireSharedNanos : int * int64 -&gt; bool" Usage="abstractQueuedSynchronizer.TryAcquireSharedNanos (arg, nanosTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAcquireSharedNanos", "(IJ)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAcquireSharedNanos", "(IJ)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
                   <c>#tryAcquireShared</c> but is otherwise uninterpreted
                   and can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in shared mode, aborting if interrupted, and
            failing if the given timeout elapses.</summary>
        <returns>
          <c>true</c> if acquired; <c>false</c> if timed out</returns>
        <remarks>
          <para>Attempts to acquire in shared mode, aborting if interrupted, and
            failing if the given timeout elapses.  Implemented by first
            checking interrupt status, then invoking at least once <c>#tryAcquireShared</c>, returning on success.  Otherwise, the
            thread is queued, possibly repeatedly blocking and unblocking,
            invoking <c>#tryAcquireShared</c> until success or the thread
            is interrupted or the timeout elapses.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryAcquireSharedNanos(int,%20long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRelease">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryRelease (arg As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryRelease(int arg);" />
      <MemberSignature Language="C#" Value="protected virtual bool TryRelease (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryRelease(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryRelease(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member TryRelease : int -&gt; bool&#xA;override this.TryRelease : int -&gt; bool" Usage="abstractQueuedSynchronizer.TryRelease arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryRelease", "(I)Z", "GetTryRelease_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryRelease", "(I)Z", "GetTryRelease_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
                   passed to a release method, or the current state value upon
                   entry to a condition wait.  The value is otherwise
                   uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in exclusive
            mode.</summary>
        <returns>
          <c>true</c> if this object is now in a fully released
                    state, so that any waiting threads may attempt to acquire;
                    and <c>false</c> otherwise.</returns>
        <remarks>
          <para>Attempts to set the state to reflect a release in exclusive
            mode.</para>
          <para>This method is always invoked by the thread performing release.</para>
          <para>The default implementation throws
            <c>UnsupportedOperationException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryRelease(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReleaseShared">
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryReleaseShared (arg As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryReleaseShared(int arg);" />
      <MemberSignature Language="C#" Value="protected virtual bool TryReleaseShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryReleaseShared(int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryReleaseShared(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member TryReleaseShared : int -&gt; bool&#xA;override this.TryReleaseShared : int -&gt; bool" Usage="abstractQueuedSynchronizer.TryReleaseShared arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryReleaseShared", "(I)Z", "GetTryReleaseShared_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryReleaseShared", "(I)Z", "GetTryReleaseShared_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
                   passed to a release method, or the current state value upon
                   entry to a condition wait.  The value is otherwise
                   uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in shared mode.</summary>
        <returns>
          <c>true</c> if this release of shared mode may permit a
                    waiting acquire (shared or exclusive) to succeed; and
                    <c>false</c> otherwise</returns>
        <remarks>
          <para>Attempts to set the state to reflect a release in shared mode.</para>
          <para>This method is always invoked by the thread performing release.</para>
          <para>The default implementation throws
            <c>UnsupportedOperationException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer#tryReleaseShared(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
