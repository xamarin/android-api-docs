<Type Name="AbstractQueuedSynchronizer" FullName="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer">
  <TypeSignature Language="C#" Value="public abstract class AbstractQueuedSynchronizer : Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AbstractQueuedSynchronizer extends Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedSynchronizer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Provides a framework for implementing blocking locks and related
 synchronizers (semaphores, events, etc) that rely on
 first-in-first-out (FIFO) wait queues.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides a framework for implementing blocking locks and related
 synchronizers (semaphores, events, etc) that rely on
 first-in-first-out (FIFO) wait queues.  This class is designed to
 be a useful basis for most kinds of synchronizers that rely on a
 single atomic <c>int</c> value to represent state. Subclasses
 must define the protected methods that change this state, and which
 define what that state means in terms of this object being acquired
 or released.  Given these, the other methods in this class carry
 out all queuing and blocking mechanics. Subclasses can maintain
 other state fields, but only the atomically updated <c>int</c>
 value manipulated using methods <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" /></c>, <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" /></c> and <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.CompareAndSetState(System.Int32,System.Int32)" /></c> is tracked with respect
 to synchronization.

 </para>
      <para tool="javadoc-to-mdoc">Subclasses should be defined as non-public internal helper
 classes that are used to implement the synchronization properties
 of their enclosing class.  Class
 <c>AbstractQueuedSynchronizer</c> does not implement any
 synchronization interface.  Instead it defines methods such as
 <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.AcquireInterruptibly(System.Int32)" /></c> that can be invoked as
 appropriate by concrete locks and related synchronizers to
 implement their public methods.

 </para>
      <para tool="javadoc-to-mdoc">This class supports either or both a default <i>exclusive</i>
 mode and a <i>shared</i> mode. When acquired in exclusive mode,
 attempted acquires by other threads cannot succeed. Shared mode
 acquires by multiple threads may (but need not) succeed. This class
 does not "understand" these differences except in the
 mechanical sense that when a shared mode acquire succeeds, the next
 waiting thread (if one exists) must also determine whether it can
 acquire as well. Threads waiting in the different modes share the
 same FIFO queue. Usually, implementation subclasses support only
 one of these modes, but both can come into play for example in a
 <c><see cref="T:Java.Util.Concurrent.Locks.IReadWriteLock" /></c>. Subclasses that support only exclusive or
 only shared modes need not define the methods supporting the unused mode.

 </para>
      <para tool="javadoc-to-mdoc">This class defines a nested <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html" /></c> class that
 can be used as a <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> implementation by subclasses
 supporting exclusive mode for which method <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.IsHeldExclusively" /></c> reports whether synchronization is exclusively
 held with respect to the current thread, method <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Release(System.Int32)" /></c>
 invoked with the current <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" /></c> value fully releases
 this object, and <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Acquire(System.Int32)" /></c>, given this saved state value,
 eventually restores this object to its previous acquired state.  No
 <c>AbstractQueuedSynchronizer</c> method otherwise creates such a
 condition, so if this constraint cannot be met, do not use it.  The
 behavior of <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html" /></c> depends of course on the
 semantics of its synchronizer implementation.

 </para>
      <para tool="javadoc-to-mdoc">This class provides inspection, instrumentation, and monitoring
 methods for the internal queue, as well as similar methods for
 condition objects. These can be exported as desired into classes
 using an <c>AbstractQueuedSynchronizer</c> for their
 synchronization mechanics.

 </para>
      <para tool="javadoc-to-mdoc">Serialization of this class stores only the underlying atomic
 integer maintaining state, so deserialized objects have empty
 thread queues. Typical subclasses requiring serializability will
 define a <c>readObject</c> method that restores this to a known
 initial state upon deserialization.

 <format type="text/html"><h3>Usage</h3></format></para>
      <para tool="javadoc-to-mdoc">To use this class as the basis of a synchronizer, redefine the
 following methods, as applicable, by inspecting and/or modifying
 the synchronization state using <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" /></c>, <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.State" /></c> and/or <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.CompareAndSetState(System.Int32,System.Int32)" /></c>:

 <list type="bullet"><item><term><c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c></term></item><item><term><c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryRelease(System.Int32)" /></c></term></item><item><term><c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c></term></item><item><term><c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryReleaseShared(System.Int32)" /></c></term></item><item><term><c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.IsHeldExclusively" /></c></term></item></list>

 Each of these methods by default throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.  Implementations of these methods
 must be internally thread-safe, and should in general be short and
 not block. Defining these methods is the <i>only</i> supported
 means of using this class. All other methods are declared
 <c>final</c> because they cannot be independently varied.

 </para>
      <para tool="javadoc-to-mdoc">You may also find the inherited methods from <c><see cref="T:Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer" /></c> useful to keep track of the thread
 owning an exclusive synchronizer.  You are encouraged to use them
 -- this enables monitoring and diagnostic tools to assist users in
 determining which threads hold locks.

 </para>
      <para tool="javadoc-to-mdoc">Even though this class is based on an internal FIFO queue, it
 does not automatically enforce FIFO acquisition policies.  The core
 of exclusive synchronization takes the form:

 <example><code lang="java">
 Acquire:
     while (!tryAcquire(arg)) {
        enqueue thread if it is not already queued;
        possibly block current thread;
     }

 Release:
     if (tryRelease(arg))
        unblock the first queued thread;
 </code></example>

 (Shared mode is similar but may involve cascading signals.)

 </para>
      <para tool="javadoc-to-mdoc">Because checks in acquire are invoked before
 enqueuing, a newly acquiring thread may <i>barge</i> ahead of
 others that are blocked and queued.  However, you can, if desired,
 define <c>tryAcquire</c> and/or <c>tryAcquireShared</c> to
 disable barging by internally invoking one or more of the inspection
 methods, thereby providing a <i>fair</i> FIFO acquisition order.
 In particular, most fair synchronizers can define <c>tryAcquire</c>
 to return <c>false</c> if <c>hasQueuedPredecessors</c> (a method
 specifically designed to be used by fair synchronizers) returns
 <c>true</c>.  Other variations are possible.

 </para>
      <para tool="javadoc-to-mdoc">Throughput and scalability are generally highest for the
 default barging (also known as <i>greedy</i>,
 <i>renouncement</i>, and <i>convoy-avoidance</i>) strategy.
 While this is not guaranteed to be fair or starvation-free, earlier
 queued threads are allowed to recontend before later queued
 threads, and each recontention has an unbiased chance to succeed
 against incoming threads.  Also, while acquires do not
 "spin" in the usual sense, they may perform multiple
 invocations of <c>tryAcquire</c> interspersed with other
 computations before blocking.  This gives most of the benefits of
 spins when exclusive synchronization is only briefly held, without
 most of the liabilities when it isn't. If so desired, you can
 augment this by preceding calls to acquire methods with
 "fast-path" checks, possibly prechecking <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasContended" /></c>
 and/or <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.HasQueuedThreads" /></c> to only do so if the synchronizer
 is likely not to be contended.

 </para>
      <para tool="javadoc-to-mdoc">This class provides an efficient and scalable basis for
 synchronization in part by specializing its range of use to
 synchronizers that can rely on <c>int</c> state, acquire, and
 release parameters, and an internal FIFO wait queue. When this does
 not suffice, you can build synchronizers from a lower level using
 <c><see cref="N:Java.Util.Concurrent.Atomic" /></c> classes, your own custom
 <c><see cref="T:Java.Util.IQueue" /></c> classes, and <c><see cref="T:Java.Util.Concurrent.Locks.LockSupport" /></c> blocking
 support.

 <format type="text/html"><h3>Usage Examples</h3></format></para>
      <para tool="javadoc-to-mdoc">Here is a non-reentrant mutual exclusion lock class that uses
 the value zero to represent the unlocked state, and one to
 represent the locked state. While a non-reentrant lock
 does not strictly require recording of the current owner
 thread, this class does so anyway to make usage easier to monitor.
 It also supports conditions and exposes
 one of the instrumentation methods:

  <example><code lang="java">class Mutex implements Lock, java.io.Serializable {

   // Our internal helper class
   private static class Sync extends AbstractQueuedSynchronizer {
     // Reports whether in locked state
     protected boolean isHeldExclusively() {
       return getState() == 1;
     

     // Acquires the lock if state is zero
     public boolean tryAcquire(int acquires) {
       assert acquires == 1; // Otherwise unused
       if (compareAndSetState(0, 1)) {
         setExclusiveOwnerThread(Thread.currentThread());
         return true;
       }
       return false;
     }

     // Releases the lock by setting state to zero
     protected boolean tryRelease(int releases) {
       assert releases == 1; // Otherwise unused
       if (getState() == 0) throw new IllegalMonitorStateException();
       setExclusiveOwnerThread(null);
       setState(0);
       return true;
     }

     // Provides a Condition
     Condition newCondition() { return new ConditionObject(); }

     // Deserializes properly
     private void readObject(ObjectInputStream s)
         throws IOException, ClassNotFoundException {
       s.defaultReadObject();
       setState(0); // reset to unlocked state
     }
   }

   // The sync object does all the hard work. We just forward to it.
   private final Sync sync = new Sync();

   public void lock()                { sync.acquire(1); }
   public boolean tryLock()          { return sync.tryAcquire(1); }
   public void unlock()              { sync.release(1); }
   public Condition newCondition()   { return sync.newCondition(); }
   public boolean isLocked()         { return sync.isHeldExclusively(); }
   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }
   public void lockInterruptibly() throws InterruptedException {
     sync.acquireInterruptibly(1);
   }
   public boolean tryLock(long timeout, TimeUnit unit)
       throws InterruptedException {
     return sync.tryAcquireNanos(1, unit.toNanos(timeout));
   }
 }}</code></example></para>
      <para tool="javadoc-to-mdoc">Here is a latch class that is like a
 <c><see cref="T:Java.Util.Concurrent.CountDownLatch" /></c>
 except that it only requires a single <c>signal</c> to
 fire. Because a latch is non-exclusive, it uses the <c>shared</c>
 acquire and release methods.

  <example><code lang="java">class BooleanLatch {

   private static class Sync extends AbstractQueuedSynchronizer {
     boolean isSignalled() { return getState() != 0; 

     protected int tryAcquireShared(int ignore) {
       return isSignalled() ? 1 : -1;
     }

     protected boolean tryReleaseShared(int ignore) {
       setState(1);
       return true;
     }
   }

   private final Sync sync = new Sync();
   public boolean isSignalled() { return sync.isSignalled(); }
   public void signal()         { sync.releaseShared(1); }
   public void await() throws InterruptedException {
     sync.acquireSharedInterruptibly(1);
   }
 }}</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedSynchronizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>AbstractQueuedSynchronizer</c> instance
 with initial synchronization state of zero.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>AbstractQueuedSynchronizer</c> instance
 with initial synchronization state of zero.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#AbstractQueuedSynchronizer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractQueuedSynchronizer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public void Acquire (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Acquire(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> but is otherwise uninterpreted and
        can represent anything you like.
</param>
        <summary>Acquires in exclusive mode, ignoring interrupts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in exclusive mode, ignoring interrupts.  Implemented
 by invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c>,
 returning on success.  Otherwise the thread is queued, possibly
 repeatedly blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> until success.  This method can be used
 to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.Lock" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquire(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquireInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireInterruptibly (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireInterruptibly(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireInterruptibly", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <summary>Acquires in exclusive mode, aborting if interrupted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in exclusive mode, aborting if interrupted.
 Implemented by first checking interrupt status, then invoking
 at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c>, returning on
 success.  Otherwise the thread is queued, possibly repeatedly
 blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c>
 until success or the thread is interrupted.  This method can be
 used to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.LockInterruptibly" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireInterruptibly(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireShared">
      <MemberSignature Language="C#" Value="public void AcquireShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireShared(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireShared", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> but is otherwise uninterpreted
        and can represent anything you like.
</param>
        <summary>Acquires in shared mode, ignoring interrupts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in shared mode, ignoring interrupts.  Implemented by
 first invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c>,
 returning on success.  Otherwise the thread is queued, possibly
 repeatedly blocking and unblocking, invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> until success.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireShared(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquireSharedInterruptibly">
      <MemberSignature Language="C#" Value="public void AcquireSharedInterruptibly (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireSharedInterruptibly(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireSharedInterruptibly", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.
 This value is conveyed to <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> but is
 otherwise uninterpreted and can represent anything
 you like.</param>
        <summary>Acquires in shared mode, aborting if interrupted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires in shared mode, aborting if interrupted.  Implemented
 by first checking interrupt status, then invoking at least once
 <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c>, returning on success.  Otherwise the
 thread is queued, possibly repeatedly blocking and unblocking,
 invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> until success or the thread
 is interrupted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireSharedInterruptibly(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSetState">
      <MemberSignature Language="C#" Value="protected bool CompareAndSetState (int expect, int update);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool CompareAndSetState(int32 expect, int32 update) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compareAndSetState", "(II)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expect" Type="System.Int32" />
        <Parameter Name="update" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expect">the expected value</param>
        <param name="update">the new value</param>
        <summary>Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.
 This operation has memory semantics of a <c>volatile</c> read
 and write.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#compareAndSetState(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ExclusiveQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; ExclusiveQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; ExclusiveQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExclusiveQueuedThreads", "()Ljava/util/Collection;", "GetGetExclusiveQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire in exclusive mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire in exclusive mode. This has the same properties
 as <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueuedThreads" /></c> except that it only returns
 those threads waiting due to an exclusive acquire.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getExclusiveQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FirstQueuedThread">
      <MemberSignature Language="C#" Value="public Java.Lang.Thread FirstQueuedThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread FirstQueuedThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFirstQueuedThread", "()Ljava/lang/Thread;", "GetGetFirstQueuedThreadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the first (longest-waiting) thread in the queue, or
 <c>null</c> if no threads are currently queued.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the first (longest-waiting) thread in the queue, or
 <c>null</c> if no threads are currently queued.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation normally returns in
 constant time, but may iterate upon contention if other threads are
 concurrently modifying the queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getFirstQueuedThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetWaitingThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; GetWaitingThreads (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; GetWaitingThreads(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns a collection containing those threads that may be
 waiting on the given condition associated with this
 synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing those threads that may be
 waiting on the given condition associated with this
 synchronizer.  Because the actual set of threads may change
 dynamically while constructing this result, the returned
 collection is only a best-effort estimate. The elements of the
 returned collection are in no particular order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWaitQueueLength">
      <MemberSignature Language="C#" Value="public int GetWaitQueueLength (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetWaitQueueLength(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Returns an estimate of the number of threads waiting on the
 given condition associated with this synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting on the
 given condition associated with this synchronizer. Note that
 because timeouts and interrupts may occur at any time, the
 estimate serves only as an upper bound on the actual number of
 waiters.  This method is designed for use in monitoring of the
 system state, not for synchronization control.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasContended">
      <MemberSignature Language="C#" Value="public bool HasContended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasContended", "()Z", "GetHasContendedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have ever contended to acquire this
 synchronizer; that is if an acquire method has ever blocked.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads have ever contended to acquire this
 synchronizer; that is if an acquire method has ever blocked.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation returns in
 constant time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasContended()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasQueuedPredecessors">
      <MemberSignature Language="C#" Value="public bool HasQueuedPredecessors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedPredecessors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedPredecessors", "()Z", "GetHasQueuedPredecessorsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads have been waiting to acquire longer
 than the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads have been waiting to acquire longer
 than the current thread.

 </para>
          <para tool="javadoc-to-mdoc">An invocation of this method is equivalent to (but may be
 more efficient than):
  <example><code lang="java">getFirstQueuedThread() != Thread.currentThread() &amp;&amp;
 hasQueuedThreads()</code></example></para>
          <para tool="javadoc-to-mdoc">Note that because cancellations due to interrupts and
 timeouts may occur at any time, a <c>true</c> return does not
 guarantee that some other thread will acquire before the current
 thread.  Likewise, it is possible for another thread to win a
 race to enqueue after this method has returned <c>false</c>,
 due to the queue being empty.

 </para>
          <para tool="javadoc-to-mdoc">This method is designed to be used by a fair synchronizer to
 avoid .
 Such a synchronizer's <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> method should return
 <c>false</c>, and its <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> method should
 return a negative value, if this method returns <c>true</c>
 (unless this is a reentrant acquire).  For example, the <c>tryAcquire</c> method for a fair, reentrant, exclusive mode
 synchronizer might look like this:

  <example><code lang="java">protected boolean tryAcquire(int arg) {
   if (isHeldExclusively()) {
     // A reentrant acquire; increment hold count
     return true;
    else if (hasQueuedPredecessors()) {
     return false;
   } else {
     // try to acquire normally
   }
 }}</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasQueuedPredecessors()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueuedThreads">
      <MemberSignature Language="C#" Value="public bool HasQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasQueuedThreads", "()Z", "GetHasQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting to acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting to acquire. Note that
 because cancellations due to interrupts and timeouts may occur
 at any time, a <c>true</c> return does not guarantee that any
 other thread will ever acquire.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, this operation returns in
 constant time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="C#" Value="public bool HasWaiters (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasWaiters(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether any threads are waiting on the given condition
 associated with this synchronizer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting on the given condition
 associated with this synchronizer. Note that because timeouts
 and interrupts may occur at any time, a <c>true</c> return
 does not guarantee that a future <c>signal</c> will awaken
 any threads.  This method is designed primarily for use in
 monitoring of the system state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if exclusive synchronization
         is not held</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given condition is
         not associated with this synchronizer</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeldExclusively">
      <MemberSignature Language="C#" Value="protected virtual bool IsHeldExclusively { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldExclusively" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHeldExclusively", "()Z", "GetIsHeldExclusivelyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if synchronization is held exclusively with
 respect to the current (calling) thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if synchronization is held exclusively with
 respect to the current (calling) thread.  This method is invoked
 upon each call to a non-waiting <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html" /></c> method.
 (Waiting methods instead invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.Release(System.Int32)" /></c>.)

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>. This method is invoked
 internally only within <c><see cref="!:NoType:java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;Href=../../../../../reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html" /></c> methods, so need
 not be defined if conditions are not used.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#isHeldExclusively()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if conditions are not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued (Java.Lang.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsQueued(class Java.Lang.Thread thread) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isQueued", "(Ljava/lang/Thread;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">the thread</param>
        <summary>Returns true if the given thread is currently queued.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the given thread is currently queued.

 </para>
          <para tool="javadoc-to-mdoc">This implementation traverses the queue to determine
 presence of the given thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#isQueued(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the thread is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public bool Owns (Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.ConditionObject condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Owns(class Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer/ConditionObject condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("owns", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer+ConditionObject" />
      </Parameters>
      <Docs>
        <param name="condition">the condition</param>
        <summary>Queries whether the given ConditionObject
 uses this synchronizer as its lock.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether the given ConditionObject
 uses this synchronizer as its lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the condition is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="QueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; QueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; QueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedThreads", "()Ljava/util/Collection;", "GetGetQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire.  Because the actual set of threads may change
 dynamically while constructing this result, the returned
 collection is only a best-effort estimate.  The elements of the
 returned collection are in no particular order.  This method is
 designed to facilitate construction of subclasses that provide
 more extensive monitoring facilities.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueueLength">
      <MemberSignature Language="C#" Value="public int QueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 QueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueueLength", "()I", "GetGetQueueLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting to
 acquire.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting to
 acquire.  The value is only an estimate because the number of
 threads may change dynamically while this method traverses
 internal data structures.  This method is designed for use in
 monitoring system state, not for synchronization
 control.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getQueueLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public bool Release (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Release(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryRelease(System.Int32)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <summary>Releases in exclusive mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases in exclusive mode.  Implemented by unblocking one or
 more threads if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryRelease(System.Int32)" /></c> returns true.
 This method can be used to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.Unlock" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#release(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseShared">
      <MemberSignature Language="C#" Value="public bool ReleaseShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseShared(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseShared", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryReleaseShared(System.Int32)" /></c> but is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Releases in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases in shared mode.  Implemented by unblocking one or more
 threads if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryReleaseShared(System.Int32)" /></c> returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#releaseShared(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SharedQueuedThreads">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; SharedQueuedThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; SharedQueuedThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSharedQueuedThreads", "()Ljava/util/Collection;", "GetGetSharedQueuedThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing threads that may be waiting to
 acquire in shared mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing threads that may be waiting to
 acquire in shared mode. This has the same properties
 as <c><see cref="P:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.QueuedThreads" /></c> except that it only returns
 those threads waiting due to a shared acquire.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getSharedQueuedThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected int State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()I", "GetGetStateHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setState", "(I)V", "GetSetState_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current value of synchronization state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getState()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current value of synchronization state.
 This operation has memory semantics of a <c>volatile</c> read.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#setState(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the value of synchronization state.
 This operation has memory semantics of a <c>volatile</c> write.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAcquire">
      <MemberSignature Language="C#" Value="protected virtual bool TryAcquire (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryAcquire(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquire", "(I)Z", "GetTryAcquire_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
        passed to an acquire method, or is the value saved on entry
        to a condition wait.  The value is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Attempts to acquire in exclusive mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in exclusive mode. This method should query
 if the state of the object permits it to be acquired in the
 exclusive mode, and if so to acquire it.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing
 acquire.  If this method reports failure, the acquire method
 may queue the thread, if it is not already queued, until it is
 signalled by a release from some other thread. This can be used
 to implement method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The default
 implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquire(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireNanos (int arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireNanos(int32 arg, int64 nanosTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireNanos", "(IJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> but is otherwise uninterpreted and
        can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.  Implemented by first
 checking interrupt status, then invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c>, returning on success.  Otherwise, the thread is
 queued, possibly repeatedly blocking and unblocking, invoking
 <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquire(System.Int32)" /></c> until success or the thread is interrupted
 or the timeout elapses.  This method can be used to implement
 method <c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireNanos(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireShared">
      <MemberSignature Language="C#" Value="protected virtual int TryAcquireShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 TryAcquireShared(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireShared", "(I)I", "GetTryAcquireShared_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument. This value is always the one
        passed to an acquire method, or is the value saved on entry
        to a condition wait.  The value is otherwise uninterpreted
        and can represent anything you like.</param>
        <summary>Attempts to acquire in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in shared mode. This method should query if
 the state of the object permits it to be acquired in the shared
 mode, and if so to acquire it.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing
 acquire.  If this method reports failure, the acquire method
 may queue the thread, if it is not already queued, until it is
 signalled by a release from some other thread.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireShared(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAcquireSharedNanos">
      <MemberSignature Language="C#" Value="public bool TryAcquireSharedNanos (int arg, long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAcquireSharedNanos(int32 arg, int64 nanosTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryAcquireSharedNanos", "(IJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="arg">the acquire argument.  This value is conveyed to
        <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> but is otherwise uninterpreted
        and can represent anything you like.</param>
        <param name="nanosTimeout">the maximum number of nanoseconds to wait</param>
        <summary>Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.  Implemented by first
 checking interrupt status, then invoking at least once <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c>, returning on success.  Otherwise, the
 thread is queued, possibly repeatedly blocking and unblocking,
 invoking <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer.TryAcquireShared(System.Int32)" /></c> until success or the thread
 is interrupted or the timeout elapses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireSharedNanos(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRelease">
      <MemberSignature Language="C#" Value="protected virtual bool TryRelease (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryRelease(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryRelease", "(I)Z", "GetTryRelease_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
        passed to a release method, or the current state value upon
        entry to a condition wait.  The value is otherwise
        uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in exclusive
 mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to set the state to reflect a release in exclusive
 mode.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing release.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws
 <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryRelease(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if exclusive mode is not supported
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReleaseShared">
      <MemberSignature Language="C#" Value="protected virtual bool TryReleaseShared (int arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryReleaseShared(int32 arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryReleaseShared", "(I)Z", "GetTryReleaseShared_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arg">the release argument. This value is always the one
        passed to a release method, or the current state value upon
        entry to a condition wait.  The value is otherwise
        uninterpreted and can represent anything you like.</param>
        <summary>Attempts to set the state to reflect a release in shared mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to set the state to reflect a release in shared mode.

 </para>
          <para tool="javadoc-to-mdoc">This method is always invoked by the thread performing release.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation throws
 <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryReleaseShared(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if releasing would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if shared mode is not supported
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
