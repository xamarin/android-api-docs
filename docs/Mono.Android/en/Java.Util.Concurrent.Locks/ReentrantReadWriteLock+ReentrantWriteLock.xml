<Type Name="ReentrantReadWriteLock+ReentrantWriteLock" FullName="Java.Util.Concurrent.Locks.ReentrantReadWriteLock+ReentrantWriteLock">
  <TypeSignature Language="C#" Value="public class ReentrantReadWriteLock.ReentrantWriteLock : Java.Lang.Object, IDisposable, Java.IO.ISerializable, Java.Util.Concurrent.Locks.ILock" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ReentrantReadWriteLock/ReentrantWriteLock extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class Java.Util.Concurrent.Locks.ILock, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.Locks.ILock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The lock returned by method <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.WriteLock" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The lock returned by method <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.WriteLock" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReentrantWriteLock (Java.Util.Concurrent.Locks.ReentrantReadWriteLock lock);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Locks.ReentrantReadWriteLock lock) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="lock" Type="Java.Util.Concurrent.Locks.ReentrantReadWriteLock" />
      </Parameters>
      <Docs>
        <param name="lock">To be added.</param>
        <summary>Constructor for use by subclasses</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor for use by subclasses</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#ReentrantReadWriteLock.WriteLock(java.util.concurrent.locks.ReentrantReadWriteLock)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the lock is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReentrantWriteLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoldCount">
      <MemberSignature Language="C#" Value="public virtual int HoldCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HoldCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHoldCount", "()I", "GetGetHoldCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries the number of holds on this write lock by the current
 thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries the number of holds on this write lock by the current
 thread.  A thread has a hold on a lock for each lock action
 that is not matched by an unlock action.  Identical in effect
 to <c><see cref="P:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.WriteHoldCount" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#getHoldCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public virtual bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHeldByCurrentThread", "()Z", "GetIsHeldByCurrentThreadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries if this write lock is held by the current thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries if this write lock is held by the current thread.
 Identical in effect to <c><see cref="P:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.IsWriteLockedByCurrentThread" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#isHeldByCurrentThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public virtual void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "()V", "GetLockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the write lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the write lock.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately, setting the write lock hold count to
 one.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread already holds the write lock then the
 hold count is incremented by one and the method returns
 immediately.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is held by another thread then the current
 thread becomes disabled for thread scheduling purposes and
 lies dormant until the write lock has been acquired, at which
 time the write lock hold count is set to one.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#lock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockInterruptibly">
      <MemberSignature Language="C#" Value="public virtual void LockInterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockInterruptibly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the write lock unless the current thread is
 <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the write lock unless the current thread is
 <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately, setting the write lock hold count to
 one.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread already holds this lock then the
 hold count is incremented by one and the method returns
 immediately.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is held by another thread then the current
 thread becomes disabled for thread scheduling purposes and
 lies dormant until one of two things happens:

 <list type="bullet"><item><term>The write lock is acquired by the current thread; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread.

 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the write lock is acquired by the current thread then the
 lock hold count is set to one.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:

 <list type="bullet"><item><term>has its interrupted status set on entry to this method;
 or

 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 acquiring the write lock,

 </term></item></list>

 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current
 thread's interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#lockInterruptibly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCondition">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.Locks.ICondition NewCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ICondition NewCondition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ICondition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance for use with this
 <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance for use with this
 <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> instance.
 </para>
          <para tool="javadoc-to-mdoc">The returned <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance supports the same
 usages as do the <c><see cref="T:Java.Lang.Object" /></c> monitor methods (<c><see cref="M:Java.Lang.Object.Wait" /></c>, <c><see cref="M:Java.Lang.Object.Notify" /></c>, and <c><see cref="M:Java.Lang.Object.NotifyAll" /></c>) when used with the built-in
 monitor lock.

 <list type="bullet"><item><term>If this write lock is not held when any <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> method is called then an <c><see cref="T:Java.Lang.IllegalMonitorStateException" /></c> is thrown.  (Read locks are
 held independently of write locks, so are not checked or
 affected. However it is essentially always an error to
 invoke a condition waiting method when the current thread
 has also acquired read locks, since other threads that
 could unblock it will not be able to acquire the write
 lock.)

 </term></item><item><term>When the condition <c><see cref="M:Java.Util.Concurrent.Locks.ICondition.Await" /></c>
 methods are called the write lock is released and, before
 they return, the write lock is reacquired and the lock hold
 count restored to what it was when the method was called.

 </term></item><item><term>If a thread is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 waiting then the wait will terminate, an <c><see cref="T:Java.Lang.InterruptedException" /></c> will be thrown, and the thread's
 interrupted status will be cleared.

 </term></item><item><term> Waiting threads are signalled in FIFO order.

 </term></item><item><term>The ordering of lock reacquisition for threads returning
 from waiting methods is the same as for threads initially
 acquiring the lock, which is in the default case not specified,
 but for <i>fair</i> locks favors those threads that have been
 waiting the longest.

 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#newCondition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public virtual bool TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the write lock only if it is not held by another thread
 at the time of invocation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the write lock only if it is not held by another thread
 at the time of invocation.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately with the value <c>true</c>,
 setting the write lock hold count to one. Even when this lock has
 been set to use a fair ordering policy, a call to
 <c>tryLock()</c><i>will</i> immediately acquire the
 lock if it is available, whether or not other threads are
 currently waiting for the write lock.  This "barging"
 behavior can be useful in certain circumstances, even
 though it breaks fairness. If you want to honor the
 fairness setting for this lock, then use <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantWriteLock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>
 which is almost equivalent (it also detects interruption).

 </para>
          <para tool="javadoc-to-mdoc"> If the current thread already holds this lock then the
 hold count is incremented by one and the method returns
 <c>true</c>.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is held by another thread then this method
 will return immediately with the value <c>false</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#tryLock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public virtual bool TryLock (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the time to wait for the write lock</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Acquires the write lock if it is not held by another thread
 within the given waiting time and the current thread has
 not been <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the write lock if it is not held by another thread
 within the given waiting time and the current thread has
 not been <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately with the value <c>true</c>,
 setting the write lock hold count to one. If this lock has been
 set to use a fair ordering policy then an available lock
 <i>will not</i> be acquired if any other threads are
 waiting for the write lock. This is in contrast to the <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantWriteLock.TryLock" /></c> method. If you want a timed <c>tryLock</c>
 that does permit barging on a fair lock then combine the
 timed and un-timed forms together:

  <example><code lang="java">if (lock.tryLock() ||
     lock.tryLock(timeout, unit)) {
   ...
 }</code></example></para>
          <para tool="javadoc-to-mdoc">If the current thread already holds this lock then the
 hold count is incremented by one and the method returns
 <c>true</c>.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is held by another thread then the current
 thread becomes disabled for thread scheduling purposes and
 lies dormant until one of three things happens:

 <list type="bullet"><item><term>The write lock is acquired by the current thread; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The specified waiting time elapses

 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the write lock is acquired then the value <c>true</c> is
 returned and the write lock hold count is set to one.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:

 <list type="bullet"><item><term>has its interrupted status set on entry to this method;
 or

 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 acquiring the write lock,

 </term></item></list>

 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current
 thread's interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then the value
 <c>false</c> is returned.  If the time is less than or
 equal to zero, the method will not wait at all.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock, and over reporting the elapse of the waiting time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#tryLock(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the time unit is null

</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public virtual void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlock", "()V", "GetUnlockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to release this lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to release this lock.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is the holder of this lock then
 the hold count is decremented. If the hold count is now
 zero then the lock is released.  If the current thread is
 not the holder of this lock then <c><see cref="T:Java.Lang.IllegalMonitorStateException" /></c> is thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html#unlock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if the current thread does not
 hold this lock.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
