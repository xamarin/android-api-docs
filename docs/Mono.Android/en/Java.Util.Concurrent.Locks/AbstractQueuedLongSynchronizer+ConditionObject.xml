<Type Name="AbstractQueuedLongSynchronizer+ConditionObject" FullName="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject">
  <TypeSignature Language="C#" Value="public class AbstractQueuedLongSynchronizer.ConditionObject : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable, Java.Util.Concurrent.Locks.ICondition" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit AbstractQueuedLongSynchronizer/ConditionObject extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class Java.Util.Concurrent.Locks.ICondition, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject" />
  <TypeSignature Language="F#" Value="type AbstractQueuedLongSynchronizer.ConditionObject = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface ICondition" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.Locks.ICondition</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Condition implementation for a <c>AbstractQueuedLongSynchronizer</c>
            serving as the basis of a <c>Lock</c> implementation.</summary>
    <remarks>
      <para>Condition implementation for a <c>AbstractQueuedLongSynchronizer</c>
            serving as the basis of a <c>Lock</c> implementation.</para>
      <para>Method documentation for this class describes mechanics,
            not behavioral specifications from the point of view of Lock
            and Condition users. Exported versions of this class will in
            general need to be accompanied by documentation describing
            condition semantics that rely on those of the associated
            <c>AbstractQueuedLongSynchronizer</c>.</para>
      <para>This class is Serializable, but all fields are transient,
            so deserialized conditions have no waiters.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionObject (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer? __self);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer __self) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.#ctor(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject : Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer -&gt; Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject" Usage="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject __self" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="__self" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" />
      </Parameters>
      <Docs>
        <param name="__self">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConditionObject (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject" Usage="new Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public void Await ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Await() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.Await" />
      <MemberSignature Language="F#" Value="abstract member Await : unit -&gt; unit&#xA;override this.Await : unit -&gt; unit" Usage="conditionObject.Await " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.Await</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("await", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements interruptible condition wait.</summary>
        <remarks>
          <para>Implements interruptible condition wait.
            &lt;ol&gt;
            &lt;li&gt;If current thread is interrupted, throw InterruptedException.
            &lt;li&gt;Save lock state returned by <c>#getState</c>.
            &lt;li&gt;Invoke <c>#release</c> with saved state as argument,
                throwing IllegalMonitorStateException if it fails.
            &lt;li&gt;Block until signalled or interrupted.
            &lt;li&gt;Reacquire by invoking specialized version of
                <c>#acquire</c> with saved state as argument.
            &lt;li&gt;If interrupted while blocked in step 4, throw InterruptedException.
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#await()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public bool Await (long time, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Await(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.Await(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member Await : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool&#xA;override this.Await : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="conditionObject.Await (time, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.Await(System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the maximum time to wait</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Implements timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Implements timed condition wait.
            &lt;ol&gt;
            &lt;li&gt;If current thread is interrupted, throw InterruptedException.
            &lt;li&gt;Save lock state returned by <c>#getState</c>.
            &lt;li&gt;Invoke <c>#release</c> with saved state as argument,
                throwing IllegalMonitorStateException if it fails.
            &lt;li&gt;Block until signalled, interrupted, or timed out.
            &lt;li&gt;Reacquire by invoking specialized version of
                <c>#acquire</c> with saved state as argument.
            &lt;li&gt;If interrupted while blocked in step 4, throw InterruptedException.
            &lt;li&gt;If timed out while blocked in step 4, return false, else true.
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#await(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="AwaitNanos">
      <MemberSignature Language="C#" Value="public long AwaitNanos (long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 AwaitNanos(int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.AwaitNanos(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member AwaitNanos : int64 -&gt; int64&#xA;override this.AwaitNanos : int64 -&gt; int64" Usage="conditionObject.AwaitNanos nanosTimeout" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.AwaitNanos(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitNanos", "(J)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitNanos", "(J)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nanosTimeout">the maximum time to wait, in nanoseconds</param>
        <summary>Implements timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Implements timed condition wait.
            &lt;ol&gt;
            &lt;li&gt;If current thread is interrupted, throw InterruptedException.
            &lt;li&gt;Save lock state returned by <c>#getState</c>.
            &lt;li&gt;Invoke <c>#release</c> with saved state as argument,
                throwing IllegalMonitorStateException if it fails.
            &lt;li&gt;Block until signalled, interrupted, or timed out.
            &lt;li&gt;Reacquire by invoking specialized version of
                <c>#acquire</c> with saved state as argument.
            &lt;li&gt;If interrupted while blocked in step 4, throw InterruptedException.
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#awaitNanos(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="AwaitUninterruptibly">
      <MemberSignature Language="C#" Value="public void AwaitUninterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AwaitUninterruptibly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.AwaitUninterruptibly" />
      <MemberSignature Language="F#" Value="abstract member AwaitUninterruptibly : unit -&gt; unit&#xA;override this.AwaitUninterruptibly : unit -&gt; unit" Usage="conditionObject.AwaitUninterruptibly " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.AwaitUninterruptibly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitUninterruptibly", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitUninterruptibly", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements uninterruptible condition wait.</summary>
        <remarks>
          <para>Implements uninterruptible condition wait.
            &lt;ol&gt;
            &lt;li&gt;Save lock state returned by <c>#getState</c>.
            &lt;li&gt;Invoke <c>#release</c> with saved state as argument,
                throwing IllegalMonitorStateException if it fails.
            &lt;li&gt;Block until signalled.
            &lt;li&gt;Reacquire by invoking specialized version of
                <c>#acquire</c> with saved state as argument.
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#awaitUninterruptibly()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AwaitUntil">
      <MemberSignature Language="C#" Value="public bool AwaitUntil (Java.Util.Date? deadline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AwaitUntil(class Java.Util.Date deadline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.AwaitUntil(Java.Util.Date)" />
      <MemberSignature Language="F#" Value="abstract member AwaitUntil : Java.Util.Date -&gt; bool&#xA;override this.AwaitUntil : Java.Util.Date -&gt; bool" Usage="conditionObject.AwaitUntil deadline" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.AwaitUntil(Java.Util.Date)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitUntil", "(Ljava/util/Date;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("awaitUntil", "(Ljava/util/Date;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deadline" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="deadline">the absolute time to wait until</param>
        <summary>Implements absolute timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Implements absolute timed condition wait.
            &lt;ol&gt;
            &lt;li&gt;If current thread is interrupted, throw InterruptedException.
            &lt;li&gt;Save lock state returned by <c>#getState</c>.
            &lt;li&gt;Invoke <c>#release</c> with saved state as argument,
                throwing IllegalMonitorStateException if it fails.
            &lt;li&gt;Block until signalled, interrupted, or timed out.
            &lt;li&gt;Reacquire by invoking specialized version of
                <c>#acquire</c> with saved state as argument.
            &lt;li&gt;If interrupted while blocked in step 4, throw InterruptedException.
            &lt;li&gt;If timed out while blocked in step 4, return false, else true.
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#awaitUntil(java.util.Date)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(java.util.Date)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="C#" Value="protected bool HasWaiters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWaiters" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.HasWaiters" />
      <MemberSignature Language="F#" Value="member this.HasWaiters : bool" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.HasWaiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasWaiters", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasWaiters", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting on this condition.</summary>
        <value>
          <c>true</c> if there are any waiting threads</value>
        <remarks>
          <para>Queries whether any threads are waiting on this condition.
            Implements <c>AbstractQueuedLongSynchronizer#hasWaiters(ConditionObject)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#hasWaiters()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Java Util Concurrent Locks AbstractQueuedLongSynchronizer get_IsHeldExclusively';scope=Xamarin" title="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively">M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively</a></format>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signal">
      <MemberSignature Language="C#" Value="public void Signal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Signal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.Signal" />
      <MemberSignature Language="F#" Value="abstract member Signal : unit -&gt; unit&#xA;override this.Signal : unit -&gt; unit" Usage="conditionObject.Signal " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.Signal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signal", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("signal", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the longest-waiting thread, if one exists, from the
            wait queue for this condition to the wait queue for the
            owning lock.</summary>
        <remarks>
          <para>Moves the longest-waiting thread, if one exists, from the
            wait queue for this condition to the wait queue for the
            owning lock.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#signal()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Java Util Concurrent Locks AbstractQueuedLongSynchronizer get_IsHeldExclusively';scope=Xamarin" title="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively">M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively</a></format>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAll">
      <MemberSignature Language="C#" Value="public void SignalAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.SignalAll" />
      <MemberSignature Language="F#" Value="abstract member SignalAll : unit -&gt; unit&#xA;override this.SignalAll : unit -&gt; unit" Usage="conditionObject.SignalAll " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ICondition.SignalAll</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signalAll", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("signalAll", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves all threads from the wait queue for this condition to
            the wait queue for the owning lock.</summary>
        <remarks>
          <para>Moves all threads from the wait queue for this condition to
            the wait queue for the owning lock.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#signalAll()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Java Util Concurrent Locks AbstractQueuedLongSynchronizer get_IsHeldExclusively';scope=Xamarin" title="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively">M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively</a></format>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingThreads">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;? WaitingThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; WaitingThreads" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.WaitingThreads" />
      <MemberSignature Language="F#" Value="member this.WaitingThreads : System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.WaitingThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWaitingThreads", "()Ljava/util/Collection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWaitingThreads", "()Ljava/util/Collection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing those threads that may be
            waiting on this Condition.</summary>
        <value>the collection of threads</value>
        <remarks>
          <para>Returns a collection containing those threads that may be
            waiting on this Condition.
            Implements <c>AbstractQueuedLongSynchronizer#getWaitingThreads(ConditionObject)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#getWaitingThreads()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Java Util Concurrent Locks AbstractQueuedLongSynchronizer get_IsHeldExclusively';scope=Xamarin" title="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively">M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively</a></format>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitQueueLength">
      <MemberSignature Language="C#" Value="protected int WaitQueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitQueueLength" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.WaitQueueLength" />
      <MemberSignature Language="F#" Value="member this.WaitQueueLength : int" Usage="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject.WaitQueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWaitQueueLength", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWaitQueueLength", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting on
            this condition.</summary>
        <value>the estimated number of waiting threads</value>
        <remarks>
          <para>Returns an estimate of the number of threads waiting on
            this condition.
            Implements <c>AbstractQueuedLongSynchronizer#getWaitQueueLength(ConditionObject)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject#getWaitQueueLength()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Java Util Concurrent Locks AbstractQueuedLongSynchronizer get_IsHeldExclusively';scope=Xamarin" title="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively">M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively</a></format>
         returns <c>false</c></exception>
      </Docs>
    </Member>
  </Members>
</Type>
