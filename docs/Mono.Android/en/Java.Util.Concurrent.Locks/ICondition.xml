<Type Name="ICondition" FullName="Java.Util.Concurrent.Locks.ICondition">
  <TypeSignature Language="F#" Value="type ICondition = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable" />
  <TypeSignature Language="C#" Value="public interface ICondition : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICondition implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.ICondition" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/Condition", "", "Java.Util.Concurrent.Locks.IConditionInvoker")]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>Condition</c> factors out the <c>Object</c> monitor
            methods (<c>Object#wait() wait</c>, <c>Object#notify notify</c>
            and <c>Object#notifyAll notifyAll</c>) into distinct objects to
            give the effect of having multiple wait-sets per object, by
            combining them with the use of arbitrary <c>Lock</c> implementations.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Await">
      <MemberSignature Language="F#" Value="abstract member Await : unit -&gt; unit" Usage="iCondition.Await " />
      <MemberSignature Language="C#" Value="public void Await ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Await() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.Await" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "()V", "GetAwaitHandler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the current thread to wait until it is signalled or
            Thread#interrupt interrupted.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#await()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.await()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         (and interruption of thread suspension is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="F#" Value="abstract member Await : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="iCondition.Await (time, unit)" />
      <MemberSignature Language="C#" Value="public bool Await (long time, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Await(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.Await(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwait_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the maximum time to wait</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Causes the current thread to wait until it is signalled or
            Thread#interrupt interrupted.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#await()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.await()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         (and interruption of thread suspension is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="AwaitNanos">
      <MemberSignature Language="F#" Value="abstract member AwaitNanos : int64 -&gt; int64" Usage="iCondition.AwaitNanos nanosTimeout" />
      <MemberSignature Language="C#" Value="public long AwaitNanos (long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 AwaitNanos(int64 nanosTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.AwaitNanos(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitNanos", "(J)J", "GetAwaitNanos_JHandler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nanosTimeout">the maximum time to wait, in nanoseconds</param>
        <summary>Causes the current thread to wait until it is signalled or interrupted,
            or the specified waiting time elapses.</summary>
        <returns>an estimate of the <c>nanosTimeout</c> value minus
                    the time spent waiting upon return from this method.
                    A positive value may be used as the argument to a
                    subsequent call to this method to finish waiting out
                    the desired time.  A value less than or equal to zero
                    indicates that no time remains.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#awaitNanos(long)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.awaitNanos(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         (and interruption of thread suspension is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="AwaitUninterruptibly">
      <MemberSignature Language="F#" Value="abstract member AwaitUninterruptibly : unit -&gt; unit" Usage="iCondition.AwaitUninterruptibly " />
      <MemberSignature Language="C#" Value="public void AwaitUninterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AwaitUninterruptibly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.AwaitUninterruptibly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitUninterruptibly", "()V", "GetAwaitUninterruptiblyHandler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the current thread to wait until it is signalled.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#awaitUninterruptibly()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.awaitUninterruptibly()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AwaitUntil">
      <MemberSignature Language="F#" Value="abstract member AwaitUntil : Java.Util.Date -&gt; bool" Usage="iCondition.AwaitUntil deadline" />
      <MemberSignature Language="C#" Value="public bool AwaitUntil (Java.Util.Date? deadline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AwaitUntil(class Java.Util.Date deadline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.AwaitUntil(Java.Util.Date)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("awaitUntil", "(Ljava/util/Date;)Z", "GetAwaitUntil_Ljava_util_Date_Handler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deadline" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="deadline">the absolute time to wait until</param>
        <summary>Causes the current thread to wait until it is signalled or interrupted,
            or the specified deadline elapses.</summary>
        <returns>
          <c>false</c> if the deadline has elapsed upon return, else
                    <c>true</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#awaitUntil(java.util.Date)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.awaitUntil(java.util.Date)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         (and interruption of thread suspension is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Signal">
      <MemberSignature Language="F#" Value="abstract member Signal : unit -&gt; unit" Usage="iCondition.Signal " />
      <MemberSignature Language="C#" Value="public void Signal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Signal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.Signal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signal", "()V", "GetSignalHandler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wakes up one waiting thread.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#signal()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.signal()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SignalAll">
      <MemberSignature Language="F#" Value="abstract member SignalAll : unit -&gt; unit" Usage="iCondition.SignalAll " />
      <MemberSignature Language="C#" Value="public void SignalAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ICondition.SignalAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signalAll", "()V", "GetSignalAllHandler:Java.Util.Concurrent.Locks.IConditionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wakes up all waiting threads.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Condition#signalAll()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Condition.signalAll()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
