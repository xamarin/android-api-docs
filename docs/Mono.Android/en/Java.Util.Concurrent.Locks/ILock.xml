<Type Name="ILock" FullName="Java.Util.Concurrent.Locks.ILock">
  <TypeSignature Language="C#" Value="public interface ILock : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ILock implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.ILock" />
  <TypeSignature Language="F#" Value="type ILock = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/Lock", "", "Java.Util.Concurrent.Locks.ILockInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/locks/Lock", "", "Java.Util.Concurrent.Locks.ILockInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>Lock</c> implementations provide more extensive locking
            operations than can be obtained using <c>synchronized</c> methods
            and statements.</summary>
    <remarks>
      <para>
        <c>Lock</c> implementations provide more extensive locking
            operations than can be obtained using <c>synchronized</c> methods
            and statements.  They allow more flexible structuring, may have
            quite different properties, and may support multiple associated
            <c>Condition</c> objects.</para>
      <para>A lock is a tool for controlling access to a shared resource by
            multiple threads. Commonly, a lock provides exclusive access to a
            shared resource: only one thread at a time can acquire the lock and
            all access to the shared resource requires that the lock be
            acquired first. However, some locks may allow concurrent access to
            a shared resource, such as the read lock of a <c>ReadWriteLock</c>.</para>
      <para>The use of <c>synchronized</c> methods or statements provides
            access to the implicit monitor lock associated with every object, but
            forces all lock acquisition and release to occur in a block-structured way:
            when multiple locks are acquired they must be released in the opposite
            order, and all locks must be released in the same lexical scope in which
            they were acquired.</para>
      <para>While the scoping mechanism for <c>synchronized</c> methods
            and statements makes it much easier to program with monitor locks,
            and helps avoid many common programming errors involving locks,
            there are occasions where you need to work with locks in a more
            flexible way. For example, some algorithms for traversing
            concurrently accessed data structures require the use of
            &amp;quot;hand-over-hand&amp;quot; or &amp;quot;chain locking&amp;quot;: you
            acquire the lock of node A, then node B, then release A and acquire
            C, then release B and acquire D and so on.  Implementations of the
            <c>Lock</c> interface enable the use of such techniques by
            allowing a lock to be acquired and released in different scopes,
            and allowing multiple locks to be acquired and released in any
            order.</para>
      <para>With this increased flexibility comes additional
            responsibility. The absence of block-structured locking removes the
            automatic release of locks that occurs with <c>synchronized</c>
            methods and statements. In most cases, the following idiom
            should be used:</para>
      <code lang="text/java">{@code
            Lock l = ...;
            l.lock();
            try {
              // access the resource protected by this lock
            } finally {
              l.unlock();
            }}</code>
      <para>When locking and unlocking occur in different scopes, care must be
            taken to ensure that all code that is executed while the lock is
            held is protected by try-finally or try-catch to ensure that the
            lock is released when necessary.</para>
      <para>
        <c>Lock</c> implementations provide additional functionality
            over the use of <c>synchronized</c> methods and statements by
            providing a non-blocking attempt to acquire a lock (<c>#tryLock()</c>), an attempt to acquire the lock that can be
            interrupted (<c>#lockInterruptibly</c>, and an attempt to acquire
            the lock that can timeout (<c>#tryLock(long, TimeUnit)</c>).</para>
      <para>A <c>Lock</c> class can also provide behavior and semantics
            that is quite different from that of the implicit monitor lock,
            such as guaranteed ordering, non-reentrant usage, or deadlock
            detection. If an implementation provides such specialized semantics
            then the implementation must document those semantics.</para>
      <para>Note that <c>Lock</c> instances are just normal objects and can
            themselves be used as the target in a <c>synchronized</c> statement.
            Acquiring the
            monitor lock of a <c>Lock</c> instance has no specified relationship
            with invoking any of the <c>#lock</c> methods of that instance.
            It is recommended that to avoid confusion you never use <c>Lock</c>
            instances in this way, except within their own implementation.</para>
      <para>Except where noted, passing a <c>null</c> value for any
            parameter will result in a <c>NullPointerException</c> being
            thrown.
            
            &lt;h2&gt;Memory Synchronization&lt;/h2&gt;</para>
      <para>All <c>Lock</c> implementations &lt;em&gt;must&lt;/em&gt; enforce the same
            memory synchronization semantics as provided by the built-in monitor
            lock, as described in
            Chapter 17 of
            &lt;cite&gt;The Java Language Specification&lt;/cite&gt;:
            &lt;ul&gt;
            &lt;li&gt;A successful <c>lock</c> operation has the same memory
            synchronization effects as a successful &lt;em&gt;Lock&lt;/em&gt; action.
            &lt;li&gt;A successful <c>unlock</c> operation has the same
            memory synchronization effects as a successful &lt;em&gt;Unlock&lt;/em&gt; action.
            &lt;/ul&gt;
            
            Unsuccessful locking and unlocking operations, and reentrant
            locking/unlocking operations, do not require any memory
            synchronization effects.
            
            &lt;h2&gt;Implementation Considerations&lt;/h2&gt;</para>
      <para>The three forms of lock acquisition (interruptible,
            non-interruptible, and timed) may differ in their performance
            characteristics, ordering guarantees, or other implementation
            qualities.  Further, the ability to interrupt the &lt;em&gt;ongoing&lt;/em&gt;
            acquisition of a lock may not be available in a given <c>Lock</c>
            class.  Consequently, an implementation is not required to define
            exactly the same guarantees or semantics for all three forms of
            lock acquisition, nor is it required to support interruption of an
            ongoing lock acquisition.  An implementation is required to clearly
            document the semantics and guarantees provided by each of the
            locking methods. It must also obey the interruption semantics as
            defined in this interface, to the extent that interruption of lock
            acquisition is supported: which is either totally, or only on
            method entry.</para>
      <para>As interruption generally implies cancellation, and checks for
            interruption are often infrequent, an implementation can favor responding
            to an interrupt over normal method return. This is true even if it can be
            shown that the interrupt occurred after another action may have unblocked
            the thread. An implementation should document this behavior.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.Lock" />
      <MemberSignature Language="F#" Value="abstract member Lock : unit -&gt; unit" Usage="iLock.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "()V", "GetLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "()V", "GetLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock.</summary>
        <remarks>
          <para>Acquires the lock.</para>
          <para>If the lock is not available then the current thread becomes
            disabled for thread scheduling purposes and lies dormant until the
            lock has been acquired.</para>
          <para>&lt;b&gt;Implementation Considerations&lt;/b&gt;</para>
          <para>A <c>Lock</c> implementation may be able to detect erroneous use
            of the lock, such as an invocation that would cause deadlock, and
            may throw an (unchecked) exception in such circumstances.  The
            circumstances and the exception type must be documented by that
            <c>Lock</c> implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#lock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.lock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockInterruptibly">
      <MemberSignature Language="C#" Value="public void LockInterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockInterruptibly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.LockInterruptibly" />
      <MemberSignature Language="F#" Value="abstract member LockInterruptibly : unit -&gt; unit" Usage="iLock.LockInterruptibly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock unless the current thread is
            Thread#interrupt interrupted.</summary>
        <remarks>
          <para>Acquires the lock unless the current thread is
            Thread#interrupt interrupted.</para>
          <para>Acquires the lock if it is available and returns immediately.</para>
          <para>If the lock is not available then the current thread becomes
            disabled for thread scheduling purposes and lies dormant until
            one of two things happens:
            
            &lt;ul&gt;
            &lt;li&gt;The lock is acquired by the current thread; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts the
            current thread, and interruption of lock acquisition is supported.
            &lt;/ul&gt;</para>
          <para>If the current thread:
            &lt;ul&gt;
            &lt;li&gt;has its interrupted status set on entry to this method; or
            &lt;li&gt;is Thread#interrupt interrupted while acquiring the
            lock, and interruption of lock acquisition is supported,
            &lt;/ul&gt;
            then <c>InterruptedException</c> is thrown and the current thread's
            interrupted status is cleared.</para>
          <para>&lt;b&gt;Implementation Considerations&lt;/b&gt;</para>
          <para>The ability to interrupt a lock acquisition in some
            implementations may not be possible, and if possible may be an
            expensive operation.  The programmer should be aware that this
            may be the case. An implementation should document when this is
            the case.</para>
          <para>An implementation can favor responding to an interrupt over
            normal method return.</para>
          <para>A <c>Lock</c> implementation may be able to detect
            erroneous use of the lock, such as an invocation that would
            cause deadlock, and may throw an (unchecked) exception in such
            circumstances.  The circumstances and the exception type must
            be documented by that <c>Lock</c> implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#lockInterruptibly()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.lockInterruptibly()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is
         interrupted while acquiring the lock (and interruption
         of lock acquisition is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCondition">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.Locks.ICondition? NewCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ICondition NewCondition() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.NewCondition" />
      <MemberSignature Language="F#" Value="abstract member NewCondition : unit -&gt; Java.Util.Concurrent.Locks.ICondition" Usage="iLock.NewCondition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ICondition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <c>Condition</c> instance that is bound to this
            <c>Lock</c> instance.</summary>
        <returns>A new <c>Condition</c> instance for this <c>Lock</c> instance</returns>
        <remarks>
          <para>Returns a new <c>Condition</c> instance that is bound to this
            <c>Lock</c> instance.</para>
          <para>Before waiting on the condition the lock must be held by the
            current thread.
            A call to <c>Condition#await()</c> will atomically release the lock
            before waiting and re-acquire the lock before the wait returns.</para>
          <para>&lt;b&gt;Implementation Considerations&lt;/b&gt;</para>
          <para>The exact operation of the <c>Condition</c> instance depends on
            the <c>Lock</c> implementation and must be documented by that
            implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#newCondition()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.newCondition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if this <c>Lock</c>
         implementation does not support conditions
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public bool TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.TryLock" />
      <MemberSignature Language="F#" Value="abstract member TryLock : unit -&gt; bool" Usage="iLock.TryLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock only if it is free at the time of invocation.</summary>
        <returns>
          <c>true</c> if the lock was acquired and
                    <c>false</c> otherwise</returns>
        <remarks>
          <para>Acquires the lock only if it is free at the time of invocation.</para>
          <para>Acquires the lock if it is available and returns immediately
            with the value <c>true</c>.
            If the lock is not available then this method will return
            immediately with the value <c>false</c>.</para>
          <para>A typical usage idiom for this method would be:</para>
          <code lang="text/java">{@code
            Lock lock = ...;
            if (lock.tryLock()) {
              try {
                // manipulate protected state
              } finally {
                lock.unlock();
              }
            } else {
              // perform alternative actions
            }}</code>
          <para>This usage ensures that the lock is unlocked if it was acquired, and
            doesn't try to unlock if the lock was not acquired.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#tryLock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.tryLock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public bool TryLock (long time, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member TryLock : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="iLock.TryLock (time, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the maximum time to wait for the lock</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Acquires the lock if it is free within the given waiting time and the
            current thread has not been Thread#interrupt interrupted.</summary>
        <returns>
          <c>true</c> if the lock was acquired and <c>false</c>
                    if the waiting time elapsed before the lock was acquired</returns>
        <remarks>
          <para>Acquires the lock if it is free within the given waiting time and the
            current thread has not been Thread#interrupt interrupted.</para>
          <para>If the lock is available this method returns immediately
            with the value <c>true</c>.
            If the lock is not available then
            the current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of three things happens:
            &lt;ul&gt;
            &lt;li&gt;The lock is acquired by the current thread; or
            &lt;li&gt;Some other thread Thread#interrupt interrupts the
            current thread, and interruption of lock acquisition is supported; or
            &lt;li&gt;The specified waiting time elapses
            &lt;/ul&gt;</para>
          <para>If the lock is acquired then the value <c>true</c> is returned.</para>
          <para>If the current thread:
            &lt;ul&gt;
            &lt;li&gt;has its interrupted status set on entry to this method; or
            &lt;li&gt;is Thread#interrupt interrupted while acquiring
            the lock, and interruption of lock acquisition is supported,
            &lt;/ul&gt;
            then <c>InterruptedException</c> is thrown and the current thread's
            interrupted status is cleared.</para>
          <para>If the specified waiting time elapses then the value <c>false</c>
            is returned.
            If the time is
            less than or equal to zero, the method will not wait at all.</para>
          <para>&lt;b&gt;Implementation Considerations&lt;/b&gt;</para>
          <para>The ability to interrupt a lock acquisition in some implementations
            may not be possible, and if possible may
            be an expensive operation.
            The programmer should be aware that this may be the case. An
            implementation should document when this is the case.</para>
          <para>An implementation can favor responding to an interrupt over normal
            method return, or reporting a timeout.</para>
          <para>A <c>Lock</c> implementation may be able to detect
            erroneous use of the lock, such as an invocation that would cause
            deadlock, and may throw an (unchecked) exception in such circumstances.
            The circumstances and the exception type must be documented by that
            <c>Lock</c> implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#tryLock(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.tryLock(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         while acquiring the lock (and interruption of lock
         acquisition is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ILock.Unlock" />
      <MemberSignature Language="F#" Value="abstract member Unlock : unit -&gt; unit" Usage="iLock.Unlock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unlock", "()V", "GetUnlockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unlock", "()V", "GetUnlockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the lock.</summary>
        <remarks>
          <para>Releases the lock.</para>
          <para>&lt;b&gt;Implementation Considerations&lt;/b&gt;</para>
          <para>A <c>Lock</c> implementation will usually impose
            restrictions on which thread can release a lock (typically only the
            holder of the lock can release it) and may throw
            an (unchecked) exception if the restriction is violated.
            Any restrictions and the exception
            type must be documented by that <c>Lock</c> implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/Lock#unlock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.Lock.unlock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
