<Type Name="ILock" FullName="Java.Util.Concurrent.Locks.ILock">
  <TypeSignature Language="C#" Value="public interface ILock : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILock implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/Lock", "", "Java.Util.Concurrent.Locks.ILockInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>Lock</c> implementations provide more extensive locking
 operations than can be obtained using <c>synchronized</c> methods
 and statements.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <c>Lock</c> implementations provide more extensive locking
 operations than can be obtained using <c>synchronized</c> methods
 and statements.  They allow more flexible structuring, may have
 quite different properties, and may support multiple associated
 <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> objects.

 </para>
      <para tool="javadoc-to-mdoc">A lock is a tool for controlling access to a shared resource by
 multiple threads. Commonly, a lock provides exclusive access to a
 shared resource: only one thread at a time can acquire the lock and
 all access to the shared resource requires that the lock be
 acquired first. However, some locks may allow concurrent access to
 a shared resource, such as the read lock of a <c><see cref="T:Java.Util.Concurrent.Locks.IReadWriteLock" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">The use of <c>synchronized</c> methods or statements provides
 access to the implicit monitor lock associated with every object, but
 forces all lock acquisition and release to occur in a block-structured way:
 when multiple locks are acquired they must be released in the opposite
 order, and all locks must be released in the same lexical scope in which
 they were acquired.

 </para>
      <para tool="javadoc-to-mdoc">While the scoping mechanism for <c>synchronized</c> methods
 and statements makes it much easier to program with monitor locks,
 and helps avoid many common programming errors involving locks,
 there are occasions where you need to work with locks in a more
 flexible way. For example, some algorithms for traversing
 concurrently accessed data structures require the use of
 "hand-over-hand" or "chain locking": you
 acquire the lock of node A, then node B, then release A and acquire
 C, then release B and acquire D and so on.  Implementations of the
 <c>Lock</c> interface enable the use of such techniques by
 allowing a lock to be acquired and released in different scopes,
 and allowing multiple locks to be acquired and released in any
 order.

 </para>
      <para tool="javadoc-to-mdoc">With this increased flexibility comes additional
 responsibility. The absence of block-structured locking removes the
 automatic release of locks that occurs with <c>synchronized</c>
 methods and statements. In most cases, the following idiom
 should be used:

  <example><code lang="java">Lock l = ...;
 l.lock();
 try {
   // access the resource protected by this lock
  finally {
   l.unlock();
 }}</code></example>

 When locking and unlocking occur in different scopes, care must be
 taken to ensure that all code that is executed while the lock is
 held is protected by try-finally or try-catch to ensure that the
 lock is released when necessary.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>Lock</c> implementations provide additional functionality
 over the use of <c>synchronized</c> methods and statements by
 providing a non-blocking attempt to acquire a lock (<c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock" /></c>), an attempt to acquire the lock that can be
 interrupted (<c><see cref="M:Java.Util.Concurrent.Locks.ILock.LockInterruptibly" /></c>, and an attempt to acquire
 the lock that can timeout (<c><see cref="M:Java.Util.Concurrent.Locks.ILock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c>).

 </para>
      <para tool="javadoc-to-mdoc">A <c>Lock</c> class can also provide behavior and semantics
 that is quite different from that of the implicit monitor lock,
 such as guaranteed ordering, non-reentrant usage, or deadlock
 detection. If an implementation provides such specialized semantics
 then the implementation must document those semantics.

 </para>
      <para tool="javadoc-to-mdoc">Note that <c>Lock</c> instances are just normal objects and can
 themselves be used as the target in a <c>synchronized</c> statement.
 Acquiring the
 monitor lock of a <c>Lock</c> instance has no specified relationship
 with invoking any of the <c><see cref="M:Java.Util.Concurrent.Locks.ILock.Lock" /></c> methods of that instance.
 It is recommended that to avoid confusion you never use <c>Lock</c>
 instances in this way, except within their own implementation.

 </para>
      <para tool="javadoc-to-mdoc">Except where noted, passing a <c>null</c> value for any
 parameter will result in a <c><see cref="T:Java.Lang.NullPointerException" /></c> being
 thrown.

 <format type="text/html"><h3>Memory Synchronization</h3></format></para>
      <para tool="javadoc-to-mdoc">All <c>Lock</c> implementations <i>must</i> enforce the same
 memory synchronization semantics as provided by the built-in monitor
 lock, as described in
 :
 <list type="bullet"><item><term>A successful <c>lock</c> operation has the same memory
 synchronization effects as a successful <i>Lock</i> action.
 </term></item><item><term>A successful <c>unlock</c> operation has the same
 memory synchronization effects as a successful <i>Unlock</i> action.
 </term></item></list>

 Unsuccessful locking and unlocking operations, and reentrant
 locking/unlocking operations, do not require any memory
 synchronization effects.

 <format type="text/html"><h3>Implementation Considerations</h3></format></para>
      <para tool="javadoc-to-mdoc">The three forms of lock acquisition (interruptible,
 non-interruptible, and timed) may differ in their performance
 characteristics, ordering guarantees, or other implementation
 qualities.  Further, the ability to interrupt the <i>ongoing</i>
 acquisition of a lock may not be available in a given <c>Lock</c>
 class.  Consequently, an implementation is not required to define
 exactly the same guarantees or semantics for all three forms of
 lock acquisition, nor is it required to support interruption of an
 ongoing lock acquisition.  An implementation is required to clearly
 document the semantics and guarantees provided by each of the
 locking methods. It must also obey the interruption semantics as
 defined in this interface, to the extent that interruption of lock
 acquisition is supported: which is either totally, or only on
 method entry.

 </para>
      <para tool="javadoc-to-mdoc">As interruption generally implies cancellation, and checks for
 interruption are often infrequent, an implementation can favor responding
 to an interrupt over normal method return. This is true even if it can be
 shown that the interrupt occurred after another action may have unblocked
 the thread. An implementation should document this behavior.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Java.Util.Concurrent.Locks.ReentrantLock" /></c></term></item><item><term><c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c></term></item><item><term><c><see cref="T:Java.Util.Concurrent.Locks.IReadWriteLock" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "()V", "GetLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the lock.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is not available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until the
 lock has been acquired.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Implementation Considerations</b>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">A <c>Lock</c> implementation may be able to detect erroneous use
 of the lock, such as an invocation that would cause deadlock, and
 may throw an (unchecked) exception in such circumstances.  The
 circumstances and the exception type must be documented by that
 <c>Lock</c> implementation.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#lock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockInterruptibly">
      <MemberSignature Language="C#" Value="public void LockInterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockInterruptibly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock unless the current thread is
 <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the lock unless the current thread is
 <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the lock if it is available and returns immediately.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is not available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:

 <list type="bullet"><item><term>The lock is acquired by the current thread; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" /> the
 current thread, and interruption of lock acquisition is supported.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while acquiring the
 lock, and interruption of lock acquisition is supported,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Implementation Considerations</b>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">The ability to interrupt a lock acquisition in some
 implementations may not be possible, and if possible may be an
 expensive operation.  The programmer should be aware that this
 may be the case. An implementation should document when this is
 the case.

 </para>
          <para tool="javadoc-to-mdoc">An implementation can favor responding to an interrupt over
 normal method return.

 </para>
          <para tool="javadoc-to-mdoc">A <c>Lock</c> implementation may be able to detect
 erroneous use of the lock, such as an invocation that would
 cause deadlock, and may throw an (unchecked) exception in such
 circumstances.  The circumstances and the exception type must
 be documented by that <c>Lock</c> implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#lockInterruptibly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is
         interrupted while acquiring the lock (and interruption
         of lock acquisition is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCondition">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.Locks.ICondition NewCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ICondition NewCondition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ICondition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance that is bound to this
 <c>Lock</c> instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a new <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance that is bound to this
 <c>Lock</c> instance.

 </para>
          <para tool="javadoc-to-mdoc">Before waiting on the condition the lock must be held by the
 current thread.
 A call to <c><see cref="M:Java.Util.Concurrent.Locks.ICondition.Await" /></c> will atomically release the lock
 before waiting and re-acquire the lock before the wait returns.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Implementation Considerations</b>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">The exact operation of the <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> instance depends on
 the <c>Lock</c> implementation and must be documented by that
 implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#newCondition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if this <c>Lock</c>
         implementation does not support conditions
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public bool TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the lock only if it is free at the time of invocation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the lock only if it is free at the time of invocation.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the lock if it is available and returns immediately
 with the value <c>true</c>.
 If the lock is not available then this method will return
 immediately with the value <c>false</c>.

 </para>
          <para tool="javadoc-to-mdoc">A typical usage idiom for this method would be:
  <example><code lang="java">Lock lock = ...;
 if (lock.tryLock()) {
   try {
     // manipulate protected state
    finally {
     lock.unlock();
   }
 } else {
   // perform alternative actions
 }}</code></example>

 This usage ensures that the lock is unlocked if it was acquired, and
 doesn't try to unlock if the lock was not acquired.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#tryLock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public bool TryLock (long time, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the maximum time to wait for the lock</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Acquires the lock if it is free within the given waiting time and the
 current thread has not been <see cref="M:Java.Lang.Thread.Interrupt" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the lock if it is free within the given waiting time and the
 current thread has not been <see cref="M:Java.Lang.Thread.Interrupt" />.

 </para>
          <para tool="javadoc-to-mdoc">If the lock is available this method returns immediately
 with the value <c>true</c>.
 If the lock is not available then
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:
 <list type="bullet"><item><term>The lock is acquired by the current thread; or
 </term></item><item><term>Some other thread <see cref="M:Java.Lang.Thread.Interrupt" /> the
 current thread, and interruption of lock acquisition is supported; or
 </term></item><item><term>The specified waiting time elapses
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the lock is acquired then the value <c>true</c> is returned.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <see cref="M:Java.Lang.Thread.Interrupt" /> while acquiring
 the lock, and interruption of lock acquisition is supported,
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then the value <c>false</c>
 is returned.
 If the time is
 less than or equal to zero, the method will not wait at all.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Implementation Considerations</b>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">The ability to interrupt a lock acquisition in some implementations
 may not be possible, and if possible may
 be an expensive operation.
 The programmer should be aware that this may be the case. An
 implementation should document when this is the case.

 </para>
          <para tool="javadoc-to-mdoc">An implementation can favor responding to an interrupt over normal
 method return, or reporting a timeout.

 </para>
          <para tool="javadoc-to-mdoc">A <c>Lock</c> implementation may be able to detect
 erroneous use of the lock, such as an invocation that would cause
 deadlock, and may throw an (unchecked) exception in such circumstances.
 The circumstances and the exception type must be documented by that
 <c>Lock</c> implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#tryLock(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
         while acquiring the lock (and interruption of lock
         acquisition is supported)
</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlock", "()V", "GetUnlockHandler:Java.Util.Concurrent.Locks.ILockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases the lock.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Implementation Considerations</b>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">A <c>Lock</c> implementation will usually impose
 restrictions on which thread can release a lock (typically only the
 holder of the lock can release it) and may throw
 an (unchecked) exception if the restriction is violated.
 Any restrictions and the exception
 type must be documented by that <c>Lock</c> implementation.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/Lock.html#unlock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
