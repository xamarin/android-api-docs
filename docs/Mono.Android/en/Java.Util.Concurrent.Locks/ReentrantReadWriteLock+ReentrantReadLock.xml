<Type Name="ReentrantReadWriteLock+ReentrantReadLock" FullName="Java.Util.Concurrent.Locks.ReentrantReadWriteLock+ReentrantReadLock">
  <TypeSignature Language="VB.NET" Value="Public Class ReentrantReadWriteLock.ReentrantReadLock&#xA;Inherits Object&#xA;Implements IDisposable, IJavaPeerable, ILock, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ReentrantReadWriteLock::ReentrantReadLock : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::IO::ISerializable, Java::Util::Concurrent::Locks::ILock" />
  <TypeSignature Language="C#" Value="public class ReentrantReadWriteLock.ReentrantReadLock : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable, Java.Util.Concurrent.Locks.ILock" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ReentrantReadWriteLock/ReentrantReadLock extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class Java.Util.Concurrent.Locks.ILock, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock" />
  <TypeSignature Language="F#" Value="type ReentrantReadWriteLock.ReentrantReadLock = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface ILock" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.Locks.ILock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The lock returned by method <c>ReentrantReadWriteLock#readLock</c>.</summary>
    <remarks>
      <para>The lock returned by method <c>ReentrantReadWriteLock#readLock</c>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (lock As ReentrantReadWriteLock)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReentrantReadLock(Java::Util::Concurrent::Locks::ReentrantReadWriteLock ^ lock);" />
      <MemberSignature Language="C#" Value="protected ReentrantReadLock (Java.Util.Concurrent.Locks.ReentrantReadWriteLock? lock);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Locks.ReentrantReadWriteLock lock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.#ctor(Java.Util.Concurrent.Locks.ReentrantReadWriteLock)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock : Java.Util.Concurrent.Locks.ReentrantReadWriteLock -&gt; Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock" Usage="new Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock lock" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="lock" Type="Java.Util.Concurrent.Locks.ReentrantReadWriteLock" />
      </Parameters>
      <Docs>
        <param name="lock">the outer lock object</param>
        <summary>Constructor for use by subclasses.</summary>
        <remarks>
          <para>Constructor for use by subclasses.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#ReentrantReadWriteLock$ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.ReentrantReadWriteLock$ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the lock is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReentrantReadLock(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected ReentrantReadLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock" Usage="new Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Lock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Lock();" />
      <MemberSignature Language="C#" Value="public virtual void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.Lock" />
      <MemberSignature Language="F#" Value="abstract member Lock : unit -&gt; unit&#xA;override this.Lock : unit -&gt; unit" Usage="reentrantReadLock.Lock " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.Lock</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "()V", "GetLockHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "()V", "GetLockHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock.</summary>
        <remarks>
          <para>Acquires the read lock.</para>
          <para>Acquires the read lock if the write lock is not held by
            another thread and returns immediately.</para>
          <para>If the write lock is held by another thread then
            the current thread becomes disabled for thread scheduling
            purposes and lies dormant until the read lock has been acquired.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#lock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockInterruptibly">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LockInterruptibly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LockInterruptibly();" />
      <MemberSignature Language="C#" Value="public virtual void LockInterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockInterruptibly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.LockInterruptibly" />
      <MemberSignature Language="F#" Value="abstract member LockInterruptibly : unit -&gt; unit&#xA;override this.LockInterruptibly : unit -&gt; unit" Usage="reentrantReadLock.LockInterruptibly " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.LockInterruptibly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock unless the current thread is
            Thread#interrupt interrupted.</summary>
        <remarks>
          <para>Acquires the read lock unless the current thread is
            Thread#interrupt interrupted.</para>
          <para>Acquires the read lock if the write lock is not held
            by another thread and returns immediately.</para>
          <para>If the write lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of two things happens:
            
            &lt;ul&gt;
            
            &lt;li&gt;The read lock is acquired by the current thread; or
            
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            the current thread.
            
            &lt;/ul&gt;</para>
          <para>If the current thread:
            
            &lt;ul&gt;
            
            &lt;li&gt;has its interrupted status set on entry to this method; or
            
            &lt;li&gt;is Thread#interrupt interrupted while
            acquiring the read lock,
            
            &lt;/ul&gt;
            
            then <c>InterruptedException</c> is thrown and the current
            thread's interrupted status is cleared.</para>
          <para>In this implementation, as this method is an explicit
            interruption point, preference is given to responding to
            the interrupt over normal or reentrant acquisition of the
            lock.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#lockInterruptibly()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCondition">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NewCondition () As ICondition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::Concurrent::Locks::ICondition ^ NewCondition();" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.Locks.ICondition? NewCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ICondition NewCondition() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.NewCondition" />
      <MemberSignature Language="F#" Value="abstract member NewCondition : unit -&gt; Java.Util.Concurrent.Locks.ICondition&#xA;override this.NewCondition : unit -&gt; Java.Util.Concurrent.Locks.ICondition" Usage="reentrantReadLock.NewCondition " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.NewCondition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ICondition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c> because
            <c>ReadLocks</c> do not support conditions.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Throws <c>UnsupportedOperationException</c> because
            <c>ReadLocks</c> do not support conditions.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#newCondition()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">always
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryLock () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryLock();" />
      <MemberSignature Language="C#" Value="public virtual bool TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.TryLock" />
      <MemberSignature Language="F#" Value="abstract member TryLock : unit -&gt; bool&#xA;override this.TryLock : unit -&gt; bool" Usage="reentrantReadLock.TryLock " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.TryLock</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock only if the write lock is not held by
            another thread at the time of invocation.</summary>
        <returns>
          <c>true</c> if the read lock was acquired</returns>
        <remarks>
          <para>Acquires the read lock only if the write lock is not held by
            another thread at the time of invocation.</para>
          <para>Acquires the read lock if the write lock is not held by
            another thread and returns immediately with the value
            <c>true</c>. Even when this lock has been set to use a
            fair ordering policy, a call to <c>tryLock()</c>&lt;em&gt;will&lt;/em&gt; immediately acquire the read lock if it is
            available, whether or not other threads are currently
            waiting for the read lock.  This &amp;quot;barging&amp;quot; behavior
            can be useful in certain circumstances, even though it
            breaks fairness. If you want to honor the fairness setting
            for this lock, then use <c>#tryLock(long, TimeUnit)
            tryLock(0, TimeUnit.SECONDS)</c> which is almost equivalent
            (it also detects interruption).</para>
          <para>If the write lock is held by another thread then
            this method will return immediately with the value
            <c>false</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#tryLock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryLock (timeout As Long, unit As TimeUnit) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryLock(long timeout, Java::Util::Concurrent::TimeUnit ^ unit);" />
      <MemberSignature Language="C#" Value="public virtual bool TryLock (long timeout, Java.Util.Concurrent.TimeUnit? unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" />
      <MemberSignature Language="F#" Value="abstract member TryLock : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool&#xA;override this.TryLock : int64 * Java.Util.Concurrent.TimeUnit -&gt; bool" Usage="reentrantReadLock.TryLock (timeout, unit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the time to wait for the read lock</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Acquires the read lock if the write lock is not held by
            another thread within the given waiting time and the
            current thread has not been Thread#interrupt
            interrupted.</summary>
        <returns>
          <c>true</c> if the read lock was acquired</returns>
        <remarks>
          <para>Acquires the read lock if the write lock is not held by
            another thread within the given waiting time and the
            current thread has not been Thread#interrupt
            interrupted.</para>
          <para>Acquires the read lock if the write lock is not held by
            another thread and returns immediately with the value
            <c>true</c>. If this lock has been set to use a fair
            ordering policy then an available lock &lt;em&gt;will not&lt;/em&gt; be
            acquired if any other threads are waiting for the
            lock. This is in contrast to the <c>#tryLock()</c>
            method. If you want a timed <c>tryLock</c> that does
            permit barging on a fair lock then combine the timed and
            un-timed forms together:</para>
          <code lang="text/java">{@code
            if (lock.tryLock() ||
                lock.tryLock(timeout, unit)) {
              ...
            }}</code>
          <para>If the write lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of three things happens:
            
            &lt;ul&gt;
            
            &lt;li&gt;The read lock is acquired by the current thread; or
            
            &lt;li&gt;Some other thread Thread#interrupt interrupts
            the current thread; or
            
            &lt;li&gt;The specified waiting time elapses.
            
            &lt;/ul&gt;</para>
          <para>If the read lock is acquired then the value <c>true</c> is
            returned.</para>
          <para>If the current thread:
            
            &lt;ul&gt;
            
            &lt;li&gt;has its interrupted status set on entry to this method; or
            
            &lt;li&gt;is Thread#interrupt interrupted while
            acquiring the read lock,
            
            &lt;/ul&gt; then <c>InterruptedException</c> is thrown and the
            current thread's interrupted status is cleared.</para>
          <para>If the specified waiting time elapses then the value
            <c>false</c> is returned.  If the time is less than or
            equal to zero, the method will not wait at all.</para>
          <para>In this implementation, as this method is an explicit
            interruption point, preference is given to responding to
            the interrupt over normal or reentrant acquisition of the
            lock, and over reporting the elapse of the waiting time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#tryLock(long,%20java.util.concurrent.TimeUnit)" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long, java.util.concurrent.TimeUnit)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the time unit is null

</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Unlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Unlock();" />
      <MemberSignature Language="C#" Value="public virtual void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.Unlock" />
      <MemberSignature Language="F#" Value="abstract member Unlock : unit -&gt; unit&#xA;override this.Unlock : unit -&gt; unit" Usage="reentrantReadLock.Unlock " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Util.Concurrent.Locks.ILock.Unlock</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unlock", "()V", "GetUnlockHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unlock", "()V", "GetUnlockHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to release this lock.</summary>
        <remarks>
          <para>Attempts to release this lock.</para>
          <para>If the number of readers is now zero then the lock
            is made available for write lock attempts. If the current
            thread does not hold this lock then <c>IllegalMonitorStateException</c> is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock#unlock()" title="Reference documentation">Java documentation for <code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
