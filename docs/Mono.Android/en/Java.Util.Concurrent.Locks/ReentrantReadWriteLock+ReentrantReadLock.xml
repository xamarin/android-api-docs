<Type Name="ReentrantReadWriteLock+ReentrantReadLock" FullName="Java.Util.Concurrent.Locks.ReentrantReadWriteLock+ReentrantReadLock">
  <TypeSignature Language="C#" Value="public class ReentrantReadWriteLock.ReentrantReadLock : Java.Lang.Object, IDisposable, Java.IO.ISerializable, Java.Util.Concurrent.Locks.ILock" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ReentrantReadWriteLock/ReentrantReadLock extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class Java.Util.Concurrent.Locks.ILock, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.Locks.ILock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The lock returned by method <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReadLock" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The lock returned by method <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReadLock" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReentrantReadLock (Java.Util.Concurrent.Locks.ReentrantReadWriteLock lock);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Locks.ReentrantReadWriteLock lock) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="lock" Type="Java.Util.Concurrent.Locks.ReentrantReadWriteLock" />
      </Parameters>
      <Docs>
        <param name="lock">To be added.</param>
        <summary>Constructor for use by subclasses</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor for use by subclasses</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#ReentrantReadWriteLock.ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the lock is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReentrantReadLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public virtual void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "()V", "GetLockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the read lock.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the read lock if the write lock is not held by
 another thread and returns immediately.

 </para>
          <para tool="javadoc-to-mdoc">If the write lock is held by another thread then
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until the read lock has been acquired.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#lock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LockInterruptibly">
      <MemberSignature Language="C#" Value="public virtual void LockInterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockInterruptibly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockInterruptibly", "()V", "GetLockInterruptiblyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock unless the current thread is
 <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the read lock unless the current thread is
 <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the read lock if the write lock is not held
 by another thread and returns immediately.

 </para>
          <para tool="javadoc-to-mdoc">If the write lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of two things happens:

 <list type="bullet"><item><term>The read lock is acquired by the current thread; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread.

 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:

 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or

 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 acquiring the read lock,

 </term></item></list>

 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current
 thread's interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#lockInterruptibly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted
</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCondition">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.Locks.ICondition NewCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ICondition NewCondition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newCondition", "()Ljava/util/concurrent/locks/Condition;", "GetNewConditionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ICondition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c> because
 <c>ReadLocks</c> do not support conditions.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Throws <c>UnsupportedOperationException</c> because
 <c>ReadLocks</c> do not support conditions.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#newCondition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">always
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public virtual bool TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "()Z", "GetTryLockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the read lock only if the write lock is not held by
 another thread at the time of invocation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the read lock only if the write lock is not held by
 another thread at the time of invocation.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the read lock if the write lock is not held by
 another thread and returns immediately with the value
 <c>true</c>. Even when this lock has been set to use a
 fair ordering policy, a call to <c>tryLock()</c><i>will</i> immediately acquire the read lock if it is
 available, whether or not other threads are currently
 waiting for the read lock.  This "barging" behavior
 can be useful in certain circumstances, even though it
 breaks fairness. If you want to honor the fairness setting
 for this lock, then use <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.TryLock(System.Int64,Java.Util.Concurrent.TimeUnit)" /></c> which is almost equivalent
 (it also detects interruption).

 </para>
          <para tool="javadoc-to-mdoc">If the write lock is held by another thread then
 this method will return immediately with the value
 <c>false</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#tryLock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public virtual bool TryLock (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryLock(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "(JLjava/util/concurrent/TimeUnit;)Z", "GetTryLock_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the time to wait for the read lock</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Acquires the read lock if the write lock is not held by
 another thread within the given waiting time and the
 current thread has not been <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the read lock if the write lock is not held by
 another thread within the given waiting time and the
 current thread has not been <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Acquires the read lock if the write lock is not held by
 another thread and returns immediately with the value
 <c>true</c>. If this lock has been set to use a fair
 ordering policy then an available lock <i>will not</i> be
 acquired if any other threads are waiting for the
 lock. This is in contrast to the <c><see cref="M:Java.Util.Concurrent.Locks.ReentrantReadWriteLock.ReentrantReadLock.TryLock" /></c>
 method. If you want a timed <c>tryLock</c> that does
 permit barging on a fair lock then combine the timed and
 un-timed forms together:

  <example><code lang="java">if (lock.tryLock() ||
     lock.tryLock(timeout, unit)) {
   ...
 }</code></example></para>
          <para tool="javadoc-to-mdoc">If the write lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:

 <list type="bullet"><item><term>The read lock is acquired by the current thread; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The specified waiting time elapses.

 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the read lock is acquired then the value <c>true</c> is
 returned.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread:

 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or

 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 acquiring the read lock,

 </term></item></list> then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the
 current thread's interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then the value
 <c>false</c> is returned.  If the time is less than or
 equal to zero, the method will not wait at all.

 </para>
          <para tool="javadoc-to-mdoc">In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock, and over reporting the elapse of the waiting time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#tryLock(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is interrupted</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the time unit is null

</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public virtual void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlock", "()V", "GetUnlockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to release this lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to release this lock.

 </para>
          <para tool="javadoc-to-mdoc"> If the number of readers is now zero then the lock
 is made available for write lock attempts.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html#unlock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
