<Type Name="GLSurfaceView+IRenderer" FullName="Android.Opengl.GLSurfaceView+IRenderer">
  <TypeSignature Language="VB.NET" Value="Public Interface GLSurfaceView.IRenderer&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public: interface class GLSurfaceView::IRenderer : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface GLSurfaceView.IRenderer : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract beforefieldinit GLSurfaceView/IRenderer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Opengl.GLSurfaceView.IRenderer" />
  <TypeSignature Language="F#" Value="type GLSurfaceView.IRenderer = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/opengl/GLSurfaceView$Renderer", "", "Android.Opengl.GLSurfaceView/IRendererInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/opengl/GLSurfaceView$Renderer", "", "Android.Opengl.GLSurfaceView/IRendererInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A generic renderer interface.</summary>
    <remarks>
      <para>A generic renderer interface.</para>
      <para>The renderer is responsible for making OpenGL calls to render a frame.</para>
      <para>GLSurfaceView clients typically create their own classes that implement
            this interface, and then call <c>GLSurfaceView#setRenderer</c> to
            register the renderer with the GLSurfaceView.</para>
      <para>&lt;div class="special reference"&gt;
            &lt;h3&gt;Developer Guides&lt;/h3&gt;</para>
      <para>For more information about how to use OpenGL, read the
            <see href="https://developer.android.com/guide/topics/graphics/opengl.html">OpenGL</see> developer guide.</para>
      <para>&lt;/div&gt;
            
            &lt;h3&gt;Threading&lt;/h3&gt;
            The renderer will be called on a separate thread, so that rendering
            performance is decoupled from the UI thread. Clients typically need to
            communicate with the renderer from the UI thread, because that's where
            input events are received. Clients can communicate using any of the
            standard Java techniques for cross-thread communication, or they can
            use the <c>GLSurfaceView#queueEvent(Runnable)</c> convenience method.</para>
      <para>&lt;h3&gt;EGL Context Lost&lt;/h3&gt;
            There are situations where the EGL rendering context will be lost. This
            typically happens when device wakes up after going to sleep. When
            the EGL context is lost, all OpenGL resources (such as textures) that are
            associated with that context will be automatically deleted. In order to
            keep rendering correctly, a renderer must recreate any lost resources
            that it still needs. The <c>#onSurfaceCreated(GL10, EGLConfig)</c> method
            is a convenient place to do this.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer" title="Reference documentation">Java documentation for <code>android.opengl.GLSurfaceView.Renderer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="OnDrawFrame">
      <MemberSignature Language="VB.NET" Value="Public Sub OnDrawFrame (gl As IGL10)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDrawFrame(Javax::Microedition::Khronos::Opengles::IGL10 ^ gl);" />
      <MemberSignature Language="C#" Value="public void OnDrawFrame (Javax.Microedition.Khronos.Opengles.IGL10? gl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDrawFrame(class Javax.Microedition.Khronos.Opengles.IGL10 gl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Opengl.GLSurfaceView.IRenderer.OnDrawFrame(Javax.Microedition.Khronos.Opengles.IGL10)" />
      <MemberSignature Language="F#" Value="abstract member OnDrawFrame : Javax.Microedition.Khronos.Opengles.IGL10 -&gt; unit" Usage="iRenderer.OnDrawFrame gl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDrawFrame", "(Ljavax/microedition/khronos/opengles/GL10;)V", "GetOnDrawFrame_Ljavax_microedition_khronos_opengles_GL10_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onDrawFrame", "(Ljavax/microedition/khronos/opengles/GL10;)V", "GetOnDrawFrame_Ljavax_microedition_khronos_opengles_GL10_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
            test if the interface supports GL11 or higher interfaces.</param>
        <summary>Called to draw the current frame.</summary>
        <remarks>
          <para>Called to draw the current frame.</para>
          <para>This method is responsible for drawing the current frame.</para>
          <para>The implementation of this method typically looks like this:</para>
          <code lang="text/java">void onDrawFrame(GL10 gl) {
                gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
                //... other gl calls to render the scene ...
            }
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer#onDrawFrame(javax.microedition.khronos.opengles.GL10)" title="Reference documentation">Java documentation for <code>android.opengl.GLSurfaceView.Renderer.onDrawFrame(javax.microedition.khronos.opengles.GL10)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnSurfaceChanged">
      <MemberSignature Language="VB.NET" Value="Public Sub OnSurfaceChanged (gl As IGL10, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSurfaceChanged(Javax::Microedition::Khronos::Opengles::IGL10 ^ gl, int width, int height);" />
      <MemberSignature Language="C#" Value="public void OnSurfaceChanged (Javax.Microedition.Khronos.Opengles.IGL10? gl, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSurfaceChanged(class Javax.Microedition.Khronos.Opengles.IGL10 gl, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Opengl.GLSurfaceView.IRenderer.OnSurfaceChanged(Javax.Microedition.Khronos.Opengles.IGL10,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnSurfaceChanged : Javax.Microedition.Khronos.Opengles.IGL10 * int * int -&gt; unit" Usage="iRenderer.OnSurfaceChanged (gl, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSurfaceChanged", "(Ljavax/microedition/khronos/opengles/GL10;II)V", "GetOnSurfaceChanged_Ljavax_microedition_khronos_opengles_GL10_IIHandler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSurfaceChanged", "(Ljavax/microedition/khronos/opengles/GL10;II)V", "GetOnSurfaceChanged_Ljavax_microedition_khronos_opengles_GL10_IIHandler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
            test if the interface supports GL11 or higher interfaces.</param>
        <param name="width">width</param>
        <param name="height">height</param>
        <summary>Called when the surface changed size.</summary>
        <remarks>
          <para>Called when the surface changed size.</para>
          <para>Called after the surface is created and whenever
            the OpenGL ES surface size changes.</para>
          <para>Typically you will set your viewport here. If your camera
            is fixed then you could also set your projection matrix here:</para>
          <code lang="text/java">void onSurfaceChanged(GL10 gl, int width, int height) {
                gl.glViewport(0, 0, width, height);
                // for a fixed camera, set the projection too
                float ratio = (float) width / height;
                gl.glMatrixMode(GL10.GL_PROJECTION);
                gl.glLoadIdentity();
                gl.glFrustumf(-ratio, ratio, -1, 1, 1, 10);
            }
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer#onSurfaceChanged(javax.microedition.khronos.opengles.GL10,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.opengl.GLSurfaceView.Renderer.onSurfaceChanged(javax.microedition.khronos.opengles.GL10, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnSurfaceCreated">
      <MemberSignature Language="VB.NET" Value="Public Sub OnSurfaceCreated (gl As IGL10, config As EGLConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSurfaceCreated(Javax::Microedition::Khronos::Opengles::IGL10 ^ gl, Javax::Microedition::Khronos::Egl::EGLConfig ^ config);" />
      <MemberSignature Language="C#" Value="public void OnSurfaceCreated (Javax.Microedition.Khronos.Opengles.IGL10? gl, Javax.Microedition.Khronos.Egl.EGLConfig? config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSurfaceCreated(class Javax.Microedition.Khronos.Opengles.IGL10 gl, class Javax.Microedition.Khronos.Egl.EGLConfig config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Opengl.GLSurfaceView.IRenderer.OnSurfaceCreated(Javax.Microedition.Khronos.Opengles.IGL10,Javax.Microedition.Khronos.Egl.EGLConfig)" />
      <MemberSignature Language="F#" Value="abstract member OnSurfaceCreated : Javax.Microedition.Khronos.Opengles.IGL10 * Javax.Microedition.Khronos.Egl.EGLConfig -&gt; unit" Usage="iRenderer.OnSurfaceCreated (gl, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSurfaceCreated", "(Ljavax/microedition/khronos/opengles/GL10;Ljavax/microedition/khronos/egl/EGLConfig;)V", "GetOnSurfaceCreated_Ljavax_microedition_khronos_opengles_GL10_Ljavax_microedition_khronos_egl_EGLConfig_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSurfaceCreated", "(Ljavax/microedition/khronos/opengles/GL10;Ljavax/microedition/khronos/egl/EGLConfig;)V", "GetOnSurfaceCreated_Ljavax_microedition_khronos_opengles_GL10_Ljavax_microedition_khronos_egl_EGLConfig_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
        <Parameter Name="config" Type="Javax.Microedition.Khronos.Egl.EGLConfig" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
            test if the interface supports GL11 or higher interfaces.</param>
        <param name="config">the EGLConfig of the created surface. Can be used
            to create matching pbuffers.</param>
        <summary>Called when the surface is created or recreated.</summary>
        <remarks>
          <para>Called when the surface is created or recreated.</para>
          <para>Called when the rendering thread
            starts and whenever the EGL context is lost. The EGL context will typically
            be lost when the Android device awakes after going to sleep.</para>
          <para>Since this method is called at the beginning of rendering, as well as
            every time the EGL context is lost, this method is a convenient place to put
            code to create resources that need to be created when the rendering
            starts, and that need to be recreated when the EGL context is lost.
            Textures are an example of a resource that you might want to create
            here.</para>
          <para>Note that when the EGL context is lost, all OpenGL resources associated
            with that context will be automatically deleted. You do not need to call
            the corresponding "glDelete" methods such as glDeleteTextures to
            manually delete these lost resources.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer#onSurfaceCreated(javax.microedition.khronos.opengles.GL10,%20javax.microedition.khronos.egl.EGLConfig)" title="Reference documentation">Java documentation for <code>android.opengl.GLSurfaceView.Renderer.onSurfaceCreated(javax.microedition.khronos.opengles.GL10, javax.microedition.khronos.egl.EGLConfig)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
