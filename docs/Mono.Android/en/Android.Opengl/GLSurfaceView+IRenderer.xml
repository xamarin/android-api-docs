<Type Name="GLSurfaceView+IRenderer" FullName="Android.Opengl.GLSurfaceView+IRenderer">
  <TypeSignature Language="C#" Value="public interface GLSurfaceView.IRenderer : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract GLSurfaceView/IRenderer implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/opengl/GLSurfaceView$Renderer", "", "Android.Opengl.GLSurfaceView/IRendererInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A generic renderer interface.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A generic renderer interface.
 </para>
      <para tool="javadoc-to-mdoc">
 The renderer is responsible for making OpenGL calls to render a frame.
 </para>
      <para tool="javadoc-to-mdoc">
 GLSurfaceView clients typically create their own classes that implement
 this interface, and then call <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(Android.Opengl.GLSurfaceView.IRenderer)" /></c> to
 register the renderer with the GLSurfaceView.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Developer Guides</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">For more information about how to use OpenGL, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/graphics/opengl.html">OpenGL</a></format> developer guide.</para>
      <format type="text/html">
        <h3>Threading</h3>
      </format>
 The renderer will be called on a separate thread, so that rendering
 performance is decoupled from the UI thread. Clients typically need to
 communicate with the renderer from the UI thread, because that's where
 input events are received. Clients can communicate using any of the
 standard Java techniques for cross-thread communication, or they can
 use the <c><see cref="M:Android.Opengl.GLSurfaceView.QueueEvent(Java.Lang.IRunnable)" /></c> convenience method.
 <para tool="javadoc-to-mdoc"><format type="text/html"><h3>EGL Context Lost</h3></format>
 There are situations where the EGL rendering context will be lost. This
 typically happens when device wakes up after going to sleep. When
 the EGL context is lost, all OpenGL resources (such as textures) that are
 associated with that context will be automatically deleted. In order to
 keep rendering correctly, a renderer must recreate any lost resources
 that it still needs. The <c><see cref="M:Android.Opengl.GLSurfaceView.IRenderer.OnSurfaceCreated(Javax.Microedition.Khronos.Opengles.IGL10,Javax.Microedition.Khronos.Egl.EGLConfig)" /></c> method
 is a convenient place to do this.</para><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(Android.Opengl.GLSurfaceView.IRenderer)" /></c></term></item></list><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="OnDrawFrame">
      <MemberSignature Language="C#" Value="public void OnDrawFrame (Javax.Microedition.Khronos.Opengles.IGL10 gl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDrawFrame(class Javax.Microedition.Khronos.Opengles.IGL10 gl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDrawFrame", "(Ljavax/microedition/khronos/opengles/GL10;)V", "GetOnDrawFrame_Ljavax_microedition_khronos_opengles_GL10_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
 test if the interface supports GL11 or higher interfaces.
</param>
        <summary>Called to draw the current frame.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to draw the current frame.
 </para>
          <para tool="javadoc-to-mdoc">
 This method is responsible for drawing the current frame.
 </para>
          <para tool="javadoc-to-mdoc">
 The implementation of this method typically looks like this:
 <example><code lang="java">
 void onDrawFrame(GL10 gl) {
     gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
     //... other gl calls to render the scene ...
 }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onDrawFrame(javax.microedition.khronos.opengles.GL10)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnSurfaceChanged">
      <MemberSignature Language="C#" Value="public void OnSurfaceChanged (Javax.Microedition.Khronos.Opengles.IGL10 gl, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSurfaceChanged(class Javax.Microedition.Khronos.Opengles.IGL10 gl, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSurfaceChanged", "(Ljavax/microedition/khronos/opengles/GL10;II)V", "GetOnSurfaceChanged_Ljavax_microedition_khronos_opengles_GL10_IIHandler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
 test if the interface supports GL11 or higher interfaces.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>Called when the surface changed size.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the surface changed size.
 </para>
          <para tool="javadoc-to-mdoc">
 Called after the surface is created and whenever
 the OpenGL ES surface size changes.
 </para>
          <para tool="javadoc-to-mdoc">
 Typically you will set your viewport here. If your camera
 is fixed then you could also set your projection matrix here:
 <example><code lang="java">
 void onSurfaceChanged(GL10 gl, int width, int height) {
     gl.glViewport(0, 0, width, height);
     // for a fixed camera, set the projection too
     float ratio = (float) width / height;
     gl.glMatrixMode(GL10.GL_PROJECTION);
     gl.glLoadIdentity();
     gl.glFrustumf(-ratio, ratio, -1, 1, 1, 10);
 }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceChanged(javax.microedition.khronos.opengles.GL10, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnSurfaceCreated">
      <MemberSignature Language="C#" Value="public void OnSurfaceCreated (Javax.Microedition.Khronos.Opengles.IGL10 gl, Javax.Microedition.Khronos.Egl.EGLConfig config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSurfaceCreated(class Javax.Microedition.Khronos.Opengles.IGL10 gl, class Javax.Microedition.Khronos.Egl.EGLConfig config) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSurfaceCreated", "(Ljavax/microedition/khronos/opengles/GL10;Ljavax/microedition/khronos/egl/EGLConfig;)V", "GetOnSurfaceCreated_Ljavax_microedition_khronos_opengles_GL10_Ljavax_microedition_khronos_egl_EGLConfig_Handler:Android.Opengl.GLSurfaceView/IRendererInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL10" />
        <Parameter Name="config" Type="Javax.Microedition.Khronos.Egl.EGLConfig" />
      </Parameters>
      <Docs>
        <param name="gl">the GL interface. Use <c>instanceof</c> to
 test if the interface supports GL11 or higher interfaces.</param>
        <param name="config">the EGLConfig of the created surface. Can be used
 to create matching pbuffers.
</param>
        <summary>Called when the surface is created or recreated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the surface is created or recreated.
 </para>
          <para tool="javadoc-to-mdoc">
 Called when the rendering thread
 starts and whenever the EGL context is lost. The EGL context will typically
 be lost when the Android device awakes after going to sleep.
 </para>
          <para tool="javadoc-to-mdoc">
 Since this method is called at the beginning of rendering, as well as
 every time the EGL context is lost, this method is a convenient place to put
 code to create resources that need to be created when the rendering
 starts, and that need to be recreated when the EGL context is lost.
 Textures are an example of a resource that you might want to create
 here.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that when the EGL context is lost, all OpenGL resources associated
 with that context will be automatically deleted. You do not need to call
 the corresponding "glDelete" methods such as glDeleteTextures to
 manually delete these lost resources.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceCreated(javax.microedition.khronos.opengles.GL10, javax.microedition.khronos.egl.EGLConfig)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
