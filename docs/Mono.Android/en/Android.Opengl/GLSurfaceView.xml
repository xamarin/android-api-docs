<Type Name="GLSurfaceView" FullName="Android.Opengl.GLSurfaceView">
  <TypeSignature Language="C#" Value="public class GLSurfaceView : Android.Views.SurfaceView, Android.Views.ISurfaceHolderCallback, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GLSurfaceView extends Android.Views.SurfaceView implements class Android.Runtime.IJavaObject, class Android.Views.ISurfaceHolderCallback, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.SurfaceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Views.ISurfaceHolderCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/opengl/GLSurfaceView", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>An implementation of SurfaceView that uses the dedicated surface for
 displaying OpenGL rendering.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An implementation of SurfaceView that uses the dedicated surface for
 displaying OpenGL rendering.
 </para>
      <para tool="javadoc-to-mdoc">
 A GLSurfaceView provides the following features:
 </para>
      <para tool="javadoc-to-mdoc">
        <list type="bullet">
          <item>
            <term>Manages a surface, which is a special piece of memory that can be
 composited into the Android view system.
 </term>
          </item>
          <item>
            <term>Manages an EGL display, which enables OpenGL to render into a surface.
 </term>
          </item>
          <item>
            <term>Accepts a user-provided Renderer object that does the actual rendering.
 </term>
          </item>
          <item>
            <term>Renders on a dedicated thread to decouple rendering performance from the
 UI thread.
 </term>
          </item>
          <item>
            <term>Supports both on-demand and continuous rendering.
 </term>
          </item>
          <item>
            <term>Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls.
 </term>
          </item>
        </list>
        <format type="text/html">
          <h3>Developer Guides</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">For more information about how to use OpenGL, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/graphics/opengl.html">OpenGL</a></format> developer guide.</para>
      <format type="text/html">
        <h3>Using GLSurfaceView</h3>
      </format>
      <para tool="javadoc-to-mdoc">
 Typically you use GLSurfaceView by subclassing it and overriding one or more of the
 View system input event methods. If your application does not need to override event
 methods then GLSurfaceView can be used as-is. For the most part
 GLSurfaceView behavior is customized by calling "set" methods rather than by subclassing.
 For example, unlike a regular View, drawing is delegated to a separate Renderer object which
 is registered with the GLSurfaceView
 using the <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c> call.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Initializing GLSurfaceView</h3>
        </format>
 All you have to do to initialize a GLSurfaceView is call <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>.
 However, if desired, you can modify the default behavior of GLSurfaceView by calling one or
 more of these methods before calling setRenderer:
 <list type="bullet"><item><term><c><see cref="P:Android.Opengl.GLSurfaceView.DebugFlags" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(System.Boolean)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(.IEGLConfigChooser)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetGLWrapper(.IGLWrapper)" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h4>Specifying the android.view.Surface</h4>
        </format>
 By default GLSurfaceView will create a PixelFormat.RGB_888 format surface. If a translucent
 surface is required, call getHolder().setFormat(PixelFormat.TRANSLUCENT).
 The exact format of a TRANSLUCENT surface is device dependent, but it will be
 a 32-bit-per-pixel surface with 8 bits per component.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h4>Choosing an EGL Configuration</h4>
        </format>
 A given Android device may support multiple EGLConfig rendering configurations.
 The available configurations may differ in how may channels of data are present, as
 well as how many bits are allocated to each channel. Therefore, the first thing
 GLSurfaceView has to do when starting to render is choose what EGLConfig to use.
 </para>
      <para tool="javadoc-to-mdoc">
 By default GLSurfaceView chooses a EGLConfig that has an RGB_888 pixel format,
 with at least a 16-bit depth buffer and no stencil.
 </para>
      <para tool="javadoc-to-mdoc">
 If you would prefer a different EGLConfig
 you can override the default behavior by calling one of the
 setEGLConfigChooser methods.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h4>Debug Behavior</h4>
        </format>
 You can optionally modify the behavior of GLSurfaceView by calling
 one or more of the debugging methods <c><see cref="P:Android.Opengl.GLSurfaceView.DebugFlags" /></c>,
 and <c><see cref="M:Android.Opengl.GLSurfaceView.SetGLWrapper(.IGLWrapper)" /></c>. These methods may be called before and/or after setRenderer, but
 typically they are called before setRenderer so that they take effect immediately.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h4>Setting a Renderer</h4>
        </format>
 Finally, you must call <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c> to register a <c><see cref="!:NoType:android/opengl/GLSurfaceView$Renderer;Href=../../../reference/android/opengl/GLSurfaceView.Renderer.html" /></c>.
 The renderer is
 responsible for doing the actual OpenGL rendering.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Rendering Mode</h3>
        </format>
 Once the renderer is set, you can control whether the renderer draws
 continuously or on-demand by calling
 <c><see cref="P:Android.Opengl.GLSurfaceView.RenderMode" /></c>. The default is continuous rendering.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Activity Life-cycle</h3>
        </format>
 A GLSurfaceView must be notified when the activity is paused and resumed. GLSurfaceView clients
 are required to call <c><see cref="M:Android.Opengl.GLSurfaceView.OnPause" /></c> when the activity pauses and
 <c><see cref="M:Android.Opengl.GLSurfaceView.OnResume" /></c> when the activity resumes. These calls allow GLSurfaceView to
 pause and resume the rendering thread, and also allow GLSurfaceView to release and recreate
 the OpenGL display.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Handling events</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
 To handle an event you will typically subclass GLSurfaceView and override the
 appropriate method, just as you would with any other View. However, when handling
 the event, you may need to communicate with the Renderer object
 that's running in the rendering thread. You can do this using any
 standard Java cross-thread communication mechanism. In addition,
 one relatively easy way to communicate with your renderer is
 to call
 <c><see cref="M:Android.Opengl.GLSurfaceView.QueueEvent(Java.Lang.IRunnable)" /></c>. For example:
 <example><code lang="java">
 class MyGLSurfaceView extends GLSurfaceView {

     private MyRenderer mMyRenderer;

     public void start() {
         mMyRenderer = ...;
         setRenderer(mMyRenderer);
     }

     public boolean onKeyDown(int keyCode, KeyEvent event) {
         if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
             queueEvent(new Runnable() {
                 // This method will be called on the rendering
                 // thread:
                 public void run() {
                     mMyRenderer.handleDpadCenter();
                 }});
             return true;
         }
         return super.onKeyDown(keyCode, event);
     }
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GLSurfaceView (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Standard View constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard View constructor. In order to render something, you
 must call <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c> to register a renderer.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#GLSurfaceView(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GLSurfaceView (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>Standard View constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard View constructor. In order to render something, you
 must call <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c> to register a renderer.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#GLSurfaceView(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GLSurfaceView (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugCheckGlError">
      <MemberSignature Language="C#" Value="public const Android.Opengl.DebugFlags DebugCheckGlError = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Opengl.DebugFlags DebugCheckGlError = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DEBUG_CHECK_GL_ERROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Opengl.DebugFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.DebugFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Check glError() after every GL call and throw an exception if glError indicates
 that an error has occurred.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Check glError() after every GL call and throw an exception if glError indicates
 that an error has occurred. This can be used to help track down which OpenGL ES call
 is causing an error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_CHECK_GL_ERROR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.DebugFlags" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.DebugFlags" />
      </Docs>
    </Member>
    <Member MemberName="DebugFlags">
      <MemberSignature Language="C#" Value="public virtual Android.Opengl.DebugFlags DebugFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Opengl.DebugFlags DebugFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDebugFlags", "()I", "GetGetDebugFlagsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDebugFlags", "(I)V", "GetSetDebugFlags_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.DebugFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the current value of the debug flags.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#getDebugFlags()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Get the current value of the debug flags.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setDebugFlags(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the debug flags to a new value. The value is
 constructed by OR-together zero or more
 of the DEBUG_CHECK_* constants. The debug flags take effect
 whenever a surface is created. The default value is zero.</para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.DebugCheckGlError" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.DebugLogGlCalls" />
      </Docs>
    </Member>
    <Member MemberName="DebugLogGlCalls">
      <MemberSignature Language="C#" Value="public const Android.Opengl.DebugFlags DebugLogGlCalls = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Opengl.DebugFlags DebugLogGlCalls = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DEBUG_LOG_GL_CALLS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Opengl.DebugFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.DebugFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Log GL calls to the system log at "verbose" level with tag "GLSurfaceView".</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Log GL calls to the system log at "verbose" level with tag "GLSurfaceView".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_LOG_GL_CALLS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.DebugFlags" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.DebugFlags" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="public virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPause", "()V", "GetOnPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inform the view that the activity is paused.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Inform the view that the activity is paused. The owner of this view must
 call this method when the activity is paused. Calling this method will
 pause the rendering thread.
 Must not be called before a renderer has been set.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#onPause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OnResume">
      <MemberSignature Language="C#" Value="public virtual void OnResume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onResume", "()V", "GetOnResumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inform the view that the activity is resumed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Inform the view that the activity is resumed. The owner of this view must
 call this method when the activity is resumed. Calling this method will
 recreate the OpenGL display and resume the rendering
 thread.
 Must not be called before a renderer has been set.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#onResume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PreserveEGLContextOnPause">
      <MemberSignature Language="C#" Value="public virtual bool PreserveEGLContextOnPause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveEGLContextOnPause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPreserveEGLContextOnPause", "()Z", "GetGetPreserveEGLContextOnPauseHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPreserveEGLContextOnPause", "(Z)V", "GetSetPreserveEGLContextOnPause_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#getPreserveEGLContextOnPause()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setPreserveEGLContextOnPause(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Control whether the EGL context is preserved when the GLSurfaceView is paused and
 resumed.
 
 If set to true, then the EGL context may be preserved when the GLSurfaceView is paused.
 Whether the EGL context is actually preserved or not depends upon whether the
 Android device that the program is running on can support an arbitrary number of EGL
 contexts or not. Devices that can only support a limited number of EGL contexts must
 release the  EGL context in order to allow multiple applications to share the GPU.
 
 If set to false, the EGL context will be released when the GLSurfaceView is paused,
 and recreated when the GLSurfaceView is resumed.
 

 The default is false.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="QueueEvent">
      <MemberSignature Language="C#" Value="public virtual void QueueEvent (Java.Lang.IRunnable r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void QueueEvent(class Java.Lang.IRunnable r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueEvent", "(Ljava/lang/Runnable;)V", "GetQueueEvent_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="r">the runnable to be run on the GL rendering thread.
</param>
        <summary>Queue a runnable to be run on the GL rendering thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Queue a runnable to be run on the GL rendering thread. This can be used
 to communicate with the Renderer on the rendering thread.
 Must not be called before a renderer has been set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#queueEvent(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="QueueEvent">
      <MemberSignature Language="C#" Value="public void QueueEvent (Action r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueEvent(class System.Action r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderMode">
      <MemberSignature Language="C#" Value="public virtual Android.Opengl.Rendermode RenderMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Opengl.Rendermode RenderMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRenderMode", "()I", "GetGetRenderModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRenderMode", "(I)V", "GetSetRenderMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.Rendermode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the current rendering mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#getRenderMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Get the current rendering mode. May be called
 from any thread. Must not be called before a renderer has been set.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the rendering mode. When renderMode is
 RENDERMODE_CONTINUOUSLY, the renderer is called
 repeatedly to re-render the scene. When renderMode
 is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface
 is created, or when <c><see cref="M:Android.Opengl.GLSurfaceView.RequestRender" /></c> is called. Defaults to RENDERMODE_CONTINUOUSLY.
 
 Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance
 by allowing the GPU and CPU to idle when the view does not need to be updated.
 
 This method can only be called after <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.RendermodeContinuously" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.RendermodeWhenDirty" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.RendermodeContinuously" />
        <altmember cref="F:Android.Opengl.GLSurfaceView.RendermodeWhenDirty" />
      </Docs>
    </Member>
    <Member MemberName="RendermodeContinuously">
      <MemberSignature Language="C#" Value="public const Android.Opengl.Rendermode RendermodeContinuously = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Opengl.Rendermode RendermodeContinuously = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RENDERMODE_CONTINUOUSLY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Opengl.Rendermode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.Rendermode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The renderer is called
 continuously to re-render the scene.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The renderer is called
 continuously to re-render the scene.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_CONTINUOUSLY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.RenderMode" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.RenderMode" />
      </Docs>
    </Member>
    <Member MemberName="RendermodeWhenDirty">
      <MemberSignature Language="C#" Value="public const Android.Opengl.Rendermode RendermodeWhenDirty = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Opengl.Rendermode RendermodeWhenDirty = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RENDERMODE_WHEN_DIRTY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Opengl.Rendermode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Opengl.Rendermode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>The renderer only renders
 when the surface is created, or when <c><see cref="M:Android.Opengl.GLSurfaceView.RequestRender" /></c> is called.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The renderer only renders
 when the surface is created, or when <c><see cref="M:Android.Opengl.GLSurfaceView.RequestRender" /></c> is called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_WHEN_DIRTY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.RenderMode" />
        <altmember cref="P:Android.Opengl.GLSurfaceView.RenderMode" />
        <altmember cref="M:Android.Opengl.GLSurfaceView.RequestRender" />
      </Docs>
    </Member>
    <Member MemberName="RequestRender">
      <MemberSignature Language="C#" Value="public virtual void RequestRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestRender() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestRender", "()V", "GetRequestRenderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Request that the renderer render a frame.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that the renderer render a frame.
 This method is typically used when the render mode has been set to
 <c><see cref="F:Android.Opengl.GLSurfaceView.RendermodeWhenDirty" /></c>, so that frames are only rendered on demand.
 May be called
 from any thread. Must not be called before a renderer has been set.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLConfigChooser">
      <MemberSignature Language="C#" Value="public virtual void SetEGLConfigChooser (Android.Opengl.GLSurfaceView.IEGLConfigChooser configChooser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLConfigChooser(class Android.Opengl.GLSurfaceView/IEGLConfigChooser configChooser) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLConfigChooser", "(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V", "GetSetEGLConfigChooser_Landroid_opengl_GLSurfaceView_EGLConfigChooser_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configChooser" Type="Android.Opengl.GLSurfaceView+IEGLConfigChooser" />
      </Parameters>
      <Docs>
        <param name="configChooser">To be added.</param>
        <summary>Install a custom EGLConfigChooser.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Install a custom EGLConfigChooser.
 </para>
          <para tool="javadoc-to-mdoc">If this method is
 called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">
 If no setEGLConfigChooser method is called, then by default the
 view will choose an EGLConfig that is compatible with the current
 android.view.Surface, with a depth buffer depth of
 at least 16 bits.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLConfigChooser">
      <MemberSignature Language="C#" Value="public virtual void SetEGLConfigChooser (bool needDepth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLConfigChooser(bool needDepth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLConfigChooser", "(Z)V", "GetSetEGLConfigChooser_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="needDepth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="needDepth">To be added.</param>
        <summary>Install a config chooser which will choose a config
 as close to 16-bit RGB as possible, with or without an optional depth
 buffer as close to 16-bits as possible.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Install a config chooser which will choose a config
 as close to 16-bit RGB as possible, with or without an optional depth
 buffer as close to 16-bits as possible.
 </para>
          <para tool="javadoc-to-mdoc">If this method is
 called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">
 If no setEGLConfigChooser method is called, then by default the
 view will choose an RGB_888 surface with a depth buffer depth of
 at least 16 bits.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLConfigChooser">
      <MemberSignature Language="C#" Value="public virtual void SetEGLConfigChooser (int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLConfigChooser(int32 redSize, int32 greenSize, int32 blueSize, int32 alphaSize, int32 depthSize, int32 stencilSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLConfigChooser", "(IIIIII)V", "GetSetEGLConfigChooser_IIIIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="redSize" Type="System.Int32" />
        <Parameter Name="greenSize" Type="System.Int32" />
        <Parameter Name="blueSize" Type="System.Int32" />
        <Parameter Name="alphaSize" Type="System.Int32" />
        <Parameter Name="depthSize" Type="System.Int32" />
        <Parameter Name="stencilSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="redSize">To be added.</param>
        <param name="greenSize">To be added.</param>
        <param name="blueSize">To be added.</param>
        <param name="alphaSize">To be added.</param>
        <param name="depthSize">To be added.</param>
        <param name="stencilSize">To be added.</param>
        <summary>Install a config chooser which will choose a config
 with at least the specified depthSize and stencilSize,
 and exactly the specified redSize, greenSize, blueSize and alphaSize.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Install a config chooser which will choose a config
 with at least the specified depthSize and stencilSize,
 and exactly the specified redSize, greenSize, blueSize and alphaSize.
 </para>
          <para tool="javadoc-to-mdoc">If this method is
 called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">
 If no setEGLConfigChooser method is called, then by default the
 view will choose an RGB_888 surface with a depth buffer depth of
 at least 16 bits.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(int, int, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLContextClientVersion">
      <MemberSignature Language="C#" Value="public virtual void SetEGLContextClientVersion (int version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLContextClientVersion(int32 version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLContextClientVersion", "(I)V", "GetSetEGLContextClientVersion_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="version">The EGLContext client version to choose. Use 2 for OpenGL ES 2.0
</param>
        <summary>Inform the default EGLContextFactory and default EGLConfigChooser
 which EGLContext client version to pick.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Inform the default EGLContextFactory and default EGLConfigChooser
 which EGLContext client version to pick.
 </para>
          <para tool="javadoc-to-mdoc">Use this method to create an OpenGL ES 2.0-compatible context.
 Example:
 <example><code lang="java">
     public MyView(Context context) {
         super(context);
         setEGLContextClientVersion(2); // Pick an OpenGL ES 2.0 context.
         setRenderer(new MyRenderer());
     }
 </code></example></para>
          <para tool="javadoc-to-mdoc">Note: Activities which require OpenGL ES 2.0 should indicate this by
 setting @lt;uses-feature android:glEsVersion="0x00020000" /&gt; in the activity's
 AndroidManifest.xml file.
 </para>
          <para tool="javadoc-to-mdoc">If this method is called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">This method only affects the behavior of the default EGLContexFactory and the
 default EGLConfigChooser. If
 <c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLContextFactory(.IEGLContextFactory)" /></c> has been called, then the supplied
 EGLContextFactory is responsible for creating an OpenGL ES 2.0-compatible context.
 If
 <c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(.IEGLConfigChooser)" /></c> has been called, then the supplied
 EGLConfigChooser is responsible for choosing an OpenGL ES 2.0-compatible config.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextClientVersion(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLContextFactory">
      <MemberSignature Language="C#" Value="public virtual void SetEGLContextFactory (Android.Opengl.GLSurfaceView.IEGLContextFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLContextFactory(class Android.Opengl.GLSurfaceView/IEGLContextFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLContextFactory", "(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V", "GetSetEGLContextFactory_Landroid_opengl_GLSurfaceView_EGLContextFactory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Android.Opengl.GLSurfaceView+IEGLContextFactory" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <summary>Install a custom EGLContextFactory.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Install a custom EGLContextFactory.
 </para>
          <para tool="javadoc-to-mdoc">If this method is
 called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">
 If this method is not called, then by default
 a context will be created with no shared context and
 with a null attribute list.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="SetEGLWindowSurfaceFactory">
      <MemberSignature Language="C#" Value="public virtual void SetEGLWindowSurfaceFactory (Android.Opengl.GLSurfaceView.IEGLWindowSurfaceFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEGLWindowSurfaceFactory(class Android.Opengl.GLSurfaceView/IEGLWindowSurfaceFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEGLWindowSurfaceFactory", "(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V", "GetSetEGLWindowSurfaceFactory_Landroid_opengl_GLSurfaceView_EGLWindowSurfaceFactory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Android.Opengl.GLSurfaceView+IEGLWindowSurfaceFactory" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <summary>Install a custom EGLWindowSurfaceFactory.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Install a custom EGLWindowSurfaceFactory.
 </para>
          <para tool="javadoc-to-mdoc">If this method is
 called, it must be called before <c><see cref="M:Android.Opengl.GLSurfaceView.SetRenderer(.IRenderer)" /></c>
 is called.
 </para>
          <para tool="javadoc-to-mdoc">
 If this method is not called, then by default
 a window surface will be created with a null attribute list.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="SetGLWrapper">
      <MemberSignature Language="C#" Value="public virtual void SetGLWrapper (Android.Opengl.GLSurfaceView.IGLWrapper glWrapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetGLWrapper(class Android.Opengl.GLSurfaceView/IGLWrapper glWrapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setGLWrapper", "(Landroid/opengl/GLSurfaceView$GLWrapper;)V", "GetSetGLWrapper_Landroid_opengl_GLSurfaceView_GLWrapper_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glWrapper" Type="Android.Opengl.GLSurfaceView+IGLWrapper" />
      </Parameters>
      <Docs>
        <param name="glWrapper">the new GLWrapper
</param>
        <summary>Set the glWrapper.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the glWrapper. If the glWrapper is not null, its
 <c><see cref="!:NoType:android/opengl/GLSurfaceView$GLWrapper;Href=../../../reference/android/opengl/GLSurfaceView.GLWrapper.html#wrap(javax.microedition.khronos.opengles.GL)" /></c> method is called
 whenever a surface is created. A GLWrapper can be used to wrap
 the GL object that's passed to the renderer. Wrapping a GL
 object enables examining and modifying the behavior of the
 GL calls made by the renderer.
 </para>
          <para tool="javadoc-to-mdoc">
 Wrapping is typically used for debugging purposes.
 </para>
          <para tool="javadoc-to-mdoc">
 The default value is null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetRenderer">
      <MemberSignature Language="C#" Value="public virtual void SetRenderer (Android.Opengl.GLSurfaceView.IRenderer renderer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRenderer(class Android.Opengl.GLSurfaceView/IRenderer renderer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRenderer", "(Landroid/opengl/GLSurfaceView$Renderer;)V", "GetSetRenderer_Landroid_opengl_GLSurfaceView_Renderer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderer" Type="Android.Opengl.GLSurfaceView+IRenderer" />
      </Parameters>
      <Docs>
        <param name="renderer">the renderer to use to perform OpenGL drawing.
</param>
        <summary>Set the renderer associated with this view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the renderer associated with this view. Also starts the thread that
 will call the renderer, which in turn causes the rendering to start.
 </para>
          <para tool="javadoc-to-mdoc">This method should be called once and only once in the life-cycle of
 a GLSurfaceView.
 </para>
          <para tool="javadoc-to-mdoc">The following GLSurfaceView methods can only be called <i>before</i>
 setRenderer is called:
 <list type="bullet"><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(System.Boolean)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(.IEGLConfigChooser)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.SetEGLConfigChooser(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 The following GLSurfaceView methods can only be called <i>after</i>
 setRenderer is called:
 <list type="bullet"><item><term><c><see cref="P:Android.Opengl.GLSurfaceView.RenderMode" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.OnPause" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.OnResume" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.QueueEvent(Java.Lang.IRunnable)" /></c></term></item><item><term><c><see cref="M:Android.Opengl.GLSurfaceView.RequestRender" /></c></term></item><item><term><c><see cref="P:Android.Opengl.GLSurfaceView.RenderMode" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceChanged">
      <MemberSignature Language="C#" Value="public virtual void SurfaceChanged (Android.Views.ISurfaceHolder holder, Android.Graphics.Format format, int w, int h);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SurfaceChanged(class Android.Views.ISurfaceHolder holder, valuetype Android.Graphics.Format format, int32 w, int32 h) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("surfaceChanged", "(Landroid/view/SurfaceHolder;III)V", "GetSurfaceChanged_Landroid_view_SurfaceHolder_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
        <Parameter Name="format" Type="Android.Graphics.Format" />
        <Parameter Name="w" Type="System.Int32" />
        <Parameter Name="h" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="holder">The SurfaceHolder whose surface has changed.</param>
        <param name="format">The new PixelFormat of the surface.</param>
        <param name="w">The new width of the surface.</param>
        <param name="h">The new height of the surface.
</param>
        <summary tool="true">This method is part of the SurfaceHolder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is part of the SurfaceHolder.Callback interface, and is
 not normally called or subclassed by clients of GLSurfaceView.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceChanged(android.view.SurfaceHolder, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceCreated">
      <MemberSignature Language="C#" Value="public virtual void SurfaceCreated (Android.Views.ISurfaceHolder holder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SurfaceCreated(class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("surfaceCreated", "(Landroid/view/SurfaceHolder;)V", "GetSurfaceCreated_Landroid_view_SurfaceHolder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="holder">The SurfaceHolder whose surface is being created.
</param>
        <summary tool="true">This method is part of the SurfaceHolder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is part of the SurfaceHolder.Callback interface, and is
 not normally called or subclassed by clients of GLSurfaceView.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceCreated(android.view.SurfaceHolder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SurfaceDestroyed">
      <MemberSignature Language="C#" Value="public virtual void SurfaceDestroyed (Android.Views.ISurfaceHolder holder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SurfaceDestroyed(class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("surfaceDestroyed", "(Landroid/view/SurfaceHolder;)V", "GetSurfaceDestroyed_Landroid_view_SurfaceHolder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="holder">The SurfaceHolder whose surface is being destroyed.
</param>
        <summary tool="true">This method is part of the SurfaceHolder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is part of the SurfaceHolder.Callback interface, and is
 not normally called or subclassed by clients of GLSurfaceView.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceDestroyed(android.view.SurfaceHolder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
