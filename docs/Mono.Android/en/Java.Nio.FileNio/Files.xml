<Type Name="Files" FullName="Java.Nio.FileNio.Files">
  <TypeSignature Language="C#" Value="public sealed class Files : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Files extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.FileNio.Files" />
  <TypeSignature Language="F#" Value="type Files = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/file/Files", ApiSince=26, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/file/Files", ApiSince=26, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This class consists exclusively of static methods that operate on files,
            directories, or other types of files.</summary>
    <remarks>
      <para>This class consists exclusively of static methods that operate on files,
            directories, or other types of files.</para>
      <para>In most cases, the methods defined here will delegate to the associated
            file system provider to perform the file operations.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/file/Files" title="Reference documentation">Java documentation for <code>java.nio.file.Files</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static long Copy (Java.Nio.FileNio.IPath? source, System.IO.Stream? out);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Copy(class Java.Nio.FileNio.IPath source, class System.IO.Stream out) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Copy(Java.Nio.FileNio.IPath,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="static member Copy : Java.Nio.FileNio.IPath * System.IO.Stream -&gt; int64" Usage="Java.Nio.FileNio.Files.Copy (source, out)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("copy", "(Ljava/nio/file/Path;Ljava/io/OutputStream;)J", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("copy", "(Ljava/nio/file/Path;Ljava/io/OutputStream;)J", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="source">the  path to the file</param>
        <param name="out">the output stream to write to</param>
        <summary>Copies all bytes from a file to an output stream.</summary>
        <returns>the number of bytes read or written</returns>
        <remarks>
          <para>Copies all bytes from a file to an output stream.</para>
          <para>If an I/O error occurs reading from the file or writing to the output
            stream, then it may do so after some bytes have been read or written.
            Consequently the output stream may be in an inconsistent state. It is
            strongly recommended that the output stream be promptly closed if an I/O
            error occurs.</para>
          <para>This method may block indefinitely writing to the output stream (or
            reading from the file). The behavior for the case that the output stream
            is <i>asynchronously closed</i> or the thread interrupted during the copy
            is highly output stream and file system provider specific and therefore
            not specified.</para>
          <para>Note that if the given output stream is <c>java.io.Flushable</c>
            then its <c>java.io.Flushable#flush flush</c> method may need to invoked
            after this method completes so as to flush any buffered output.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#copy(java.nio.file.Path,%20java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.copy(java.nio.file.Path, java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Copy (Java.Nio.FileNio.IPath? source, Java.Nio.FileNio.IPath? target, params Java.Nio.FileNio.ICopyOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Copy(class Java.Nio.FileNio.IPath source, class Java.Nio.FileNio.IPath target, class Java.Nio.FileNio.ICopyOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Copy(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IPath,Java.Nio.FileNio.ICopyOption[])" />
      <MemberSignature Language="F#" Value="static member Copy : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IPath * Java.Nio.FileNio.ICopyOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.Copy (source, target, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("copy", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("copy", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="target" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.ICopyOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="target">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Reads all bytes from an input stream and writes them to an output stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#copy(java.io.InputStream,%20java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.copy(java.io.InputStream, java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static long Copy (System.IO.Stream? in, Java.Nio.FileNio.IPath? target, params Java.Nio.FileNio.ICopyOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Copy(class System.IO.Stream in, class Java.Nio.FileNio.IPath target, class Java.Nio.FileNio.ICopyOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Copy(System.IO.Stream,Java.Nio.FileNio.IPath,Java.Nio.FileNio.ICopyOption[])" />
      <MemberSignature Language="F#" Value="static member Copy : System.IO.Stream * Java.Nio.FileNio.IPath * Java.Nio.FileNio.ICopyOption[] -&gt; int64" Usage="Java.Nio.FileNio.Files.Copy (in, target, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("copy", "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("copy", "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="System.IO.Stream" />
        <Parameter Name="target" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.ICopyOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="in">To be added.</param>
        <param name="target">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Reads all bytes from an input stream and writes them to an output stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#copy(java.io.InputStream,%20java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.copy(java.io.InputStream, java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectories">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateDirectories (Java.Nio.FileNio.IPath? dir, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateDirectories(class Java.Nio.FileNio.IPath dir, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateDirectories(Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateDirectories : Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateDirectories (dir, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createDirectories", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createDirectories", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dir">the directory to create</param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the directory</param>
        <summary>Creates a directory by creating all nonexistent parent directories first.</summary>
        <returns>the directory</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createDirectories(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateDirectory (Java.Nio.FileNio.IPath? dir, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateDirectory(class Java.Nio.FileNio.IPath dir, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateDirectory(Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateDirectory (dir, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createDirectory", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createDirectory", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dir">the directory to create</param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the directory</param>
        <summary>Creates a new directory.</summary>
        <returns>the directory</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createDirectory(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFile">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateFile (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateFile(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateFile(Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateFile : Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateFile (path, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createFile", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createFile", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to create</param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the file</param>
        <summary>Creates a new and empty file, failing if the file already exists.</summary>
        <returns>the file</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createFile(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLink">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateLink (Java.Nio.FileNio.IPath? link, Java.Nio.FileNio.IPath? existing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateLink(class Java.Nio.FileNio.IPath link, class Java.Nio.FileNio.IPath existing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateLink(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member CreateLink : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateLink (link, existing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createLink", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createLink", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="link" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="existing" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="link">the link (directory entry) to create</param>
        <param name="existing">a path to an existing file</param>
        <summary>Creates a new link (directory entry) for an existing file <i>(optional
            operation)</i>.</summary>
        <returns>the path to the link (directory entry)</returns>
        <remarks>
          <para>Creates a new link (directory entry) for an existing file <i>(optional
            operation)</i>.</para>
          <para>The <c>link</c> parameter locates the directory entry to create.
            The <c>existing</c> parameter is the path to an existing file. This
            method creates a new directory entry for the file so that it can be
            accessed using <c>link</c> as the path. On some file systems this is
            known as creating a "hard link". Whether the file attributes are
            maintained for the file or for each directory entry is file system
            specific and therefore not specified. Typically, a file system requires
            that all links (directory entries) for a file be on the same file system.
            Furthermore, on some platforms, the Java virtual machine may require to
            be started with implementation specific privileges to create hard links
            or to create links to directories.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createLink(java.nio.file.Path,%20java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createLink(java.nio.file.Path, java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSymbolicLink">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateSymbolicLink (Java.Nio.FileNio.IPath? link, Java.Nio.FileNio.IPath? target, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateSymbolicLink(class Java.Nio.FileNio.IPath link, class Java.Nio.FileNio.IPath target, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateSymbolicLink(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateSymbolicLink : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateSymbolicLink (link, target, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createSymbolicLink", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createSymbolicLink", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="link" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="target" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="link">the path of the symbolic link to create</param>
        <param name="target">the target of the symbolic link</param>
        <param name="attrs">the array of attributes to set atomically when creating the
                     symbolic link</param>
        <summary>Creates a symbolic link to a target <i>(optional operation)</i>.</summary>
        <returns>the path to the symbolic link</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createSymbolicLink(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTempDirectory">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateTempDirectory (string? prefix, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateTempDirectory(string prefix, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateTempDirectory(System.String,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateTempDirectory : string * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateTempDirectory (prefix, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempDirectory", "(Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempDirectory", "(Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="prefix">the prefix string to be used in generating the directory's name;
                     may be <c>null</c></param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the directory</param>
        <summary>Creates a new directory in the default temporary-file directory, using
            the given prefix to generate its name.</summary>
        <returns>the path to the newly created directory that did not exist before
                     this method was invoked</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createTempDirectory(java.lang.String,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createTempDirectory(java.lang.String, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTempDirectory">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateTempDirectory (Java.Nio.FileNio.IPath? dir, string? prefix, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateTempDirectory(class Java.Nio.FileNio.IPath dir, string prefix, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateTempDirectory(Java.Nio.FileNio.IPath,System.String,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateTempDirectory : Java.Nio.FileNio.IPath * string * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateTempDirectory (dir, prefix, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempDirectory", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempDirectory", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dir">To be added.</param>
        <param name="prefix">the prefix string to be used in generating the directory's name;
                     may be <c>null</c></param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the directory</param>
        <summary>Creates a new directory in the default temporary-file directory, using
            the given prefix to generate its name.</summary>
        <returns>the path to the newly created directory that did not exist before
                     this method was invoked</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createTempDirectory(java.lang.String,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createTempDirectory(java.lang.String, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTempFile">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateTempFile (string? prefix, string? suffix, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateTempFile(string prefix, string suffix, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateTempFile(System.String,System.String,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateTempFile : string * string * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateTempFile (prefix, suffix, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="prefix">the prefix string to be used in generating the file's name;
                     may be <c>null</c></param>
        <param name="suffix">the suffix string to be used in generating the file's name;
                     may be <c>null</c>, in which case "<c>.tmp</c>" is used</param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the file</param>
        <summary>Creates an empty file in the default temporary-file directory, using
            the given prefix and suffix to generate its name.</summary>
        <returns>the path to the newly created file that did not exist before
                     this method was invoked</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createTempFile(java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTempFile">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? CreateTempFile (Java.Nio.FileNio.IPath? dir, string? prefix, string? suffix, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath CreateTempFile(class Java.Nio.FileNio.IPath dir, string prefix, string suffix, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.CreateTempFile(Java.Nio.FileNio.IPath,System.String,System.String,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member CreateTempFile : Java.Nio.FileNio.IPath * string * string * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.CreateTempFile (dir, prefix, suffix, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempFile", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempFile", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dir">To be added.</param>
        <param name="prefix">the prefix string to be used in generating the file's name;
                     may be <c>null</c></param>
        <param name="suffix">the suffix string to be used in generating the file's name;
                     may be <c>null</c>, in which case "<c>.tmp</c>" is used</param>
        <param name="attrs">an optional list of file attributes to set atomically when
                     creating the file</param>
        <summary>Creates an empty file in the default temporary-file directory, using
            the given prefix and suffix to generate its name.</summary>
        <returns>the path to the newly created file that did not exist before
                     this method was invoked</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#createTempFile(java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Delete(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member Delete : Java.Nio.FileNio.IPath -&gt; unit" Usage="Java.Nio.FileNio.Files.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("delete", "(Ljava/nio/file/Path;)V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("delete", "(Ljava/nio/file/Path;)V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to delete</param>
        <summary>Deletes a file.</summary>
        <remarks>
          <para>Deletes a file.</para>
          <para>An implementation may require to examine the file to determine if the
            file is a directory. Consequently this method may not be atomic with respect
            to other file system operations.  If the file is a symbolic link then the
            symbolic link itself, not the final target of the link, is deleted.</para>
          <para>If the file is a directory then the directory must be empty. In some
            implementations a directory has entries for special files or links that
            are created when the directory is created. In such implementations a
            directory is considered empty when only the special entries exist.
            This method can be used with the <c>#walkFileTree walkFileTree</c>
            method to delete a directory and all entries in the directory, or an
            entire <i>file-tree</i> where required.</para>
          <para>On some operating systems it may not be possible to remove a file when
            it is open and in use by this Java virtual machine or other programs.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#delete(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.delete(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIfExists">
      <MemberSignature Language="C#" Value="public static bool DeleteIfExists (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteIfExists(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.DeleteIfExists(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member DeleteIfExists : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.DeleteIfExists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deleteIfExists", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deleteIfExists", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to delete</param>
        <summary>Deletes a file if it exists.</summary>
        <returns>
          <c>true</c> if the file was deleted by this method; <c>false</c> if the file could not be deleted because it did not
                     exist</returns>
        <remarks>
          <para>Deletes a file if it exists.</para>
          <para>As with the <c>#delete(Path) delete(Path)</c> method, an
            implementation may need to examine the file to determine if the file is a
            directory. Consequently this method may not be atomic with respect to
            other file system operations.  If the file is a symbolic link, then the
            symbolic link itself, not the final target of the link, is deleted.</para>
          <para>If the file is a directory then the directory must be empty. In some
            implementations a directory has entries for special files or links that
            are created when the directory is created. In such implementations a
            directory is considered empty when only the special entries exist.</para>
          <para>On some operating systems it may not be possible to remove a file when
            it is open and in use by this Java virtual machine or other programs.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#deleteIfExists(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.deleteIfExists(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Exists(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member Exists : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; bool" Usage="Java.Nio.FileNio.Files.Exists (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to test</param>
        <param name="options">options indicating how symbolic links are handled
            .</param>
        <summary>Tests whether a file exists.</summary>
        <returns>
          <c>true</c> if the file exists; <c>false</c> if the file does
                     not exist or its existence cannot be determined.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#exists(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public static Java.Lang.Object? GetAttribute (Java.Nio.FileNio.IPath? path, string? attribute, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Object GetAttribute(class Java.Nio.FileNio.IPath path, string attribute, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetAttribute(Java.Nio.FileNio.IPath,System.String,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member GetAttribute : Java.Nio.FileNio.IPath * string * Java.Nio.FileNio.LinkOption[] -&gt; Java.Lang.Object" Usage="Java.Nio.FileNio.Files.GetAttribute (path, attribute, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attribute" Type="System.String" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="attribute">the attribute to read</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Reads the value of a file attribute.</summary>
        <returns>the attribute value</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getAttribute(java.nio.file.Path,%20java.lang.String,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getAttribute(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileAttributeView">
      <MemberSignature Language="C#" Value="public static Java.Lang.Object? GetFileAttributeView (Java.Nio.FileNio.IPath? path, Java.Lang.Class? type, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Object GetFileAttributeView(class Java.Nio.FileNio.IPath path, class Java.Lang.Class type, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetFileAttributeView(Java.Nio.FileNio.IPath,Java.Lang.Class,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member GetFileAttributeView : Java.Nio.FileNio.IPath * Java.Lang.Class * Java.Nio.FileNio.LinkOption[] -&gt; Java.Lang.Object" Usage="Java.Nio.FileNio.Files.GetFileAttributeView (path, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFileAttributeView", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFileAttributeView", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V extends java.nio.file.attribute.FileAttributeView" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V extends java.nio.file.attribute.FileAttributeView" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="type" Type="Java.Lang.Class" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="type">the <c>Class</c> object corresponding to the file attribute view</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Returns a file attribute view of a given type.</summary>
        <returns>a file attribute view of the specified type, or <c>null</c> if
                     the attribute view type is not available</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getFileAttributeView(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getFileAttributeView(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileStore">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileStore? GetFileStore (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.FileStore GetFileStore(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetFileStore(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member GetFileStore : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.FileStore" Usage="Java.Nio.FileNio.Files.GetFileStore path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFileStore", "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFileStore", "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <summary>Returns the <c>FileStore</c> representing the file store where a file
            is located.</summary>
        <returns>the file store where the file is stored</returns>
        <remarks>
          <para>Returns the <c>FileStore</c> representing the file store where a file
            is located.</para>
          <para>Once a reference to the <c>FileStore</c> is obtained it is
            implementation specific if operations on the returned <c>FileStore</c>,
            or <c>FileStoreAttributeView</c> objects obtained from it, continue
            to depend on the existence of the file. In particular the behavior is not
            defined for the case that the file is deleted or moved to a different
            file store.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getFileStore(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getFileStore(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastModifiedTime">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.Attributes.FileTime? GetLastModifiedTime (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.Attributes.FileTime GetLastModifiedTime(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetLastModifiedTime(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member GetLastModifiedTime : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; Java.Nio.FileNio.Attributes.FileTime" Usage="Java.Nio.FileNio.Files.GetLastModifiedTime (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLastModifiedTime", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLastModifiedTime", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.Attributes.FileTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Returns a file's last modified time.</summary>
        <returns>a <c>FileTime</c> representing the time the file was last
                     modified, or an implementation specific default when a time
                     stamp to indicate the time of last modification is not supported
                     by the file system</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getLastModifiedTime(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getLastModifiedTime(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOwner">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.Attributes.IUserPrincipal? GetOwner (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.Attributes.IUserPrincipal GetOwner(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetOwner(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member GetOwner : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; Java.Nio.FileNio.Attributes.IUserPrincipal" Usage="Java.Nio.FileNio.Files.GetOwner (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOwner", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOwner", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.Attributes.IUserPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path to the file</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Returns the owner of a file.</summary>
        <returns>A user principal representing the owner of the file</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getOwner(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getOwner(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosixFilePermissions">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt;? GetPosixFilePermissions (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.Attributes.PosixFilePermission&gt; GetPosixFilePermissions(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.GetPosixFilePermissions(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member GetPosixFilePermissions : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt;" Usage="Java.Nio.FileNio.Files.GetPosixFilePermissions (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPosixFilePermissions", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPosixFilePermissions", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Returns a file's POSIX file permissions.</summary>
        <returns>the file permissions</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#getPosixFilePermissions(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.getPosixFilePermissions(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public static bool IsDirectory (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDirectory(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsDirectory(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member IsDirectory : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; bool" Usage="Java.Nio.FileNio.Files.IsDirectory (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isDirectory", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isDirectory", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to test</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Tests whether a file is a directory.</summary>
        <returns>
          <c>true</c> if the file is a directory; <c>false</c> if
                     the file does not exist, is not a directory, or it cannot
                     be determined if the file is a directory or not.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isDirectory(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isDirectory(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExecutable">
      <MemberSignature Language="C#" Value="public static bool IsExecutable (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExecutable(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsExecutable(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsExecutable : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsExecutable path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isExecutable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isExecutable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to check</param>
        <summary>Tests whether a file is executable.</summary>
        <returns>
          <c>true</c> if the file exists and is executable; <c>false</c>
                     if the file does not exist, execute access would be denied because
                     the Java virtual machine has insufficient privileges, or access
                     cannot be determined</returns>
        <remarks>
          <para>Tests whether a file is executable. This method checks that a file exists
            and that this Java virtual machine has appropriate privileges to <c>Runtime#exec execute</c> the file. The semantics may differ when checking
            access to a directory. For example, on UNIX systems, checking for
            execute access checks that the Java virtual machine has permission to
            search the directory in order to access file or subdirectories.</para>
          <para>Depending on the implementation, this method may require to read file
            permissions, access control lists, or other file attributes in order to
            check the effective access to the file. Consequently, this method may not
            be atomic with respect to other file system operations.</para>
          <para>Note that the result of this method is immediately outdated, there is
            no guarantee that a subsequent attempt to execute the file will succeed
            (or even that it will access the same file). Care should be taken when
            using this method in security sensitive applications.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isExecutable(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isExecutable(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public static bool IsHidden (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHidden(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsHidden(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsHidden : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsHidden path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isHidden", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isHidden", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to test</param>
        <summary>Tells whether or not a file is considered &lt;em&gt;hidden&lt;/em&gt;.</summary>
        <returns>
          <c>true</c> if the file is considered hidden</returns>
        <remarks>
          <para>Tells whether or not a file is considered &lt;em&gt;hidden&lt;/em&gt;. The exact
            definition of hidden is platform or provider dependent. On UNIX for
            example a file is considered to be hidden if its name begins with a
            period character ('.'). On Windows a file is considered hidden if it
            isn't a directory and the DOS <c>DosFileAttributes#isHidden hidden</c>
            attribute is set.</para>
          <para>Depending on the implementation this method may require to access
            the file system to determine if the file is considered hidden.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isHidden(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isHidden(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadable">
      <MemberSignature Language="C#" Value="public static bool IsReadable (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsReadable(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsReadable(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsReadable : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsReadable path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isReadable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isReadable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to check</param>
        <summary>Tests whether a file is readable.</summary>
        <returns>
          <c>true</c> if the file exists and is readable; <c>false</c>
                     if the file does not exist, read access would be denied because
                     the Java virtual machine has insufficient privileges, or access
                     cannot be determined</returns>
        <remarks>
          <para>Tests whether a file is readable. This method checks that a file exists
            and that this Java virtual machine has appropriate privileges that would
            allow it open the file for reading. Depending on the implementation, this
            method may require to read file permissions, access control lists, or
            other file attributes in order to check the effective access to the file.
            Consequently, this method may not be atomic with respect to other file
            system operations.</para>
          <para>Note that the result of this method is immediately outdated, there is
            no guarantee that a subsequent attempt to open the file for reading will
            succeed (or even that it will access the same file). Care should be taken
            when using this method in security sensitive applications.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isReadable(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isReadable(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRegularFile">
      <MemberSignature Language="C#" Value="public static bool IsRegularFile (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRegularFile(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsRegularFile(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member IsRegularFile : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; bool" Usage="Java.Nio.FileNio.Files.IsRegularFile (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isRegularFile", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isRegularFile", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Tests whether a file is a regular file with opaque content.</summary>
        <returns>
          <c>true</c> if the file is a regular file; <c>false</c> if
                     the file does not exist, is not a regular file, or it
                     cannot be determined if the file is a regular file or not.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isRegularFile(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isRegularFile(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSameFile">
      <MemberSignature Language="C#" Value="public static bool IsSameFile (Java.Nio.FileNio.IPath? path, Java.Nio.FileNio.IPath? path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSameFile(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IPath path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsSameFile(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsSameFile : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsSameFile (path, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isSameFile", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isSameFile", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="path2" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">one path to the file</param>
        <param name="path2">the other path</param>
        <summary>Tests if two paths locate the same file.</summary>
        <returns>
          <c>true</c> if, and only if, the two paths locate the same file</returns>
        <remarks>
          <para>Tests if two paths locate the same file.</para>
          <para>If both <c>Path</c> objects are <c>Path#equals(Object) equal</c>
            then this method returns <c>true</c> without checking if the file exists.
            If the two <c>Path</c> objects are associated with different providers
            then this method returns <c>false</c>. Otherwise, this method checks if
            both <c>Path</c> objects locate the same file, and depending on the
            implementation, may require to open or access both files.</para>
          <para>If the file system and files remain static, then this method implements
            an equivalence relation for non-null <c>Paths</c>.
            &lt;ul&gt;
            &lt;li&gt;It is <i>reflexive</i>: for <c>Path</c><c>f</c>,
                <c>isSameFile(f,f)</c> should return <c>true</c>.
            &lt;li&gt;It is <i>symmetric</i>: for two <c>Paths</c><c>f</c> and <c>g</c>,
                <c>isSameFile(f,g)</c> will equal <c>isSameFile(g,f)</c>.
            &lt;li&gt;It is <i>transitive</i>: for three <c>Paths</c><c>f</c>, <c>g</c>, and <c>h</c>, if <c>isSameFile(f,g)</c> returns
                <c>true</c> and <c>isSameFile(g,h)</c> returns <c>true</c>, then
                <c>isSameFile(f,h)</c> will return return <c>true</c>.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isSameFile(java.nio.file.Path,%20java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isSameFile(java.nio.file.Path, java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymbolicLink">
      <MemberSignature Language="C#" Value="public static bool IsSymbolicLink (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbolicLink(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsSymbolicLink(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsSymbolicLink : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsSymbolicLink path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isSymbolicLink", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isSymbolicLink", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">The path to the file</param>
        <summary>Tests whether a file is a symbolic link.</summary>
        <returns>
          <c>true</c> if the file is a symbolic link; <c>false</c> if
                     the file does not exist, is not a symbolic link, or it cannot
                     be determined if the file is a symbolic link or not.</returns>
        <remarks>
          <para>Tests whether a file is a symbolic link.</para>
          <para>Where it is required to distinguish an I/O exception from the case
            that the file is not a symbolic link then the file attributes can be
            read with the <c>#readAttributes(Path,Class,LinkOption[])
            readAttributes</c> method and the file type tested with the <c>BasicFileAttributes#isSymbolicLink</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isSymbolicLink(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isSymbolicLink(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritable">
      <MemberSignature Language="C#" Value="public static bool IsWritable (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWritable(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.IsWritable(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member IsWritable : Java.Nio.FileNio.IPath -&gt; bool" Usage="Java.Nio.FileNio.Files.IsWritable path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isWritable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isWritable", "(Ljava/nio/file/Path;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to check</param>
        <summary>Tests whether a file is writable.</summary>
        <returns>
          <c>true</c> if the file exists and is writable; <c>false</c>
                     if the file does not exist, write access would be denied because
                     the Java virtual machine has insufficient privileges, or access
                     cannot be determined</returns>
        <remarks>
          <para>Tests whether a file is writable. This method checks that a file exists
            and that this Java virtual machine has appropriate privileges that would
            allow it open the file for writing. Depending on the implementation, this
            method may require to read file permissions, access control lists, or
            other file attributes in order to check the effective access to the file.
            Consequently, this method may not be atomic with respect to other file
            system operations.</para>
          <para>Note that result of this method is immediately outdated, there is no
            guarantee that a subsequent attempt to open the file for writing will
            succeed (or even that it will access the same file). Care should be taken
            when using this method in security sensitive applications.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#isWritable(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.isWritable(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.Files.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.FileNio.Files.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Move (Java.Nio.FileNio.IPath? source, Java.Nio.FileNio.IPath? target, params Java.Nio.FileNio.ICopyOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Move(class Java.Nio.FileNio.IPath source, class Java.Nio.FileNio.IPath target, class Java.Nio.FileNio.ICopyOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Move(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IPath,Java.Nio.FileNio.ICopyOption[])" />
      <MemberSignature Language="F#" Value="static member Move : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IPath * Java.Nio.FileNio.ICopyOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.Move (source, target, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("move", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("move", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="target" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.ICopyOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">the path to the file to move</param>
        <param name="target">the path to the target file (may be associated with a different
                     provider to the source path)</param>
        <param name="options">options specifying how the move should be done</param>
        <summary>Move or rename a file to a target file.</summary>
        <returns>the path to the target file</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#move(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewBufferedReader">
      <MemberSignature Language="C#" Value="public static Java.IO.BufferedReader? NewBufferedReader (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.BufferedReader NewBufferedReader(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewBufferedReader(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member NewBufferedReader : Java.Nio.FileNio.IPath -&gt; Java.IO.BufferedReader" Usage="Java.Nio.FileNio.Files.NewBufferedReader path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newBufferedReader", "(Ljava/nio/file/Path;)Ljava/io/BufferedReader;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newBufferedReader", "(Ljava/nio/file/Path;)Ljava/io/BufferedReader;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.BufferedReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <summary>Opens a file for reading, returning a <c>BufferedReader</c> to read text
            from the file in an efficient manner.</summary>
        <returns>a new buffered reader, with default buffer size, to read text
                     from the file</returns>
        <remarks>
          <para>Opens a file for reading, returning a <c>BufferedReader</c> to read text
            from the file in an efficient manner. Bytes from the file are decoded into
            characters using the <c>StandardCharsets#UTF_8 UTF-8</c><c>Charset
            charset</c>.</para>
          <para>This method works as if invoking it were equivalent to evaluating the
            expression:</para>
          <code lang="text/java">{@code
            Files.newBufferedReader(path, StandardCharsets.UTF_8)
            }</code>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newBufferedReader(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newBufferedReader(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewBufferedReader">
      <MemberSignature Language="C#" Value="public static Java.IO.BufferedReader? NewBufferedReader (Java.Nio.FileNio.IPath? path, Java.Nio.Charset.Charset? cs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.BufferedReader NewBufferedReader(class Java.Nio.FileNio.IPath path, class Java.Nio.Charset.Charset cs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewBufferedReader(Java.Nio.FileNio.IPath,Java.Nio.Charset.Charset)" />
      <MemberSignature Language="F#" Value="static member NewBufferedReader : Java.Nio.FileNio.IPath * Java.Nio.Charset.Charset -&gt; Java.IO.BufferedReader" Usage="Java.Nio.FileNio.Files.NewBufferedReader (path, cs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newBufferedReader", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/io/BufferedReader;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newBufferedReader", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/io/BufferedReader;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.BufferedReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="cs" Type="Java.Nio.Charset.Charset" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="cs">the charset to use for decoding</param>
        <summary>Opens a file for reading, returning a <c>BufferedReader</c> that may be
            used to read text from the file in an efficient manner.</summary>
        <returns>a new buffered reader, with default buffer size, to read text
                     from the file</returns>
        <remarks>
          <para>Opens a file for reading, returning a <c>BufferedReader</c> that may be
            used to read text from the file in an efficient manner. Bytes from the
            file are decoded into characters using the specified charset. Reading
            commences at the beginning of the file.</para>
          <para>The <c>Reader</c> methods that read from the file throw <c>IOException</c> if a malformed or unmappable byte sequence is read.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newBufferedReader(java.nio.file.Path,%20java.nio.charset.Charset)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newBufferedReader(java.nio.file.Path, java.nio.charset.Charset)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewBufferedWriter">
      <MemberSignature Language="C#" Value="public static Java.IO.BufferedWriter? NewBufferedWriter (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.BufferedWriter NewBufferedWriter(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewBufferedWriter(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member NewBufferedWriter : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; Java.IO.BufferedWriter" Usage="Java.Nio.FileNio.Files.NewBufferedWriter (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newBufferedWriter", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newBufferedWriter", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.BufferedWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Opens or creates a file for writing, returning a <c>BufferedWriter</c>
            that may be used to write text to the file in an efficient manner.</summary>
        <returns>a new buffered writer, with default buffer size, to write text
                     to the file</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newBufferedWriter(java.nio.file.Path,%20java.nio.charset.Charset,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newBufferedWriter(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewBufferedWriter">
      <MemberSignature Language="C#" Value="public static Java.IO.BufferedWriter? NewBufferedWriter (Java.Nio.FileNio.IPath? path, Java.Nio.Charset.Charset? cs, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.BufferedWriter NewBufferedWriter(class Java.Nio.FileNio.IPath path, class Java.Nio.Charset.Charset cs, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewBufferedWriter(Java.Nio.FileNio.IPath,Java.Nio.Charset.Charset,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member NewBufferedWriter : Java.Nio.FileNio.IPath * Java.Nio.Charset.Charset * Java.Nio.FileNio.IOpenOption[] -&gt; Java.IO.BufferedWriter" Usage="Java.Nio.FileNio.Files.NewBufferedWriter (path, cs, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newBufferedWriter", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newBufferedWriter", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.BufferedWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="cs" Type="Java.Nio.Charset.Charset" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="cs">the charset to use for encoding</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Opens or creates a file for writing, returning a <c>BufferedWriter</c>
            that may be used to write text to the file in an efficient manner.</summary>
        <returns>a new buffered writer, with default buffer size, to write text
                     to the file</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newBufferedWriter(java.nio.file.Path,%20java.nio.charset.Charset,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newBufferedWriter(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewByteChannel">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.ISeekableByteChannel? NewByteChannel (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.ISeekableByteChannel NewByteChannel(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewByteChannel(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member NewByteChannel : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.Channels.ISeekableByteChannel" Usage="Java.Nio.FileNio.Files.NewByteChannel (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newByteChannel", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newByteChannel", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to open or create</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Opens or creates a file, returning a seekable byte channel to access the
            file.</summary>
        <returns>a new seekable byte channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newByteChannel(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newByteChannel(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewByteChannel">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.ISeekableByteChannel? NewByteChannel (Java.Nio.FileNio.IPath? path, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;? options, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.ISeekableByteChannel NewByteChannel(class Java.Nio.FileNio.IPath path, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.IOpenOption&gt; options, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewByteChannel(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.IOpenOption},Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member NewByteChannel : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt; * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.Channels.ISeekableByteChannel" Usage="Java.Nio.FileNio.Files.NewByteChannel (path, options, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newByteChannel", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newByteChannel", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to open or create</param>
        <param name="options">options specifying how the file is opened</param>
        <param name="attrs">To be added.</param>
        <summary>Opens or creates a file, returning a seekable byte channel to access the
            file.</summary>
        <returns>a new seekable byte channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newByteChannel(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newByteChannel(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewDirectoryStream">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IDirectoryStream? NewDirectoryStream (Java.Nio.FileNio.IPath? dir);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IDirectoryStream NewDirectoryStream(class Java.Nio.FileNio.IPath dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewDirectoryStream(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member NewDirectoryStream : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IDirectoryStream" Usage="Java.Nio.FileNio.Files.NewDirectoryStream dir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IDirectoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="dir">the path to the directory</param>
        <summary>Opens a directory, returning a <c>DirectoryStream</c> to iterate over
            all entries in the directory.</summary>
        <returns>a new and open <c>DirectoryStream</c> object</returns>
        <remarks>
          <para>Opens a directory, returning a <c>DirectoryStream</c> to iterate over
            all entries in the directory. The elements returned by the directory
            stream's <c>DirectoryStream#iterator iterator</c> are of type <c>Path</c>, each one representing an entry in the directory. The <c>Path</c>
            objects are obtained as if by <c>Path#resolve(Path) resolving</c> the
            name of the directory entry against <c>dir</c>.</para>
          <para>When not using the try-with-resources construct, then directory
            stream's <c>close</c> method should be invoked after iteration is
            completed so as to free any resources held for the open directory.</para>
          <para>When an implementation supports operations on entries in the
            directory that execute in a race-free manner then the returned directory
            stream is a <c>SecureDirectoryStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newDirectoryStream(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newDirectoryStream(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewDirectoryStream">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IDirectoryStream? NewDirectoryStream (Java.Nio.FileNio.IPath? dir, Java.Nio.FileNio.IDirectoryStreamFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IDirectoryStream NewDirectoryStream(class Java.Nio.FileNio.IPath dir, class Java.Nio.FileNio.IDirectoryStreamFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewDirectoryStream(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IDirectoryStreamFilter)" />
      <MemberSignature Language="F#" Value="static member NewDirectoryStream : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IDirectoryStreamFilter -&gt; Java.Nio.FileNio.IDirectoryStream" Usage="Java.Nio.FileNio.Files.NewDirectoryStream (dir, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IDirectoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="filter" Type="Java.Nio.FileNio.IDirectoryStreamFilter" />
      </Parameters>
      <Docs>
        <param name="dir">the path to the directory</param>
        <param name="filter">To be added.</param>
        <summary>Opens a directory, returning a <c>DirectoryStream</c> to iterate over
            all entries in the directory.</summary>
        <returns>a new and open <c>DirectoryStream</c> object</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newDirectoryStream(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newDirectoryStream(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewDirectoryStream">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IDirectoryStream? NewDirectoryStream (Java.Nio.FileNio.IPath? dir, string? glob);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IDirectoryStream NewDirectoryStream(class Java.Nio.FileNio.IPath dir, string glob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewDirectoryStream(Java.Nio.FileNio.IPath,System.String)" />
      <MemberSignature Language="F#" Value="static member NewDirectoryStream : Java.Nio.FileNio.IPath * string -&gt; Java.Nio.FileNio.IDirectoryStream" Usage="Java.Nio.FileNio.Files.NewDirectoryStream (dir, glob)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newDirectoryStream", "(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IDirectoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="glob" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dir">the path to the directory</param>
        <param name="glob">the glob pattern</param>
        <summary>Opens a directory, returning a <c>DirectoryStream</c> to iterate over
            the entries in the directory.</summary>
        <returns>a new and open <c>DirectoryStream</c> object</returns>
        <remarks>
          <para>Opens a directory, returning a <c>DirectoryStream</c> to iterate over
            the entries in the directory. The elements returned by the directory
            stream's <c>DirectoryStream#iterator iterator</c> are of type <c>Path</c>, each one representing an entry in the directory. The <c>Path</c>
            objects are obtained as if by <c>Path#resolve(Path) resolving</c> the
            name of the directory entry against <c>dir</c>. The entries returned by
            the iterator are filtered by matching the <c>String</c> representation
            of their file names against the given &lt;em&gt;globbing&lt;/em&gt; pattern.</para>
          <para>For example, suppose we want to iterate over the files ending with
            ".java" in a directory:</para>
          <code lang="text/java">Path dir = ...
                try (DirectoryStream&amp;lt;Path&amp;gt; stream = Files.newDirectoryStream(dir, "*.java")) {
                    :
                }
            </code>
          <para>The globbing pattern is specified by the <c>FileSystem#getPathMatcher getPathMatcher</c> method.</para>
          <para>When not using the try-with-resources construct, then directory
            stream's <c>close</c> method should be invoked after iteration is
            completed so as to free any resources held for the open directory.</para>
          <para>When an implementation supports operations on entries in the
            directory that execute in a race-free manner then the returned directory
            stream is a <c>SecureDirectoryStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newDirectoryStream(java.nio.file.Path,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newDirectoryStream(java.nio.file.Path, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewInputStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream? NewInputStream (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream NewInputStream(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewInputStream(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member NewInputStream : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; System.IO.Stream" Usage="Java.Nio.FileNio.Files.NewInputStream (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newInputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newInputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to open</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Opens a file, returning an input stream to read from the file.</summary>
        <returns>a new input stream</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newInputStream(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewOutputStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream? NewOutputStream (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream NewOutputStream(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NewOutputStream(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member NewOutputStream : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; System.IO.Stream" Usage="Java.Nio.FileNio.Files.NewOutputStream (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newOutputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newOutputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to open or create</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Opens or creates a file, returning an output stream that may be used to
            write bytes to the file.</summary>
        <returns>a new output stream</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#newOutputStream(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotExists">
      <MemberSignature Language="C#" Value="public static bool NotExists (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool NotExists(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.NotExists(Java.Nio.FileNio.IPath,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member NotExists : Java.Nio.FileNio.IPath * Java.Nio.FileNio.LinkOption[] -&gt; bool" Usage="Java.Nio.FileNio.Files.NotExists (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("notExists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("notExists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file to test</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Tests whether the file located by this path does not exist.</summary>
        <returns>
          <c>true</c> if the file does not exist; <c>false</c> if the
                     file exists or its existence cannot be determined</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#notExists(java.nio.file.Path,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.notExists(java.nio.file.Path, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProbeContentType">
      <MemberSignature Language="C#" Value="public static string? ProbeContentType (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ProbeContentType(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ProbeContentType(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member ProbeContentType : Java.Nio.FileNio.IPath -&gt; string" Usage="Java.Nio.FileNio.Files.ProbeContentType path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("probeContentType", "(Ljava/nio/file/Path;)Ljava/lang/String;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("probeContentType", "(Ljava/nio/file/Path;)Ljava/lang/String;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file to probe</param>
        <summary>Probes the content type of a file.</summary>
        <returns>The content type of the file, or <c>null</c> if the content
                     type cannot be determined</returns>
        <remarks>
          <para>Probes the content type of a file.</para>
          <para>This method uses the installed <c>FileTypeDetector</c> implementations
            to probe the given file to determine its content type. Each file type
            detector's <c>FileTypeDetector#probeContentType probeContentType</c> is
            invoked, in turn, to probe the file type. If the file is recognized then
            the content type is returned. If the file is not recognized by any of the
            installed file type detectors then a system-default file type detector is
            invoked to guess the content type.</para>
          <para>A given invocation of the Java virtual machine maintains a system-wide
            list of file type detectors. Installed file type detectors are loaded
            using the service-provider loading facility defined by the <c>ServiceLoader</c>
            class. Installed file type detectors are loaded using the system class
            loader. If the system class loader cannot be found then the extension class
            loader is used; If the extension class loader cannot be found then the
            bootstrap class loader is used. File type detectors are typically installed
            by placing them in a JAR file on the application class path or in the
            extension directory, the JAR file contains a provider-configuration file
            named <c>java.nio.file.spi.FileTypeDetector</c> in the resource directory
            <c>META-INF/services</c>, and the file lists one or more fully-qualified
            names of concrete subclass of <c>FileTypeDetector</c> that have a zero
            argument constructor. If the process of locating or instantiating the
            installed file type detectors fails then an unspecified error is thrown.
            The ordering that installed providers are located is implementation
            specific.</para>
          <para>The return value of this method is the string form of the value of a
            Multipurpose Internet Mail Extension (MIME) content type as
            defined by <see href="http://www.ietf.org/rfc/rfc2045.txt"><i>RFC&amp;nbsp;2045:
            Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet
            Message Bodies</i></see>. The string is guaranteed to be parsable according
            to the grammar in the RFC.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#probeContentType(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.probeContentType(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[]? ReadAllBytes (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadAllBytes(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadAllBytes(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member ReadAllBytes : Java.Nio.FileNio.IPath -&gt; byte[]" Usage="Java.Nio.FileNio.Files.ReadAllBytes path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAllBytes", "(Ljava/nio/file/Path;)[B", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAllBytes", "(Ljava/nio/file/Path;)[B", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <summary>Reads all the bytes from a file.</summary>
        <returns>a byte array containing the bytes read from the file</returns>
        <remarks>
          <para>Reads all the bytes from a file. The method ensures that the file is
            closed when all bytes have been read or an I/O error, or other runtime
            exception, is thrown.</para>
          <para>Note that this method is intended for simple cases where it is
            convenient to read all bytes into a byte array. It is not intended for
            reading in large files.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readAllBytes(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readAllBytes(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;string&gt;? ReadAllLines (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;string&gt; ReadAllLines(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadAllLines(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member ReadAllLines : Java.Nio.FileNio.IPath -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="Java.Nio.FileNio.Files.ReadAllLines path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAllLines", "(Ljava/nio/file/Path;)Ljava/util/List;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAllLines", "(Ljava/nio/file/Path;)Ljava/util/List;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <summary>Read all lines from a file.</summary>
        <returns>the lines from the file as a <c>List</c>; whether the <c>List</c> is modifiable or not is implementation dependent and
                     therefore not specified</returns>
        <remarks>
          <para>Read all lines from a file. Bytes from the file are decoded into characters
            using the <c>StandardCharsets#UTF_8 UTF-8</c><c>Charset charset</c>.</para>
          <para>This method works as if invoking it were equivalent to evaluating the
            expression:</para>
          <code lang="text/java">{@code
            Files.readAllLines(path, StandardCharsets.UTF_8)
            }</code>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readAllLines(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readAllLines(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;string&gt;? ReadAllLines (Java.Nio.FileNio.IPath? path, Java.Nio.Charset.Charset? cs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;string&gt; ReadAllLines(class Java.Nio.FileNio.IPath path, class Java.Nio.Charset.Charset cs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadAllLines(Java.Nio.FileNio.IPath,Java.Nio.Charset.Charset)" />
      <MemberSignature Language="F#" Value="static member ReadAllLines : Java.Nio.FileNio.IPath * Java.Nio.Charset.Charset -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="Java.Nio.FileNio.Files.ReadAllLines (path, cs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAllLines", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAllLines", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="cs" Type="Java.Nio.Charset.Charset" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="cs">the charset to use for decoding</param>
        <summary>Read all lines from a file.</summary>
        <returns>the lines from the file as a <c>List</c>; whether the <c>List</c> is modifiable or not is implementation dependent and
                     therefore not specified</returns>
        <remarks>
          <para>Read all lines from a file. This method ensures that the file is
            closed when all bytes have been read or an I/O error, or other runtime
            exception, is thrown. Bytes from the file are decoded into characters
            using the specified charset.</para>
          <para>This method recognizes the following as line terminators:
            &lt;ul&gt;
              &lt;li&gt; <c>&amp;#92;u000D</c> followed by <c>&amp;#92;u000A</c>,
                CARRIAGE RETURN followed by LINE FEED &lt;/li&gt;
              &lt;li&gt; <c>&amp;#92;u000A</c>, LINE FEED &lt;/li&gt;
              &lt;li&gt; <c>&amp;#92;u000D</c>, CARRIAGE RETURN &lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>Additional Unicode line terminators may be recognized in future
            releases.</para>
          <para>Note that this method is intended for simple cases where it is
            convenient to read all lines in a single operation. It is not intended
            for reading in large files.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readAllLines(java.nio.file.Path,%20java.nio.charset.Charset)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributes">
      <MemberSignature Language="C#" Value="public static Java.Lang.Object? ReadAttributes (Java.Nio.FileNio.IPath? path, Java.Lang.Class? type, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Object ReadAttributes(class Java.Nio.FileNio.IPath path, class Java.Lang.Class type, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadAttributes(Java.Nio.FileNio.IPath,Java.Lang.Class,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member ReadAttributes : Java.Nio.FileNio.IPath * Java.Lang.Class * Java.Nio.FileNio.LinkOption[] -&gt; Java.Lang.Object" Usage="Java.Nio.FileNio.Files.ReadAttributes (path, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAttributes", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAttributes", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "A extends java.nio.file.attribute.BasicFileAttributes" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "A extends java.nio.file.attribute.BasicFileAttributes" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="type" Type="Java.Lang.Class" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="type">the <c>Class</c> of the file attributes required
                     to read</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Reads a file's attributes as a bulk operation.</summary>
        <returns>the file attributes</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readAttributes(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readAttributes(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,Java.Lang.Object&gt;? ReadAttributes (Java.Nio.FileNio.IPath? path, string? attributes, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, class Java.Lang.Object&gt; ReadAttributes(class Java.Nio.FileNio.IPath path, string attributes, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadAttributes(Java.Nio.FileNio.IPath,System.String,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member ReadAttributes : Java.Nio.FileNio.IPath * string * Java.Nio.FileNio.LinkOption[] -&gt; System.Collections.Generic.IDictionary&lt;string, Java.Lang.Object&gt;" Usage="Java.Nio.FileNio.Files.ReadAttributes (path, attributes, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAttributes", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAttributes", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Java.Lang.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attributes" Type="System.String" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="attributes">To be added.</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Reads a file's attributes as a bulk operation.</summary>
        <returns>the file attributes</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readAttributes(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readAttributes(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadSymbolicLink">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? ReadSymbolicLink (Java.Nio.FileNio.IPath? link);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath ReadSymbolicLink(class Java.Nio.FileNio.IPath link) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.ReadSymbolicLink(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member ReadSymbolicLink : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.ReadSymbolicLink link" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readSymbolicLink", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readSymbolicLink", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="link" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="link">the path to the symbolic link</param>
        <summary>Reads the target of a symbolic link <i>(optional operation)</i>.</summary>
        <returns>a <c>Path</c> object representing the target of the link</returns>
        <remarks>
          <para>Reads the target of a symbolic link <i>(optional operation)</i>.</para>
          <para>If the file system supports symbolic
            links then this method is used to read the target of the link, failing
            if the file is not a symbolic link. The target of the link need not exist.
            The returned <c>Path</c> object will be associated with the same file
            system as <c>link</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#readSymbolicLink(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.readSymbolicLink(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? SetAttribute (Java.Nio.FileNio.IPath? path, string? attribute, Java.Lang.Object? value, params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath SetAttribute(class Java.Nio.FileNio.IPath path, string attribute, class Java.Lang.Object value, class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.SetAttribute(Java.Nio.FileNio.IPath,System.String,Java.Lang.Object,Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="static member SetAttribute : Java.Nio.FileNio.IPath * string * Java.Lang.Object * Java.Nio.FileNio.LinkOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.SetAttribute (path, attribute, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="attribute" Type="System.String" />
        <Parameter Name="value" Type="Java.Lang.Object" />
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="attribute">the attribute to set</param>
        <param name="value">the attribute value</param>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Sets the value of a file attribute.</summary>
        <returns>the <c>path</c> parameter</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#setAttribute(java.nio.file.Path,%20java.lang.String,%20java.lang.Object,%20java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastModifiedTime">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? SetLastModifiedTime (Java.Nio.FileNio.IPath? path, Java.Nio.FileNio.Attributes.FileTime? time);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath SetLastModifiedTime(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.Attributes.FileTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.SetLastModifiedTime(Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.FileTime)" />
      <MemberSignature Language="F#" Value="static member SetLastModifiedTime : Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.FileTime -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.SetLastModifiedTime (path, time)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLastModifiedTime", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLastModifiedTime", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="time" Type="Java.Nio.FileNio.Attributes.FileTime" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="time">the new last modified time</param>
        <summary>Updates a file's last modified time attribute.</summary>
        <returns>the path</returns>
        <remarks>
          <para>Updates a file's last modified time attribute. The file time is converted
            to the epoch and precision supported by the file system. Converting from
            finer to coarser granularities result in precision loss. The behavior of
            this method when attempting to set the last modified time when it is not
            supported by the file system or is outside the range supported by the
            underlying file store is not defined. It may or not fail by throwing an
            <c>IOException</c>.</para>
          <para>&lt;b&gt;Usage Example:&lt;/b&gt;
            Suppose we want to set the last modified time to the current time:</para>
          <code lang="text/java">Path path = ...
               FileTime now = FileTime.fromMillis(System.currentTimeMillis());
               Files.setLastModifiedTime(path, now);
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#setLastModifiedTime(java.nio.file.Path,%20java.nio.file.attribute.FileTime)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.setLastModifiedTime(java.nio.file.Path, java.nio.file.attribute.FileTime)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOwner">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? SetOwner (Java.Nio.FileNio.IPath? path, Java.Nio.FileNio.Attributes.IUserPrincipal? owner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath SetOwner(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.Attributes.IUserPrincipal owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.SetOwner(Java.Nio.FileNio.IPath,Java.Nio.FileNio.Attributes.IUserPrincipal)" />
      <MemberSignature Language="F#" Value="static member SetOwner : Java.Nio.FileNio.IPath * Java.Nio.FileNio.Attributes.IUserPrincipal -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.SetOwner (path, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOwner", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/UserPrincipal;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOwner", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/UserPrincipal;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="owner" Type="Java.Nio.FileNio.Attributes.IUserPrincipal" />
      </Parameters>
      <Docs>
        <param name="path">The path to the file</param>
        <param name="owner">The new file owner</param>
        <summary>Updates the file owner.</summary>
        <returns>The path</returns>
        <remarks>
          <para>Updates the file owner.</para>
          <para>The <c>path</c> parameter is associated with a file system that
            supports <c>FileOwnerAttributeView</c>. This file attribute view provides
            access to a file attribute that is the owner of the file.</para>
          <para>&lt;b&gt;Usage Example:&lt;/b&gt;
            Suppose we want to make "joe" the owner of a file:</para>
          <code lang="text/java">Path path = ...
                UserPrincipalLookupService lookupService =
                    provider(path).getUserPrincipalLookupService();
                UserPrincipal joe = lookupService.lookupPrincipalByName("joe");
                Files.setOwner(path, joe);
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#setOwner(java.nio.file.Path,%20java.nio.file.attribute.UserPrincipal)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.setOwner(java.nio.file.Path, java.nio.file.attribute.UserPrincipal)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosixFilePermissions">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? SetPosixFilePermissions (Java.Nio.FileNio.IPath? path, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt;? perms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath SetPosixFilePermissions(class Java.Nio.FileNio.IPath path, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.Attributes.PosixFilePermission&gt; perms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.SetPosixFilePermissions(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.Attributes.PosixFilePermission})" />
      <MemberSignature Language="F#" Value="static member SetPosixFilePermissions : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt; -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.SetPosixFilePermissions (path, perms)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPosixFilePermissions", "(Ljava/nio/file/Path;Ljava/util/Set;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPosixFilePermissions", "(Ljava/nio/file/Path;Ljava/util/Set;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="perms" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.Attributes.PosixFilePermission&gt;" />
      </Parameters>
      <Docs>
        <param name="path">The path to the file</param>
        <param name="perms">The new set of permissions</param>
        <summary>Sets a file's POSIX permissions.</summary>
        <returns>The path</returns>
        <remarks>
          <para>Sets a file's POSIX permissions.</para>
          <para>The <c>path</c> parameter is associated with a <c>FileSystem</c>
            that supports the <c>PosixFileAttributeView</c>. This attribute view
            provides access to file attributes commonly associated with files on file
            systems used by operating systems that implement the Portable Operating
            System Interface (POSIX) family of standards.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#setPosixFilePermissions(java.nio.file.Path,%20java.util.Set%3Cjava.nio.file.attribute.PosixFilePermission%3E)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.setPosixFilePermissions(java.nio.file.Path, java.util.Set&lt;java.nio.file.attribute.PosixFilePermission&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static long Size (Java.Nio.FileNio.IPath? path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Size(class Java.Nio.FileNio.IPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Size(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="static member Size : Java.Nio.FileNio.IPath -&gt; int64" Usage="Java.Nio.FileNio.Files.Size path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("size", "(Ljava/nio/file/Path;)J", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("size", "(Ljava/nio/file/Path;)J", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <summary>Returns the size of a file (in bytes).</summary>
        <returns>the file size, in bytes</returns>
        <remarks>
          <para>Returns the size of a file (in bytes). The size may differ from the
            actual size on the file system due to compression, support for sparse
            files, or other reasons. The size of files that are not <c>#isRegularFile regular</c> files is implementation specific and
            therefore unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#size(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.size(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.Files.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.FileNio.Files.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.Files.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.FileNio.Files.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WalkFileTree">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? WalkFileTree (Java.Nio.FileNio.IPath? start, Java.Nio.FileNio.IFileVisitor? visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath WalkFileTree(class Java.Nio.FileNio.IPath start, class Java.Nio.FileNio.IFileVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.WalkFileTree(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IFileVisitor)" />
      <MemberSignature Language="F#" Value="static member WalkFileTree : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IFileVisitor -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.WalkFileTree (start, visitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("walkFileTree", "(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("walkFileTree", "(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="visitor" Type="Java.Nio.FileNio.IFileVisitor" />
      </Parameters>
      <Docs>
        <param name="start">the starting file</param>
        <param name="visitor">the file visitor to invoke for each file</param>
        <summary>Walks a file tree.</summary>
        <returns>the starting file</returns>
        <remarks>
          <para>Walks a file tree.</para>
          <para>This method works as if invoking it were equivalent to evaluating the
            expression:
            &lt;blockquote&gt;</para>
          <code lang="text/java">walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)
            </code>
          <para>&lt;/blockquote&gt;
            In other words, it does not follow symbolic links, and visits all levels
            of the file tree.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#walkFileTree(java.nio.file.Path,%20java.nio.file.FileVisitor%3C?%20super%20java.nio.file.Path%3E)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.walkFileTree(java.nio.file.Path, java.nio.file.FileVisitor&lt;? super java.nio.file.Path&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WalkFileTree">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? WalkFileTree (Java.Nio.FileNio.IPath? start, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.FileVisitOption&gt;? options, int maxDepth, Java.Nio.FileNio.IFileVisitor? visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath WalkFileTree(class Java.Nio.FileNio.IPath start, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.FileVisitOption&gt; options, int32 maxDepth, class Java.Nio.FileNio.IFileVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.WalkFileTree(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.FileVisitOption},System.Int32,Java.Nio.FileNio.IFileVisitor)" />
      <MemberSignature Language="F#" Value="static member WalkFileTree : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.FileVisitOption&gt; * int * Java.Nio.FileNio.IFileVisitor -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.WalkFileTree (start, options, maxDepth, visitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("walkFileTree", "(Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("walkFileTree", "(Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.FileVisitOption&gt;" />
        <Parameter Name="maxDepth" Type="System.Int32" />
        <Parameter Name="visitor" Type="Java.Nio.FileNio.IFileVisitor" />
      </Parameters>
      <Docs>
        <param name="start">the starting file</param>
        <param name="options">options to configure the traversal</param>
        <param name="maxDepth">the maximum number of directory levels to visit</param>
        <param name="visitor">the file visitor to invoke for each file</param>
        <summary>Walks a file tree.</summary>
        <returns>the starting file</returns>
        <remarks>
          <para>Walks a file tree.</para>
          <para>This method walks a file tree rooted at a given starting file. The
            file tree traversal is &lt;em&gt;depth-first&lt;/em&gt; with the given <c>FileVisitor</c> invoked for each file encountered. File tree traversal
            completes when all accessible files in the tree have been visited, or a
            visit method returns a result of <c>FileVisitResult#TERMINATE
            TERMINATE</c>. Where a visit method terminates due an <c>IOException</c>,
            an uncaught error, or runtime exception, then the traversal is terminated
            and the error or exception is propagated to the caller of this method.</para>
          <para>For each file encountered this method attempts to read its <c>java.nio.file.attribute.BasicFileAttributes</c>. If the file is not a
            directory then the <c>FileVisitor#visitFile visitFile</c> method is
            invoked with the file attributes. If the file attributes cannot be read,
            due to an I/O exception, then the <c>FileVisitor#visitFileFailed
            visitFileFailed</c> method is invoked with the I/O exception.</para>
          <para>Where the file is a directory, and the directory could not be opened,
            then the <c>visitFileFailed</c> method is invoked with the I/O exception,
            after which, the file tree walk continues, by default, at the next
            &lt;em&gt;sibling&lt;/em&gt; of the directory.</para>
          <para>Where the directory is opened successfully, then the entries in the
            directory, and their &lt;em&gt;descendants&lt;/em&gt; are visited. When all entries
            have been visited, or an I/O error occurs during iteration of the
            directory, then the directory is closed and the visitor's <c>FileVisitor#postVisitDirectory postVisitDirectory</c> method is invoked.
            The file tree walk then continues, by default, at the next &lt;em&gt;sibling&lt;/em&gt;
            of the directory.</para>
          <para>By default, symbolic links are not automatically followed by this
            method. If the <c>options</c> parameter contains the <c>FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS</c> option then symbolic links are
            followed. When following links, and the attributes of the target cannot
            be read, then this method attempts to get the <c>BasicFileAttributes</c>
            of the link. If they can be read then the <c>visitFile</c> method is
            invoked with the attributes of the link (otherwise the <c>visitFileFailed</c>
            method is invoked as specified above).</para>
          <para>If the <c>options</c> parameter contains the <c>FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS</c> option then this method keeps
            track of directories visited so that cycles can be detected. A cycle
            arises when there is an entry in a directory that is an ancestor of the
            directory. Cycle detection is done by recording the <c>java.nio.file.attribute.BasicFileAttributes#fileKey file-key</c> of directories,
            or if file keys are not available, by invoking the <c>#isSameFile
            isSameFile</c> method to test if a directory is the same file as an
            ancestor. When a cycle is detected it is treated as an I/O error, and the
            <c>FileVisitor#visitFileFailed visitFileFailed</c> method is invoked with
            an instance of <c>FileSystemLoopException</c>.</para>
          <para>The <c>maxDepth</c> parameter is the maximum number of levels of
            directories to visit. A value of <c>0</c> means that only the starting
            file is visited, unless denied by the security manager. A value of
            <c>Integer#MAX_VALUE MAX_VALUE</c> may be used to indicate that all
            levels should be visited. The <c>visitFile</c> method is invoked for all
            files, including directories, encountered at <c>maxDepth</c>, unless the
            basic file attributes cannot be read, in which case the <c>visitFileFailed</c> method is invoked.</para>
          <para>If a visitor returns a result of <c>null</c> then <c>NullPointerException</c> is thrown.</para>
          <para>When a security manager is installed and it denies access to a file
            (or directory), then it is ignored and the visitor is not invoked for
            that file (or directory).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#walkFileTree(java.nio.file.Path,%20java.util.Set%3Cjava.nio.file.FileVisitOption%3E,%20int,%20java.nio.file.FileVisitor%3C?%20super%20java.nio.file.Path%3E)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.walkFileTree(java.nio.file.Path, java.util.Set&lt;java.nio.file.FileVisitOption&gt;, int, java.nio.file.FileVisitor&lt;? super java.nio.file.Path&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Write (Java.Nio.FileNio.IPath? path, Java.Lang.IIterable? lines, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Write(class Java.Nio.FileNio.IPath path, class Java.Lang.IIterable lines, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Write(Java.Nio.FileNio.IPath,Java.Lang.IIterable,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Write : Java.Nio.FileNio.IPath * Java.Lang.IIterable * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.Write (path, lines, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="lines" Type="Java.Lang.IIterable" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="lines">an object to iterate over the char sequences</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Write lines of text to a file.</summary>
        <returns>the path</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.charset.Charset,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Write (Java.Nio.FileNio.IPath? path, byte[]? bytes, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Write(class Java.Nio.FileNio.IPath path, unsigned int8[] bytes, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Write(Java.Nio.FileNio.IPath,System.Byte[],Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Write : Java.Nio.FileNio.IPath * byte[] * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.Write (path, bytes, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="bytes">To be added.</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Write lines of text to a file.</summary>
        <returns>the path</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.charset.Charset,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Write (Java.Nio.FileNio.IPath? path, Java.Lang.IIterable? lines, Java.Nio.Charset.Charset? cs, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Write(class Java.Nio.FileNio.IPath path, class Java.Lang.IIterable lines, class Java.Nio.Charset.Charset cs, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.Files.Write(Java.Nio.FileNio.IPath,Java.Lang.IIterable,Java.Nio.Charset.Charset,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Write : Java.Nio.FileNio.IPath * Java.Lang.IIterable * Java.Nio.Charset.Charset * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.Files.Write (path, lines, cs, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/file/Path;Ljava/lang/Iterable;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/file/Path;Ljava/lang/Iterable;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="lines" Type="Java.Lang.IIterable" />
        <Parameter Name="cs" Type="Java.Nio.Charset.Charset" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="lines">an object to iterate over the char sequences</param>
        <param name="cs">the charset to use for encoding</param>
        <param name="options">options specifying how the file is opened</param>
        <summary>Write lines of text to a file.</summary>
        <returns>the path</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Files#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.charset.Charset,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
