<Type Name="IDirectoryStream" FullName="Java.Nio.FileNio.IDirectoryStream">
  <TypeSignature Language="VB.NET" Value="Public Interface IDirectoryStream&#xA;Implements ICloseable, IDisposable, IIterable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDirectoryStream : IDisposable, Java::Interop::IJavaPeerable, Java::IO::ICloseable, Java::Lang::IIterable" />
  <TypeSignature Language="C#" Value="public interface IDirectoryStream : IDisposable, Java.Interop.IJavaPeerable, Java.IO.ICloseable, Java.Lang.IIterable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDirectoryStream implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Lang.IIterable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.FileNio.IDirectoryStream" />
  <TypeSignature Language="F#" Value="type IDirectoryStream = interface&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IIterable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IIterable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/file/DirectoryStream", "", "Java.Nio.FileNio.IDirectoryStreamInvoker", ApiSince=26)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/file/DirectoryStream", "", "Java.Nio.FileNio.IDirectoryStreamInvoker", ApiSince=26)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="&lt;T&gt;&lt;T&gt;">The type of element returned by the iterator</param>
    <summary>An object to iterate over the entries in a directory.</summary>
    <remarks>
      <para>An object to iterate over the entries in a directory. A directory stream
            allows for the convenient use of the for-each construct to iterate over a
            directory.</para>
      <para>&lt;b&gt; While <c>DirectoryStream</c> extends <c>Iterable</c>, it is not a
            general-purpose <c>Iterable</c> as it supports only a single <c>Iterator</c>; invoking the <c>#iterator iterator</c> method to obtain a second
            or subsequent iterator throws <c>IllegalStateException</c>. &lt;/b&gt;</para>
      <para>An important property of the directory stream's <c>Iterator</c> is that
            its <c>Iterator#hasNext() hasNext</c> method is guaranteed to read-ahead by
            at least one element. If <c>hasNext</c> method returns <c>true</c>, and is
            followed by a call to the <c>next</c> method, it is guaranteed that the
            <c>next</c> method will not throw an exception due to an I/O error, or
            because the stream has been <c>#close closed</c>. The <c>Iterator</c> does
            not support the <c>Iterator#remove remove</c> operation.</para>
      <para>A <c>DirectoryStream</c> is opened upon creation and is closed by
            invoking the <c>close</c> method. Closing a directory stream releases any
            resources associated with the stream. Failure to close the stream may result
            in a resource leak. The try-with-resources statement provides a useful
            construct to ensure that the stream is closed:</para>
      <code lang="text/java">Path dir = ...
              try (DirectoryStream&amp;lt;Path&amp;gt; stream = Files.newDirectoryStream(dir)) {
                  for (Path entry: stream) {
                      ...
                  }
              }
            </code>
      <para>Once a directory stream is closed, then further access to the directory,
            using the <c>Iterator</c>, behaves as if the end of stream has been reached.
            Due to read-ahead, the <c>Iterator</c> may return one or more elements
            after the directory stream has been closed. Once these buffered elements
            have been read, then subsequent calls to the <c>hasNext</c> method returns
            <c>false</c>, and subsequent calls to the <c>next</c> method will throw
            <c>NoSuchElementException</c>.</para>
      <para>A directory stream is not required to be <i>asynchronously closeable</i>.
            If a thread is blocked on the directory stream's iterator reading from the
            directory, and another thread invokes the <c>close</c> method, then the
            second thread may block until the read operation is complete.</para>
      <para>If an I/O error is encountered when accessing the directory then it
            causes the <c>Iterator</c>'s <c>hasNext</c> or <c>next</c> methods to
            throw <c>DirectoryIteratorException</c> with the <c>IOException</c> as the
            cause. As stated above, the <c>hasNext</c> method is guaranteed to
            read-ahead by at least one element. This means that if <c>hasNext</c> method
            returns <c>true</c>, and is followed by a call to the <c>next</c> method,
            then it is guaranteed that the <c>next</c> method will not fail with a
            <c>DirectoryIteratorException</c>.</para>
      <para>The elements returned by the iterator are in no specific order. Some file
            systems maintain special links to the directory itself and the directory's
            parent directory. Entries representing these links are not returned by the
            iterator.</para>
      <para>The iterator is <i>weakly consistent</i>. It is thread safe but does not
            freeze the directory while iterating, so it may (or may not) reflect updates
            to the directory that occur after the <c>DirectoryStream</c> is created.</para>
      <para>&lt;b&gt;Usage Examples:&lt;/b&gt;
            Suppose we want a list of the source files in a directory. This example uses
            both the for-each and try-with-resources constructs.</para>
      <code lang="text/java">List&amp;lt;Path&amp;gt; listSourceFiles(Path dir) throws IOException {
                  List&amp;lt;Path&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
                  try (DirectoryStream&amp;lt;Path&amp;gt; stream = Files.newDirectoryStream(dir, "*.{c,h,cpp,hpp,java}")) {
                      for (Path entry: stream) {
                          result.add(entry);
                      }
                  } catch (DirectoryIteratorException ex) {
                      // I/O error encounted during the iteration, the cause is an IOException
                      throw ex.getCause();
                  }
                  return result;
              }
            </code>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/file/DirectoryStream" title="Reference documentation">Java documentation for <code>java.nio.file.DirectoryStream</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Iterator">
      <MemberSignature Language="VB.NET" Value="Public Function Iterator () As IIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::IIterator ^ Iterator();" />
      <MemberSignature Language="C#" Value="public Java.Util.IIterator? Iterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IIterator Iterator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IDirectoryStream.Iterator" />
      <MemberSignature Language="F#" Value="abstract member Iterator : unit -&gt; Java.Util.IIterator" Usage="iDirectoryStream.Iterator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IIterable.Iterator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler:Java.Nio.FileNio.IDirectoryStreamInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler:Java.Nio.FileNio.IDirectoryStreamInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IIterator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the iterator associated with this <c>DirectoryStream</c>.</summary>
        <returns>the iterator associated with this <c>DirectoryStream</c></returns>
        <remarks>
          <para>Returns the iterator associated with this <c>DirectoryStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/DirectoryStream#iterator()" title="Reference documentation">Java documentation for <code>java.nio.file.DirectoryStream.iterator()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
