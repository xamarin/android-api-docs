<Type Name="FileSystems" FullName="Java.Nio.FileNio.FileSystems">
  <TypeSignature Language="C#" Value="public sealed class FileSystems : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystems extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.FileNio.FileSystems" />
  <TypeSignature Language="F#" Value="type FileSystems = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/file/FileSystems", ApiSince=26, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/file/FileSystems", ApiSince=26, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Factory methods for file systems.</summary>
    <remarks>
      <para>Factory methods for file systems. This class defines the <c>#getDefault
            getDefault</c> method to get the default file system and factory methods to
            construct other types of file systems.</para>
      <para>The first invocation of any of the methods defined by this class causes
            the default <c>FileSystemProvider provider</c> to be loaded. The default
            provider, identified by the URI scheme "file", creates the <c>FileSystem</c>
            that provides access to the file systems accessible to the Java virtual
            machine. If the process of loading or initializing the default provider fails
            then an unspecified error is thrown.</para>
      <para>The first invocation of the <c>FileSystemProvider#installedProviders
            installedProviders</c> method, by way of invoking any of the <c>newFileSystem</c> methods defined by this class, locates and loads all
            installed file system providers. Installed providers are loaded using the
            service-provider loading facility defined by the <c>ServiceLoader</c> class.
            Installed providers are loaded using the system class loader. If the
            system class loader cannot be found then the extension class loader is used;
            if there is no extension class loader then the bootstrap class loader is used.
            Providers are typically installed by placing them in a JAR file on the
            application class path or in the extension directory, the JAR file contains a
            provider-configuration file named <c>java.nio.file.spi.FileSystemProvider</c>
            in the resource directory <c>META-INF/services</c>, and the file lists one or
            more fully-qualified names of concrete subclass of <c>FileSystemProvider</c>
            that have a zero argument constructor.
            The ordering that installed providers are located is implementation specific.
            If a provider is instantiated and its <c>FileSystemProvider#getScheme()
            getScheme</c> returns the same URI scheme of a provider that was previously
            instantiated then the most recently instantiated duplicate is discarded. URI
            schemes are compared without regard to case. During construction a provider
            may safely access files associated with the default provider but care needs
            to be taken to avoid circular loading of other installed providers. If
            circular loading of installed providers is detected then an unspecified error
            is thrown.</para>
      <para>This class also defines factory methods that allow a <c>ClassLoader</c>
            to be specified when locating a provider. As with installed providers, the
            provider classes are identified by placing the provider configuration file
            in the resource directory <c>META-INF/services</c>.</para>
      <para>If a thread initiates the loading of the installed file system providers
            and another thread invokes a method that also attempts to load the providers
            then the method will block until the loading completes.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/file/FileSystems" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileSystem? Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Nio.FileNio.FileSystem Default" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.FileSystems.Default" />
      <MemberSignature Language="F#" Value="static member Default : Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.FileSystems.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDefault", "()Ljava/nio/file/FileSystem;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDefault", "()Ljava/nio/file/FileSystem;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the default <c>FileSystem</c>.</summary>
        <value>the default file system</value>
        <remarks>
          <para>Returns the default <c>FileSystem</c>. The default file system creates
            objects that provide access to the file systems accessible to the Java
            virtual machine. The &lt;em&gt;working directory&lt;/em&gt; of the file system is
            the current user directory, named by the system property <c>user.dir</c>.
            This allows for interoperability with the <c>java.io.File java.io.File</c>
            class.</para>
          <para>The first invocation of any of the methods defined by this class
            locates the default <c>FileSystemProvider provider</c> object. Where the
            system property <c>java.nio.file.spi.DefaultFileSystemProvider</c> is
            not defined then the default provider is a system-default provider that
            is invoked to create the default file system.</para>
          <para>If the system property <c>java.nio.file.spi.DefaultFileSystemProvider</c>
            is defined then it is taken to be a list of one or more fully-qualified
            names of concrete provider classes identified by the URI scheme
            <c>"file"</c>. Where the property is a list of more than one name then
            the names are separated by a comma. Each class is loaded, using the system
            class loader, and instantiated by invoking a one argument constructor
            whose formal parameter type is <c>FileSystemProvider</c>. The providers
            are loaded and instantiated in the order they are listed in the property.
            If this process fails or a provider's scheme is not equal to <c>"file"</c>
            then an unspecified error is thrown. URI schemes are normally compared
            without regard to case but for the default provider, the scheme is
            required to be <c>"file"</c>. The first provider class is instantiated
            by invoking it with a reference to the system-default provider.
            The second provider class is instantiated by invoking it with a reference
            to the first provider instance. The third provider class is instantiated
            by invoking it with a reference to the second instance, and so on. The
            last provider to be instantiated becomes the default provider; its <c>getFileSystem</c> method is invoked with the URI <c>"file:///"</c> to
            get a reference to the default file system.</para>
          <para>Subsequent invocations of this method return the file system that was
            returned by the first invocation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/FileSystems#getDefault()" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems.getDefault()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystem">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileSystem? GetFileSystem (Java.Net.URI? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.FileSystem GetFileSystem(class Java.Net.URI uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.FileSystems.GetFileSystem(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="static member GetFileSystem : Java.Net.URI -&gt; Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.FileSystems.GetFileSystem uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFileSystem", "(Ljava/net/URI;)Ljava/nio/file/FileSystem;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFileSystem", "(Ljava/net/URI;)Ljava/nio/file/FileSystem;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to locate the file system</param>
        <summary>Returns a reference to an existing <c>FileSystem</c>.</summary>
        <returns>the reference to the file system</returns>
        <remarks>
          <para>Returns a reference to an existing <c>FileSystem</c>.</para>
          <para>This method iterates over the <c>FileSystemProvider#installedProviders()
            installed</c> providers to locate the provider that is identified by the URI
            <c>URI#getScheme scheme</c> of the given URI. URI schemes are compared
            without regard to case. The exact form of the URI is highly provider
            dependent. If found, the provider's <c>FileSystemProvider#getFileSystem
            getFileSystem</c> method is invoked to obtain a reference to the <c>FileSystem</c>.</para>
          <para>Once a file system created by this provider is <c>FileSystem#close
            closed</c> it is provider-dependent if this method returns a reference to
            the closed file system or throws <c>FileSystemNotFoundException</c>.
            If the provider allows a new file system to be created with the same URI
            as a file system it previously created then this method throws the
            exception if invoked after the file system is closed (and before a new
            instance is created by the <c>#newFileSystem newFileSystem</c> method).</para>
          <para>If a security manager is installed then a provider implementation
            may require to check a permission before returning a reference to an
            existing file system. In the case of the <c>FileSystems#getDefault
            default</c> file system, no permission check is required.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/FileSystems#getFileSystem(java.net.URI)" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems.getFileSystem(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.FileSystems.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.FileNio.FileSystems.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewFileSystem">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileSystem? NewFileSystem (Java.Net.URI? uri, System.Collections.Generic.IDictionary&lt;string,object&gt;? env);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.FileSystem NewFileSystem(class Java.Net.URI uri, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; env) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.FileSystems.NewFileSystem(Java.Net.URI,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="F#" Value="static member NewFileSystem : Java.Net.URI * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.FileSystems.NewFileSystem (uri, env)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newFileSystem", "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newFileSystem", "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
        <Parameter Name="env" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">the URI identifying the file system</param>
        <param name="env">a map of provider specific properties to configure the file system;
                     may be empty</param>
        <summary>Constructs a new file system that is identified by a <c>URI</c></summary>
        <returns>a new file system</returns>
        <remarks>
          <para>Constructs a new file system that is identified by a <c>URI</c></para>
          <para>This method iterates over the <c>FileSystemProvider#installedProviders()
            installed</c> providers to locate the provider that is identified by the URI
            <c>URI#getScheme scheme</c> of the given URI. URI schemes are compared
            without regard to case. The exact form of the URI is highly provider
            dependent. If found, the provider's <c>FileSystemProvider#newFileSystem(URI,Map)
            newFileSystem(URI,Map)</c> method is invoked to construct the new file system.</para>
          <para>Once a file system is <c>FileSystem#close closed</c> it is
            provider-dependent if the provider allows a new file system to be created
            with the same URI as a file system it previously created.</para>
          <para>&lt;b&gt;Usage Example:&lt;/b&gt;
            Suppose there is a provider identified by the scheme <c>"memory"</c>
            installed:</para>
          <code lang="text/java">Map&amp;lt;String,String&amp;gt; env = new HashMap&amp;lt;&amp;gt;();
              env.put("capacity", "16G");
              env.put("blockSize", "4k");
              FileSystem fs = FileSystems.newFileSystem(URI.create("memory:///?name=logfs"), env);
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/FileSystems#newFileSystem(java.net.URI,%20java.util.Map%3Cjava.lang.String,%20?%3E)" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems.newFileSystem(java.net.URI, java.util.Map&lt;java.lang.String, ?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewFileSystem">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileSystem? NewFileSystem (Java.Nio.FileNio.IPath? path, Java.Lang.ClassLoader? loader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.FileSystem NewFileSystem(class Java.Nio.FileNio.IPath path, class Java.Lang.ClassLoader loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.FileSystems.NewFileSystem(Java.Nio.FileNio.IPath,Java.Lang.ClassLoader)" />
      <MemberSignature Language="F#" Value="static member NewFileSystem : Java.Nio.FileNio.IPath * Java.Lang.ClassLoader -&gt; Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.FileSystems.NewFileSystem (path, loader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newFileSystem", "(Ljava/nio/file/Path;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newFileSystem", "(Ljava/nio/file/Path;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="loader" Type="Java.Lang.ClassLoader" />
      </Parameters>
      <Docs>
        <param name="path">the path to the file</param>
        <param name="loader">the class loader to locate the provider or <c>null</c> to only
                     attempt to locate an installed provider</param>
        <summary>Constructs a new <c>FileSystem</c> to access the contents of a file as a
            file system.</summary>
        <returns>a new file system</returns>
        <remarks>
          <para>Constructs a new <c>FileSystem</c> to access the contents of a file as a
            file system.</para>
          <para>This method makes use of specialized providers that create pseudo file
            systems where the contents of one or more files is treated as a file
            system.</para>
          <para>This method iterates over the <c>FileSystemProvider#installedProviders()
            installed</c> providers. It invokes, in turn, each provider's <c>FileSystemProvider#newFileSystem(Path,Map) newFileSystem(Path,Map)</c> method
            with an empty map. If a provider returns a file system then the iteration
            terminates and the file system is returned. If none of the installed
            providers return a <c>FileSystem</c> then an attempt is made to locate
            the provider using the given class loader. If a provider returns a file
            system then the lookup terminates and the file system is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/FileSystems#newFileSystem(java.nio.file.Path,%20java.lang.ClassLoader)" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems.newFileSystem(java.nio.file.Path, java.lang.ClassLoader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewFileSystem">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.FileSystem? NewFileSystem (Java.Net.URI? uri, System.Collections.Generic.IDictionary&lt;string,object&gt;? env, Java.Lang.ClassLoader? loader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.FileSystem NewFileSystem(class Java.Net.URI uri, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; env, class Java.Lang.ClassLoader loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.FileSystems.NewFileSystem(Java.Net.URI,System.Collections.Generic.IDictionary{System.String,System.Object},Java.Lang.ClassLoader)" />
      <MemberSignature Language="F#" Value="static member NewFileSystem : Java.Net.URI * System.Collections.Generic.IDictionary&lt;string, obj&gt; * Java.Lang.ClassLoader -&gt; Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.FileSystems.NewFileSystem (uri, env, loader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newFileSystem", "(Ljava/net/URI;Ljava/util/Map;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newFileSystem", "(Ljava/net/URI;Ljava/util/Map;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
        <Parameter Name="env" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="loader" Type="Java.Lang.ClassLoader" />
      </Parameters>
      <Docs>
        <param name="uri">the URI identifying the file system</param>
        <param name="env">a map of provider specific properties to configure the file system;
                     may be empty</param>
        <param name="loader">the class loader to locate the provider or <c>null</c> to only
                     attempt to locate an installed provider</param>
        <summary>Constructs a new file system that is identified by a <c>URI</c></summary>
        <returns>a new file system</returns>
        <remarks>
          <para>Constructs a new file system that is identified by a <c>URI</c></para>
          <para>This method first attempts to locate an installed provider in exactly
            the same manner as the <c>#newFileSystem(URI,Map) newFileSystem(URI,Map)</c>
            method. If none of the installed providers support the URI scheme then an
            attempt is made to locate the provider using the given class loader. If a
            provider supporting the URI scheme is located then its <c>FileSystemProvider#newFileSystem(URI,Map) newFileSystem(URI,Map)</c> is
            invoked to construct the new file system.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/FileSystems#newFileSystem(java.net.URI,%20java.util.Map%3Cjava.lang.String,%20?%3E,%20java.lang.ClassLoader)" title="Reference documentation">Java documentation for <code>java.nio.file.FileSystems.newFileSystem(java.net.URI, java.util.Map&lt;java.lang.String, ?&gt;, java.lang.ClassLoader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.FileSystems.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.FileNio.FileSystems.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.FileSystems.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.FileNio.FileSystems.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
