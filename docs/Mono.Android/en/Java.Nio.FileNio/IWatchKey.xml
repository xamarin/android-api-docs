<Type Name="IWatchKey" FullName="Java.Nio.FileNio.IWatchKey">
  <TypeSignature Language="C#" Value="public interface IWatchKey : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IWatchKey implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.FileNio.IWatchKey" />
  <TypeSignature Language="F#" Value="type IWatchKey = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/file/WatchKey", "", "Java.Nio.FileNio.IWatchKeyInvoker", ApiSince=26)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/file/WatchKey", "", "Java.Nio.FileNio.IWatchKeyInvoker", ApiSince=26)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A token representing the registration of a <c>Watchable watchable</c> object
            with a <c>WatchService</c>.</summary>
    <remarks>
      <para>A token representing the registration of a <c>Watchable watchable</c> object
            with a <c>WatchService</c>.</para>
      <para>A watch key is created when a watchable object is registered with a watch
            service. The key remains <c>#isValid valid</c> until:
            &lt;ol&gt;
              &lt;li&gt; It is cancelled, explicitly, by invoking its <c>#cancel cancel</c>
                method, or&lt;/li&gt;
              &lt;li&gt; Cancelled implicitly, because the object is no longer accessible,
                or &lt;/li&gt;
              &lt;li&gt; By <c>WatchService#close closing</c> the watch service. &lt;/li&gt;
            &lt;/ol&gt;</para>
      <para>A watch key has a state. When initially created the key is said to be
            &lt;em&gt;ready&lt;/em&gt;. When an event is detected then the key is &lt;em&gt;signalled&lt;/em&gt;
            and queued so that it can be retrieved by invoking the watch service's <c>WatchService#poll() poll</c> or <c>WatchService#take() take</c> methods. Once
            signalled, a key remains in this state until its <c>#reset reset</c> method
            is invoked to return the key to the ready state. Events detected while the
            key is in the signalled state are queued but do not cause the key to be
            re-queued for retrieval from the watch service. Events are retrieved by
            invoking the key's <c>#pollEvents pollEvents</c> method. This method
            retrieves and removes all events accumulated for the object. When initially
            created, a watch key has no pending events. Typically events are retrieved
            when the key is in the signalled state leading to the following idiom:</para>
      <code lang="text/java">for (;;) {
                    // retrieve key
                    WatchKey key = watcher.take();
            
                    // process events
                    for (WatchEvent&amp;lt;?&amp;gt; event: key.pollEvents()) {
                        :
                    }
            
                    // reset the key
                    boolean valid = key.reset();
                    if (!valid) {
                        // object no longer registered
                    }
                }
            </code>
      <para>Watch keys are safe for use by multiple concurrent threads. Where there
            are several threads retrieving signalled keys from a watch service then care
            should be taken to ensure that the <c>reset</c> method is only invoked after
            the events for the object have been processed. This ensures that one thread
            is processing the events for an object at any time.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/file/WatchKey" title="Reference documentation">Java documentation for <code>java.nio.file.WatchKey</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IWatchKey.Cancel" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit" Usage="iWatchKey.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "()V", "GetCancelHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "()V", "GetCancelHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the registration with the watch service.</summary>
        <remarks>
          <para>Cancels the registration with the watch service. Upon return the watch key
            will be invalid. If the watch key is enqueued, waiting to be retrieved
            from the watch service, then it will remain in the queue until it is
            removed. Pending events, if any, remain pending and may be retrieved by
            invoking the <c>#pollEvents pollEvents</c> method after the key is
            cancelled.</para>
          <para>If this watch key has already been cancelled then invoking this
            method has no effect.  Once cancelled, a watch key remains forever invalid.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/WatchKey#cancel()" title="Reference documentation">Java documentation for <code>java.nio.file.WatchKey.cancel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IWatchKey.IsValid" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="Java.Nio.FileNio.IWatchKey.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isValid", "()Z", "GetIsValidHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isValid", "()Z", "GetIsValidHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Java.Nio.FileNio.IWatchEvent&gt;? PollEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Java.Nio.FileNio.IWatchEvent&gt; PollEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IWatchKey.PollEvents" />
      <MemberSignature Language="F#" Value="abstract member PollEvents : unit -&gt; System.Collections.Generic.IList&lt;Java.Nio.FileNio.IWatchEvent&gt;" Usage="iWatchKey.PollEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pollEvents", "()Ljava/util/List;", "GetPollEventsHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pollEvents", "()Ljava/util/List;", "GetPollEventsHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Nio.FileNio.IWatchEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves and removes all pending events for this watch key, returning
            a <c>List</c> of the events that were retrieved.</summary>
        <returns>the list of the events retrieved; may be empty</returns>
        <remarks>
          <para>Retrieves and removes all pending events for this watch key, returning
            a <c>List</c> of the events that were retrieved.</para>
          <para>Note that this method does not wait if there are no events pending.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/WatchKey#pollEvents()" title="Reference documentation">Java documentation for <code>java.nio.file.WatchKey.pollEvents()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IWatchKey.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; bool" Usage="iWatchKey.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()Z", "GetResetHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()Z", "GetResetHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets this watch key.</summary>
        <returns>
          <c>true</c> if the watch key is valid and has been reset, and
                     <c>false</c> if the watch key could not be reset because it is
                     no longer <c>#isValid valid</c></returns>
        <remarks>
          <para>Resets this watch key.</para>
          <para>If this watch key has been cancelled or this watch key is already in
            the ready state then invoking this method has no effect. Otherwise
            if there are pending events for the object then this watch key is
            immediately re-queued to the watch service. If there are no pending
            events then the watch key is put into the ready state and will remain in
            that state until an event is detected or the watch key is cancelled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/WatchKey#reset()" title="Reference documentation">Java documentation for <code>java.nio.file.WatchKey.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Watchable">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IWatchable? Watchable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IWatchable Watchable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IWatchKey.Watchable" />
      <MemberSignature Language="F#" Value="abstract member Watchable : unit -&gt; Java.Nio.FileNio.IWatchable" Usage="iWatchKey.Watchable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("watchable", "()Ljava/nio/file/Watchable;", "GetWatchableHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("watchable", "()Ljava/nio/file/Watchable;", "GetWatchableHandler:Java.Nio.FileNio.IWatchKeyInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IWatchable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the object for which this watch key was created.</summary>
        <returns>the object for which this watch key was created</returns>
        <remarks>
          <para>Returns the object for which this watch key was created. This method will
            continue to return the object even after the key is cancelled.</para>
          <para>As the <c>WatchService</c> is intended to map directly on to the
            native file event notification facility (where available) then many of
            details on how registered objects are watched is highly implementation
            specific. When watching a directory for changes for example, and the
            directory is moved or renamed in the file system, there is no guarantee
            that the watch key will be cancelled and so the object returned by this
            method may no longer be a valid path to the directory.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/WatchKey#watchable()" title="Reference documentation">Java documentation for <code>java.nio.file.WatchKey.watchable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
