<Type Name="IPath" FullName="Java.Nio.FileNio.IPath">
  <TypeSignature Language="C#" Value="public interface IPath : IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IComparable, Java.Lang.IIterable, Java.Nio.FileNio.IWatchable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IPath implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IComparable, class Java.Lang.IIterable, class Java.Nio.FileNio.IWatchable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.FileNio.IPath" />
  <TypeSignature Language="F#" Value="type IPath = interface&#xA;    interface IComparable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IIterable&#xA;    interface IWatchable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IIterable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.FileNio.IWatchable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/file/Path", "", "Java.Nio.FileNio.IPathInvoker", ApiSince=26)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/file/Path", "", "Java.Nio.FileNio.IPathInvoker", ApiSince=26)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An object that may be used to locate a file in a file system.</summary>
    <remarks>
      <para>An object that may be used to locate a file in a file system. It will
            typically represent a system dependent file path.</para>
      <para>A <c>Path</c> represents a path that is hierarchical and composed of a
            sequence of directory and file name elements separated by a special separator
            or delimiter. A &lt;em&gt;root component&lt;/em&gt;, that identifies a file system
            hierarchy, may also be present. The name element that is &lt;em&gt;farthest&lt;/em&gt;
            from the root of the directory hierarchy is the name of a file or directory.
            The other name elements are directory names. A <c>Path</c> can represent a
            root, a root and a sequence of names, or simply one or more name elements.
            A <c>Path</c> is considered to be an <i>empty path</i> if it consists
            solely of one name element that is empty. Accessing a file using an
            <i>empty path</i> is equivalent to accessing the default directory of the
            file system. <c>Path</c> defines the <c>#getFileName() getFileName</c>,
            <c>#getParent getParent</c>, <c>#getRoot getRoot</c>, and <c>#subpath
            subpath</c> methods to access the path components or a subsequence of its name
            elements.</para>
      <para>In addition to accessing the components of a path, a <c>Path</c> also
            defines the <c>#resolve(Path) resolve</c> and <c>#resolveSibling(Path)
            resolveSibling</c> methods to combine paths. The <c>#relativize relativize</c>
            method that can be used to construct a relative path between two paths.
            Paths can be <c>#compareTo compared</c>, and tested against each other using
            the <c>#startsWith startsWith</c> and <c>#endsWith endsWith</c> methods.</para>
      <para>This interface extends <c>Watchable</c> interface so that a directory
            located by a path can be <c>#register registered</c> with a <c>WatchService</c> and entries in the directory watched.</para>
      <para>&lt;b&gt;WARNING:&lt;/b&gt; This interface is only intended to be implemented by
            those developing custom file system implementations. Methods may be added to
            this interface in future releases.</para>
      <para>&lt;h2&gt;Accessing Files&lt;/h2&gt;</para>
      <para>Paths may be used with the <c>Files</c> class to operate on files,
            directories, and other types of files. For example, suppose we want a <c>java.io.BufferedReader</c> to read text from a file "<c>access.log</c>". The
            file is located in a directory "<c>logs</c>" relative to the current working
            directory and is UTF-8 encoded.</para>
      <code lang="text/java">Path path = FileSystems.getDefault().getPath("logs", "access.log");
                BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
            </code>
      <para>"interop"&gt;&lt;h2&gt;Interoperability&lt;/h2&gt;</para>
      <para>Paths associated with the default <c>java.nio.file.spi.FileSystemProvider provider</c> are generally interoperable
            with the <c>java.io.File java.io.File</c> class. Paths created by other
            providers are unlikely to be interoperable with the abstract path names
            represented by <c>java.io.File</c>. The <c>java.io.File#toPath toPath</c>
            method may be used to obtain a <c>Path</c> from the abstract path name
            represented by a <c>java.io.File</c> object. The resulting <c>Path</c> can
            be used to operate on the same file as the <c>java.io.File</c> object. In
            addition, the <c>#toFile toFile</c> method is useful to construct a <c>File</c> from the <c>String</c> representation of a <c>Path</c>.
            
            &lt;h2&gt;Concurrency&lt;/h2&gt;</para>
      <para>Implementations of this interface are immutable and safe for use by
            multiple concurrent threads.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/file/Path" title="Reference documentation">Java documentation for <code>java.nio.file.Path</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.CompareTo(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Java.Nio.FileNio.IPath -&gt; int" Usage="iPath.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/nio/file/Path;)I", "GetCompareTo_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/nio/file/Path;)I", "GetCompareTo_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the path compared to this path.</param>
        <summary>Compares two abstract paths lexicographically.</summary>
        <returns>zero if the argument is <c>#equals equal</c> to this path, a
                     value less than zero if this path is lexicographically less than
                     the argument, or a value greater than zero if this path is
                     lexicographically greater than the argument</returns>
        <remarks>
          <para>Compares two abstract paths lexicographically. The ordering defined by
            this method is provider specific, and in the case of the default
            provider, platform specific. This method does not access the file system
            and neither file is required to exist.</para>
          <para>This method may not be used to compare paths that are associated
            with different file system providers.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#compareTo(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.compareTo(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndsWith(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.EndsWith(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member EndsWith : Java.Nio.FileNio.IPath -&gt; bool" Usage="iPath.EndsWith other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("endsWith", "(Ljava/nio/file/Path;)Z", "GetEndsWith_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("endsWith", "(Ljava/nio/file/Path;)Z", "GetEndsWith_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the given path</param>
        <summary>Tests if this path ends with the given path.</summary>
        <returns>
          <c>true</c> if this path ends with the given path; otherwise
                     <c>false</c></returns>
        <remarks>
          <para>Tests if this path ends with the given path.</para>
          <para>If the given path has &lt;em&gt;N&lt;/em&gt; elements, and no root component,
            and this path has &lt;em&gt;N&lt;/em&gt; or more elements, then this path ends with
            the given path if the last &lt;em&gt;N&lt;/em&gt; elements of each path, starting at
            the element farthest from the root, are equal.</para>
          <para>If the given path has a root component then this path ends with the
            given path if the root component of this path &lt;em&gt;ends with&lt;/em&gt; the root
            component of the given path, and the corresponding elements of both paths
            are equal. Whether or not the root component of this path ends with the
            root component of the given path is file system specific. If this path
            does not have a root component and the given path has a root component
            then this path does not end with the given path.</para>
          <para>If the given path is associated with a different <c>FileSystem</c>
            to this path then <c>false</c> is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#endsWith(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.endsWith(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndsWith(string other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.EndsWith(System.String)" />
      <MemberSignature Language="F#" Value="abstract member EndsWith : string -&gt; bool" Usage="iPath.EndsWith other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("endsWith", "(Ljava/lang/String;)Z", "GetEndsWith_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("endsWith", "(Ljava/lang/String;)Z", "GetEndsWith_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="other">the given path string</param>
        <summary>Tests if this path ends with a <c>Path</c>, constructed by converting
            the given path string, in exactly the manner specified by the <c>#endsWith(Path) endsWith(Path)</c> method.</summary>
        <returns>
          <c>true</c> if this path ends with the given path; otherwise
                     <c>false</c></returns>
        <remarks>
          <para>Tests if this path ends with a <c>Path</c>, constructed by converting
            the given path string, in exactly the manner specified by the <c>#endsWith(Path) endsWith(Path)</c> method. On UNIX for example, the path
            "<c>foo/bar</c>" ends with "<c>foo/bar</c>" and "<c>bar</c>". It does
            not end with "<c>r</c>" or "<c>/bar</c>". Note that trailing separators
            are not taken into account, and so invoking this method on the <c>Path</c>"<c>foo/bar</c>" with the <c>String</c> "<c>bar/</c>" returns
            <c>true</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#endsWith(java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.endsWith(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Java.Lang.Object? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Java.Lang.Object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Equals(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Equals : Java.Lang.Object -&gt; bool" Usage="iPath.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("equals", "(Ljava/lang/Object;)Z", "GetEquals_Ljava_lang_Object_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("equals", "(Ljava/lang/Object;)Z", "GetEquals_Ljava_lang_Object_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="other">the object to which this object is to be compared</param>
        <summary>Tests this path for equality with the given object.</summary>
        <returns>
          <c>true</c> if, and only if, the given object is a <c>Path</c>
                     that is identical to this <c>Path</c></returns>
        <remarks>
          <para>Tests this path for equality with the given object.</para>
          <para>If the given object is not a Path, or is a Path associated with a
            different <c>FileSystem</c>, then this method returns <c>false</c>.</para>
          <para>Whether or not two path are equal depends on the file system
            implementation. In some cases the paths are compared without regard
            to case, and others are case sensitive. This method does not access the
            file system and the file is not required to exist. Where required, the
            <c>Files#isSameFile isSameFile</c> method may be used to check if two
            paths locate the same file.</para>
          <para>This method satisfies the general contract of the <c>java.lang.Object#equals(Object) Object.equals</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#equals(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.equals(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Nio.FileNio.IPath FileName" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.FileName" />
      <MemberSignature Language="F#" Value="member this.FileName : Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.IPath.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFileName", "()Ljava/nio/file/Path;", "GetGetFileNameHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFileName", "()Ljava/nio/file/Path;", "GetGetFileNameHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileSystem">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.FileSystem? FileSystem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Nio.FileNio.FileSystem FileSystem" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.FileSystem" />
      <MemberSignature Language="F#" Value="member this.FileSystem : Java.Nio.FileNio.FileSystem" Usage="Java.Nio.FileNio.IPath.FileSystem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFileSystem", "()Ljava/nio/file/FileSystem;", "GetGetFileSystemHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFileSystem", "()Ljava/nio/file/FileSystem;", "GetGetFileSystemHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.FileSystem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.GetHashCode" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="iPath.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hashCode", "()I", "GetGetHashCodeHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hashCode", "()I", "GetGetHashCodeHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Computes a hash code for this path.</summary>
        <returns>the hash-code value for this path</returns>
        <remarks>
          <para>Computes a hash code for this path.</para>
          <para>The hash code is based upon the components of the path, and
            satisfies the general contract of the <c>Object#hashCode
            Object.hashCode</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#hashCode()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.hashCode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? GetName (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath GetName(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.GetName(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetName : int -&gt; Java.Nio.FileNio.IPath" Usage="iPath.GetName index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getName", "(I)Ljava/nio/file/Path;", "GetGetName_IHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getName", "(I)Ljava/nio/file/Path;", "GetGetName_IHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the element</param>
        <summary>Returns a name element of this path as a <c>Path</c> object.</summary>
        <returns>the name element</returns>
        <remarks>
          <para>Returns a name element of this path as a <c>Path</c> object.</para>
          <para>The <c>index</c> parameter is the index of the name element to return.
            The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy
            has index <c>0</c>. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root
            has index <c>#getNameCount count</c><c>-1</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#getName(int)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.getName(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbsolute">
      <MemberSignature Language="C#" Value="public bool IsAbsolute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsolute" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.IsAbsolute" />
      <MemberSignature Language="F#" Value="member this.IsAbsolute : bool" Usage="Java.Nio.FileNio.IPath.IsAbsolute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAbsolute", "()Z", "GetIsAbsoluteHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isAbsolute", "()Z", "GetIsAbsoluteHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Iterator">
      <MemberSignature Language="C#" Value="public Java.Util.IIterator? Iterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IIterator Iterator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Iterator" />
      <MemberSignature Language="F#" Value="abstract member Iterator : unit -&gt; Java.Util.IIterator" Usage="iPath.Iterator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IIterable.Iterator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IIterator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an iterator over the name elements of this path.</summary>
        <returns>an iterator over the name elements of this path.</returns>
        <remarks>
          <para>Returns an iterator over the name elements of this path.</para>
          <para>The first element returned by the iterator represents the name
            element that is closest to the root in the directory hierarchy, the
            second element is the next closest, and so on. The last element returned
            is the name of the file or directory denoted by this path. The <c>#getRoot root</c> component, if present, is not returned by the iterator.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#iterator()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.iterator()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameCount">
      <MemberSignature Language="C#" Value="public int NameCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NameCount" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.NameCount" />
      <MemberSignature Language="F#" Value="member this.NameCount : int" Usage="Java.Nio.FileNio.IPath.NameCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNameCount", "()I", "GetGetNameCountHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNameCount", "()I", "GetGetNameCountHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Normalize" />
      <MemberSignature Language="F#" Value="abstract member Normalize : unit -&gt; Java.Nio.FileNio.IPath" Usage="iPath.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("normalize", "()Ljava/nio/file/Path;", "GetNormalizeHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("normalize", "()Ljava/nio/file/Path;", "GetNormalizeHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a path that is this path with redundant name elements eliminated.</summary>
        <returns>the resulting path or this path if it does not contain
                     redundant name elements; an empty path is returned if this path
                     does have a root component and all name elements are redundant</returns>
        <remarks>
          <para>Returns a path that is this path with redundant name elements eliminated.</para>
          <para>The precise definition of this method is implementation dependent but
            in general it derives from this path, a path that does not contain
            &lt;em&gt;redundant&lt;/em&gt; name elements. In many file systems, the "<c>.</c>"
            and "<c>..</c>" are special names used to indicate the current directory
            and parent directory. In such file systems all occurrences of "<c>.</c>"
            are considered redundant. If a "<c>..</c>" is preceded by a
            non-"<c>..</c>" name then both names are considered redundant (the
            process to identify such names is repeated until it is no longer
            applicable).</para>
          <para>This method does not access the file system; the path may not locate
            a file that exists. Eliminating "<c>..</c>" and a preceding name from a
            path may result in the path that locates a different file than the original
            path. This can arise when the preceding name is a symbolic link.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#normalize()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.normalize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Of">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Of (Java.Net.URI? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Of(class Java.Net.URI uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Of(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="static member Of : Java.Net.URI -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.IPath.Of uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("of", "(Ljava/net/URI;)Ljava/nio/file/Path;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("of", "(Ljava/net/URI;)Ljava/nio/file/Path;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to convert</param>
        <summary>Returns a <c>Path</c> by converting a URI.</summary>
        <returns>the resulting <c>Path</c></returns>
        <remarks>
          <para>Returns a <c>Path</c> by converting a URI.</para>
          <para>This method iterates over the <c>FileSystemProvider#installedProviders()
            installed</c> providers to locate the provider that is identified by the
            URI <c>URI#getScheme scheme</c> of the given URI. URI schemes are
            compared without regard to case. If the provider is found then its <c>FileSystemProvider#getPath getPath</c> method is invoked to convert the
            URI.</para>
          <para>In the case of the default provider, identified by the URI scheme
            "file", the given URI has a non-empty path component, and undefined query
            and fragment components. Whether the authority component may be present
            is platform specific. The returned <c>Path</c> is associated with the
            <c>FileSystems#getDefault default</c> file system.</para>
          <para>The default provider provides a similar &lt;em&gt;round-trip&lt;/em&gt; guarantee
            to the <c>java.io.File</c> class. For a given <c>Path</c><i>p</i> it
            is guaranteed that
            &lt;blockquote&gt;<c>Path.of(</c><i>p</i><c>.</c><c>Path#toUri() toUri</c><c>()).equals(</c><i>p</i><c>.</c><c>Path#toAbsolutePath() toAbsolutePath</c><c>())</c>&lt;/blockquote&gt;
            so long as the original <c>Path</c>, the <c>URI</c>, and the new <c>Path</c> are all created in (possibly different invocations of) the same
            Java virtual machine. Whether other providers make any guarantees is
            provider specific and therefore unspecified.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#of(java.net.URI)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.of(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Of">
      <MemberSignature Language="C#" Value="public static Java.Nio.FileNio.IPath? Of (string? first, params string[]? more);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.FileNio.IPath Of(string first, string[] more) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Of(System.String,System.String[])" />
      <MemberSignature Language="F#" Value="static member Of : string * string[] -&gt; Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.IPath.Of (first, more)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("of", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("of", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.String" />
        <Parameter Name="more" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="more">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Nio.FileNio.IPath Parent" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.IPath.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParent", "()Ljava/nio/file/Path;", "GetGetParentHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParent", "()Ljava/nio/file/Path;", "GetGetParentHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IWatchKey? Register (Java.Nio.FileNio.IWatchService? watcher, params Java.Nio.FileNio.IWatchEventKind[]? events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IWatchKey Register(class Java.Nio.FileNio.IWatchService watcher, class Java.Nio.FileNio.IWatchEventKind[] events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Register(Java.Nio.FileNio.IWatchService,Java.Nio.FileNio.IWatchEventKind[])" />
      <MemberSignature Language="F#" Value="abstract member Register : Java.Nio.FileNio.IWatchService * Java.Nio.FileNio.IWatchEventKind[] -&gt; Java.Nio.FileNio.IWatchKey" Usage="iPath.Register (watcher, events)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.FileNio.IWatchable.Register(Java.Nio.FileNio.IWatchService,Java.Nio.FileNio.IWatchEventKind[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;)Ljava/nio/file/WatchKey;", "GetRegister_Ljava_nio_file_WatchService_arrayLjava_nio_file_WatchEvent_Kind_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;)Ljava/nio/file/WatchKey;", "GetRegister_Ljava_nio_file_WatchService_arrayLjava_nio_file_WatchEvent_Kind_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IWatchKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="watcher" Type="Java.Nio.FileNio.IWatchService" />
        <Parameter Name="events" Type="Java.Nio.FileNio.IWatchEventKind[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="watcher">The watch service to which this object is to be registered</param>
        <param name="events">The events for which this object should be registered</param>
        <summary>Registers the file located by this path with a watch service.</summary>
        <returns>A key representing the registration of this object with the
                     given watch service</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#register(java.nio.file.WatchService,%20java.nio.file.Kind)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.register(java.nio.file.WatchService, java.nio.file.Kind)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IWatchKey? Register (Java.Nio.FileNio.IWatchService? watcher, Java.Nio.FileNio.IWatchEventKind[]? events, params Java.Nio.FileNio.IWatchEventModifier[]? modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IWatchKey Register(class Java.Nio.FileNio.IWatchService watcher, class Java.Nio.FileNio.IWatchEventKind[] events, class Java.Nio.FileNio.IWatchEventModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Register(Java.Nio.FileNio.IWatchService,Java.Nio.FileNio.IWatchEventKind[],Java.Nio.FileNio.IWatchEventModifier[])" />
      <MemberSignature Language="F#" Value="abstract member Register : Java.Nio.FileNio.IWatchService * Java.Nio.FileNio.IWatchEventKind[] * Java.Nio.FileNio.IWatchEventModifier[] -&gt; Java.Nio.FileNio.IWatchKey" Usage="iPath.Register (watcher, events, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.FileNio.IWatchable.Register(Java.Nio.FileNio.IWatchService,Java.Nio.FileNio.IWatchEventKind[],Java.Nio.FileNio.IWatchEventModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;[Ljava/nio/file/WatchEvent$Modifier;)Ljava/nio/file/WatchKey;", "GetRegister_Ljava_nio_file_WatchService_arrayLjava_nio_file_WatchEvent_Kind_arrayLjava_nio_file_WatchEvent_Modifier_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;[Ljava/nio/file/WatchEvent$Modifier;)Ljava/nio/file/WatchKey;", "GetRegister_Ljava_nio_file_WatchService_arrayLjava_nio_file_WatchEvent_Kind_arrayLjava_nio_file_WatchEvent_Modifier_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IWatchKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="watcher" Type="Java.Nio.FileNio.IWatchService" />
        <Parameter Name="events" Type="Java.Nio.FileNio.IWatchEventKind[]" />
        <Parameter Name="modifiers" Type="Java.Nio.FileNio.IWatchEventModifier[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="watcher">The watch service to which this object is to be registered</param>
        <param name="events">The events for which this object should be registered</param>
        <param name="modifiers">To be added.</param>
        <summary>Registers the file located by this path with a watch service.</summary>
        <returns>A key representing the registration of this object with the
                     given watch service</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#register(java.nio.file.WatchService,%20java.nio.file.Kind)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.register(java.nio.file.WatchService, java.nio.file.Kind)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relativize">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Relativize (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath Relativize(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Relativize(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member Relativize : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IPath" Usage="iPath.Relativize other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("relativize", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetRelativize_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("relativize", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetRelativize_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the path to relativize against this path</param>
        <summary>Constructs a relative path between this path and a given path.</summary>
        <returns>the resulting relative path, or an empty path if both paths are
                     equal</returns>
        <remarks>
          <para>Constructs a relative path between this path and a given path.</para>
          <para>Relativization is the inverse of <c>#resolve(Path) resolution</c>.
            This method attempts to construct a <c>#isAbsolute relative</c> path
            that when <c>#resolve(Path) resolved</c> against this path, yields a
            path that locates the same file as the given path. For example, on UNIX,
            if this path is <c>"/a/b"</c> and the given path is <c>"/a/b/c/d"</c>
            then the resulting relative path would be <c>"c/d"</c>. Where this
            path and the given path do not have a <c>#getRoot root</c> component,
            then a relative path can be constructed. A relative path cannot be
            constructed if only one of the paths have a root component. Where both
            paths have a root component then it is implementation dependent if a
            relative path can be constructed. If this path and the given path are
            <c>#equals equal</c> then an <i>empty path</i> is returned.</para>
          <para>For any two <c>#normalize normalized</c> paths <i>p</i> and
            <i>q</i>, where <i>q</i> does not have a root component,
            &lt;blockquote&gt;
              <i>p</i><c>.relativize(</c><i>p</i><c>.resolve(</c><i>q</i><c>)).equals(</c><i>q</i><c>)</c>&lt;/blockquote&gt;</para>
          <para>When symbolic links are supported, then whether the resulting path,
            when resolved against this path, yields a path that can be used to locate
            the <c>Files#isSameFile same</c> file as <c>other</c> is implementation
            dependent. For example, if this path is  <c>"/a/b"</c> and the given
            path is <c>"/a/x"</c> then the resulting relative path may be <c>"../x"</c>. If <c>"b"</c> is a symbolic link then is implementation
            dependent if <c>"a/b/../x"</c> would locate the same file as <c>"/a/x"</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#relativize(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.relativize(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Resolve (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath Resolve(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Resolve(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member Resolve : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IPath" Usage="iPath.Resolve other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolve", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetResolve_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolve", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetResolve_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the path to resolve against this path</param>
        <summary>Resolve the given path against this path.</summary>
        <returns>the resulting path</returns>
        <remarks>
          <para>Resolve the given path against this path.</para>
          <para>If the <c>other</c> parameter is an <c>#isAbsolute() absolute</c>
            path then this method trivially returns <c>other</c>. If <c>other</c>
            is an <i>empty path</i> then this method trivially returns this path.
            Otherwise this method considers this path to be a directory and resolves
            the given path against this path. In the simplest case, the given path
            does not have a <c>#getRoot root</c> component, in which case this method
            &lt;em&gt;joins&lt;/em&gt; the given path to this path and returns a resulting path
            that <c>#endsWith ends</c> with the given path. Where the given path has
            a root component then resolution is highly implementation dependent and
            therefore unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#resolve(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.resolve(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Resolve (string? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath Resolve(string other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Resolve(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string -&gt; Java.Nio.FileNio.IPath" Usage="iPath.Resolve other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolve", "(Ljava/lang/String;)Ljava/nio/file/Path;", "GetResolve_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolve", "(Ljava/lang/String;)Ljava/nio/file/Path;", "GetResolve_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="other">the path string to resolve against this path</param>
        <summary>Converts a given path string to a <c>Path</c> and resolves it against
            this <c>Path</c> in exactly the manner specified by the <c>#resolve(Path) resolve</c> method.</summary>
        <returns>the resulting path</returns>
        <remarks>
          <para>Converts a given path string to a <c>Path</c> and resolves it against
            this <c>Path</c> in exactly the manner specified by the <c>#resolve(Path) resolve</c> method. For example, suppose that the name
            separator is "<c>/</c>" and a path represents "<c>foo/bar</c>", then
            invoking this method with the path string "<c>gus</c>" will result in
            the <c>Path</c> "<c>foo/bar/gus</c>".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#resolve(java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.resolve(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveSibling">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? ResolveSibling (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath ResolveSibling(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ResolveSibling(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member ResolveSibling : Java.Nio.FileNio.IPath -&gt; Java.Nio.FileNio.IPath" Usage="iPath.ResolveSibling other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolveSibling", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetResolveSibling_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolveSibling", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;", "GetResolveSibling_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the path to resolve against this path's parent</param>
        <summary>Resolves the given path against this path's <c>#getParent parent</c>
            path.</summary>
        <returns>the resulting path</returns>
        <remarks>
          <para>Resolves the given path against this path's <c>#getParent parent</c>
            path. This is useful where a file name needs to be <i>replaced</i> with
            another file name. For example, suppose that the name separator is
            "<c>/</c>" and a path represents "<c>dir1/dir2/foo</c>", then invoking
            this method with the <c>Path</c> "<c>bar</c>" will result in the <c>Path</c> "<c>dir1/dir2/bar</c>". If this path does not have a parent path,
            or <c>other</c> is <c>#isAbsolute() absolute</c>, then this method
            returns <c>other</c>. If <c>other</c> is an empty path then this method
            returns this path's parent, or where this path doesn't have a parent, the
            empty path.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#resolveSibling(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.resolveSibling(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveSibling">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? ResolveSibling (string? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath ResolveSibling(string other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ResolveSibling(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ResolveSibling : string -&gt; Java.Nio.FileNio.IPath" Usage="iPath.ResolveSibling other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolveSibling", "(Ljava/lang/String;)Ljava/nio/file/Path;", "GetResolveSibling_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolveSibling", "(Ljava/lang/String;)Ljava/nio/file/Path;", "GetResolveSibling_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="other">the path string to resolve against this path's parent</param>
        <summary>Converts a given path string to a <c>Path</c> and resolves it against
            this path's <c>#getParent parent</c> path in exactly the manner
            specified by the <c>#resolveSibling(Path) resolveSibling</c> method.</summary>
        <returns>the resulting path</returns>
        <remarks>
          <para>Converts a given path string to a <c>Path</c> and resolves it against
            this path's <c>#getParent parent</c> path in exactly the manner
            specified by the <c>#resolveSibling(Path) resolveSibling</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#resolveSibling(java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.resolveSibling(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Nio.FileNio.IPath Root" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.FileNio.IPath.Root" />
      <MemberSignature Language="F#" Value="member this.Root : Java.Nio.FileNio.IPath" Usage="Java.Nio.FileNio.IPath.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRoot", "()Ljava/nio/file/Path;", "GetGetRootHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRoot", "()Ljava/nio/file/Path;", "GetGetRootHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (Java.Nio.FileNio.IPath? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartsWith(class Java.Nio.FileNio.IPath other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.StartsWith(Java.Nio.FileNio.IPath)" />
      <MemberSignature Language="F#" Value="abstract member StartsWith : Java.Nio.FileNio.IPath -&gt; bool" Usage="iPath.StartsWith other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startsWith", "(Ljava/nio/file/Path;)Z", "GetStartsWith_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startsWith", "(Ljava/nio/file/Path;)Z", "GetStartsWith_Ljava_nio_file_Path_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Nio.FileNio.IPath" />
      </Parameters>
      <Docs>
        <param name="other">the given path</param>
        <summary>Tests if this path starts with the given path.</summary>
        <returns>
          <c>true</c> if this path starts with the given path; otherwise
                     <c>false</c></returns>
        <remarks>
          <para>Tests if this path starts with the given path.</para>
          <para>This path &lt;em&gt;starts&lt;/em&gt; with the given path if this path's root
            component &lt;em&gt;starts&lt;/em&gt; with the root component of the given path,
            and this path starts with the same name elements as the given path.
            If the given path has more name elements than this path then <c>false</c>
            is returned.</para>
          <para>Whether or not the root component of this path starts with the root
            component of the given path is file system specific. If this path does
            not have a root component and the given path has a root component then
            this path does not start with the given path.</para>
          <para>If the given path is associated with a different <c>FileSystem</c>
            to this path then <c>false</c> is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#startsWith(java.nio.file.Path)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.startsWith(java.nio.file.Path)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartsWith(string other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.StartsWith(System.String)" />
      <MemberSignature Language="F#" Value="abstract member StartsWith : string -&gt; bool" Usage="iPath.StartsWith other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startsWith", "(Ljava/lang/String;)Z", "GetStartsWith_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startsWith", "(Ljava/lang/String;)Z", "GetStartsWith_Ljava_lang_String_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="other">the given path string</param>
        <summary>Tests if this path starts with a <c>Path</c>, constructed by converting
            the given path string, in exactly the manner specified by the <c>#startsWith(Path) startsWith(Path)</c> method.</summary>
        <returns>
          <c>true</c> if this path starts with the given path; otherwise
                     <c>false</c></returns>
        <remarks>
          <para>Tests if this path starts with a <c>Path</c>, constructed by converting
            the given path string, in exactly the manner specified by the <c>#startsWith(Path) startsWith(Path)</c> method. On UNIX for example, the path
            "<c>foo/bar</c>" starts with "<c>foo</c>" and "<c>foo/bar</c>". It
            does not start with "<c>f</c>" or "<c>fo</c>".</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#startsWith(java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.startsWith(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subpath">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? Subpath (int beginIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath Subpath(int32 beginIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.Subpath(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Subpath : int * int -&gt; Java.Nio.FileNio.IPath" Usage="iPath.Subpath (beginIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("subpath", "(II)Ljava/nio/file/Path;", "GetSubpath_IIHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("subpath", "(II)Ljava/nio/file/Path;", "GetSubpath_IIHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beginIndex">the index of the first element, inclusive</param>
        <param name="endIndex">the index of the last element, exclusive</param>
        <summary>Returns a relative <c>Path</c> that is a subsequence of the name
            elements of this path.</summary>
        <returns>a new <c>Path</c> object that is a subsequence of the name
                     elements in this <c>Path</c></returns>
        <remarks>
          <para>Returns a relative <c>Path</c> that is a subsequence of the name
            elements of this path.</para>
          <para>The <c>beginIndex</c> and <c>endIndex</c> parameters specify the
            subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root
            in the directory hierarchy has index <c>0</c>. The name that is
            &lt;em&gt;farthest&lt;/em&gt; from the root has index <c>#getNameCount
            count</c><c>-1</c>. The returned <c>Path</c> object has the name elements
            that begin at <c>beginIndex</c> and extend to the element at index <c>endIndex-1</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#subpath(int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.subpath(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToAbsolutePath">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? ToAbsolutePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath ToAbsolutePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ToAbsolutePath" />
      <MemberSignature Language="F#" Value="abstract member ToAbsolutePath : unit -&gt; Java.Nio.FileNio.IPath" Usage="iPath.ToAbsolutePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toAbsolutePath", "()Ljava/nio/file/Path;", "GetToAbsolutePathHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toAbsolutePath", "()Ljava/nio/file/Path;", "GetToAbsolutePathHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>Path</c> object representing the absolute path of this
            path.</summary>
        <returns>a <c>Path</c> object representing the absolute path</returns>
        <remarks>
          <para>Returns a <c>Path</c> object representing the absolute path of this
            path.</para>
          <para>If this path is already <c>Path#isAbsolute absolute</c> then this
            method simply returns this path. Otherwise, this method resolves the path
            in an implementation dependent manner, typically by resolving the path
            against a file system default directory. Depending on the implementation,
            this method may throw an I/O error if the file system is not accessible.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#toAbsolutePath()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.toAbsolutePath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFile">
      <MemberSignature Language="C#" Value="public Java.IO.File? ToFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.File ToFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ToFile" />
      <MemberSignature Language="F#" Value="abstract member ToFile : unit -&gt; Java.IO.File" Usage="iPath.ToFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toFile", "()Ljava/io/File;", "GetToFileHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toFile", "()Ljava/io/File;", "GetToFileHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>File</c> object representing this path.</summary>
        <returns>a <c>File</c> object representing this path</returns>
        <remarks>
          <para>Returns a <c>File</c> object representing this path. Where this <c>Path</c> is associated with the default provider, then this method is
            equivalent to returning a <c>File</c> object constructed with the
            <c>String</c> representation of this path.</para>
          <para>If this path was created by invoking the <c>File</c><c>File#toPath toPath</c> method then there is no guarantee that the <c>File</c> object returned by this method is <c>#equals equal</c> to the
            original <c>File</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#toFile()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.toFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRealPath">
      <MemberSignature Language="C#" Value="public Java.Nio.FileNio.IPath? ToRealPath (params Java.Nio.FileNio.LinkOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath ToRealPath(class Java.Nio.FileNio.LinkOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ToRealPath(Java.Nio.FileNio.LinkOption[])" />
      <MemberSignature Language="F#" Value="abstract member ToRealPath : Java.Nio.FileNio.LinkOption[] -&gt; Java.Nio.FileNio.IPath" Usage="iPath.ToRealPath options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toRealPath", "([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;", "GetToRealPath_arrayLjava_nio_file_LinkOption_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toRealPath", "([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;", "GetToRealPath_arrayLjava_nio_file_LinkOption_Handler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Java.Nio.FileNio.LinkOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">options indicating how symbolic links are handled</param>
        <summary>Returns the &lt;em&gt;real&lt;/em&gt; path of an existing file.</summary>
        <returns>an absolute path represent the &lt;em&gt;real&lt;/em&gt; path of the file
                     located by this object</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#toRealPath(java.nio.file.LinkOption)" title="Reference documentation">Java documentation for <code>java.nio.file.Path.toRealPath(java.nio.file.LinkOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ToString" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="iPath.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toString", "()Ljava/lang/String;", "GetToStringHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toString", "()Ljava/lang/String;", "GetToStringHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the string representation of this path.</summary>
        <returns>the string representation of this path</returns>
        <remarks>
          <para>Returns the string representation of this path.</para>
          <para>If this path was created by converting a path string using the
            <c>FileSystem#getPath getPath</c> method then the path string returned
            by this method may differ from the original String used to create the path.</para>
          <para>The returned path string uses the default name <c>FileSystem#getSeparator separator</c> to separate names in the path.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#toString()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.toString()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUri">
      <MemberSignature Language="C#" Value="public Java.Net.URI? ToUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.URI ToUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.FileNio.IPath.ToUri" />
      <MemberSignature Language="F#" Value="abstract member ToUri : unit -&gt; Java.Net.URI" Usage="iPath.ToUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toUri", "()Ljava/net/URI;", "GetToUriHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toUri", "()Ljava/net/URI;", "GetToUriHandler:Java.Nio.FileNio.IPathInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a URI to represent this path.</summary>
        <returns>the URI representing this path</returns>
        <remarks>
          <para>Returns a URI to represent this path.</para>
          <para>This method constructs an absolute <c>URI</c> with a <c>URI#getScheme() scheme</c> equal to the URI scheme that identifies the
            provider. The exact form of the scheme specific part is highly provider
            dependent.</para>
          <para>In the case of the default provider, the URI is hierarchical with
            a <c>URI#getPath() path</c> component that is absolute. The query and
            fragment components are undefined. Whether the authority component is
            defined or not is implementation dependent. There is no guarantee that
            the <c>URI</c> may be used to construct a <c>java.io.File java.io.File</c>.
            In particular, if this path represents a Universal Naming Convention (UNC)
            path, then the UNC server name may be encoded in the authority component
            of the resulting URI. In the case of the default provider, and the file
            exists, and it can be determined that the file is a directory, then the
            resulting <c>URI</c> will end with a slash.</para>
          <para>The default provider provides a similar &lt;em&gt;round-trip&lt;/em&gt; guarantee
            to the <c>java.io.File</c> class. For a given <c>Path</c><i>p</i> it
            is guaranteed that
            &lt;blockquote&gt;<c><c>Paths#get(URI) Paths.get</c>(</c><i>p</i><c>.toUri()).equals(</c><i>p</i><c>.<c>#toAbsolutePath() toAbsolutePath</c>())</c>&lt;/blockquote&gt;
            so long as the original <c>Path</c>, the <c>URI</c>, and the new <c>Path</c> are all created in (possibly different invocations of) the same
            Java virtual machine. Whether other providers make any guarantees is
            provider specific and therefore unspecified.</para>
          <para>When a file system is constructed to access the contents of a file
            as a file system then it is highly implementation specific if the returned
            URI represents the given path in the file system or it represents a
            &lt;em&gt;compound&lt;/em&gt; URI that encodes the URI of the enclosing file system.
            A format for compound URIs is not defined in this release; such a scheme
            may be added in a future release.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/file/Path#toUri()" title="Reference documentation">Java documentation for <code>java.nio.file.Path.toUri()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
