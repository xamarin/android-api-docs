<Type Name="SQLiteOpenHelper" FullName="Android.Database.Sqlite.SQLiteOpenHelper">
  <TypeSignature Language="C#" Value="public abstract class SQLiteOpenHelper : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SQLiteOpenHelper extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/database/sqlite/SQLiteOpenHelper", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A helper class to manage database creation and version management.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A helper class to manage database creation and version management.

 </para>
      <para tool="javadoc-to-mdoc">You create a subclass implementing <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnCreate(Android.Database.Sqlite.SQLiteDatabase)" /></c>, <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnUpgrade(Android.Database.Sqlite.SQLiteDatabase,System.Int32,System.Int32)" /></c> and
 optionally <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c>, and this class takes care of opening the database
 if it exists, creating it if it does not, and upgrading it as necessary.
 Transactions are used to make sure the database is always in a sensible state.

 </para>
      <para tool="javadoc-to-mdoc">This class makes it easy for <c><see cref="T:Android.Content.ContentProvider" /></c>
 implementations to defer opening and upgrading the database until first use,
 to avoid blocking application startup with long-running database upgrades.

 </para>
      <para tool="javadoc-to-mdoc">For an example, see the NotePadProvider class in the NotePad sample application,
 in the <i>samples/</i> directory of the SDK.</para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> this class assumes
 monotonically increasing version numbers for upgrades.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SQLiteOpenHelper (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SQLiteOpenHelper (Android.Content.Context context, string name, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, int version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, string name, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, int32 version) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="version" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="name">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="version">To be added.</param>
        <summary>Create a helper object to create, open, and/or manage a database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a helper object to create, open, and/or manage a database.
 This method always returns very quickly.  The database is not actually
 created or opened until one of <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c> or
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.ReadableDatabase" /></c> is called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#SQLiteOpenHelper(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SQLiteOpenHelper (Android.Content.Context context, string name, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, int version, Android.Database.IDatabaseErrorHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, string name, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, int32 version, class Android.Database.IDatabaseErrorHandler errorHandler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ILandroid/database/DatabaseErrorHandler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="version" Type="System.Int32" />
        <Parameter Name="errorHandler" Type="Android.Database.IDatabaseErrorHandler" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="name">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="version">To be added.</param>
        <param name="errorHandler">To be added.</param>
        <summary>Create a helper object to create, open, and/or manage a database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a helper object to create, open, and/or manage a database.
 The database is not actually created or opened until one of
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c> or <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.ReadableDatabase" /></c> is called.

 </para>
          <para tool="javadoc-to-mdoc">Accepts input param: a concrete instance of <c><see cref="T:Android.Database.IDatabaseErrorHandler" /></c> to be
 used to handle corruption when sqlite reports database corruption.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#SQLiteOpenHelper(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close any open database object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Close any open database object.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DatabaseName">
      <MemberSignature Language="C#" Value="public virtual string DatabaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DatabaseName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDatabaseName", "()Ljava/lang/String;", "GetGetDatabaseNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the SQLite database being opened, as given to
 the constructor.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the name of the SQLite database being opened, as given to
 the constructor.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#getDatabaseName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigure">
      <MemberSignature Language="C#" Value="public virtual void OnConfigure (Android.Database.Sqlite.SQLiteDatabase db);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigure(class Android.Database.Sqlite.SQLiteDatabase db) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigure", "(Landroid/database/sqlite/SQLiteDatabase;)V", "GetOnConfigure_Landroid_database_sqlite_SQLiteDatabase_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="db" Type="Android.Database.Sqlite.SQLiteDatabase" />
      </Parameters>
      <Docs>
        <param name="db">The database.
</param>
        <summary>Called when the database connection is being configured, to enable features
 such as write-ahead logging or foreign key support.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the database connection is being configured, to enable features
 such as write-ahead logging or foreign key support.
 </para>
          <para tool="javadoc-to-mdoc">
 This method is called before <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnCreate(Android.Database.Sqlite.SQLiteDatabase)" /></c>, <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnUpgrade(Android.Database.Sqlite.SQLiteDatabase,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnDowngrade(Android.Database.Sqlite.SQLiteDatabase,System.Int32,System.Int32)" /></c>, or <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c> are called.  It should not modify
 the database except to configure the database connection as required.
 </para>
          <para tool="javadoc-to-mdoc">
 This method should only call methods that configure the parameters of the
 database connection, such as <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetForeignKeyConstraintsEnabled(System.Boolean)" /></c>,
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetLocale(Java.Util.Locale)" /></c>, <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetMaximumSize(System.Int64)" /></c>,
 or executing PRAGMA statements.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onConfigure(android.database.sqlite.SQLiteDatabase)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public abstract void OnCreate (Android.Database.Sqlite.SQLiteDatabase db);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreate(class Android.Database.Sqlite.SQLiteDatabase db) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "(Landroid/database/sqlite/SQLiteDatabase;)V", "GetOnCreate_Landroid_database_sqlite_SQLiteDatabase_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="db" Type="Android.Database.Sqlite.SQLiteDatabase" />
      </Parameters>
      <Docs>
        <param name="db">The database.
</param>
        <summary>Called when the database is created for the first time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the database is created for the first time. This is where the
 creation of tables and the initial population of the tables should happen.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onCreate(android.database.sqlite.SQLiteDatabase)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnDowngrade">
      <MemberSignature Language="C#" Value="public virtual void OnDowngrade (Android.Database.Sqlite.SQLiteDatabase db, int oldVersion, int newVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDowngrade(class Android.Database.Sqlite.SQLiteDatabase db, int32 oldVersion, int32 newVersion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDowngrade", "(Landroid/database/sqlite/SQLiteDatabase;II)V", "GetOnDowngrade_Landroid_database_sqlite_SQLiteDatabase_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="db" Type="Android.Database.Sqlite.SQLiteDatabase" />
        <Parameter Name="oldVersion" Type="System.Int32" />
        <Parameter Name="newVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="db">The database.</param>
        <param name="oldVersion">The old database version.</param>
        <param name="newVersion">The new database version.
</param>
        <summary>Called when the database needs to be downgraded.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the database needs to be downgraded. This is strictly similar to
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnUpgrade(Android.Database.Sqlite.SQLiteDatabase,System.Int32,System.Int32)" /></c> method, but is called whenever current version is newer than requested one.
 However, this method is not abstract, so it is not mandatory for a customer to
 implement it. If not overridden, default implementation will reject downgrade and
 throws SQLiteException

 </para>
          <para tool="javadoc-to-mdoc">
 This method executes within a transaction.  If an exception is thrown, all changes
 will automatically be rolled back.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnOpen">
      <MemberSignature Language="C#" Value="public virtual void OnOpen (Android.Database.Sqlite.SQLiteDatabase db);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnOpen(class Android.Database.Sqlite.SQLiteDatabase db) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOpen", "(Landroid/database/sqlite/SQLiteDatabase;)V", "GetOnOpen_Landroid_database_sqlite_SQLiteDatabase_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="db" Type="Android.Database.Sqlite.SQLiteDatabase" />
      </Parameters>
      <Docs>
        <param name="db">The database.
</param>
        <summary>Called when the database has been opened.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the database has been opened.  The implementation
 should check <c><see cref="P:Android.Database.Sqlite.SQLiteDatabase.IsReadOnly" /></c> before updating the
 database.
 </para>
          <para tool="javadoc-to-mdoc">
 This method is called after the database connection has been configured
 and after the database schema has been created, upgraded or downgraded as necessary.
 If the database connection must be configured in some way before the schema
 is created, upgraded, or downgraded, do it in <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnConfigure(Android.Database.Sqlite.SQLiteDatabase)" /></c> instead.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onOpen(android.database.sqlite.SQLiteDatabase)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnUpgrade">
      <MemberSignature Language="C#" Value="public abstract void OnUpgrade (Android.Database.Sqlite.SQLiteDatabase db, int oldVersion, int newVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnUpgrade(class Android.Database.Sqlite.SQLiteDatabase db, int32 oldVersion, int32 newVersion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onUpgrade", "(Landroid/database/sqlite/SQLiteDatabase;II)V", "GetOnUpgrade_Landroid_database_sqlite_SQLiteDatabase_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="db" Type="Android.Database.Sqlite.SQLiteDatabase" />
        <Parameter Name="oldVersion" Type="System.Int32" />
        <Parameter Name="newVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="db">The database.</param>
        <param name="oldVersion">The old database version.</param>
        <param name="newVersion">The new database version.
</param>
        <summary>Called when the database needs to be upgraded.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the database needs to be upgraded. The implementation
 should use this method to drop tables, add tables, or do anything else it
 needs to upgrade to the new schema version.

 </para>
          <para tool="javadoc-to-mdoc">
 The SQLite ALTER TABLE documentation can be found
 . If you add new columns
 you can use ALTER TABLE to insert them into a live table. If you rename or remove columns
 you can use ALTER TABLE to rename the old table, then create the new table and then
 populate the new table with the contents of the old table.
 </para>
          <para tool="javadoc-to-mdoc">
 This method executes within a transaction.  If an exception is thrown, all changes
 will automatically be rolled back.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReadableDatabase">
      <MemberSignature Language="C#" Value="public virtual Android.Database.Sqlite.SQLiteDatabase ReadableDatabase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Database.Sqlite.SQLiteDatabase ReadableDatabase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReadableDatabase", "()Landroid/database/sqlite/SQLiteDatabase;", "GetGetReadableDatabaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Create and/or open a database.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Create and/or open a database.  This will be the same object returned by
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c> unless some problem, such as a full disk,
 requires the database to be opened read-only.  In that case, a read-only
 database object will be returned.  If the problem is fixed, a future call
 to <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c> may succeed, in which case the read-only
 database object will be closed and the read/write object will be returned
 in the future.

 </para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c>, this method may
 take a long time to return, so you should not call it from the
 application main thread, including from
 <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#getReadableDatabase()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.Sqlite.SQLiteException">if the database cannot be opened</exception>
      </Docs>
    </Member>
    <Member MemberName="SetWriteAheadLoggingEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetWriteAheadLoggingEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWriteAheadLoggingEnabled(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWriteAheadLoggingEnabled", "(Z)V", "GetSetWriteAheadLoggingEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">True if write-ahead logging should be enabled, false if it
 should be disabled.</param>
        <summary>Enables or disables the use of write-ahead logging for the database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enables or disables the use of write-ahead logging for the database.

 Write-ahead logging cannot be used with read-only databases so the value of
 this flag is ignored if the database is opened read-only.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#setWriteAheadLoggingEnabled(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableDatabase">
      <MemberSignature Language="C#" Value="public virtual Android.Database.Sqlite.SQLiteDatabase WritableDatabase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Database.Sqlite.SQLiteDatabase WritableDatabase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWritableDatabase", "()Landroid/database/sqlite/SQLiteDatabase;", "GetGetWritableDatabaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Create and/or open a database that will be used for reading and writing.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Create and/or open a database that will be used for reading and writing.
 The first time this is called, the database will be opened and
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnCreate(Android.Database.Sqlite.SQLiteDatabase)" /></c>, <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnUpgrade(Android.Database.Sqlite.SQLiteDatabase,System.Int32,System.Int32)" /></c> and/or <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c> will be
 called.

 </para>
          <para tool="javadoc-to-mdoc">Once opened successfully, the database is cached, so you can
 call this method every time you need to write to the database.
 (Make sure to call <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.Close" /></c> when you no longer need the database.)
 Errors such as bad permissions or a full disk may cause this method
 to fail, but future attempts may succeed if the problem is fixed.</para>
          <para tool="javadoc-to-mdoc">Database upgrade may take a long time, you
 should not call this method from the application main thread, including
 from <c><see cref="M:Android.Content.ContentProvider.OnCreate" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#getWritableDatabase()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.Sqlite.SQLiteException">if the database cannot be opened for writing</exception>
      </Docs>
    </Member>
  </Members>
</Type>
