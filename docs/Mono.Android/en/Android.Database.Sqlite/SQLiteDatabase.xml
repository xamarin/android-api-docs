<Type Name="SQLiteDatabase" FullName="Android.Database.Sqlite.SQLiteDatabase">
  <TypeSignature Language="C#" Value="public class SQLiteDatabase : Android.Database.Sqlite.SQLiteClosable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SQLiteDatabase extends Android.Database.Sqlite.SQLiteClosable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Database.Sqlite.SQLiteClosable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/database/sqlite/SQLiteDatabase", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Exposes methods to manage a SQLite database.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Exposes methods to manage a SQLite database.

 <format type="text/html"><h3>Localized Collation - ORDER BY</h3></format></para>
      <para tool="javadoc-to-mdoc">
 SQLiteDatabase has methods to create, delete, execute SQL commands, and
 perform other common database management tasks.
 </para>
      <para tool="javadoc-to-mdoc">
 See the Notepad sample application in the SDK for an example of creating
 and managing a database.
 </para>
      <para tool="javadoc-to-mdoc">
 Database names must be unique within an application, not across all applications.
 </para>
      <para tool="javadoc-to-mdoc">
 In addition to SQLite's default <c>BINARY</c> collator, Android supplies
 two more, <c>LOCALIZED</c>, which changes with the system's current locale,
 and <c>UNICODE</c>, which is the Unicode Collation Algorithm and not tailored
 to the current locale.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SQLiteDatabase (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public virtual void BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginTransaction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginTransaction", "()V", "GetBeginTransactionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins a transaction in EXCLUSIVE mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begins a transaction in EXCLUSIVE mode.
 </para>
          <para tool="javadoc-to-mdoc">
 Transactions can be nested.
 When the outer transaction is ended all of
 the work done in that transaction and all of the nested transactions will be committed or
 rolled back. The changes will be rolled back if any transaction is ended without being
 marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.
 </para>
          <para tool="javadoc-to-mdoc">Here is the standard idiom for transactions:

 <example><code lang="java">
   db.beginTransaction();
   try {
     ...
     db.setTransactionSuccessful();
   } finally {
     db.endTransaction();
   }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransaction()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransactionNonExclusive">
      <MemberSignature Language="C#" Value="public virtual void BeginTransactionNonExclusive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginTransactionNonExclusive() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginTransactionNonExclusive", "()V", "GetBeginTransactionNonExclusiveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins a transaction in IMMEDIATE mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begins a transaction in IMMEDIATE mode. Transactions can be nested. When
 the outer transaction is ended all of the work done in that transaction
 and all of the nested transactions will be committed or rolled back. The
 changes will be rolled back if any transaction is ended without being
 marked as clean (by calling setTransactionSuccessful). Otherwise they
 will be committed.
 </para>
          <para tool="javadoc-to-mdoc">
 Here is the standard idiom for transactions:

 <example><code lang="java">
   db.beginTransactionNonExclusive();
   try {
     ...
     db.setTransactionSuccessful();
   } finally {
     db.endTransaction();
   }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionNonExclusive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransactionWithListener">
      <MemberSignature Language="C#" Value="public virtual void BeginTransactionWithListener (Android.Database.Sqlite.ISQLiteTransactionListener transactionListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginTransactionWithListener(class Android.Database.Sqlite.ISQLiteTransactionListener transactionListener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginTransactionWithListener", "(Landroid/database/sqlite/SQLiteTransactionListener;)V", "GetBeginTransactionWithListener_Landroid_database_sqlite_SQLiteTransactionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionListener" Type="Android.Database.Sqlite.ISQLiteTransactionListener" />
      </Parameters>
      <Docs>
        <param name="transactionListener">listener that should be notified when the transaction begins,
 commits, or is rolled back, either explicitly or by a call to
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.YieldIfContendedSafely" /></c>.
</param>
        <summary>Begins a transaction in EXCLUSIVE mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begins a transaction in EXCLUSIVE mode.
 </para>
          <para tool="javadoc-to-mdoc">
 Transactions can be nested.
 When the outer transaction is ended all of
 the work done in that transaction and all of the nested transactions will be committed or
 rolled back. The changes will be rolled back if any transaction is ended without being
 marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.
 </para>
          <para tool="javadoc-to-mdoc">Here is the standard idiom for transactions:

 <example><code lang="java">
   db.beginTransactionWithListener(listener);
   try {
     ...
     db.setTransactionSuccessful();
   } finally {
     db.endTransaction();
   }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransactionWithListenerNonExclusive">
      <MemberSignature Language="C#" Value="public virtual void BeginTransactionWithListenerNonExclusive (Android.Database.Sqlite.ISQLiteTransactionListener transactionListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginTransactionWithListenerNonExclusive(class Android.Database.Sqlite.ISQLiteTransactionListener transactionListener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginTransactionWithListenerNonExclusive", "(Landroid/database/sqlite/SQLiteTransactionListener;)V", "GetBeginTransactionWithListenerNonExclusive_Landroid_database_sqlite_SQLiteTransactionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionListener" Type="Android.Database.Sqlite.ISQLiteTransactionListener" />
      </Parameters>
      <Docs>
        <param name="transactionListener">listener that should be notified when the
            transaction begins, commits, or is rolled back, either
            explicitly or by a call to <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.YieldIfContendedSafely" /></c>.
</param>
        <summary>Begins a transaction in IMMEDIATE mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begins a transaction in IMMEDIATE mode. Transactions can be nested. When
 the outer transaction is ended all of the work done in that transaction
 and all of the nested transactions will be committed or rolled back. The
 changes will be rolled back if any transaction is ended without being
 marked as clean (by calling setTransactionSuccessful). Otherwise they
 will be committed.
 </para>
          <para tool="javadoc-to-mdoc">
 Here is the standard idiom for transactions:

 <example><code lang="java">
   db.beginTransactionWithListenerNonExclusive(listener);
   try {
     ...
     db.setTransactionSuccessful();
   } finally {
     db.endTransaction();
   }
 </code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileStatement">
      <MemberSignature Language="C#" Value="public virtual Android.Database.Sqlite.SQLiteStatement CompileStatement (string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.Sqlite.SQLiteStatement CompileStatement(string sql) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compileStatement", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement;", "GetCompileStatement_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteStatement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The raw SQL statement, may contain ? for unknown values to be
            bound later.</param>
        <summary>Compiles an SQL statement into a reusable pre-compiled statement object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compiles an SQL statement into a reusable pre-compiled statement object.
 The parameters are identical to <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ExecSQL(System.String)" /></c>. You may put ?s in the
 statement and fill in those values with <c><see cref="M:Android.Database.Sqlite.SQLiteProgram.BindString(System.Int32,System.String)" /></c>
 and <c><see cref="M:Android.Database.Sqlite.SQLiteProgram.BindLong(System.Int32,System.Int64)" /></c> each time you want to run the
 statement. Statements may not return result sets larger than 1x1.
</para>
          <para tool="javadoc-to-mdoc">
 No two threads should be using the same <c><see cref="T:Android.Database.Sqlite.SQLiteStatement" /></c> at the same time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#compileStatement(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="ConflictAbort">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictAbort = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictAbort = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_ABORT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>When a constraint violation occurs,no ROLLBACK is executed
 so changes from prior commands within the same transaction
 are preserved.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs,no ROLLBACK is executed
 so changes from prior commands within the same transaction
 are preserved. This is the default behavior.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_ABORT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ConflictFail">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictFail = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictFail = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_FAIL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>When a constraint violation occurs, the command aborts with a return
 code SQLITE_CONSTRAINT.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, the command aborts with a return
 code SQLITE_CONSTRAINT. But any changes to the database that
 the command made prior to encountering the constraint violation
 are preserved and are not backed out.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_FAIL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ConflictIgnore">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictIgnore = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictIgnore = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_IGNORE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>When a constraint violation occurs, the one row that contains
 the constraint violation is not inserted or changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, the one row that contains
 the constraint violation is not inserted or changed.
 But the command continues executing normally. Other rows before and
 after the row that contained the constraint violation continue to be
 inserted or updated normally. No error is returned.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_IGNORE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ConflictNone">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictNone = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_NONE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Use the following when no conflict action is specified.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Use the following when no conflict action is specified.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_NONE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ConflictReplace">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictReplace = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictReplace = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_REPLACE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>When a UNIQUE constraint violation occurs, the pre-existing rows that
 are causing the constraint violation are removed prior to inserting
 or updating the current row.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a UNIQUE constraint violation occurs, the pre-existing rows that
 are causing the constraint violation are removed prior to inserting
 or updating the current row. Thus the insert or update always occurs.
 The command continues executing normally. No error is returned.
 If a NOT NULL constraint violation occurs, the NULL value is replaced
 by the default value for that column. If the column has no default
 value, then the ABORT algorithm is used. If a CHECK constraint
 violation occurs then the IGNORE algorithm is used. When this conflict
 resolution strategy deletes rows in order to satisfy a constraint,
 it does not invoke delete triggers on those rows.
 This behavior might change in a future release.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_REPLACE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ConflictRollback">
      <MemberSignature Language="C#" Value="public const Android.Database.Sqlite.Conflict ConflictRollback = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict ConflictRollback = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFLICT_ROLLBACK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Database.Sqlite.Conflict enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>When a constraint violation occurs, an immediate ROLLBACK occurs,
 thus ending the current transaction, and the command aborts with a
 return code of SQLITE_CONSTRAINT.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, an immediate ROLLBACK occurs,
 thus ending the current transaction, and the command aborts with a
 return code of SQLITE_CONSTRAINT. If no transaction is active
 (other than the implied transaction that is created on every command)
 then this algorithm works the same as ABORT.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_ROLLBACK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase Create (Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase Create(class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
      </Parameters>
      <Docs>
        <param name="factory">an optional factory class that is called to instantiate a
            cursor when query is called</param>
        <summary>Create a memory backed SQLite database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a memory backed SQLite database.  Its contents will be destroyed
 when the database is closed.

 </para>
          <para tool="javadoc-to-mdoc">Sets the locale of the database to the  the system's current locale.
 Call <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetLocale(Java.Util.Locale)" /></c> if you would like something else.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#create(android.database.sqlite.SQLiteDatabase.CursorFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual int Delete (string table, string whereClause, string[] whereArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Delete(string table, string whereClause, string[] whereArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Ljava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="whereClause" Type="System.String" />
        <Parameter Name="whereArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="table">the table to delete from</param>
        <param name="whereClause">the optional WHERE clause to apply when deleting.
            Passing null will delete all rows.</param>
        <param name="whereArgs">You may include ?s in the where clause, which
            will be replaced by the values from whereArgs. The values
            will be bound as Strings.</param>
        <summary>Convenience method for deleting rows in the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for deleting rows in the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#delete(java.lang.String, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public static bool DeleteDatabase (Java.IO.File file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteDatabase(class Java.IO.File file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteDatabase", "(Ljava/io/File;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="file">The database file path.</param>
        <summary>Deletes a database including its journal file and other auxiliary files
 that may have been created by the database engine.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Deletes a database including its journal file and other auxiliary files
 that may have been created by the database engine.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#deleteDatabase(java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DisableWriteAheadLogging">
      <MemberSignature Language="C#" Value="public virtual void DisableWriteAheadLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableWriteAheadLogging() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disableWriteAheadLogging", "()V", "GetDisableWriteAheadLoggingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method disables the features enabled by <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method disables the features enabled by <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#disableWriteAheadLogging()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if there are transactions in progress at the
 time this method is called.  WAL mode can only be changed when there are no
 transactions in progress.</exception>
        <altmember cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" />
      </Docs>
    </Member>
    <Member MemberName="EnableWriteAheadLogging">
      <MemberSignature Language="C#" Value="public virtual bool EnableWriteAheadLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnableWriteAheadLogging() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableWriteAheadLogging", "()Z", "GetEnableWriteAheadLoggingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method enables parallel execution of queries from multiple threads on the
 same database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method enables parallel execution of queries from multiple threads on the
 same database.  It does this by opening multiple connections to the database
 and using a different database connection for each query.  The database
 journal mode is also changed to enable writes to proceed concurrently with reads.
 </para>
          <para tool="javadoc-to-mdoc">
 When write-ahead logging is not enabled (the default), it is not possible for
 reads and writes to occur on the database at the same time.  Before modifying the
 database, the writer implicitly acquires an exclusive lock on the database which
 prevents readers from accessing the database until the write is completed.
 </para>
          <para tool="javadoc-to-mdoc">
 In contrast, when write-ahead logging is enabled (by calling this method), write
 operations occur in a separate log file which allows reads to proceed concurrently.
 While a write is in progress, readers on other threads will perceive the state
 of the database as it was before the write began.  When the write completes, readers
 on other threads will then perceive the new state of the database.
 </para>
          <para tool="javadoc-to-mdoc">
 It is a good idea to enable write-ahead logging whenever a database will be
 concurrently accessed and modified by multiple threads at the same time.
 However, write-ahead logging uses significantly more memory than ordinary
 journaling because there are multiple connections to the same database.
 So if a database will only be used by a single thread, or if optimizing
 concurrency is not very important, then write-ahead logging should be disabled.
 </para>
          <para tool="javadoc-to-mdoc">
 After calling this method, execution of queries in parallel is enabled as long as
 the database remains open.  To disable execution of queries in parallel, either
 call <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.DisableWriteAheadLogging" /></c> or close the database and reopen it.
 </para>
          <para tool="javadoc-to-mdoc">
 The maximum number of connections used to execute queries in parallel is
 dependent upon the device memory and possibly other properties.
 </para>
          <para tool="javadoc-to-mdoc">
 If a query is part of a transaction, then it is executed on the same database handle the
 transaction was begun.
 </para>
          <para tool="javadoc-to-mdoc">
 Writers should use <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.BeginTransactionNonExclusive" /></c> or
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.BeginTransactionWithListenerNonExclusive(Android.Database.Sqlite.ISQLiteTransactionListener)" /></c>
 to start a transaction.  Non-exclusive mode allows database file to be in readable
 by other threads executing queries.
 </para>
          <para tool="javadoc-to-mdoc">
 If the database has any attached databases, then execution of queries in parallel is NOT
 possible.  Likewise, write-ahead logging is not supported for read-only databases
 or memory databases.  In such cases, <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c> returns false.
 </para>
          <para tool="javadoc-to-mdoc">
 The best way to enable write-ahead logging is to pass the
 <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING" /></c> flag to <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.OpenDatabase(System.String,.ICursorFactory,.ICursorFactory)" /></c>.  This is
 more efficient than calling <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>.
 <c><example><code lang="java">
     SQLiteDatabase db = SQLiteDatabase.openDatabase("db_filename", cursorFactory,
             SQLiteDatabase.CREATE_IF_NECESSARY | SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING,
             myDatabaseErrorHandler);
     db.enableWriteAheadLogging();
 </code></example></c></para>
          <para tool="javadoc-to-mdoc">
 Another way to enable write-ahead logging is to call <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>
 after opening the database.
 <c><example><code lang="java">
     SQLiteDatabase db = SQLiteDatabase.openDatabase("db_filename", cursorFactory,
             SQLiteDatabase.CREATE_IF_NECESSARY, myDatabaseErrorHandler);
     db.enableWriteAheadLogging();
 </code></example></c></para>
          <para tool="javadoc-to-mdoc">
 See also  for
 more details about how write-ahead logging works.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#enableWriteAheadLogging()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.Lang.IllegalStateException">if there are transactions in progress at the
 time this method is called.  WAL mode can only be changed when there are no
 transactions in progress.</exception>
        <altmember cref="M:Android.Database.Sqlite.SQLiteDatabase.DisableWriteAheadLogging" />
      </Docs>
    </Member>
    <Member MemberName="EndTransaction">
      <MemberSignature Language="C#" Value="public virtual void EndTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndTransaction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endTransaction", "()V", "GetEndTransactionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>End a transaction.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">End a transaction. See beginTransaction for notes about how to use this and when transactions
 are committed and rolled back.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#endTransaction()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ExecSQL">
      <MemberSignature Language="C#" Value="public virtual void ExecSQL (string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecSQL(string sql) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execSQL", "(Ljava/lang/String;)V", "GetExecSQL_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">the SQL statement to be executed. Multiple statements separated by semicolons are
 not supported.</param>
        <summary>Execute a single SQL statement that is NOT a SELECT
 or any other SQL statement that returns data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Execute a single SQL statement that is NOT a SELECT
 or any other SQL statement that returns data.
 </para>
          <para tool="javadoc-to-mdoc">
 It has no means to return any data (such as the number of affected rows).
 Instead, you're encouraged to use <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.Insert(System.String,System.String,System.String)" /></c>,
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.Update(System.String,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c>, et al, when possible.
 </para>
          <para tool="javadoc-to-mdoc">
 When using <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>, journal_mode is
 automatically managed by this class. So, do not set journal_mode
 using "PRAGMA journal_mode'<format type="text/html"><value>" statement if your app is using
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c></value></format></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#execSQL(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException">if the SQL string is invalid
</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecSQL">
      <MemberSignature Language="C#" Value="public virtual void ExecSQL (string sql, Java.Lang.Object[] bindArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecSQL(string sql, class Java.Lang.Object[] bindArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execSQL", "(Ljava/lang/String;[Ljava/lang/Object;)V", "GetExecSQL_Ljava_lang_String_arrayLjava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="bindArgs" Type="Java.Lang.Object[]" />
      </Parameters>
      <Docs>
        <param name="sql">the SQL statement to be executed. Multiple statements separated by semicolons are
 not supported.</param>
        <param name="bindArgs">only byte[], String, Long and Double are supported in bindArgs.</param>
        <summary>Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.
 </para>
          <para tool="javadoc-to-mdoc">
 For INSERT statements, use any of the following instead.
 <list type="bullet"><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.Insert(System.String,System.String,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.InsertOrThrow(System.String,System.String,System.String)" /></c></term></item><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.InsertWithOnConflict(System.String,System.String,System.String,System.String)" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 For UPDATE statements, use any of the following instead.
 <list type="bullet"><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.Update(System.String,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c></term></item><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.UpdateWithOnConflict(System.String,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 For DELETE statements, use any of the following instead.
 <list type="bullet"><item><term><c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.Delete(System.String,System.String,System.String)" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 For example, the following are good candidates for using this method:
 <list type="bullet"><item><term>ALTER TABLE</term></item><item><term>CREATE or DROP table / trigger / view / index / virtual table</term></item><item><term>REINDEX</term></item><item><term>RELEASE</term></item><item><term>SAVEPOINT</term></item><item><term>PRAGMA that returns no data</term></item></list></para>
          <para tool="javadoc-to-mdoc">
 When using <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c>, journal_mode is
 automatically managed by this class. So, do not set journal_mode
 using "PRAGMA journal_mode'<format type="text/html"><value>" statement if your app is using
 <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" /></c></value></format></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#execSQL(java.lang.String, java.lang.Object[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException">if the SQL string is invalid
</exception>
      </Docs>
    </Member>
    <Member MemberName="FindEditTable">
      <MemberSignature Language="C#" Value="public static string FindEditTable (string tables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FindEditTable(string tables) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findEditTable", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tables" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tables">a list of tables</param>
        <summary>Finds the name of the first table, which is editable.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Finds the name of the first table, which is editable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#findEditTable(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual long Insert (string table, string nullColumnHack, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Insert(string table, string nullColumnHack, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insert", "(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J", "GetInsert_Ljava_lang_String_Ljava_lang_String_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="nullColumnHack" Type="System.String" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="table">the table to insert the row into</param>
        <param name="nullColumnHack">optional; may be <c>null</c>.
            SQL doesn't allow inserting a completely empty row without
            naming at least one column name.  If your provided <c>values</c> is
            empty, no column names are known and an empty row can't be inserted.
            If not set to null, the <c>nullColumnHack</c> parameter
            provides the name of nullable column name to explicitly insert a NULL into
            in the case where your <c>values</c> is empty.</param>
        <param name="values">this map contains the initial column values for the
            row. The keys should be the column names and the values the
            column values</param>
        <summary>Convenience method for inserting a row into the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for inserting a row into the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insert(java.lang.String, java.lang.String, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InsertOrThrow">
      <MemberSignature Language="C#" Value="public virtual long InsertOrThrow (string table, string nullColumnHack, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 InsertOrThrow(string table, string nullColumnHack, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insertOrThrow", "(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J", "GetInsertOrThrow_Ljava_lang_String_Ljava_lang_String_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="nullColumnHack" Type="System.String" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="table">the table to insert the row into</param>
        <param name="nullColumnHack">optional; may be <c>null</c>.
            SQL doesn't allow inserting a completely empty row without
            naming at least one column name.  If your provided <c>values</c> is
            empty, no column names are known and an empty row can't be inserted.
            If not set to null, the <c>nullColumnHack</c> parameter
            provides the name of nullable column name to explicitly insert a NULL into
            in the case where your <c>values</c> is empty.</param>
        <param name="values">this map contains the initial column values for the
            row. The keys should be the column names and the values the
            column values</param>
        <summary>Convenience method for inserting a row into the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for inserting a row into the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:SQLException" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="InsertWithOnConflict">
      <MemberSignature Language="C#" Value="public virtual long InsertWithOnConflict (string table, string nullColumnHack, Android.Content.ContentValues initialValues, Android.Database.Sqlite.Conflict conflictAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 InsertWithOnConflict(string table, string nullColumnHack, class Android.Content.ContentValues initialValues, valuetype Android.Database.Sqlite.Conflict conflictAlgorithm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insertWithOnConflict", "(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;I)J", "GetInsertWithOnConflict_Ljava_lang_String_Ljava_lang_String_Landroid_content_ContentValues_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="nullColumnHack" Type="System.String" />
        <Parameter Name="initialValues" Type="Android.Content.ContentValues" />
        <Parameter Name="conflictAlgorithm" Type="Android.Database.Sqlite.Conflict">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="table">the table to insert the row into</param>
        <param name="nullColumnHack">optional; may be <c>null</c>.
            SQL doesn't allow inserting a completely empty row without
            naming at least one column name.  If your provided <c>initialValues</c> is
            empty, no column names are known and an empty row can't be inserted.
            If not set to null, the <c>nullColumnHack</c> parameter
            provides the name of nullable column name to explicitly insert a NULL into
            in the case where your <c>initialValues</c> is empty.</param>
        <param name="initialValues">this map contains the initial column values for the
            row. The keys should be the column names and the values the
            column values</param>
        <param name="conflictAlgorithm">for insert conflict resolver</param>
        <summary>General method for inserting a row into the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">General method for inserting a row into the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="InTransaction">
      <MemberSignature Language="C#" Value="public virtual bool InTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InTransaction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inTransaction", "()Z", "GetInTransactionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns true if the current thread has a transaction pending.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the current thread has a transaction pending.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#inTransaction()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDatabaseIntegrityOk">
      <MemberSignature Language="C#" Value="public virtual bool IsDatabaseIntegrityOk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDatabaseIntegrityOk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDatabaseIntegrityOk", "()Z", "GetIsDatabaseIntegrityOkHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Runs 'pragma integrity_check' on the given database (and all the attached databases)
 and returns true if the given database (and all its attached databases) pass integrity_check,
 false otherwise.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs 'pragma integrity_check' on the given database (and all the attached databases)
 and returns true if the given database (and all its attached databases) pass integrity_check,
 false otherwise.
</para>
          <para tool="javadoc-to-mdoc">
 If the result is false, then this method logs the errors reported by the integrity_check
 command execution.
</para>
          <para tool="javadoc-to-mdoc">
 Note that 'pragma integrity_check' on a database can take a long time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDatabaseIntegrityOk()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsDbLockedByCurrentThread">
      <MemberSignature Language="C#" Value="public virtual bool IsDbLockedByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDbLockedByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDbLockedByCurrentThread", "()Z", "GetIsDbLockedByCurrentThreadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the current thread is holding an active connection to the database.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the current thread is holding an active connection to the database.
 </para>
          <para tool="javadoc-to-mdoc">
 The name of this method comes from a time when having an active connection
 to the database meant that the thread was holding an actual lock on the
 database.  Nowadays, there is no longer a true "database lock" although threads
 may block if they cannot acquire a database connection to perform a
 particular operation.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDbLockedByCurrentThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDbLockedByOtherThreads">
      <MemberSignature Language="C#" Value="public virtual bool IsDbLockedByOtherThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDbLockedByOtherThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDbLockedByOtherThreads", "()Z", "GetIsDbLockedByOtherThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Always returns false.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Always returns false.
 </para>
          <para tool="javadoc-to-mdoc">
 There is no longer the concept of a database lock, so this method always returns false.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDbLockedByOtherThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public virtual bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isOpen", "()Z", "GetIsOpenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the database is currently open.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the database is currently open.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isOpen()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isReadOnly", "()Z", "GetIsReadOnlyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the database is opened as read only.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the database is opened as read only.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isReadOnly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsWriteAheadLoggingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsWriteAheadLoggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteAheadLoggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isWriteAheadLoggingEnabled", "()Z", "GetIsWriteAheadLoggingEnabledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if write-ahead logging has been enabled for this database.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if write-ahead logging has been enabled for this database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isWriteAheadLoggingEnabled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Database.Sqlite.SQLiteDatabase.EnableWriteAheadLogging" />
      </Docs>
    </Member>
    <Member MemberName="MarkTableSyncable">
      <MemberSignature Language="C#" Value="public virtual void MarkTableSyncable (string table, string deletedTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkTableSyncable(string table, string deletedTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("markTableSyncable", "(Ljava/lang/String;Ljava/lang/String;)V", "GetMarkTableSyncable_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="deletedTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">the table to mark as syncable</param>
        <param name="deletedTable">The deleted table that corresponds to the
          syncable table</param>
        <summary tool="true">Mark this table as syncable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark this table as syncable. When an update occurs in this table the
 _sync_dirty field will be set to ensure proper syncing operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#markTableSyncable(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MarkTableSyncable">
      <MemberSignature Language="C#" Value="public virtual void MarkTableSyncable (string table, string foreignKey, string updateTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkTableSyncable(string table, string foreignKey, string updateTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("markTableSyncable", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetMarkTableSyncable_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="foreignKey" Type="System.String" />
        <Parameter Name="updateTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">an update on this table will trigger a sync time removal</param>
        <param name="foreignKey">this is the column in table whose value is an _id in
          updateTable</param>
        <param name="updateTable">this is the table that will have its _sync_dirty</param>
        <summary>Mark this table as syncable, with the _sync_dirty residing in another
 table.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark this table as syncable, with the _sync_dirty residing in another
 table. When an update occurs in this table the _sync_dirty field of the
 row in updateTable with the _id in foreignKey will be set to
 ensure proper syncing operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#markTableSyncable(java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual long MaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaximumSize", "()J", "GetGetMaximumSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum size the database may grow to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum size the database may grow to.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getMaximumSize()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MaxSqlCacheSize">
      <MemberSignature Language="C#" Value="public const int MaxSqlCacheSize = 100;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxSqlCacheSize = (100)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_SQL_CACHE_SIZE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>100</MemberValue>
      <Docs>
        <summary>Absolute max value that can be set by <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetMaxSqlCacheSize(System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Absolute max value that can be set by <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetMaxSqlCacheSize(System.Int32)" /></c>.

 Each prepared-statement is between 1K - 6K, depending on the complexity of the
 SQL statement &amp; schema.  A large SQL cache may use a significant amount of memory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#MAX_SQL_CACHE_SIZE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NeedUpgrade">
      <MemberSignature Language="C#" Value="public virtual bool NeedUpgrade (int newVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedUpgrade(int32 newVersion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("needUpgrade", "(I)Z", "GetNeedUpgrade_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="newVersion">The new version code.</param>
        <summary>Returns true if the new version code is greater than the current database version.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the new version code is greater than the current database version.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#needUpgrade(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnAllReferencesReleased">
      <MemberSignature Language="C#" Value="protected override void OnAllReferencesReleased ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAllReferencesReleased() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAllReferencesReleased", "()V", "GetOnAllReferencesReleasedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the last reference to the object was released by
 a call to <c><see cref="M:Android.Database.Sqlite.SQLiteClosable.ReleaseReference" /></c> or <c><see cref="M:Android.Database.Sqlite.SQLiteClosable.Close" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the last reference to the object was released by
 a call to <c><see cref="M:Android.Database.Sqlite.SQLiteClosable.ReleaseReference" /></c> or <c><see cref="M:Android.Database.Sqlite.SQLiteClosable.Close" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#onAllReferencesReleased()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenDatabase">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase OpenDatabase (string path, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, Android.Database.Sqlite.DatabaseOpenFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase OpenDatabase(string path, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, valuetype Android.Database.Sqlite.DatabaseOpenFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDatabase", "(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="flags" Type="Android.Database.Sqlite.DatabaseOpenFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">to database file to open and/or create</param>
        <param name="factory">an optional factory class that is called to instantiate a
            cursor when query is called, or null for default</param>
        <param name="flags">to control database access mode</param>
        <summary>Open the database according to the flags <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READWRITE" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READONLY" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.CREATE_IF_NECESSARY" /></c> and/or <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open the database according to the flags <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READWRITE" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READONLY" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.CREATE_IF_NECESSARY" /></c> and/or <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Sets the locale of the database to the  the system's current locale.
 Call <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetLocale(Java.Util.Locale)" /></c> if you would like something else.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.Sqlite.SQLiteException">if the database cannot be opened
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenDatabase">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase OpenDatabase (string path, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, Android.Database.Sqlite.DatabaseOpenFlags flags, Android.Database.IDatabaseErrorHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase OpenDatabase(string path, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, valuetype Android.Database.Sqlite.DatabaseOpenFlags flags, class Android.Database.IDatabaseErrorHandler errorHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDatabase", "(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ILandroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="flags" Type="Android.Database.Sqlite.DatabaseOpenFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="errorHandler" Type="Android.Database.IDatabaseErrorHandler" />
      </Parameters>
      <Docs>
        <param name="path">to database file to open and/or create</param>
        <param name="factory">an optional factory class that is called to instantiate a
            cursor when query is called, or null for default</param>
        <param name="flags">to control database access mode</param>
        <param name="errorHandler">the <c><see cref="T:Android.Database.IDatabaseErrorHandler" /></c> obj to be used to handle corruption
 when sqlite reports database corruption</param>
        <summary>Open the database according to the flags <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READWRITE" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READONLY" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.CREATE_IF_NECESSARY" /></c> and/or <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open the database according to the flags <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READWRITE" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.OPEN_READONLY" /></c><c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.CREATE_IF_NECESSARY" /></c> and/or <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Sets the locale of the database to the  the system's current locale.
 Call <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.SetLocale(Java.Util.Locale)" /></c> if you would like something else.</para>
          <para tool="javadoc-to-mdoc">Accepts input param: a concrete instance of <c><see cref="T:Android.Database.IDatabaseErrorHandler" /></c> to be
 used to handle corruption when sqlite reports database corruption.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Android.Database.Sqlite.SQLiteException">if the database cannot be opened
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreateDatabase">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase (Java.IO.File file, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(class Java.IO.File file, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOrCreateDatabase", "(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Java.IO.File" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="factory">To be added.</param>
        <summary>Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase.CursorFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreateDatabase">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase (string path, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(string path, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOrCreateDatabase", "(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="factory">To be added.</param>
        <summary>Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreateDatabase">
      <MemberSignature Language="C#" Value="public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase (string path, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, Android.Database.IDatabaseErrorHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(string path, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, class Android.Database.IDatabaseErrorHandler errorHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOrCreateDatabase", "(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="errorHandler" Type="Android.Database.IDatabaseErrorHandler" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="factory">To be added.</param>
        <param name="errorHandler">To be added.</param>
        <summary>Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="PageSize">
      <MemberSignature Language="C#" Value="public virtual long PageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPageSize", "()J", "GetGetPageSizeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPageSize", "(J)V", "GetSetPageSize_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current database page size, in bytes.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getPageSize()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current database page size, in bytes.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setPageSize(long)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the database page size. The page size must be a power of two. This
 method does not work if any data has been written to the database file,
 and must be called right after the database has been created.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPath", "()Ljava/lang/String;", "GetGetPathHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the path to the database file.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the path to the database file.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getPath()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <summary>Query the given table, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given table, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="limit" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <param name="limit">Limits the number of rows returned by the query,
            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</param>
        <summary>Query the given table, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given table, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_ZLjava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distinct" Type="System.Boolean" />
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="limit" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="distinct">true if you want each row to be unique, false otherwise.</param>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <param name="limit">Limits the number of rows returned by the query,
            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</param>
        <summary>Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_ZLjava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distinct" Type="System.Boolean" />
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="limit" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="distinct">true if you want each row to be unique, false otherwise.</param>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <param name="limit">Limits the number of rows returned by the query,
            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or null if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryWithFactory">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor QueryWithFactory (Android.Database.Sqlite.SQLiteDatabase.ICursorFactory cursorFactory, bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryWithFactory(class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory cursorFactory, bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryWithFactory", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQueryWithFactory_Landroid_database_sqlite_SQLiteDatabase_CursorFactory_ZLjava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorFactory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="distinct" Type="System.Boolean" />
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="limit" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cursorFactory">the cursor factory to use, or null for the default factory</param>
        <param name="distinct">true if you want each row to be unique, false otherwise.</param>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <param name="limit">Limits the number of rows returned by the query,
            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</param>
        <summary>Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryWithFactory">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor QueryWithFactory (Android.Database.Sqlite.SQLiteDatabase.ICursorFactory cursorFactory, bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryWithFactory(class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory cursorFactory, bool distinct, string table, string[] columns, string selection, string[] selectionArgs, string groupBy, string having, string orderBy, string limit, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryWithFactory", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQueryWithFactory_Landroid_database_sqlite_SQLiteDatabase_CursorFactory_ZLjava_lang_String_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorFactory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="distinct" Type="System.Boolean" />
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="groupBy" Type="System.String" />
        <Parameter Name="having" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="limit" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="cursorFactory">the cursor factory to use, or null for the default factory</param>
        <param name="distinct">true if you want each row to be unique, false otherwise.</param>
        <param name="table">The table name to compile the query against.</param>
        <param name="columns">A list of which columns to return. Passing null will
            return all columns, which is discouraged to prevent reading
            data from storage that isn't going to be used.</param>
        <param name="selection">A filter declaring which rows to return, formatted as an
            SQL WHERE clause (excluding the WHERE itself). Passing null
            will return all rows for the given table.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be
         replaced by the values from selectionArgs, in order that they
         appear in the selection. The values will be bound as Strings.</param>
        <param name="groupBy">A filter declaring how to group rows, formatted as an SQL
            GROUP BY clause (excluding the GROUP BY itself). Passing null
            will cause the rows to not be grouped.</param>
        <param name="having">A filter declare which row groups to include in the cursor,
            if row grouping is being used, formatted as an SQL HAVING
            clause (excluding the HAVING itself). Passing null will cause
            all row groups to be included, and is required when row
            grouping is not being used.</param>
        <param name="orderBy">How to order the rows, formatted as an SQL ORDER BY clause
            (excluding the ORDER BY itself). Passing null will use the
            default sort order, which may be unordered.</param>
        <param name="limit">Limits the number of rows returned by the query,
            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or null if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the given URL, returning a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="T:Android.Database.ICursor" />
      </Docs>
    </Member>
    <Member MemberName="RawQuery">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor RawQuery (string sql, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor RawQuery(string sql, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("rawQuery", "(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;", "GetRawQuery_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="sql">the SQL query. The SQL string must not be ; terminated</param>
        <param name="selectionArgs">You may include ?s in where clause in the query,
     which will be replaced by the values from selectionArgs. The
     values will be bound as Strings.</param>
        <summary>Runs the provided SQL and returns a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs the provided SQL and returns a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQuery(java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawQuery">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor RawQuery (string sql, string[] selectionArgs, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor RawQuery(string sql, string[] selectionArgs, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("rawQuery", "(Ljava/lang/String;[Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetRawQuery_Ljava_lang_String_arrayLjava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="sql">the SQL query. The SQL string must not be ; terminated</param>
        <param name="selectionArgs">You may include ?s in where clause in the query,
     which will be replaced by the values from selectionArgs. The
     values will be bound as Strings.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or null if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Runs the provided SQL and returns a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs the provided SQL and returns a <c><see cref="T:Android.Database.ICursor" /></c> over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RawQueryWithFactory">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor RawQueryWithFactory (Android.Database.Sqlite.SQLiteDatabase.ICursorFactory cursorFactory, string sql, string[] selectionArgs, string editTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor RawQueryWithFactory(class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory cursorFactory, string sql, string[] selectionArgs, string editTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("rawQueryWithFactory", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetRawQueryWithFactory_Landroid_database_sqlite_SQLiteDatabase_CursorFactory_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorFactory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="editTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cursorFactory">the cursor factory to use, or null for the default factory</param>
        <param name="sql">the SQL query. The SQL string must not be ; terminated</param>
        <param name="selectionArgs">You may include ?s in where clause in the query,
     which will be replaced by the values from selectionArgs. The
     values will be bound as Strings.</param>
        <param name="editTable">the name of the first table, which is editable</param>
        <summary>Runs the provided SQL and returns a cursor over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs the provided SQL and returns a cursor over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, java.lang.String, java.lang.String[], java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawQueryWithFactory">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor RawQueryWithFactory (Android.Database.Sqlite.SQLiteDatabase.ICursorFactory cursorFactory, string sql, string[] selectionArgs, string editTable, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor RawQueryWithFactory(class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory cursorFactory, string sql, string[] selectionArgs, string editTable, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("rawQueryWithFactory", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetRawQueryWithFactory_Landroid_database_sqlite_SQLiteDatabase_CursorFactory_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorFactory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="editTable" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="cursorFactory">the cursor factory to use, or null for the default factory</param>
        <param name="sql">the SQL query. The SQL string must not be ; terminated</param>
        <param name="selectionArgs">You may include ?s in where clause in the query,
     which will be replaced by the values from selectionArgs. The
     values will be bound as Strings.</param>
        <param name="editTable">the name of the first table, which is editable</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or null if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Runs the provided SQL and returns a cursor over the result set.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs the provided SQL and returns a cursor over the result set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseMemory">
      <MemberSignature Language="C#" Value="public static int ReleaseMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReleaseMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseMemory", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to release memory that SQLite holds but does not require to
 operate properly.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to release memory that SQLite holds but does not require to
 operate properly. Typically this memory will come from the page cache.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#releaseMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public virtual long Replace (string table, string nullColumnHack, Android.Content.ContentValues initialValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Replace(string table, string nullColumnHack, class Android.Content.ContentValues initialValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("replace", "(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J", "GetReplace_Ljava_lang_String_Ljava_lang_String_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="nullColumnHack" Type="System.String" />
        <Parameter Name="initialValues" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="table">the table in which to replace the row</param>
        <param name="nullColumnHack">optional; may be <c>null</c>.
            SQL doesn't allow inserting a completely empty row without
            naming at least one column name.  If your provided <c>initialValues</c> is
            empty, no column names are known and an empty row can't be inserted.
            If not set to null, the <c>nullColumnHack</c> parameter
            provides the name of nullable column name to explicitly insert a NULL into
            in the case where your <c>initialValues</c> is empty.</param>
        <param name="initialValues">this map contains the initial column values for
   the row.</param>
        <summary>Convenience method for replacing a row in the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for replacing a row in the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#replace(java.lang.String, java.lang.String, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceOrThrow">
      <MemberSignature Language="C#" Value="public virtual long ReplaceOrThrow (string table, string nullColumnHack, Android.Content.ContentValues initialValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReplaceOrThrow(string table, string nullColumnHack, class Android.Content.ContentValues initialValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("replaceOrThrow", "(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J", "GetReplaceOrThrow_Ljava_lang_String_Ljava_lang_String_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="nullColumnHack" Type="System.String" />
        <Parameter Name="initialValues" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="table">the table in which to replace the row</param>
        <param name="nullColumnHack">optional; may be <c>null</c>.
            SQL doesn't allow inserting a completely empty row without
            naming at least one column name.  If your provided <c>initialValues</c> is
            empty, no column names are known and an empty row can't be inserted.
            If not set to null, the <c>nullColumnHack</c> parameter
            provides the name of nullable column name to explicitly insert a NULL into
            in the case where your <c>initialValues</c> is empty.</param>
        <param name="initialValues">this map contains the initial column values for
   the row. The key</param>
        <summary>Convenience method for replacing a row in the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for replacing a row in the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:SQLException" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="SetForeignKeyConstraintsEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetForeignKeyConstraintsEnabled (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetForeignKeyConstraintsEnabled(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setForeignKeyConstraintsEnabled", "(Z)V", "GetSetForeignKeyConstraintsEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">True to enable foreign key constraints, false to disable them.</param>
        <summary>Sets whether foreign key constraints are enabled for the database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets whether foreign key constraints are enabled for the database.
 </para>
          <para tool="javadoc-to-mdoc">
 By default, foreign key constraints are not enforced by the database.
 This method allows an application to enable foreign key constraints.
 It must be called each time the database is opened to ensure that foreign
 key constraints are enabled for the session.
 </para>
          <para tool="javadoc-to-mdoc">
 A good time to call this method is right after calling <c><see cref="M:Android.Database.Sqlite.SQLiteDatabase.OpenOrCreateDatabase(Java.IO.File,.ICursorFactory)" /></c>
 or in the <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnConfigure(Android.Database.Sqlite.SQLiteDatabase)" /></c> callback.
 </para>
          <para tool="javadoc-to-mdoc">
 When foreign key constraints are disabled, the database does not check whether
 changes to the database will violate foreign key constraints.  Likewise, when
 foreign key constraints are disabled, the database will not execute cascade
 delete or update triggers.  As a result, it is possible for the database
 state to become inconsistent.  To perform a database integrity check,
 call <c><see cref="P:Android.Database.Sqlite.SQLiteDatabase.IsDatabaseIntegrityOk" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This method must not be called while a transaction is in progress.
 </para>
          <para tool="javadoc-to-mdoc">
 See also 
 for more details about foreign key constraint support.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setForeignKeyConstraintsEnabled(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if the are transactions is in progress
 when this method is called.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLocale">
      <MemberSignature Language="C#" Value="public virtual void SetLocale (Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocale(class Java.Util.Locale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLocale", "(Ljava/util/Locale;)V", "GetSetLocale_Ljava_util_Locale_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">The new locale.</param>
        <summary>Sets the locale for this database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the locale for this database.  Does nothing if this database has
 the <c><see cref="!:Android.Database.Sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS" /></c> flag set or was opened read only.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setLocale(java.util.Locale)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException">if the locale could not be set.  The most common reason
 for this is that there is no collator available for the locale you requested.
 In this case the database remains unchanged.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLockingEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetLockingEnabled (bool lockingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLockingEnabled(bool lockingEnabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLockingEnabled", "(Z)V", "GetSetLockingEnabled_ZHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lockingEnabled">set to true to enable locks, false otherwise</param>
        <summary>Control whether or not the SQLiteDatabase is made thread-safe by using locks
 around critical sections.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Control whether or not the SQLiteDatabase is made thread-safe by using locks
 around critical sections. This is pretty expensive, so if you know that your
 DB will only be used by a single thread then you should set this to false.
 The default is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setLockingEnabled(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetMaximumSize">
      <MemberSignature Language="C#" Value="public virtual long SetMaximumSize (long numBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 SetMaximumSize(int64 numBytes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaximumSize", "(J)J", "GetSetMaximumSize_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numBytes" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="numBytes">the maximum database size, in bytes</param>
        <summary>Sets the maximum size the database will grow to.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the maximum size the database will grow to. The maximum size cannot
 be set below the current size.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setMaximumSize(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetMaxSqlCacheSize">
      <MemberSignature Language="C#" Value="public virtual void SetMaxSqlCacheSize (int cacheSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaxSqlCacheSize(int32 cacheSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaxSqlCacheSize", "(I)V", "GetSetMaxSqlCacheSize_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cacheSize">the size of the cache. can be (0 to <c><see cref="F:Android.Database.Sqlite.SQLiteDatabase.MaxSqlCacheSize" /></c>)</param>
        <summary>Sets the maximum size of the prepared-statement cache for this database.
 (size of the cache = number of compiled-sql-statements stored in the cache).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the maximum size of the prepared-statement cache for this database.
 (size of the cache = number of compiled-sql-statements stored in the cache).
</para>
          <para tool="javadoc-to-mdoc">
 Maximum cache size can ONLY be increased from its current size (default = 10).
 If this method is called with smaller size than the current maximum value,
 then IllegalStateException is thrown.
</para>
          <para tool="javadoc-to-mdoc">
 This method is thread-safe.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setMaxSqlCacheSize(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.Lang.IllegalStateException">if input cacheSize &gt; <c><see cref="F:Android.Database.Sqlite.SQLiteDatabase.MaxSqlCacheSize" /></c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetTransactionSuccessful">
      <MemberSignature Language="C#" Value="public virtual void SetTransactionSuccessful ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTransactionSuccessful() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTransactionSuccessful", "()V", "GetSetTransactionSuccessfulHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the current transaction as successful.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Marks the current transaction as successful. Do not do any more database work between
 calling this and calling endTransaction. Do as little non-database work as possible in that
 situation too. If any errors are encountered between this and endTransaction the transaction
 will still be committed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setTransactionSuccessful()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the current thread is not in a transaction or the
 transaction is already marked as successful.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SqliteMaxLikePatternLength">
      <MemberSignature Language="C#" Value="public const int SqliteMaxLikePatternLength = 50000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 SqliteMaxLikePatternLength = (50000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SQLITE_MAX_LIKE_PATTERN_LENGTH")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>50000</MemberValue>
      <Docs>
        <summary>Maximum Length Of A LIKE Or GLOB Pattern
 The pattern matching algorithm used in the default LIKE and GLOB implementation
 of SQLite can exhibit O(N^2) performance (where N is the number of characters in
 the pattern) for certain pathological cases.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum Length Of A LIKE Or GLOB Pattern
 The pattern matching algorithm used in the default LIKE and GLOB implementation
 of SQLite can exhibit O(N^2) performance (where N is the number of characters in
 the pattern) for certain pathological cases. To avoid denial-of-service attacks
 the length of the LIKE or GLOB pattern is limited to SQLITE_MAX_LIKE_PATTERN_LENGTH bytes.
 The default value of this limit is 50000. A modern workstation can evaluate
 even a pathological LIKE or GLOB pattern of 50000 bytes relatively quickly.
 The denial of service problem only comes into play when the pattern length gets
 into millions of bytes. Nevertheless, since most useful LIKE or GLOB patterns
 are at most a few dozen bytes in length, paranoid application developers may
 want to reduce this parameter to something in the range of a few hundred
 if they know that external users are able to generate arbitrary patterns.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SQLITE_MAX_LIKE_PATTERN_LENGTH" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SyncedTables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;string,string&gt; SyncedTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; SyncedTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSyncedTables", "()Ljava/util/Map;", "GetGetSyncedTablesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Deprecated.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Deprecated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getSyncedTables()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual int Update (string table, Android.Content.ContentValues values, string whereClause, string[] whereArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(string table, class Android.Content.ContentValues values, string whereClause, string[] whereArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("update", "(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Ljava_lang_String_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="whereClause" Type="System.String" />
        <Parameter Name="whereArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="table">the table to update in</param>
        <param name="values">a map from column names to new column values. null is a
            valid value that will be translated to NULL.</param>
        <param name="whereClause">the optional WHERE clause to apply when updating.
            Passing null will update all rows.</param>
        <param name="whereArgs">You may include ?s in the where clause, which
            will be replaced by the values from whereArgs. The values
            will be bound as Strings.</param>
        <summary>Convenience method for updating rows in the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for updating rows in the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UpdateWithOnConflict">
      <MemberSignature Language="C#" Value="public virtual int UpdateWithOnConflict (string table, Android.Content.ContentValues values, string whereClause, string[] whereArgs, Android.Database.Sqlite.Conflict conflictAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 UpdateWithOnConflict(string table, class Android.Content.ContentValues values, string whereClause, string[] whereArgs, valuetype Android.Database.Sqlite.Conflict conflictAlgorithm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("updateWithOnConflict", "(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;I)I", "GetUpdateWithOnConflict_Ljava_lang_String_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="whereClause" Type="System.String" />
        <Parameter Name="whereArgs" Type="System.String[]" />
        <Parameter Name="conflictAlgorithm" Type="Android.Database.Sqlite.Conflict">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="table">the table to update in</param>
        <param name="values">a map from column names to new column values. null is a
            valid value that will be translated to NULL.</param>
        <param name="whereClause">the optional WHERE clause to apply when updating.
            Passing null will update all rows.</param>
        <param name="whereArgs">You may include ?s in the where clause, which
            will be replaced by the values from whereArgs. The values
            will be bound as Strings.</param>
        <param name="conflictAlgorithm">for update conflict resolver</param>
        <summary>Convenience method for updating rows in the database.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for updating rows in the database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public virtual int Version { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVersion", "()I", "GetGetVersionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVersion", "(I)V", "GetSetVersion_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the database version.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getVersion()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the database version.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setVersion(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the database version.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="YieldIfContended">
      <MemberSignature Language="C#" Value="public virtual bool YieldIfContended ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool YieldIfContended() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("yieldIfContended", "()Z", "GetYieldIfContendedHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Temporarily end the transaction to let other threads run.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Temporarily end the transaction to let other threads run. The transaction is assumed to be
 successful so far. Do not call setTransactionSuccessful before calling this. When this
 returns a new transaction will have been created but not marked as successful.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContended()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="YieldIfContendedSafely">
      <MemberSignature Language="C#" Value="public virtual bool YieldIfContendedSafely ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool YieldIfContendedSafely() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("yieldIfContendedSafely", "()Z", "GetYieldIfContendedSafelyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Temporarily end the transaction to let other threads run.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Temporarily end the transaction to let other threads run. The transaction is assumed to be
 successful so far. Do not call setTransactionSuccessful before calling this. When this
 returns a new transaction will have been created but not marked as successful. This assumes
 that there are no nested transactions (beginTransaction has only been called once) and will
 throw an exception if that is not the case.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContendedSafely()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="YieldIfContendedSafely">
      <MemberSignature Language="C#" Value="public virtual bool YieldIfContendedSafely (long sleepAfterYieldDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool YieldIfContendedSafely(int64 sleepAfterYieldDelay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("yieldIfContendedSafely", "(J)Z", "GetYieldIfContendedSafely_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sleepAfterYieldDelay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sleepAfterYieldDelay">if &gt; 0, sleep this long before starting a new transaction if
   the lock was actually yielded. This will allow other background threads to make some
   more progress than they would if we started the transaction immediately.</param>
        <summary>Temporarily end the transaction to let other threads run.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Temporarily end the transaction to let other threads run. The transaction is assumed to be
 successful so far. Do not call setTransactionSuccessful before calling this. When this
 returns a new transaction will have been created but not marked as successful. This assumes
 that there are no nested transactions (beginTransaction has only been called once) and will
 throw an exception if that is not the case.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContendedSafely(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
  </Members>
</Type>
