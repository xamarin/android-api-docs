<Type Name="ContactsContract+Data" FullName="Android.Provider.ContactsContract+Data">
  <TypeSignature Language="C#" Value="public sealed class ContactsContract.Data : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ContactsContract/Data extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/ContactsContract$Data", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
 Constants for the data table, which contains data points tied to a raw
 contact.  Each row of the data table is typically used to store a single
 piece of contact
 information (such as a phone number) and its
 associated metadata (such as whether it is a work or home number).
 <format type="text/html"><h3>Data kinds</h3></format></para>
      <para tool="javadoc-to-mdoc">
 Data is a generic table that can hold any kind of contact data.
 The kind of data stored in a given row is specified by the row's
 <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Mimetype" tool="ReplaceLinkValue" /></c> value, which determines the meaning of the
 generic columns <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c> through
 <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c>.
 For example, if the data kind is
 <c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Phone" /></c>, then the column
 <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c> stores the
 phone number, but if the data kind is
 <c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Email" /></c>, then <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c>
 stores the email address.
 Sync adapters and applications can introduce their own data kinds.
 </para>
      <para tool="javadoc-to-mdoc">
 ContactsContract defines a small number of pre-defined data kinds, e.g.
 <c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Phone" /></c>, <c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Email" /></c> etc. As a
 convenience, these classes define data kind specific aliases for DATA1 etc.
 For example, <c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Phone" /></c> is the same as
 <c><see cref="T:Android.Provider.ContactsContract+Data" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>
          <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
        </c> is an indexed column and should be used for the data element that is
 expected to be most frequently used in query selections. For example, in the
 case of a row representing email addresses <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c> should probably
 be used for the email address itself, while <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data2" tool="ReplaceLinkValue" /></c> etc can be
 used for auxiliary information like type of email address.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Batch operations</h3>
        </format>
        <format type="text/html">
          <h3>Operations</h3>
        </format>
        <format type="text/html">
          <dl>
            <dt>
              <b>Insert</b>
            </dt>
            <dd>
 An example of a traditional insert:
 <example><code lang="java">
 ContentValues values = new ContentValues();
 values.put(Data.RAW_CONTACT_ID, rawContactId);
 values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
 values.put(Phone.NUMBER, "1-800-GOOG-411");
 values.put(Phone.TYPE, Phone.TYPE_CUSTOM);
 values.put(Phone.LABEL, "free directory assistance");
 Uri dataUri = getContentResolver().insert(Data.CONTENT_URI, values);
 </code></example><dt><b>Update</b></dt><dd /><dt><b>Delete</b></dt><dd /><dt><b>Query</b></dt><dd /></dd>
          </dl>
        </format>
        <format type="text/html">
          <h2>Columns</h2>
        </format>
        <format type="text/html">
          <table class="jd-sumtable">
            <tr>
              <th colspan="4">Data</th>
            </tr>
            <tr>
              <td style="width: 7em;">long</td>
              <td style="width: 20em;">
                <c>
                  <see cref="F:Android.Provider.BaseColumns.Id" />
                </c>
              </td>
              <td style="width: 5em;">read-only</td>
              <td>Row ID. Sync adapter should try to preserve row IDs during updates. In other words,
 it would be a bad idea to delete and reinsert a data row. A sync adapter should
 always do an update instead.</td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Mimetype" tool="ReplaceLinkValue" />
                </c>
              </td>
              <td>read/write-once</td>
              <td />
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.RawContactId" />
                </c>
              </td>
              <td>read/write-once</td>
              <td>The id of the row in the <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c> table that this data belongs to.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.IsPrimary" />
                </c>
              </td>
              <td>read/write</td>
              <td>Whether this is the primary entry of its kind for the raw contact it belongs to.
 "1" if true, "0" if false.
 </td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.IsSuperPrimary" />
                </c>
              </td>
              <td>read/write</td>
              <td>Whether this is the primary entry of its kind for the aggregate
 contact it belongs to. Any data record that is "super primary" must
 also be "primary".  For example, the super-primary entry may be
 interpreted as the default contact value of its kind (for example,
 the default phone number to use for the contact).</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.DataVersion" />
                </c>
              </td>
              <td>read-only</td>
              <td>The version of this data record. Whenever the data row changes
 the version goes up. This value is monotonically increasing.</td>
            </tr>
            <tr>
              <td>Any type</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data2" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data3" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data4" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data5" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data6" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data7" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data8" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Data9" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" />
                </c>
              </td>
              <td>read/write</td>
              <td />
            </tr>
            <tr>
              <td>Any type</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Sync1" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Sync2" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Sync3" />
                </c>
                <br />
                <c>
                  <see cref="F:Android.Provider.ContactsContract.DataColumns.Sync4" />
                </c>
              </td>
              <td>read/write</td>
              <td>Generic columns for use by sync adapters. For example, a Photo row
 may store the image URL in SYNC1, a status (not loaded, loading, loaded, error)
 in SYNC2, server-side version number in SYNC3 and error code in SYNC4.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <table class="jd-sumtable">
            <tr>
              <th colspan="4">Join with <c><see cref="T:Android.Provider.ContactsContract+StatusUpdates" /></c></th>
            </tr>
            <tr>
              <td style="width: 7em;">int</td>
              <td style="width: 20em;">
                <c>
                  <see cref="F:Android.Provider.ContactsContract+StatusColumns.Presence" />
                </c>
              </td>
              <td style="width: 5em;">read-only</td>
              <td>IM presence status linked to this data row. Compare with
 <c><see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactPresence" /></c>, which contains the contact's presence across
 all IM rows. See <c><see cref="T:Android.Provider.ContactsContract+StatusUpdates" /></c> for individual status definitions.
 The provider may choose not to store this value
 in persistent storage. The expectation is that presence status will be
 updated on a regular basis.
 </td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.StatusColumns.Status" />
                </c>
              </td>
              <td>read-only</td>
              <td>Latest status update linked with this data row.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.StatusColumns.StatusTimestamp" />
                </c>
              </td>
              <td>read-only</td>
              <td>The absolute time in milliseconds when the latest status was
 inserted/updated for this data row.</td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract+StatusColumns.StatusResPackage" />
                </c>
              </td>
              <td>read-only</td>
              <td>The package containing resources for this status: label and icon.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.StatusColumns.StatusLabel" />
                </c>
              </td>
              <td>read-only</td>
              <td>The resource ID of the label describing the source of status update linked
 to this data row. This resource is scoped by the <c><see cref="F:Android.Provider.ContactsContract+StatusColumns.StatusResPackage" /></c>.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.StatusColumns.StatusIcon" />
                </c>
              </td>
              <td>read-only</td>
              <td>The resource ID of the icon for the source of the status update linked
 to this data row. This resource is scoped by the <c><see cref="F:Android.Provider.ContactsContract+StatusColumns.StatusResPackage" /></c>.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <table class="jd-sumtable">
            <tr>
              <th colspan="4">Join with <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c></th>
            </tr>
            <tr>
              <td style="width: 7em;">long</td>
              <td style="width: 20em;">
                <c>
                  <see cref="F:Android.Provider.ContactsContract+RawContactsColumns.ContactId" />
                </c>
              </td>
              <td style="width: 5em;">read-only</td>
              <td>The id of the row in the <c><see cref="T:Android.Provider.Contacts" /></c> table that this data belongs
 to.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.RawContactsColumns.AggregationMode" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.RawContactsColumns.Deleted" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c>.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <table class="jd-sumtable">
            <tr>
              <th colspan="4">Join with <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c></th>
            </tr>
            <tr>
              <td style="width: 7em;">String</td>
              <td style="width: 20em;">
                <c>
                  <see cref="Android.Provider.ContactsContract+ContactsColumns.LookupKey" />
                </c>
              </td>
              <td style="width: 5em;">read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c></td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactsColumns.DisplayName" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c></td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactsColumns.PhotoId" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactsColumns.InVisibleGroup" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactsColumns.HasPhoneNumber" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactOptionsColumns.TimesContacted" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactOptionsColumns.LastTimeContacted" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactOptionsColumns.Starred" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactOptionsColumns.CustomRingtone" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactOptionsColumns.SendToVoicemail" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>int</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactPresence" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactStatus" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactStatusTimestamp" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>String</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactStatusResPackage" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactStatusLabel" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
            <tr>
              <td>long</td>
              <td>
                <c>
                  <see cref="F:Android.Provider.ContactsContract.ContactStatusColumns.ContactStatusIcon" />
                </c>
              </td>
              <td>read-only</td>
              <td>See <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>.</td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
 By convention, <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c> is used for storing BLOBs (binary data).
 </para>
      <para tool="javadoc-to-mdoc">
 The sync adapter for a given account type must correctly handle every data type
 used in the corresponding raw contacts.  Otherwise it could result in lost or
 corrupted data.
 </para>
      <para tool="javadoc-to-mdoc">
 Similarly, you should refrain from introducing new kinds of data for an other
 party's account types. For example, if you add a data row for
 "favorite song" to a raw contact owned by a Google account, it will not
 get synced to the server, because the Google sync adapter does not know
 how to handle this data kind. Thus new data kinds are typically
 introduced along with new account types, i.e. new sync adapters.
 </para>
      <para tool="javadoc-to-mdoc">
 Data rows can be inserted/updated/deleted using the traditional
 <c><see cref="M:Android.Content.ContentResolver.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c>, <c><see cref="M:Android.Content.ContentResolver.Update(Android.Net.Uri,Android.Content.ContentValues,Android.Content.ContentValues,Android.Content.ContentValues)" /></c> and
 <c><see cref="M:Android.Content.ContentResolver.Delete(Android.Net.Uri,System.String,System.String)" /></c> methods, however the newer mechanism based
 on a batch of <c><see cref="T:Android.Content.ContentProviderOperation" /></c> will prove to be a better
 choice in almost all cases. All operations in a batch are executed in a
 single transaction, which ensures that the phone-side and server-side
 state of a raw contact are always consistent. Also, the batch-based
 approach is far more efficient: not only are the database operations
 faster when executed in a single transaction, but also sending a batch of
 commands to the content provider saves a lot of time on context switching
 between your process and the process in which the content provider runs.
 </para>
      <para tool="javadoc-to-mdoc">
 The flip side of using batched operations is that a large batch may lock
 up the database for a long time preventing other applications from
 accessing data and potentially causing ANRs ("Application Not Responding"
 dialogs.)
 </para>
      <para tool="javadoc-to-mdoc">
 To avoid such lockups of the database, make sure to insert "yield points"
 in the batch. A yield point indicates to the content provider that before
 executing the next operation it can commit the changes that have already
 been made, yield to other requests, open another transaction and continue
 processing operations. A yield point will not automatically commit the
 transaction, but only if there is another request waiting on the
 database. Normally a sync adapter should insert a yield point at the
 beginning of each raw contact operation sequence in the batch. See
 <c><see cref="M:Android.Content.ContentProviderOperation.Builder.WithYieldAllowed(System.Boolean)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 An individual data row can be inserted using the traditional
 <c><see cref="M:Android.Content.ContentResolver.Insert(Android.Net.Uri,Android.Content.ContentValues)" /></c> method. Multiple rows
 should always be inserted as a batch.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
 The same done using ContentProviderOperations:
 <example><code lang="java">
 ArrayList&lt;ContentProviderOperation&gt; ops =
          new ArrayList&lt;ContentProviderOperation&gt;();

 ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)
          .withValue(Data.RAW_CONTACT_ID, rawContactId)
          .withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE)
          .withValue(Phone.NUMBER, "1-800-GOOG-411")
          .withValue(Phone.TYPE, Phone.TYPE_CUSTOM)
          .withValue(Phone.LABEL, "free directory assistance")
          .build());
 getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
 </code></example></para>
      <para tool="javadoc-to-mdoc">
 Just as with insert, update can be done incrementally or as a batch,
 the batch mode being the preferred method:
 <example><code lang="java">
 ArrayList&lt;ContentProviderOperation&gt; ops =
          new ArrayList&lt;ContentProviderOperation&gt;();

 ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI)
          .withSelection(Data._ID + "=?", new String[]{String.valueOf(dataId)})
          .withValue(Email.DATA, "somebody@android.com")
          .build());
 getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
 </code></example></para>
      <para tool="javadoc-to-mdoc">
 Just as with insert and update, deletion can be done either using the
 <c><see cref="M:Android.Content.ContentResolver.Delete(Android.Net.Uri,System.String,System.String)" /></c> method or using a ContentProviderOperation:
 <example><code lang="java">
 ArrayList&lt;ContentProviderOperation&gt; ops =
          new ArrayList&lt;ContentProviderOperation&gt;();

 ops.add(ContentProviderOperation.newDelete(Data.CONTENT_URI)
          .withSelection(Data._ID + "=?", new String[]{String.valueOf(dataId)})
          .build());
 getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
 </code></example></para>
      <para tool="javadoc-to-mdoc">
        <dl>
          <dt>Finding all Data of a given type for a given contact</dt>
          <dd>
            <example>
              <code lang="java">
 Cursor c = getContentResolver().query(Data.CONTENT_URI,
          new String[] {Data._ID, Phone.NUMBER, Phone.TYPE, Phone.LABEL},
          Data.CONTACT_ID + "=?" + " AND "
                  + Data.MIMETYPE + "='" + Phone.CONTENT_ITEM_TYPE + "'",
          new String[] {String.valueOf(contactId)}, null);
 </code>
            </example>
          </dd>
          <dt>Finding all Data of a given type for a given raw contact</dt>
          <dd>
            <example>
              <code lang="java">
 Cursor c = getContentResolver().query(Data.CONTENT_URI,
          new String[] {Data._ID, Phone.NUMBER, Phone.TYPE, Phone.LABEL},
          Data.RAW_CONTACT_ID + "=?" + " AND "
                  + Data.MIMETYPE + "='" + Phone.CONTENT_ITEM_TYPE + "'",
          new String[] {String.valueOf(rawContactId)}, null);
 </code>
            </example>
          </dd>
          <dt>Finding all Data for a given raw contact</dt>
          <dd>
 Most sync adapters will want to read all data rows for a raw contact
 along with the raw contact itself.  For that you should use the
 <c><see cref="T:Android.Provider.ContactsContract+RawContactsEntity" /></c>. See also <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c>.
 </dd>
        </dl>
      </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
 Many columns are available via a <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c> query.  For best performance you
 should explicitly specify a projection to only those columns that you need.
 </para>
      <para tool="javadoc-to-mdoc">The MIME type of the item represented by this row. Examples of common
 MIME types are:
 <list type="bullet"><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+StructuredName" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Phone" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Email" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Photo" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Organization" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Im" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Nickname" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Note" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+StructuredPostal" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+GroupMembership" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Website" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Event" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+Relation" /></c></term></item><item><term><c><see cref="T:Android.Provider.ContactsContract+CommonDataKinds+SipAddress" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
 Generic data columns.  The meaning of each column is determined by the
 <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Mimetype" tool="ReplaceLinkValue" /></c>.  By convention, <c><see cref="F:Android.Provider.ContactsContract+DataColumns.Data1" tool="ReplaceLinkValue" /></c> is used for storing
 BLOBs (binary data).
 </para>
      <para tool="javadoc-to-mdoc">
 Data columns whose meaning is not explicitly defined for a given MIMETYPE
 should not be used.  There is no guarantee that any sync adapter will
 preserve them.  Sync adapters themselves should not use such columns either,
 but should instead use <c><see cref="F:Android.Provider.ContactsContract.DataColumns.Sync1" /></c>-<c><see cref="F:Android.Provider.ContactsContract.DataColumns.Sync4" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Some columns from the most recent associated status update are also available
 through an implicit join.
 </para>
      <para tool="javadoc-to-mdoc">
 Some columns from the associated raw contact are also available through an
 implicit join.  The other columns are excluded as uninteresting in this
 context.
 </para>
      <para tool="javadoc-to-mdoc">
 The ID column for the associated aggregated contact table
 <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c> is available
 via the implicit join to the <c><see cref="T:Android.Provider.ContactsContract+RawContacts" /></c> table, see above.
 The remaining columns from this table are also
 available, through an implicit join.  This
 facilitates lookup by
 the value of a single data element, such as the email address.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/ContactsContract.Data.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 5" />
  </Docs>
  <Members>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public const string ContentType;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ContentType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_TYPE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The MIME type of the results from <c><see cref="P:Android.Provider.ContactsContract.Data.ContentUri" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The MIME type of the results from <c><see cref="P:Android.Provider.ContactsContract.Data.ContentUri" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Data.html#CONTENT_TYPE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ContentUri">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri ContentUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Net.Uri ContentUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_URI")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The content:// style URI for this table, which requests a directory
 of data rows matching the selection criteria.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The content:// style URI for this table, which requests a directory
 of data rows matching the selection criteria.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Data.html#CONTENT_URI" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ExtraAddressBookIndex">
      <MemberSignature Language="C#" Value="public const string ExtraAddressBookIndex;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAddressBookIndex" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADDRESS_BOOK_INDEX")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraAddressBookIndexCounts">
      <MemberSignature Language="C#" Value="public const string ExtraAddressBookIndexCounts;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAddressBookIndexCounts" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADDRESS_BOOK_INDEX_COUNTS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraAddressBookIndexTitles">
      <MemberSignature Language="C#" Value="public const string ExtraAddressBookIndexTitles;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAddressBookIndexTitles" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADDRESS_BOOK_INDEX_TITLES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContactLookupUri">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri GetContactLookupUri (Android.Content.ContentResolver resolver, Android.Net.Uri dataUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Net.Uri GetContactLookupUri(class Android.Content.ContentResolver resolver, class Android.Net.Uri dataUri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getContactLookupUri", "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Android.Content.ContentResolver" />
        <Parameter Name="dataUri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <param name="dataUri">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Build a <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentLookupUri" /></c>
 style <c><see cref="T:Android.Net.Uri" /></c> for the parent <c><see cref="T:Android.Provider.ContactsContract+Contacts" /></c>
 entry of the given <c><see cref="T:Android.Provider.ContactsContract+Data" /></c> entry.
 </para>
          <para tool="javadoc-to-mdoc">
 Returns the Uri for the contact in the first entry returned by
 <c><see cref="M:Android.Content.ContentResolver.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>
 for the provided <c>dataUri</c>.  If the query returns null or empty
 results, silently returns null.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Data.html#getContactLookupUri(android.content.ContentResolver, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleContactsOnly">
      <MemberSignature Language="C#" Value="public const string VisibleContactsOnly;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string VisibleContactsOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VISIBLE_CONTACTS_ONLY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A boolean parameter for <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A boolean parameter for <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c>.
 This specifies whether or not the returned data items should be filtered to show
 data items belonging to visible contacts only.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Data.html#VISIBLE_CONTACTS_ONLY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
  </Members>
</Type>
