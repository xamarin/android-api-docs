<Type Name="ContactsContract+StreamItemPhotos" FullName="Android.Provider.ContactsContract+StreamItemPhotos">
  <TypeSignature Language="C#" Value="public sealed class ContactsContract.StreamItemPhotos : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ContactsContract/StreamItemPhotos extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Provider.ContactsContract.StreamItemPhotos" />
  <TypeSignature Language="F#" Value="type ContactsContract.StreamItemPhotos = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/provider/ContactsContract$StreamItemPhotos", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/provider/ContactsContract$StreamItemPhotos", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Obsolete("This class is obsoleted in this android platform")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("This class is obsoleted in this android platform")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Constants for the stream_item_photos table, which contains photos associated with
            social stream updates.</summary>
    <remarks>
      <para>Constants for the stream_item_photos table, which contains photos associated with
            social stream updates.</para>
      <para>Access to social stream photos requires additional permissions beyond the read/write
            contact permissions required by the provider.  Querying for social stream photos
            requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating
            social stream photos requires android.permission.WRITE_SOCIAL_STREAM permission.</para>
      <para>&lt;h3&gt;Account check&lt;/h3&gt;</para>
      <para>The content URIs to the insert, update and delete operations are required to have the account
            information matching that of the owning raw contact as query parameters, namely
            <c>RawContacts#ACCOUNT_TYPE</c> and <c>RawContacts#ACCOUNT_NAME</c>.
            <c>RawContacts#DATA_SET</c> isn't required.</para>
      <para>&lt;h3&gt;Operations&lt;/h3&gt;
            &lt;dl&gt;
            &lt;dt&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/dt&gt;
            &lt;dd&gt;</para>
      <para>Social stream photo entries are associated with a social stream item.  Photos
            can be inserted into a social stream item in a couple of ways:
            &lt;dl&gt;
            &lt;dt&gt;
            Via the <c>StreamItems.StreamItemPhotos#CONTENT_DIRECTORY</c> sub-path of a
            stream item:
            &lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">ContentValues values = new ContentValues();
            values.put(StreamItemPhotos.SORT_INDEX, 1);
            values.put(StreamItemPhotos.PHOTO, photoData);
            Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();
            ContentUris.appendId(builder, streamItemId);
            builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            Uri photoUri = getContentResolver().insert(builder.build(), values);
            long photoId = ContentUris.parseId(photoUri);
            </code>
      <para>&lt;/dd&gt;
            &lt;dt&gt;Via the <c>ContactsContract.StreamItems#CONTENT_PHOTO_URI</c> URI:&lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">ContentValues values = new ContentValues();
            values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);
            values.put(StreamItemPhotos.SORT_INDEX, 1);
            values.put(StreamItemPhotos.PHOTO, photoData);
            Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            Uri photoUri = getContentResolver().insert(builder.build(), values);
            long photoId = ContentUris.parseId(photoUri);
            </code>
      <para>&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/p&gt;
            &lt;/dd&gt;
            &lt;dt&gt;&lt;b&gt;Update&lt;/b&gt;&lt;/dt&gt;
            &lt;dd&gt;</para>
      <para>Updates can only be made against a specific <c>StreamItemPhotos</c> entry,
            identified by both the stream item ID it belongs to and the stream item photo ID.
            This can be specified in two ways.
            &lt;dl&gt;
            &lt;dt&gt;Via the <c>StreamItems.StreamItemPhotos#CONTENT_DIRECTORY</c> sub-path of a
            stream item:
            &lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">ContentValues values = new ContentValues();
            values.put(StreamItemPhotos.PHOTO, newPhotoData);
            Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();
            ContentUris.appendId(builder, streamItemId);
            builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);
            ContentUris.appendId(builder, streamItemPhotoId);
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            getContentResolver().update(builder.build(), values, null, null);
            </code>
      <para>&lt;/dd&gt;
            &lt;dt&gt;Via the <c>ContactsContract.StreamItems#CONTENT_PHOTO_URI</c> URI:&lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">ContentValues values = new ContentValues();
            values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);
            values.put(StreamItemPhotos.PHOTO, newPhotoData);
            Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            getContentResolver().update(builder.build(), values);
            </code>
      <para>&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/p&gt;
            &lt;/dd&gt;
            &lt;dt&gt;&lt;b&gt;Delete&lt;/b&gt;&lt;/dt&gt;
            &lt;dd&gt;Deletes can be made against either a specific photo item in a stream item, or
            against all or a selected subset of photo items under a stream item.
            For example:
            &lt;dl&gt;
            &lt;dt&gt;Deleting a single photo via the
            <c>StreamItems.StreamItemPhotos#CONTENT_DIRECTORY</c> sub-path of a stream item:
            &lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();
            ContentUris.appendId(builder, streamItemId);
            builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);
            ContentUris.appendId(builder, streamItemPhotoId);
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            getContentResolver().delete(builder.build(), null, null);
            </code>
      <para>&lt;/dd&gt;
            &lt;dt&gt;Deleting all photos under a stream item&lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();
            ContentUris.appendId(builder, streamItemId);
            builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);
            builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);
            builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);
            getContentResolver().delete(builder.build(), null, null);
            </code>
      <para>&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/dd&gt;
            &lt;dt&gt;&lt;b&gt;Query&lt;/b&gt;&lt;/dt&gt;
            &lt;dl&gt;
            &lt;dt&gt;Querying for a specific photo in a stream item&lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">Cursor c = getContentResolver().query(
                ContentUris.withAppendedId(
                    Uri.withAppendedPath(
                        ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
                        StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
                    streamItemPhotoId), null, null, null, null);
            </code>
      <para>&lt;/dd&gt;
            &lt;dt&gt;Querying for all photos in a stream item&lt;/dt&gt;
            &lt;dd&gt;</para>
      <code lang="text/java">Cursor c = getContentResolver().query(
                Uri.withAppendedPath(
                    ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
                    StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
                null, null, null, StreamItemPhotos.SORT_INDEX);
            </code>
      <para>&lt;/dl&gt;
            The record will contain both a <c>StreamItemPhotos#PHOTO_FILE_ID</c> and a
            <c>StreamItemPhotos#PHOTO_URI</c>.  The <c>StreamItemPhotos#PHOTO_FILE_ID</c>
            can be used in conjunction with the <c>ContactsContract.DisplayPhoto</c> API to
            retrieve photo content, or you can open the <c>StreamItemPhotos#PHOTO_URI</c> as
            an asset file, as follows:</para>
      <code lang="text/java">public InputStream openDisplayPhoto(String photoUri) {
                try {
                    AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, "r");
                    return fd.createInputStream();
                } catch (IOException e) {
                    return null;
                }
            }
            &lt;pre&gt;
            &lt;/dd&gt;
            &lt;/dl&gt;
            
            @deprecated - Do not use. This will not be supported in the future. In the future,
            cursors returned from related queries will be empty.
            @removed</code>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/provider/ContactsContract.StreamItemPhotos" title="Reference documentation">Java documentation for <code>android.provider.ContactsContract.StreamItemPhotos</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 15" />
  </Docs>
  <Members>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Provider.ContactsContract.StreamItemPhotos.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Provider.ContactsContract.StreamItemPhotos.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Photo">
      <MemberSignature Language="C#" Value="public const string Photo;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Photo" />
      <MemberSignature Language="DocId" Value="F:Android.Provider.ContactsContract.StreamItemPhotos.Photo" />
      <MemberSignature Language="F#" Value="val mutable Photo : string" Usage="Android.Provider.ContactsContract.StreamItemPhotos.Photo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PHOTO")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PHOTO")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The binary representation of the photo.</summary>
        <remarks>
          <para>The binary representation of the photo.  Any size photo can be inserted;
            the provider will resize it appropriately for storage and display.</para>
          <para>This is only intended for use when inserting or updating a stream item photo.
            To retrieve the photo that was stored, open <c>StreamItemPhotos#PHOTO_URI</c>
            as an asset file.</para>
          <para>Type: BLOB</para>
          <para>This member is deprecated. - Do not use. This will not be supported in the future. In the future,
            cursors returned from related queries will be empty.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/provider/ContactsContract.StreamItemPhotos#PHOTO" title="Reference documentation">Java documentation for <code>android.provider.ContactsContract.StreamItemPhotos.PHOTO</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Provider.ContactsContract.StreamItemPhotos.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Provider.ContactsContract.StreamItemPhotos.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Provider.ContactsContract.StreamItemPhotos.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Provider.ContactsContract.StreamItemPhotos.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
