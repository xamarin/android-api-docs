<Type Name="LiveFolders" FullName="Android.Provider.LiveFolders">
  <TypeSignature Language="C#" Value="public sealed class LiveFolders : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LiveFolders extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/LiveFolders", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This class is obsoleted in this android platform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary tool="true">
      <list type="bullet">
        <item>
          <term>An activity that can respond to the intent action <c><see cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" /></c>. The
  activity is responsible for creating the live folder.</term>
        </item>
        <item>
          <term>A <c><see cref="T:Android.Content.ContentProvider" /></c> to provide the live folder items.</term>
        </item>
      </list>
      <format type="text/html">
        <h3>Lifecycle</h3>
      </format>
      <format type="text/html">
        <h3>Setting up the live folder activity</h3>
      </format>
      <example>
        <code lang="java">
 public static class MyLiveFolder extends Activity {
     public static final Uri CONTENT_URI = Uri.parse("content://my.app/live");

     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         final Intent intent = getIntent();
         final String action = intent.getAction();

         if (LiveFolders.ACTION_CREATE_LIVE_FOLDER.equals(action)) {
             setResult(RESULT_OK, createLiveFolder(this, CONTENT_URI, "My LiveFolder",
                     R.drawable.ic_launcher_contacts_phones));
         } else {
             setResult(RESULT_CANCELED);
         }

         finish();
     }

     private static Intent createLiveFolder(Context context, Uri uri, String name,
             int icon) {

         final Intent intent = new Intent();

         intent.setData(uri);
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_NAME, name);
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_ICON,
                 Intent.ShortcutIconResource.fromContext(context, icon));
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_DISPLAY_MODE, LiveFolders.DISPLAY_MODE_LIST);

         return intent;
     }
 }
 </code>
      </example>
      <format type="text/html">
        <table border="2" width="85%" align="center" frame="hsides" rules="rows">
          <thead>
            <tr>
              <th>Component</th>
              <th>Type</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>URI</th>
              <td>URI</td>
              <td>The ContentProvider URI</td>
              <td align="center">Yes</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderName" />
                </c>
              </th>
              <td>Extra String</td>
              <td>The name of the live folder</td>
              <td align="center">Yes</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderIcon" />
                </c>
              </th>
              <td>Extra <c><see cref="!:NoType:android/content/Intent$ShortcutIconResource;Href=../../../reference/android/content/Intent.ShortcutIconResource.html" /></c></td>
              <td>The icon of the live folder</td>
              <td align="center">Yes</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderDisplayMode" />
                </c>
              </th>
              <td>Extra int</td>
              <td>The display mode of the live folder. The value must be either
         <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_GRID" /></c> or <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_LIST" /></c>.</td>
              <td align="center">Yes</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderBaseIntent" />
                </c>
              </th>
              <td>Extra Intent</td>
              <td>When the user clicks an item inside a live folder, the system will either fire
         the intent associated with that item or, if present, the live folder's base intent
         with the id of the item appended to the base intent's URI.</td>
              <td align="center">No</td>
            </tr>
          </tbody>
        </table>
      </format>
      <format type="text/html">
        <h3>Setting up the content provider</h3>
      </format>
      <format type="text/html">
        <table border="2" width="85%" align="center" frame="hsides" rules="rows">
          <thead>
            <tr>
              <th>Column</th>
              <th>Type</th>
              <th>Description</th>
              <th>Required</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.Name" />
                </c>
              </th>
              <td>String</td>
              <td>The name of the item</td>
              <td align="center">Yes</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.Description" />
                </c>
              </th>
              <td>String</td>
              <td>The description of the item. The description is ignored when the live folder's
         display mode is <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_GRID" /></c>.</td>
              <td align="center">No</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.Intent" />
                </c>
              </th>
              <td>
                <c>
                  <see cref="T:Android.Content.Intent" />
                </c>
              </td>
              <td>The intent to fire when the item is clicked. Ignored when the live folder defines
         a base intent.</td>
              <td align="center">No</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.IconBitmap" />
                </c>
              </th>
              <td>Bitmap</td>
              <td>The icon for the item. When this column value is not null, the values for the
         columns <c><see cref="F:Android.Provider.LiveFolders.IconPackage" /></c> and <c><see cref="F:Android.Provider.LiveFolders.IconResource" /></c> must be null.</td>
              <td align="center">No</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.IconPackage" />
                </c>
              </th>
              <td>String</td>
              <td>The package of the item's icon. When this value is not null, the value for the
         column <c><see cref="F:Android.Provider.LiveFolders.IconResource" /></c> must be specified and the value for the column
         <c><see cref="F:Android.Provider.LiveFolders.IconBitmap" /></c> must be null.</td>
              <td align="center">No</td>
            </tr>
            <tr>
              <th>
                <c>
                  <see cref="F:Android.Provider.LiveFolders.IconResource" />
                </c>
              </th>
              <td>String</td>
              <td>The resource name of the item's icon. When this value is not null, the value for the
         column <c><see cref="F:Android.Provider.LiveFolders.IconPackage" /></c> must be specified and the value for the column
         <c><see cref="F:Android.Provider.LiveFolders.IconBitmap" /></c> must be null.</td>
              <td align="center">No</td>
            </tr>
          </tbody>
        </table>
      </format>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <list type="bullet">
          <item>
            <term>An activity that can respond to the intent action <c><see cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" /></c>. The
  activity is responsible for creating the live folder.</term>
          </item>
          <item>
            <term>A <c><see cref="T:Android.Content.ContentProvider" /></c> to provide the live folder items.</term>
          </item>
        </list>
        <format type="text/html">
          <h3>Lifecycle</h3>
        </format>
        <format type="text/html">
          <h3>Setting up the live folder activity</h3>
        </format>
        <example>
          <code lang="java">
 public static class MyLiveFolder extends Activity {
     public static final Uri CONTENT_URI = Uri.parse("content://my.app/live");

     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         final Intent intent = getIntent();
         final String action = intent.getAction();

         if (LiveFolders.ACTION_CREATE_LIVE_FOLDER.equals(action)) {
             setResult(RESULT_OK, createLiveFolder(this, CONTENT_URI, "My LiveFolder",
                     R.drawable.ic_launcher_contacts_phones));
         } else {
             setResult(RESULT_CANCELED);
         }

         finish();
     }

     private static Intent createLiveFolder(Context context, Uri uri, String name,
             int icon) {

         final Intent intent = new Intent();

         intent.setData(uri);
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_NAME, name);
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_ICON,
                 Intent.ShortcutIconResource.fromContext(context, icon));
         intent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_DISPLAY_MODE, LiveFolders.DISPLAY_MODE_LIST);

         return intent;
     }
 }
 </code>
        </example>
        <format type="text/html">
          <table border="2" width="85%" align="center" frame="hsides" rules="rows">
            <thead>
              <tr>
                <th>Component</th>
                <th>Type</th>
                <th>Description</th>
                <th>Required</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>URI</th>
                <td>URI</td>
                <td>The ContentProvider URI</td>
                <td align="center">Yes</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderName" />
                  </c>
                </th>
                <td>Extra String</td>
                <td>The name of the live folder</td>
                <td align="center">Yes</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderIcon" />
                  </c>
                </th>
                <td>Extra <c><see cref="!:NoType:android/content/Intent$ShortcutIconResource;Href=../../../reference/android/content/Intent.ShortcutIconResource.html" /></c></td>
                <td>The icon of the live folder</td>
                <td align="center">Yes</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderDisplayMode" />
                  </c>
                </th>
                <td>Extra int</td>
                <td>The display mode of the live folder. The value must be either
         <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_GRID" /></c> or <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_LIST" /></c>.</td>
                <td align="center">Yes</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.ExtraLiveFolderBaseIntent" />
                  </c>
                </th>
                <td>Extra Intent</td>
                <td>When the user clicks an item inside a live folder, the system will either fire
         the intent associated with that item or, if present, the live folder's base intent
         with the id of the item appended to the base intent's URI.</td>
                <td align="center">No</td>
              </tr>
            </tbody>
          </table>
        </format>
        <format type="text/html">
          <h3>Setting up the content provider</h3>
        </format>
        <format type="text/html">
          <table border="2" width="85%" align="center" frame="hsides" rules="rows">
            <thead>
              <tr>
                <th>Column</th>
                <th>Type</th>
                <th>Description</th>
                <th>Required</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.Name" />
                  </c>
                </th>
                <td>String</td>
                <td>The name of the item</td>
                <td align="center">Yes</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.Description" />
                  </c>
                </th>
                <td>String</td>
                <td>The description of the item. The description is ignored when the live folder's
         display mode is <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_GRID" /></c>.</td>
                <td align="center">No</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.Intent" />
                  </c>
                </th>
                <td>
                  <c>
                    <see cref="T:Android.Content.Intent" />
                  </c>
                </td>
                <td>The intent to fire when the item is clicked. Ignored when the live folder defines
         a base intent.</td>
                <td align="center">No</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.IconBitmap" />
                  </c>
                </th>
                <td>Bitmap</td>
                <td>The icon for the item. When this column value is not null, the values for the
         columns <c><see cref="F:Android.Provider.LiveFolders.IconPackage" /></c> and <c><see cref="F:Android.Provider.LiveFolders.IconResource" /></c> must be null.</td>
                <td align="center">No</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.IconPackage" />
                  </c>
                </th>
                <td>String</td>
                <td>The package of the item's icon. When this value is not null, the value for the
         column <c><see cref="F:Android.Provider.LiveFolders.IconResource" /></c> must be specified and the value for the column
         <c><see cref="F:Android.Provider.LiveFolders.IconBitmap" /></c> must be null.</td>
                <td align="center">No</td>
              </tr>
              <tr>
                <th>
                  <c>
                    <see cref="F:Android.Provider.LiveFolders.IconResource" />
                  </c>
                </th>
                <td>String</td>
                <td>The resource name of the item's icon. When this value is not null, the value for the
         column <c><see cref="F:Android.Provider.LiveFolders.IconPackage" /></c> must be specified and the value for the column
         <c><see cref="F:Android.Provider.LiveFolders.IconBitmap" /></c> must be null.</td>
                <td align="center">No</td>
              </tr>
            </tbody>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">A LiveFolder is a special folder whose content is provided by a
 <c><see cref="T:Android.Content.ContentProvider" /></c>. To create a live folder, two components
 are required:</para>
      <para tool="javadoc-to-mdoc">When a user wants to create a live folder, the system looks for all activities with the
 intent filter action <c><see cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" /></c> and presents the list to the user.
 When the user chooses one of the activities, the activity is invoked with the
 <c><see cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" /></c> action. The activity then creates the live folder and
 passes it back to the system by setting it as an
 <c><see cref="M:Android.App.Activity.SetResult(Android.App.Result,Android.Content.Intent)" /></c>. The
 live folder is described by a content provider URI, a name, an icon and a display mode.
 Finally, when the user opens the live folder, the system queries the content provider
 to retrieve the folder's content.</para>
      <para tool="javadoc-to-mdoc">The following code sample shows how to write an activity that creates a live folder:</para>
      <para tool="javadoc-to-mdoc">The live folder is described by an <c><see cref="T:Android.Content.Intent" /></c> as follows:</para>
      <para tool="javadoc-to-mdoc">The live folder's content provider must, upon query, return a <c><see cref="T:Android.Database.ICursor" /></c>
 whose columns match the following names:</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/LiveFolders.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3Deprecated since API level 14" />
  </Docs>
  <Members>
    <Member MemberName="ActionCreateLiveFolder">
      <MemberSignature Language="C#" Value="public const string ActionCreateLiveFolder;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionCreateLiveFolder" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_CREATE_LIVE_FOLDER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity Action: Creates a live folder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activity Action: Creates a live folder.
 </para>
          <para tool="javadoc-to-mdoc">Input: Nothing.</para>
          <para tool="javadoc-to-mdoc">Output: An Intent representing the live folder. The intent must contain four
 extras: EXTRA_LIVE_FOLDER_NAME (value: String),
 EXTRA_LIVE_FOLDER_ICON (value: ShortcutIconResource),
 EXTRA_LIVE_FOLDER_URI (value: String) and
 EXTRA_LIVE_FOLDER_DISPLAY_MODE (value: int). The Intent can optionnally contain
 EXTRA_LIVE_FOLDER_BASE_INTENT (value: Intent).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#ACTION_CREATE_LIVE_FOLDER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderName" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderIcon" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderDisplayMode" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderBaseIntent" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public const string Description;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Description" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DESCRIPTION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Description of the live folder item. This value is ignored if the
 live folder's display mode is <c><see cref="!:Android.Provider.LiveFolders.DISPLAY_MODE_GRID" /></c>.</para>
          <para tool="javadoc-to-mdoc">Optional.</para>
          <para tool="javadoc-to-mdoc">Type: String.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#DESCRIPTION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLiveFolderBaseIntent">
      <MemberSignature Language="C#" Value="public const string ExtraLiveFolderBaseIntent;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLiveFolderBaseIntent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_LIVE_FOLDER_BASE_INTENT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the extra used to define the base Intent of a live folder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The name of the extra used to define the base Intent of a live folder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_BASE_INTENT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLiveFolderDisplayMode">
      <MemberSignature Language="C#" Value="public const string ExtraLiveFolderDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLiveFolderDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_LIVE_FOLDER_DISPLAY_MODE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the extra used to define the display mode of a live folder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The name of the extra used to define the display mode of a live folder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_DISPLAY_MODE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLiveFolderIcon">
      <MemberSignature Language="C#" Value="public const string ExtraLiveFolderIcon;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLiveFolderIcon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_LIVE_FOLDER_ICON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the extra used to define the icon of a live folder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The name of the extra used to define the icon of a live folder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_ICON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLiveFolderName">
      <MemberSignature Language="C#" Value="public const string ExtraLiveFolderName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLiveFolderName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_LIVE_FOLDER_NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the extra used to define the name of a live folder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The name of the extra used to define the name of a live folder.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ActionCreateLiveFolder" />
      </Docs>
    </Member>
    <Member MemberName="IconBitmap">
      <MemberSignature Language="C#" Value="public const string IconBitmap;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IconBitmap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ICON_BITMAP")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Icon of the live folder item, as a custom bitmap.</para>
          <para tool="javadoc-to-mdoc">Optional.</para>
          <para tool="javadoc-to-mdoc">Type: <c><see cref="T:Android.Graphics.Bitmap" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#ICON_BITMAP" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IconPackage">
      <MemberSignature Language="C#" Value="public const string IconPackage;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IconPackage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ICON_PACKAGE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Package where to find the icon of the live folder item. This value can be
 obtained easily using
 <c><see cref="!:NoType:android/content/Intent$ShortcutIconResource;Href=../../../reference/android/content/Intent.ShortcutIconResource.html#fromContext(android.content.Context,int)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Optional.</para>
          <para tool="javadoc-to-mdoc">Type: String.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#ICON_PACKAGE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.IconResource" />
      </Docs>
    </Member>
    <Member MemberName="IconResource">
      <MemberSignature Language="C#" Value="public const string IconResource;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IconResource" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ICON_RESOURCE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Resource name of the live folder item. This value can be obtained easily using
 <c><see cref="!:NoType:android/content/Intent$ShortcutIconResource;Href=../../../reference/android/content/Intent.ShortcutIconResource.html#fromContext(android.content.Context,int)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Optional.</para>
          <para tool="javadoc-to-mdoc">Type: String.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#ICON_RESOURCE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.IconPackage" />
      </Docs>
    </Member>
    <Member MemberName="Intent">
      <MemberSignature Language="C#" Value="public const string Intent;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Intent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTENT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Intent of the live folder item.</para>
          <para tool="javadoc-to-mdoc">Optional if the live folder has a base intent.</para>
          <para tool="javadoc-to-mdoc">Type: <c><see cref="T:Android.Content.Intent" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#INTENT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="F:Android.Provider.LiveFolders.ExtraLiveFolderBaseIntent" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public const string Name;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Name" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Content provider column.</para>
          <para tool="javadoc-to-mdoc">Name of the live folder item.</para>
          <para tool="javadoc-to-mdoc">Required.</para>
          <para tool="javadoc-to-mdoc">Type: String.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/LiveFolders.html#NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
