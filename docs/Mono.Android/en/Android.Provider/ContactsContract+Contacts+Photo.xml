<Type Name="ContactsContract+Contacts+Photo" FullName="Android.Provider.ContactsContract+Contacts+Photo">
  <TypeSignature Language="C#" Value="public sealed class ContactsContract.Contacts.Photo : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ContactsContract/Contacts/Photo extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/ContactsContract$Contacts$Photo", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <format type="text/html"><i>read-only</i></format> sub-directory of a single contact that contains
 the contact's primary photo.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <format type="text/html"><i>read-only</i></format> sub-directory of a single contact that contains
 the contact's primary photo.  The photo may be stored in up to two ways -
 the default "photo" is a thumbnail-sized image stored directly in the data
 row, while the "display photo", if present, is a larger version stored as
 a file.
 </para>
      <para tool="javadoc-to-mdoc">
 Usage example:
 <format type="text/html"><dl><dt>Retrieving the thumbnail-sized photo</dt><dd><example><code lang="java">
 public InputStream openPhoto(long contactId) {
     Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
     Uri photoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.CONTENT_DIRECTORY);
     Cursor cursor = getContentResolver().query(photoUri,
          new String[] {Contacts.Photo.PHOTO}, null, null, null);
     if (cursor == null) {
         return null;
     }
     try {
         if (cursor.moveToFirst()) {
             byte[] data = cursor.getBlob(0);
             if (data != null) {
                 return new ByteArrayInputStream(data);
             }
         }
     } finally {
         cursor.close();
     }
     return null;
 }
 </code></example></dd><dt>Retrieving the larger photo version</dt><dd><example><code lang="java">
 public InputStream openDisplayPhoto(long contactId) {
     Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
     Uri displayPhotoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.DISPLAY_PHOTO);
     try {
         AssetFileDescriptor fd =
             getContentResolver().openAssetFileDescriptor(displayPhotoUri, "r");
         return fd.createInputStream();
     } catch (IOException e) {
         return null;
     }
 }
 </code></example></dd></dl></format></para>
      <para tool="javadoc-to-mdoc">You may also consider using the convenience method
 <c><see cref="M:Android.Provider.ContactsContract.Contacts.OpenContactPhotoInputStream(Android.Content.ContentResolver,Android.Net.Uri,Android.Net.Uri)" /></c>
 to retrieve the raw photo contents of either the thumbnail-sized or the full-sized photo.
 </para>
      <para tool="javadoc-to-mdoc">
 This directory can be used either with a <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c> or
 <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentLookupUri" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 5" />
  </Docs>
  <Members>
    <Member MemberName="ContentDirectory">
      <MemberSignature Language="C#" Value="public const string ContentDirectory;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ContentDirectory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_DIRECTORY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The directory twig for this sub-table
</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The directory twig for this sub-table
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#CONTENT_DIRECTORY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="DisplayPhoto">
      <MemberSignature Language="C#" Value="public const string DisplayPhoto;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DisplayPhoto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DISPLAY_PHOTO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The directory twig for retrieving the full-size display photo.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The directory twig for retrieving the full-size display photo.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#DISPLAY_PHOTO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="PhotoColumnId">
      <MemberSignature Language="C#" Value="public const string PhotoColumnId;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PhotoColumnId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PHOTO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Thumbnail photo of the raw contact.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Thumbnail photo of the raw contact. This is the raw bytes of an image
 that could be inflated using <c><see cref="T:Android.Graphics.BitmapFactory" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Type: BLOB
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#PHOTO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="PhotoFileId">
      <MemberSignature Language="C#" Value="public const string PhotoFileId;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PhotoFileId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PHOTO_FILE_ID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Full-size photo file ID of the raw contact.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Full-size photo file ID of the raw contact.
 See <c><see cref="T:Android.Provider.ContactsContract+DisplayPhoto" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Type: NUMBER
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#PHOTO_FILE_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
