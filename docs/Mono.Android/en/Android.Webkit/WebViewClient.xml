<Type Name="WebViewClient" FullName="Android.Webkit.WebViewClient">
  <TypeSignature Language="C#" Value="public class WebViewClient : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebViewClient extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/webkit/WebViewClient", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <format type="text/html">
        <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html" target="_blank">[Android Documentation]</a>
      </format>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebViewClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#WebViewClient()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebViewClient (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUpdateVisitedHistory">
      <MemberSignature Language="C#" Value="public virtual void DoUpdateVisitedHistory (Android.Webkit.WebView view, string url, bool isReload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoUpdateVisitedHistory(class Android.Webkit.WebView view, string url, bool isReload) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("doUpdateVisitedHistory", "(Landroid/webkit/WebView;Ljava/lang/String;Z)V", "GetDoUpdateVisitedHistory_Landroid_webkit_WebView_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="isReload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="url">The url being visited.</param>
        <param name="isReload">True if this url is being reloaded.
</param>
        <summary>Notify the host application to update its visited links database.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application to update its visited links database.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#doUpdateVisitedHistory(android.webkit.WebView, java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnFormResubmission">
      <MemberSignature Language="C#" Value="public virtual void OnFormResubmission (Android.Webkit.WebView view, Android.OS.Message dontResend, Android.OS.Message resend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnFormResubmission(class Android.Webkit.WebView view, class Android.OS.Message dontResend, class Android.OS.Message resend) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFormResubmission", "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V", "GetOnFormResubmission_Landroid_webkit_WebView_Landroid_os_Message_Landroid_os_Message_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="dontResend" Type="Android.OS.Message" />
        <Parameter Name="resend" Type="Android.OS.Message" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="dontResend">The message to send if the browser should not resend</param>
        <param name="resend">The message to send if the browser should resend data
</param>
        <summary>As the host application if the browser should resend data as the
 requested page was a result of a POST.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">As the host application if the browser should resend data as the
 requested page was a result of a POST. The default is to not resend the
 data.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onFormResubmission(android.webkit.WebView, android.os.Message, android.os.Message)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLoadResource">
      <MemberSignature Language="C#" Value="public virtual void OnLoadResource (Android.Webkit.WebView view, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLoadResource(class Android.Webkit.WebView view, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLoadResource", "(Landroid/webkit/WebView;Ljava/lang/String;)V", "GetOnLoadResource_Landroid_webkit_WebView_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="url">The url of the resource the WebView will load.
</param>
        <summary>Notify the host application that the WebView will load the resource
 specified by the given url.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that the WebView will load the resource
 specified by the given url.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onLoadResource(android.webkit.WebView, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPageFinished">
      <MemberSignature Language="C#" Value="public virtual void OnPageFinished (Android.Webkit.WebView view, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPageFinished(class Android.Webkit.WebView view, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPageFinished", "(Landroid/webkit/WebView;Ljava/lang/String;)V", "GetOnPageFinished_Landroid_webkit_WebView_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="url">The url of the page.
</param>
        <summary>Notify the host application that a page has finished loading.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that a page has finished loading. This method
 is called only for main frame. When onPageFinished() is called, the
 rendering picture may not be updated yet. To get the notification for the
 new Picture, use <c><see cref="!:NoType:android/webkit/WebView$PictureListener;Href=../../../reference/android/webkit/WebView.PictureListener.html#onNewPicture(android.webkit.WebView,android.graphics.Picture)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onPageFinished(android.webkit.WebView, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPageStarted">
      <MemberSignature Language="C#" Value="public virtual void OnPageStarted (Android.Webkit.WebView view, string url, Android.Graphics.Bitmap favicon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPageStarted(class Android.Webkit.WebView view, string url, class Android.Graphics.Bitmap favicon) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPageStarted", "(Landroid/webkit/WebView;Ljava/lang/String;Landroid/graphics/Bitmap;)V", "GetOnPageStarted_Landroid_webkit_WebView_Ljava_lang_String_Landroid_graphics_Bitmap_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="favicon" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="url">The url to be loaded.</param>
        <param name="favicon">The favicon for this page if it already exists in the
            database.
</param>
        <summary>Notify the host application that a page has started loading.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that a page has started loading. This method
 is called once for each main frame load so a page with iframes or
 framesets will call onPageStarted one time for the main frame. This also
 means that onPageStarted will not be called when the contents of an
 embedded frame changes, i.e. clicking a link whose target is an iframe,
 it will also not be called for fragment navigations (navigations to
 #fragment_id).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onPageStarted(android.webkit.WebView, java.lang.String, android.graphics.Bitmap)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnReceivedClientCertRequest">
      <MemberSignature Language="C#" Value="public virtual void OnReceivedClientCertRequest (Android.Webkit.WebView view, Android.Webkit.ClientCertRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceivedClientCertRequest(class Android.Webkit.WebView view, class Android.Webkit.ClientCertRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceivedClientCertRequest", "(Landroid/webkit/WebView;Landroid/webkit/ClientCertRequest;)V", "GetOnReceivedClientCertRequest_Landroid_webkit_WebView_Landroid_webkit_ClientCertRequest_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="request" Type="Android.Webkit.ClientCertRequest" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback</param>
        <param name="request">An instance of a <c><see cref="T:Android.Webkit.ClientCertRequest" /></c></param>
        <summary>Notify the host application to handle a SSL client certificate
 request.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application to handle a SSL client certificate
 request. The host application is responsible for showing the UI
 if desired and providing the keys. There are three ways to
 respond: proceed(), cancel() or ignore(). Webview stores the response
 in memory (for the life of the application) if proceed() or cancel() is
 called and does not call onReceivedClientCertRequest() again for the
 same host and port pair. Webview does not store the response if ignore()
 is called.

 This method is called on the UI thread. During the callback, the
 connection is suspended.

 For most use cases, the application program should implement the
 <c><see cref="T:Android.Security.IKeyChainAliasCallback" /></c> interface and pass it to
 <c><see cref="M:Android.Security.KeyChain.ChoosePrivateKeyAlias(Android.App.Activity,Android.Security.IKeyChainAliasCallback,Android.Security.IKeyChainAliasCallback,Android.Security.IKeyChainAliasCallback,Android.Security.IKeyChainAliasCallback,Android.Security.IKeyChainAliasCallback)" /></c> to start an
 activity for the user to choose the proper alias. The keychain activity will
 provide the alias through the callback method in the implemented interface. Next
 the application should create an async task to call
 <c><see cref="M:Android.Security.KeyChain.GetPrivateKey(Android.Content.Context,System.String)" /></c> to receive the key.

 An example implementation of client certificates can be seen at
 

 The default behavior is to cancel, returning no client certificate.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedClientCertRequest(android.webkit.WebView, android.webkit.ClientCertRequest)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReceivedError">
      <MemberSignature Language="C#" Value="public virtual void OnReceivedError (Android.Webkit.WebView view, Android.Webkit.ClientError errorCode, string description, string failingUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceivedError(class Android.Webkit.WebView view, valuetype Android.Webkit.ClientError errorCode, string description, string failingUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceivedError", "(Landroid/webkit/WebView;ILjava/lang/String;Ljava/lang/String;)V", "GetOnReceivedError_Landroid_webkit_WebView_ILjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="errorCode" Type="Android.Webkit.ClientError">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="failingUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="errorCode">The error code corresponding to an ERROR_* value.</param>
        <param name="description">A String describing the error.</param>
        <param name="failingUrl">The url that failed to load.</param>
        <summary>Report an error to the host application.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Report an error to the host application. These errors are unrecoverable
 (i.e. the main resource is unavailable). The errorCode parameter
 corresponds to one of the ERROR_* constants.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedError(android.webkit.WebView, int, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnReceivedHttpAuthRequest">
      <MemberSignature Language="C#" Value="public virtual void OnReceivedHttpAuthRequest (Android.Webkit.WebView view, Android.Webkit.HttpAuthHandler handler, string host, string realm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceivedHttpAuthRequest(class Android.Webkit.WebView view, class Android.Webkit.HttpAuthHandler handler, string host, string realm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceivedHttpAuthRequest", "(Landroid/webkit/WebView;Landroid/webkit/HttpAuthHandler;Ljava/lang/String;Ljava/lang/String;)V", "GetOnReceivedHttpAuthRequest_Landroid_webkit_WebView_Landroid_webkit_HttpAuthHandler_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="handler" Type="Android.Webkit.HttpAuthHandler" />
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="realm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">the WebView that is initiating the callback</param>
        <param name="handler">the HttpAuthHandler used to set the WebView's response</param>
        <param name="host">the host requiring authentication</param>
        <param name="realm">the realm for which authentication is required</param>
        <summary>Notifies the host application that the WebView received an HTTP
 authentication request.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies the host application that the WebView received an HTTP
 authentication request. The host application can use the supplied
 <c><see cref="T:Android.Webkit.HttpAuthHandler" /></c> to set the WebView's response to the request.
 The default behavior is to cancel the request.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedHttpAuthRequest(android.webkit.WebView, android.webkit.HttpAuthHandler, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Webkit.WebView.GetHttpAuthUsernamePassword(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OnReceivedLoginRequest">
      <MemberSignature Language="C#" Value="public virtual void OnReceivedLoginRequest (Android.Webkit.WebView view, string realm, string account, string args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceivedLoginRequest(class Android.Webkit.WebView view, string realm, string account, string args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceivedLoginRequest", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetOnReceivedLoginRequest_Landroid_webkit_WebView_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="realm" Type="System.String" />
        <Parameter Name="account" Type="System.String" />
        <Parameter Name="args" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The WebView requesting the login.</param>
        <param name="realm">The account realm used to look up accounts.</param>
        <param name="account">An optional account. If not null, the account should be
                checked against accounts on the device. If it is a valid
                account, it should be used to log in the user.</param>
        <param name="args">Authenticator specific arguments used to log in the user.
</param>
        <summary>Notify the host application that a request to automatically log in the
 user has been processed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that a request to automatically log in the
 user has been processed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedLoginRequest(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnReceivedSslError">
      <MemberSignature Language="C#" Value="public virtual void OnReceivedSslError (Android.Webkit.WebView view, Android.Webkit.SslErrorHandler handler, Android.Net.Http.SslError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceivedSslError(class Android.Webkit.WebView view, class Android.Webkit.SslErrorHandler handler, class Android.Net.Http.SslError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceivedSslError", "(Landroid/webkit/WebView;Landroid/webkit/SslErrorHandler;Landroid/net/http/SslError;)V", "GetOnReceivedSslError_Landroid_webkit_WebView_Landroid_webkit_SslErrorHandler_Landroid_net_http_SslError_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="handler" Type="Android.Webkit.SslErrorHandler" />
        <Parameter Name="error" Type="Android.Net.Http.SslError" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="handler">An SslErrorHandler object that will handle the user's
            response.</param>
        <param name="error">The SSL error object.
</param>
        <summary>Notify the host application that an SSL error occurred while loading a
 resource.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that an SSL error occurred while loading a
 resource. The host application must call either handler.cancel() or
 handler.proceed(). Note that the decision may be retained for use in
 response to future SSL errors. The default behavior is to cancel the
 load.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnScaleChanged">
      <MemberSignature Language="C#" Value="public virtual void OnScaleChanged (Android.Webkit.WebView view, float oldScale, float newScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnScaleChanged(class Android.Webkit.WebView view, float32 oldScale, float32 newScale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onScaleChanged", "(Landroid/webkit/WebView;FF)V", "GetOnScaleChanged_Landroid_webkit_WebView_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="oldScale" Type="System.Single" />
        <Parameter Name="newScale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="view">he WebView that is initiating the callback.</param>
        <param name="oldScale">The old scale factor</param>
        <param name="newScale">The new scale factor
</param>
        <summary>Notify the host application that the scale applied to the WebView has
 changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that the scale applied to the WebView has
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onScaleChanged(android.webkit.WebView, float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTooManyRedirects">
      <MemberSignature Language="C#" Value="public virtual void OnTooManyRedirects (Android.Webkit.WebView view, Android.OS.Message cancelMsg, Android.OS.Message continueMsg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTooManyRedirects(class Android.Webkit.WebView view, class Android.OS.Message cancelMsg, class Android.OS.Message continueMsg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTooManyRedirects", "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V", "GetOnTooManyRedirects_Landroid_webkit_WebView_Landroid_os_Message_Landroid_os_Message_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="cancelMsg" Type="Android.OS.Message" />
        <Parameter Name="continueMsg" Type="Android.OS.Message" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="cancelMsg">The message to send if the host wants to cancel</param>
        <param name="continueMsg">The message to send if the host wants to continue</param>
        <summary>Notify the host application that there have been an excessive number of
 HTTP redirects.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that there have been an excessive number of
 HTTP redirects. As the host application if it would like to continue
 trying to load the resource. The default behavior is to send the cancel
 message.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onTooManyRedirects(android.webkit.WebView, android.os.Message, android.os.Message)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledInputEvent">
      <MemberSignature Language="C#" Value="public virtual void OnUnhandledInputEvent (Android.Webkit.WebView view, Android.Views.InputEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnUnhandledInputEvent(class Android.Webkit.WebView view, class Android.Views.InputEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onUnhandledInputEvent", "(Landroid/webkit/WebView;Landroid/view/InputEvent;)V", "GetOnUnhandledInputEvent_Landroid_webkit_WebView_Landroid_view_InputEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="e" Type="Android.Views.InputEvent" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="e">The input event.
</param>
        <summary>Notify the host application that a input event was not handled by the WebView.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that a input event was not handled by the WebView.
 Except system keys, WebView always consumes input events in the normal flow
 or if shouldOverrideKeyEvent returns true. This is called asynchronously
 from where the event is dispatched. It gives the host application a chance
 to handle the unhandled input events.

 Note that if the event is a <c><see cref="T:Android.Views.MotionEvent" /></c>, then it's lifetime is only
 that of the function call. If the WebViewClient wishes to use the event beyond that, then it
 <format type="text/html"><i>must</i></format> create a copy of the event.

 It is the responsibility of overriders of this method to call
 <c><see cref="M:Android.Webkit.WebViewClient.OnUnhandledKeyEvent(Android.Webkit.WebView,Android.Views.KeyEvent)" /></c>
 when appropriate if they wish to continue receiving events through it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onUnhandledInputEvent(android.webkit.WebView, android.view.InputEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledKeyEvent">
      <MemberSignature Language="C#" Value="public virtual void OnUnhandledKeyEvent (Android.Webkit.WebView view, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnUnhandledKeyEvent(class Android.Webkit.WebView view, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onUnhandledKeyEvent", "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)V", "GetOnUnhandledKeyEvent_Landroid_webkit_WebView_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="e">The key event.</param>
        <summary>Notify the host application that a key was not handled by the WebView.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application that a key was not handled by the WebView.
 Except system keys, WebView always consumes the keys in the normal flow
 or if shouldOverrideKeyEvent returns true. This is called asynchronously
 from where the key is dispatched. It gives the host application a chance
 to handle the unhandled key events.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#onUnhandledKeyEvent(android.webkit.WebView, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShouldInterceptRequest">
      <MemberSignature Language="C#" Value="public virtual Android.Webkit.WebResourceResponse ShouldInterceptRequest (Android.Webkit.WebView view, Android.Webkit.IWebResourceRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Webkit.WebResourceResponse ShouldInterceptRequest(class Android.Webkit.WebView view, class Android.Webkit.IWebResourceRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldInterceptRequest", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;)Landroid/webkit/WebResourceResponse;", "GetShouldInterceptRequest_Landroid_webkit_WebView_Landroid_webkit_WebResourceRequest_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Webkit.WebResourceResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="request" Type="Android.Webkit.IWebResourceRequest" />
      </Parameters>
      <Docs>
        <param name="view">The <c><see cref="T:Android.Webkit.WebView" /></c> that is requesting the
             resource.</param>
        <param name="request">Object containing the details of the request.</param>
        <summary>Notify the host application of a resource request and allow the
 application to return the data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application of a resource request and allow the
 application to return the data.  If the return value is null, the WebView
 will continue to load the resource as usual.  Otherwise, the return
 response and data will be used.  NOTE: This method is called on a thread
 other than the UI thread so clients should exercise caution
 when accessing private data or the view system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView, android.webkit.WebResourceRequest)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInterceptRequest">
      <MemberSignature Language="C#" Value="public virtual Android.Webkit.WebResourceResponse ShouldInterceptRequest (Android.Webkit.WebView view, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Webkit.WebResourceResponse ShouldInterceptRequest(class Android.Webkit.WebView view, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldInterceptRequest", "(Landroid/webkit/WebView;Ljava/lang/String;)Landroid/webkit/WebResourceResponse;", "GetShouldInterceptRequest_Landroid_webkit_WebView_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Webkit.WebResourceResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The <c><see cref="T:Android.Webkit.WebView" /></c> that is requesting the
             resource.</param>
        <param name="url">The raw url of the resource.</param>
        <summary>Notify the host application of a resource request and allow the
 application to return the data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Notify the host application of a resource request and allow the
 application to return the data.  If the return value is null, the WebView
 will continue to load the resource as usual.  Otherwise, the return
 response and data will be used.  NOTE: This method is called on a thread
 other than the UI thread so clients should exercise caution
 when accessing private data or the view system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ShouldOverrideKeyEvent">
      <MemberSignature Language="C#" Value="public virtual bool ShouldOverrideKeyEvent (Android.Webkit.WebView view, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldOverrideKeyEvent(class Android.Webkit.WebView view, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldOverrideKeyEvent", "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)Z", "GetShouldOverrideKeyEvent_Landroid_webkit_WebView_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="e">The key event.</param>
        <summary tool="true">Give the host application a chance to handle the key event synchronously.
 e.g. menu shortcut key events need to be filtered this way.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Give the host application a chance to handle the key event synchronously.
 e.g. menu shortcut key events need to be filtered this way. If return
 true, WebView will not handle the key event. If return false, WebView
 will always handle the key event, so none of the super in the view chain
 will see the key event. The default behavior returns false.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#shouldOverrideKeyEvent(android.webkit.WebView, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShouldOverrideUrlLoading">
      <MemberSignature Language="C#" Value="public virtual bool ShouldOverrideUrlLoading (Android.Webkit.WebView view, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldOverrideUrlLoading(class Android.Webkit.WebView view, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldOverrideUrlLoading", "(Landroid/webkit/WebView;Ljava/lang/String;)Z", "GetShouldOverrideUrlLoading_Landroid_webkit_WebView_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Webkit.WebView" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The WebView that is initiating the callback.</param>
        <param name="url">The url to be loaded.</param>
        <summary>Give the host application a chance to take over the control when a new
 url is about to be loaded in the current WebView.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Give the host application a chance to take over the control when a new
 url is about to be loaded in the current WebView. If WebViewClient is not
 provided, by default WebView will ask Activity Manager to choose the
 proper handler for the url. If WebViewClient is provided, return true
 means the host application handles the url, while return false means the
 current WebView handles the url.
 This method is not called for requests using the POST "method".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html#shouldOverrideUrlLoading(android.webkit.WebView, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
