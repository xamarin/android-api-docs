<Type Name="Pipe+SourceChannel" FullName="Java.Nio.Channels.Pipe+SourceChannel">
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Pipe.SourceChannel&#xA;Inherits AbstractSelectableChannel&#xA;Implements IDisposable, IJavaPeerable, IScatteringByteChannel" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Pipe::SourceChannel abstract : Java::Nio::Channels::Spi::AbstractSelectableChannel, IDisposable, Java::Interop::IJavaPeerable, Java::Nio::Channels::IScatteringByteChannel" />
  <TypeSignature Language="C#" Value="public abstract class Pipe.SourceChannel : Java.Nio.Channels.Spi.AbstractSelectableChannel, IDisposable, Java.Interop.IJavaPeerable, Java.Nio.Channels.IScatteringByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract beforefieldinit Pipe/SourceChannel extends Java.Nio.Channels.Spi.AbstractSelectableChannel implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.Pipe.SourceChannel" />
  <TypeSignature Language="F#" Value="type Pipe.SourceChannel = class&#xA;    inherit AbstractSelectableChannel&#xA;    interface IReadableByteChannel&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IScatteringByteChannel" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractSelectableChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IReadableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/Pipe$SourceChannel", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/Pipe$SourceChannel", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A channel representing the readable end of a <c>Pipe</c>.</summary>
    <remarks>
      <para>A channel representing the readable end of a <c>Pipe</c>.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/Pipe.SourceChannel" title="Reference documentation">Java documentation for <code>java.nio.channels.Pipe.SourceChannel</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As SelectorProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SourceChannel(Java::Nio::Channels::Spi::SelectorProvider ^ provider);" />
      <MemberSignature Language="C#" Value="protected SourceChannel (Java.Nio.Channels.Spi.SelectorProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.Spi.SelectorProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.#ctor(Java.Nio.Channels.Spi.SelectorProvider)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.Pipe.SourceChannel : Java.Nio.Channels.Spi.SelectorProvider -&gt; Java.Nio.Channels.Pipe.SourceChannel" Usage="new Java.Nio.Channels.Pipe.SourceChannel provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="provider" Type="Java.Nio.Channels.Spi.SelectorProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The selector provider</param>
        <summary>Constructs a new instance of this class.</summary>
        <remarks>
          <para>Constructs a new instance of this class.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Pipe.SourceChannel#Pipe$SourceChannel(java.nio.channels.spi.SelectorProvider)" title="Reference documentation">Java documentation for <code>java.nio.channels.Pipe.SourceChannel.Pipe$SourceChannel(java.nio.channels.spi.SelectorProvider)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SourceChannel(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected SourceChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.Pipe.SourceChannel : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.Channels.Pipe.SourceChannel" Usage="new Java.Nio.Channels.Pipe.SourceChannel (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Pipe.SourceChannel.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.Channels.Pipe.SourceChannel.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (dst As ByteBuffer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Read(Java::Nio::ByteBuffer ^ dst);" />
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.Read(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer -&gt; int" Usage="sourceChannel.Read dst" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="dst">The buffer into which bytes are to be transferred</param>
        <summary>Reads a sequence of bytes from this channel into the given buffer.</summary>
        <returns>The number of bytes read, possibly zero, or <c>-1</c> if the
                     channel has reached end-of-stream</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffer.</para>
          <para>An attempt is made to read up to <i>r</i> bytes from the channel,
            where <i>r</i> is the number of bytes remaining in the buffer, that is,
            <c>dst.remaining()</c>, at the moment this method is invoked.</para>
          <para>Suppose that a byte sequence of length <i>n</i> is read, where
            <c>0</c>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>r</i>.
            This byte sequence will be transferred into the buffer so that the first
            byte in the sequence is at index <i>p</i> and the last byte is at index
            <i>p</i>&amp;nbsp;<c>+</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>-</c>&amp;nbsp;<c>1</c>,
            where <i>p</i> is the buffer's position at the moment this method is
            invoked.  Upon return the buffer's position will be equal to
            <i>p</i>&amp;nbsp;<c>+</c>&amp;nbsp;<i>n</i>; its limit will not have changed.</para>
          <para>A read operation might not fill the buffer, and in fact it might not
            read any bytes at all.  Whether or not it does so depends upon the
            nature and state of the channel.  A socket channel in non-blocking mode,
            for example, cannot read any more bytes than are immediately available
            from the socket's input buffer; similarly, a file channel cannot read
            any more bytes than remain in the file.  It is guaranteed, however, that
            if a channel is in blocking mode and there is at least one byte
            remaining in the buffer then this method will block until at least one
            byte is read.</para>
          <para>This method may be invoked at any time.  If another thread has
            already initiated a read operation upon this channel, however, then an
            invocation of this method will block until the first operation is
            complete.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/ReadableByteChannel#read(java.nio.ByteBuffer)" title="Reference documentation">Java documentation for <code>java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (dsts As ByteBuffer()) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Read(cli::array &lt;Java::Nio::ByteBuffer ^&gt; ^ dsts);" />
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[]? dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.Read(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] -&gt; int64" Usage="sourceChannel.Read dsts" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "GetRead_arrayLjava_nio_ByteBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "GetRead_arrayLjava_nio_ByteBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dsts">The buffers into which bytes are to be transferred</param>
        <summary>Reads a sequence of bytes from this channel into the given buffers.</summary>
        <returns>The number of bytes read, possibly zero,
                    or <c>-1</c> if the channel has reached end-of-stream</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffers.</para>
          <para>An invocation of this method of the form <c>c.read(dsts)</c>
            behaves in exactly the same manner as the invocation
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">c.read(dsts, 0, dsts.length);</code>
          <para>&lt;/blockquote&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/ScatteringByteChannel#read(java.nio.ByteBuffer[])" title="Reference documentation">Java documentation for <code>java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (dsts As ByteBuffer(), offset As Integer, length As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Read(cli::array &lt;Java::Nio::ByteBuffer ^&gt; ^ dsts, int offset, int length);" />
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[]? dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="sourceChannel.Read (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">The buffers into which bytes are to be transferred</param>
        <param name="offset">The offset within the buffer array of the first buffer into
                    which bytes are to be transferred; must be non-negative and no
                    larger than <c>dsts.length</c></param>
        <param name="length">The maximum number of buffers to be accessed; must be
                    non-negative and no larger than
                    <c>dsts.length</c>&amp;nbsp;-&amp;nbsp;<c>offset</c></param>
        <summary>Reads a sequence of bytes from this channel into a subsequence of the
            given buffers.</summary>
        <returns>The number of bytes read, possibly zero,
                    or <c>-1</c> if the channel has reached end-of-stream</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into a subsequence of the
            given buffers.</para>
          <para>An invocation of this method attempts to read up to <i>r</i> bytes
            from this channel, where <i>r</i> is the total number of bytes remaining
            the specified subsequence of the given buffer array, that is,
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">dsts[offset].remaining()
                + dsts[offset+1].remaining()
                + ... + dsts[offset+length-1].remaining()</code>
          <para>&lt;/blockquote&gt;
            
            at the moment that this method is invoked.</para>
          <para>Suppose that a byte sequence of length <i>n</i> is read, where
            <c>0</c>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>r</i>.
            Up to the first <c>dsts[offset].remaining()</c> bytes of this sequence
            are transferred into buffer <c>dsts[offset]</c>, up to the next
            <c>dsts[offset+1].remaining()</c> bytes are transferred into buffer
            <c>dsts[offset+1]</c>, and so forth, until the entire byte sequence
            is transferred into the given buffers.  As many bytes as possible are
            transferred into each buffer, hence the final position of each updated
            buffer, except the last updated buffer, is guaranteed to be equal to
            that buffer's limit.</para>
          <para>This method may be invoked at any time.  If another thread has
            already initiated a read operation upon this channel, however, then an
            invocation of this method will block until the first operation is
            complete.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/ScatteringByteChannel#read(java.nio.ByteBuffer[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (dst As ByteBuffer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(Java::Nio::ByteBuffer ^ dst);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (Java.Nio.ByteBuffer? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.ReadAsync(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="sourceChannel.ReadAsync dst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (dsts As ByteBuffer()) As Task(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;long&gt; ^ ReadAsync(cli::array &lt;Java::Nio::ByteBuffer ^&gt; ^ dsts);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[]? dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.ReadAsync(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="sourceChannel.ReadAsync dsts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (dsts As ByteBuffer(), offset As Integer, length As Integer) As Task(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;long&gt; ^ ReadAsync(cli::array &lt;Java::Nio::ByteBuffer ^&gt; ^ dsts, int offset, int length);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[]? dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.ReadAsync(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] * int * int -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="sourceChannel.ReadAsync (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Pipe.SourceChannel.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.Channels.Pipe.SourceChannel.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Pipe.SourceChannel.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.Channels.Pipe.SourceChannel.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidOps">
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ValidOps () As Operations" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Java::Nio::Channels::Operations ValidOps();" />
      <MemberSignature Language="C#" Value="public override sealed Java.Nio.Channels.Operations ValidOps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Java.Nio.Channels.Operations ValidOps() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Pipe.SourceChannel.ValidOps" />
      <MemberSignature Language="F#" Value="override this.ValidOps : unit -&gt; Java.Nio.Channels.Operations" Usage="sourceChannel.ValidOps " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("validOps", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("validOps", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Operations</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an operation set identifying this channel's supported
            operations.</summary>
        <returns>The valid-operation set</returns>
        <remarks>
          <para>Returns an operation set identifying this channel's supported
            operations.</para>
          <para>Pipe-source channels only support reading, so this method
            returns <c>SelectionKey#OP_READ</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Pipe.SourceChannel#validOps()" title="Reference documentation">Java documentation for <code>java.nio.channels.Pipe.SourceChannel.validOps()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
