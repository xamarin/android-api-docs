<Type Name="IAsynchronousChannel" FullName="Java.Nio.Channels.IAsynchronousChannel">
  <TypeSignature Language="VB.NET" Value="Public Interface IAsynchronousChannel&#xA;Implements IChannel, IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsynchronousChannel : IDisposable, Java::Interop::IJavaPeerable, Java::Nio::Channels::IChannel" />
  <TypeSignature Language="C#" Value="public interface IAsynchronousChannel : IDisposable, Java.Interop.IJavaPeerable, Java.Nio.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IAsynchronousChannel implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Nio.Channels.IChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.IAsynchronousChannel" />
  <TypeSignature Language="F#" Value="type IAsynchronousChannel = interface&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/AsynchronousChannel", "", "Java.Nio.Channels.IAsynchronousChannelInvoker", ApiSince=26)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/AsynchronousChannel", "", "Java.Nio.Channels.IAsynchronousChannelInvoker", ApiSince=26)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A channel that supports asynchronous I/O operations.</summary>
    <remarks>
      <para>A channel that supports asynchronous I/O operations. Asynchronous I/O
            operations will usually take one of two forms:
            
            &lt;ol&gt;
            &lt;li&gt;</para>
      <code lang="text/java">{@link Future}&amp;lt;V&amp;gt; &lt;em&gt;operation&lt;/em&gt;(&lt;em&gt;...&lt;/em&gt;)</code>
      <para>&lt;/li&gt;
            &lt;li&gt;</para>
      <code lang="text/java">void &lt;em&gt;operation&lt;/em&gt;(&lt;em&gt;...&lt;/em&gt; A attachment, {@link
              CompletionHandler}&amp;lt;V,? super A&amp;gt; handler)</code>
      <para>&lt;/li&gt;
            &lt;/ol&gt;
            
            where <i>operation</i> is the name of the I/O operation (read or write for
            example), <i>V</i> is the result type of the I/O operation, and <i>A</i> is
            the type of an object attached to the I/O operation to provide context when
            consuming the result. The attachment is important for cases where a
            &lt;em&gt;state-less&lt;/em&gt; <c>CompletionHandler</c> is used to consume the result
            of many I/O operations.</para>
      <para>In the first form, the methods defined by the <c>Future Future</c>
            interface may be used to check if the operation has completed, wait for its
            completion, and to retrieve the result. In the second form, a <c>CompletionHandler</c> is invoked to consume the result of the I/O operation when
            it completes or fails.</para>
      <para>A channel that implements this interface is &lt;em&gt;asynchronously
            closeable&lt;/em&gt;: If an I/O operation is outstanding on the channel and the
            channel's <c>#close close</c> method is invoked, then the I/O operation
            fails with the exception <c>AsynchronousCloseException</c>.</para>
      <para>Asynchronous channels are safe for use by multiple concurrent threads.
            Some channel implementations may support concurrent reading and writing, but
            may not allow more than one read and one write operation to be outstanding at
            any given time.
            
            &lt;h2&gt;Cancellation&lt;/h2&gt;</para>
      <para>The <c>Future</c> interface defines the <c>Future#cancel cancel</c>
            method to cancel execution. This causes all threads waiting on the result of
            the I/O operation to throw <c>java.util.concurrent.CancellationException</c>.
            Whether the underlying I/O operation can be cancelled is highly implementation
            specific and therefore not specified. Where cancellation leaves the channel,
            or the entity to which it is connected, in an inconsistent state, then the
            channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that
            prevents further attempts to initiate I/O operations that are <i>similar</i>
            to the operation that was cancelled. For example, if a read operation is
            cancelled but the implementation cannot guarantee that bytes have not been
            read from the channel then it puts the channel into an error state; further
            attempts to initiate a <c>read</c> operation cause an unspecified runtime
            exception to be thrown. Similarly, if a write operation is cancelled but the
            implementation cannot guarantee that bytes have not been written to the
            channel then subsequent attempts to initiate a <c>write</c> will fail with
            an unspecified runtime exception.</para>
      <para>Where the <c>Future#cancel cancel</c> method is invoked with the <c>mayInterruptIfRunning</c> parameter set to <c>true</c> then the I/O operation
            may be interrupted by closing the channel. In that case all threads waiting
            on the result of the I/O operation throw <c>CancellationException</c> and
            any other I/O operations outstanding on the channel complete with the
            exception <c>AsynchronousCloseException</c>.</para>
      <para>Where the <c>cancel</c> method is invoked to cancel read or write
            operations then it is recommended that all buffers used in the I/O operations
            be discarded or care taken to ensure that the buffers are not accessed while
            the channel remains open.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousChannel" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousChannel</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.IAsynchronousChannel.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iAsynchronousChannel.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IChannel.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler:Java.Nio.Channels.IAsynchronousChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler:Java.Nio.Channels.IAsynchronousChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this channel.</summary>
        <remarks>
          <para>Closes this channel.</para>
          <para>Any outstanding asynchronous operations upon this channel will
            complete with the exception <c>AsynchronousCloseException</c>. After a
            channel is closed, further attempts to initiate asynchronous I/O
            operations complete immediately with cause <c>ClosedChannelException</c>.</para>
          <para>This method otherwise behaves exactly as specified by the <c>Channel</c> interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousChannel#close()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousChannel.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
