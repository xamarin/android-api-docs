<Type Name="IGatheringByteChannel" FullName="Java.Nio.Channels.IGatheringByteChannel">
  <TypeSignature Language="C#" Value="public interface IGatheringByteChannel : IDisposable, Java.Interop.IJavaPeerable, Java.Nio.Channels.IWritableByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IGatheringByteChannel implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.IGatheringByteChannel" />
  <TypeSignature Language="F#" Value="type IGatheringByteChannel = interface&#xA;    interface IWritableByteChannel&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IWritableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/GatheringByteChannel", "", "Java.Nio.Channels.IGatheringByteChannelInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/GatheringByteChannel", "", "Java.Nio.Channels.IGatheringByteChannelInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A channel that can write bytes from a sequence of buffers.</summary>
    <remarks>
      <para>A channel that can write bytes from a sequence of buffers.</para>
      <para>A <i>gathering</i> write operation writes, in a single invocation, a
            sequence of bytes from one or more of a given sequence of buffers.
            Gathering writes are often useful when implementing network protocols or
            file formats that, for example, group data into segments consisting of one
            or more fixed-length headers followed by a variable-length body.  Similar
            <i>scattering</i> read operations are defined in the <c>ScatteringByteChannel</c> interface.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/GatheringByteChannel" title="Reference documentation">Java documentation for <code>java.nio.channels.GatheringByteChannel</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[]? srcs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] -&gt; int64" Usage="iGatheringByteChannel.Write srcs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "GetWrite_arrayLjava_nio_ByteBuffer_Handler:Java.Nio.Channels.IGatheringByteChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "GetWrite_arrayLjava_nio_ByteBuffer_Handler:Java.Nio.Channels.IGatheringByteChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="srcs">The buffers from which bytes are to be retrieved</param>
        <summary>Writes a sequence of bytes to this channel from the given buffers.</summary>
        <returns>The number of bytes written, possibly zero</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffers.</para>
          <para>An invocation of this method of the form <c>c.write(srcs)</c>
            behaves in exactly the same manner as the invocation
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">c.write(srcs, 0, srcs.length);</code>
          <para>&lt;/blockquote&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/GatheringByteChannel#write(java.nio.ByteBuffer[])" title="Reference documentation">Java documentation for <code>java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if
             <c>offset + length</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel has not been opened in a mode that permits
             writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[]? srcs, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="iGatheringByteChannel.Write (srcs, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler:Java.Nio.Channels.IGatheringByteChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler:Java.Nio.Channels.IGatheringByteChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcs">The buffers from which bytes are to be retrieved</param>
        <param name="offset">The offset within the buffer array of the first buffer from
                    which bytes are to be retrieved; must be non-negative and no
                    larger than <c>srcs.length</c></param>
        <param name="length">The maximum number of buffers to be accessed; must be
                    non-negative and no larger than
                    <c>srcs.length</c>&amp;nbsp;-&amp;nbsp;<c>offset</c></param>
        <summary>Writes a sequence of bytes to this channel from a subsequence of the
            given buffers.</summary>
        <returns>The number of bytes written, possibly zero</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from a subsequence of the
            given buffers.</para>
          <para>An attempt is made to write up to <i>r</i> bytes to this channel,
            where <i>r</i> is the total number of bytes remaining in the specified
            subsequence of the given buffer array, that is,
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">srcs[offset].remaining()
                + srcs[offset+1].remaining()
                + ... + srcs[offset+length-1].remaining()</code>
          <para>&lt;/blockquote&gt;
            
            at the moment that this method is invoked.</para>
          <para>Suppose that a byte sequence of length <i>n</i> is written, where
            <c>0</c>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>r</i>.
            Up to the first <c>srcs[offset].remaining()</c> bytes of this sequence
            are written from buffer <c>srcs[offset]</c>, up to the next
            <c>srcs[offset+1].remaining()</c> bytes are written from buffer
            <c>srcs[offset+1]</c>, and so forth, until the entire byte sequence is
            written.  As many bytes as possible are written from each buffer, hence
            the final position of each updated buffer, except the last updated
            buffer, is guaranteed to be equal to that buffer's limit.</para>
          <para>Unless otherwise specified, a write operation will return only after
            writing all of the <i>r</i> requested bytes.  Some types of channels,
            depending upon their state, may write only some of the bytes or possibly
            none at all.  A socket channel in non-blocking mode, for example, cannot
            write any more bytes than are free in the socket's output buffer.</para>
          <para>This method may be invoked at any time.  If another thread has
            already initiated a write operation upon this channel, however, then an
            invocation of this method will block until the first operation is
            complete.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/GatheringByteChannel#write(java.nio.ByteBuffer[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if
             <c>offset + length</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened for writing.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
