<Type Name="AsynchronousFileChannel" FullName="Java.Nio.Channels.AsynchronousFileChannel">
  <TypeSignature Language="C#" Value="public abstract class AsynchronousFileChannel : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Nio.Channels.IAsynchronousChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AsynchronousFileChannel extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Nio.Channels.IAsynchronousChannel, class Java.Nio.Channels.IChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.AsynchronousFileChannel" />
  <TypeSignature Language="F#" Value="type AsynchronousFileChannel = class&#xA;    inherit Object&#xA;    interface IAsynchronousChannel&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IAsynchronousChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/AsynchronousFileChannel", ApiSince=26, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/AsynchronousFileChannel", ApiSince=26, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An asynchronous channel for reading, writing, and manipulating a file.</summary>
    <remarks>
      <para>An asynchronous channel for reading, writing, and manipulating a file.</para>
      <para>An asynchronous file channel is created when a file is opened by invoking
            one of the <c>#open open</c> methods defined by this class. The file contains
            a variable-length sequence of bytes that can be read and written and whose
            current size can be <c>#size() queried</c>. The size of the file increases
            when bytes are written beyond its  current size; the size of the file decreases
            when it is <c>#truncate truncated</c>.</para>
      <para>An asynchronous file channel does not have a <i>current position</i>
            within the file. Instead, the file position is specified to each read and
            write method that initiates asynchronous operations. A <c>CompletionHandler</c>
            is specified as a parameter and is invoked to consume the result of the I/O
            operation. This class also defines read and write methods that initiate
            asynchronous operations, returning a <c>Future</c> to represent the pending
            result of the operation. The <c>Future</c> may be used to check if the
            operation has completed, wait for its completion, and retrieve the result.</para>
      <para>In addition to read and write operations, this class defines the
            following operations:</para>
      <para>&lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>Updates made to a file may be <c>#force &lt;i&gt;forced
              out&lt;/i&gt;</c> to the underlying storage device, ensuring that data are not
              lost in the event of a system crash.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>A region of a file may be <c>#lock &lt;i&gt;locked&lt;/i&gt;</c> against
              access by other programs.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>An <c>AsynchronousFileChannel</c> is associated with a thread pool to
            which tasks are submitted to handle I/O events and dispatch to completion
            handlers that consume the results of I/O operations on the channel. The
            completion handler for an I/O operation initiated on a channel is guaranteed
            to be invoked by one of the threads in the thread pool (This ensures that the
            completion handler is run by a thread with the expected &lt;em&gt;identity&lt;/em&gt;).
            Where an I/O operation completes immediately, and the initiating thread is
            itself a thread in the thread pool, then the completion handler may be invoked
            directly by the initiating thread. When an <c>AsynchronousFileChannel</c> is
            created without specifying a thread pool then the channel is associated with
            a system-dependent default thread pool that may be shared with other
            channels. The default thread pool is configured by the system properties
            defined by the <c>AsynchronousChannelGroup</c> class.</para>
      <para>Channels of this type are safe for use by multiple concurrent threads. The
            <c>Channel#close close</c> method may be invoked at any time, as specified
            by the <c>Channel</c> interface. This causes all outstanding asynchronous
            operations on the channel to complete with the exception <c>AsynchronousCloseException</c>. Multiple read and write operations may be
            outstanding at the same time. When multiple read and write operations are
            outstanding then the ordering of the I/O operations, and the order that the
            completion handlers are invoked, is not specified; they are not, in particular,
            guaranteed to execute in the order that the operations were initiated. The
            <c>java.nio.ByteBuffer ByteBuffers</c> used when reading or writing are not
            safe for use by multiple concurrent I/O operations. Furthermore, after an I/O
            operation is initiated then care should be taken to ensure that the buffer is
            not accessed until after the operation has completed.</para>
      <para>As with <c>FileChannel</c>, the view of a file provided by an instance of
            this class is guaranteed to be consistent with other views of the same file
            provided by other instances in the same program.  The view provided by an
            instance of this class may or may not, however, be consistent with the views
            seen by other concurrently-running programs due to caching performed by the
            underlying operating system and delays induced by network-filesystem protocols.
            This is true regardless of the language in which these other programs are
            written, and whether they are running on the same machine or on some other
            machine.  The exact nature of any such inconsistencies are system-dependent
            and are therefore unspecified.</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AsynchronousFileChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of this class.</summary>
        <remarks>
          <para>Initializes a new instance of this class.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#AsynchronousFileChannel()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.AsynchronousFileChannel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AsynchronousFileChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.AsynchronousFileChannel : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.Channels.AsynchronousFileChannel" Usage="new Java.Nio.Channels.AsynchronousFileChannel (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">To be added.</param>
        <param name="transfer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="asynchronousFileChannel.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IAsynchronousChannel.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this channel.</summary>
        <remarks>
          <para>Closes this channel.</para>
          <para>Any outstanding asynchronous operations upon this channel will
            complete with the exception <c>AsynchronousCloseException</c>. After a
            channel is closed, further attempts to initiate asynchronous I/O
            operations complete immediately with cause <c>ClosedChannelException</c>.</para>
          <para>This method otherwise behaves exactly as specified by the <c>Channel</c> interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousChannel#close()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousChannel.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Force">
      <MemberSignature Language="C#" Value="public abstract void Force (bool metaData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Force(bool metaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Force(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Force : bool -&gt; unit" Usage="asynchronousFileChannel.Force metaData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("force", "(Z)V", "GetForce_ZHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("force", "(Z)V", "GetForce_ZHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metaData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metaData">If <c>true</c> then this method is required to force changes
                     to both the file's content and metadata to be written to
                     storage; otherwise, it need only force content changes to be
                     written</param>
        <summary>Forces any updates to this channel's file to be written to the storage
            device that contains it.</summary>
        <remarks>
          <para>Forces any updates to this channel's file to be written to the storage
            device that contains it.</para>
          <para>If this channel's file resides on a local storage device then when
            this method returns it is guaranteed that all changes made to the file
            since this channel was created, or since this method was last invoked,
            will have been written to that device.  This is useful for ensuring that
            critical information is not lost in the event of a system crash.</para>
          <para>If the file does not reside on a local device then no such guarantee
            is made.</para>
          <para>The <c>metaData</c> parameter can be used to limit the number of
            I/O operations that this method is required to perform.  Passing
            <c>false</c> for this parameter indicates that only updates to the
            file's content need be written to storage; passing <c>true</c>
            indicates that updates to both the file's content and metadata must be
            written, which generally requires at least one more I/O operation.
            Whether this parameter actually has any effect is dependent upon the
            underlying operating system and is therefore unspecified.</para>
          <para>Invoking this method may cause an I/O operation to occur even if the
            channel was only opened for reading.  Some operating systems, for
            example, maintain a last-access time as part of a file's metadata, and
            this time is updated whenever the file is read.  Whether or not this is
            actually done is system-dependent and is therefore unspecified.</para>
          <para>This method is only guaranteed to force changes that were made to
            this channel's file via the methods defined in this class.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#force(boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.force(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public abstract bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.AsynchronousFileChannel.IsOpen" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool" Usage="Java.Nio.Channels.AsynchronousFileChannel.IsOpen" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Nio.Channels.IChannel.IsOpen</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isOpen", "()Z", "GetIsOpenHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isOpen", "()Z", "GetIsOpenHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.AsynchronousFileChannel.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.Channels.AsynchronousFileChannel.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture? Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Concurrent.IFuture Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Lock" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; Java.Util.Concurrent.IFuture" Usage="asynchronousFileChannel.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "()Ljava/util/concurrent/Future;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "()Ljava/util/concurrent/Future;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires an exclusive lock on this channel's file.</summary>
        <returns>a <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Acquires an exclusive lock on this channel's file.</para>
          <para>This method initiates an operation to acquire an exclusive lock on this
            channel's file. The method returns a <c>Future</c> representing the
            pending result of the operation. The <c>Future</c>'s <c>Future#get()
            get</c> method returns the <c>FileLock</c> on successful completion.</para>
          <para>An invocation of this method behaves in exactly the same way as the
            invocation</para>
          <code lang="text/java">ch.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false)
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#lock()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.lock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock (Java.Lang.Object? attachment, Java.Nio.Channels.ICompletionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock(class Java.Lang.Object attachment, class Java.Nio.Channels.ICompletionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Lock(Java.Lang.Object,Java.Nio.Channels.ICompletionHandler)" />
      <MemberSignature Language="F#" Value="member this.Lock : Java.Lang.Object * Java.Nio.Channels.ICompletionHandler -&gt; unit" Usage="asynchronousFileChannel.Lock (attachment, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "A" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "A" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="Java.Lang.Object" />
        <Parameter Name="handler" Type="Java.Nio.Channels.ICompletionHandler" />
      </Parameters>
      <Docs>
        <param name="&lt;A&gt;&lt;A&gt;">The type of the attachment</param>
        <param name="attachment">The object to attach to the I/O operation; can be <c>null</c></param>
        <param name="handler">The handler for consuming the result</param>
        <summary>Acquires an exclusive lock on this channel's file.</summary>
        <returns>a <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Acquires an exclusive lock on this channel's file.</para>
          <para>This method initiates an operation to acquire a lock on the given
            region of this channel's file. The <c>handler</c> parameter is a
            completion handler that is invoked when the lock is acquired (or the
            operation fails). The result passed to the completion handler is the
            resulting <c>FileLock</c>.</para>
          <para>An invocation of this method of the form <c>ch.lock(att,handler)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">ch.{@link #lock(long,long,boolean,Object,CompletionHandler) lock}(0L, Long.MAX_VALUE, false, att, handler)
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#lock(A,%20java.nio.channels.CompletionHandler%3Cjava.nio.channels.FileLock,%20?%20super%20A%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.lock(A, java.nio.channels.CompletionHandler&lt;java.nio.channels.FileLock, ? super A&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public abstract Java.Util.Concurrent.IFuture? Lock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Lock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Lock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 * bool -&gt; Java.Util.Concurrent.IFuture" Usage="asynchronousFileChannel.Lock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "(JJZ)Ljava/util/concurrent/Future;", "GetLock_JJZHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "(JJZ)Ljava/util/concurrent/Future;", "GetLock_JJZHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">The position at which the locked region is to start; must be
                     non-negative</param>
        <param name="size">The size of the locked region; must be non-negative, and the sum
                     <c>position</c>&amp;nbsp;+&amp;nbsp;<c>size</c> must be non-negative</param>
        <param name="shared">
          <c>true</c> to request a shared lock, in which case this
                     channel must be open for reading (and possibly writing);
                     <c>false</c> to request an exclusive lock, in which case this
                     channel must be open for writing (and possibly reading)</param>
        <summary>Acquires a lock on the given region of this channel's file.</summary>
        <returns>a <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Acquires a lock on the given region of this channel's file.</para>
          <para>This method initiates an operation to acquire a lock on the given
            region of this channel's file.  The method behaves in exactly the same
            manner as the <c>#lock(long, long, boolean, Object, CompletionHandler)</c>
            method except that instead of specifying a completion handler, this
            method returns a <c>Future</c> representing the pending result. The
            <c>Future</c>'s <c>Future#get() get</c> method returns the <c>FileLock</c> on successful completion.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#lock(long,%20long,%20boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.lock(long, long, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public abstract void Lock (long position, long size, bool shared, Java.Lang.Object? attachment, Java.Nio.Channels.ICompletionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock(int64 position, int64 size, bool shared, class Java.Lang.Object attachment, class Java.Nio.Channels.ICompletionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Lock(System.Int64,System.Int64,System.Boolean,Java.Lang.Object,Java.Nio.Channels.ICompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 * bool * Java.Lang.Object * Java.Nio.Channels.ICompletionHandler -&gt; unit" Usage="asynchronousFileChannel.Lock (position, size, shared, attachment, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "(JJZLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetLock_JJZLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "(JJZLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetLock_JJZLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "A" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "A" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
        <Parameter Name="attachment" Type="Java.Lang.Object" />
        <Parameter Name="handler" Type="Java.Nio.Channels.ICompletionHandler" />
      </Parameters>
      <Docs>
        <param name="&lt;A&gt;&lt;A&gt;">The type of the attachment</param>
        <param name="position">The position at which the locked region is to start; must be
                     non-negative</param>
        <param name="size">The size of the locked region; must be non-negative, and the sum
                     <c>position</c>&amp;nbsp;+&amp;nbsp;<c>size</c> must be non-negative</param>
        <param name="shared">
          <c>true</c> to request a shared lock, in which case this
                     channel must be open for reading (and possibly writing);
                     <c>false</c> to request an exclusive lock, in which case this
                     channel must be open for writing (and possibly reading)</param>
        <param name="attachment">The object to attach to the I/O operation; can be <c>null</c></param>
        <param name="handler">The handler for consuming the result</param>
        <summary>Acquires a lock on the given region of this channel's file.</summary>
        <returns>a <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Acquires a lock on the given region of this channel's file.</para>
          <para>This method initiates an operation to acquire a lock on the given
            region of this channel's file. The <c>handler</c> parameter is a
            completion handler that is invoked when the lock is acquired (or the
            operation fails). The result passed to the completion handler is the
            resulting <c>FileLock</c>.</para>
          <para>The region specified by the <c>position</c> and <c>size</c>
            parameters need not be contained within, or even overlap, the actual
            underlying file.  Lock regions are fixed in size; if a locked region
            initially contains the end of the file and the file grows beyond the
            region then the new portion of the file will not be covered by the lock.
            If a file is expected to grow in size and a lock on the entire file is
            required then a region starting at zero, and no smaller than the
            expected maximum size of the file, should be locked.  The two-argument
            <c>#lock(Object,CompletionHandler)</c> method simply locks a region
            of size <c>Long#MAX_VALUE</c>. If a lock that overlaps the requested
            region is already held by this Java virtual machine, or this method has
            been invoked to lock an overlapping region and that operation has not
            completed, then this method throws <c>OverlappingFileLockException</c>.</para>
          <para>Some operating systems do not support a mechanism to acquire a file
            lock in an asynchronous manner. Consequently an implementation may
            acquire the file lock in a background thread or from a task executed by
            a thread in the associated thread pool. If there are many lock operations
            outstanding then it may consume threads in the Java virtual machine for
            indefinite periods.</para>
          <para>Some operating systems do not support shared locks, in which case a
            request for a shared lock is automatically converted into a request for
            an exclusive lock.  Whether the newly-acquired lock is shared or
            exclusive may be tested by invoking the resulting lock object's <c>FileLock#isShared() isShared</c> method.</para>
          <para>File locks are held on behalf of the entire Java virtual machine.
            They are not suitable for controlling access to a file by multiple
            threads within the same virtual machine.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#lock(long,%20long,%20boolean,%20A,%20java.nio.channels.CompletionHandler%3Cjava.nio.channels.FileLock,%20?%20super%20A%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.lock(long, long, boolean, A, java.nio.channels.CompletionHandler&lt;java.nio.channels.FileLock, ? super A&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.AsynchronousFileChannel? Open (Java.Nio.FileNio.IPath? file, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.AsynchronousFileChannel Open(class Java.Nio.FileNio.IPath file, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Open(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.Channels.AsynchronousFileChannel" Usage="Java.Nio.Channels.AsynchronousFileChannel.Open (file, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("open", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("open", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.AsynchronousFileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">The path of the file to open or create</param>
        <param name="options">Options specifying how the file is opened</param>
        <summary>Opens or creates a file for reading and/or writing, returning an
            asynchronous file channel to access the file.</summary>
        <returns>A new asynchronous file channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#open(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.AsynchronousFileChannel? Open (Java.Nio.FileNio.IPath? file, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;? options, Java.Util.Concurrent.IExecutorService? executor, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.AsynchronousFileChannel Open(class Java.Nio.FileNio.IPath file, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.IOpenOption&gt; options, class Java.Util.Concurrent.IExecutorService executor, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Open(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.IOpenOption},Java.Util.Concurrent.IExecutorService,Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt; * Java.Util.Concurrent.IExecutorService * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.Channels.AsynchronousFileChannel" Usage="Java.Nio.Channels.AsynchronousFileChannel.Open (file, options, executor, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("open", "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("open", "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.AsynchronousFileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutorService" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">The path of the file to open or create</param>
        <param name="options">Options specifying how the file is opened</param>
        <param name="executor">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>Opens or creates a file for reading and/or writing, returning an
            asynchronous file channel to access the file.</summary>
        <returns>A new asynchronous file channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#open(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract Java.Util.Concurrent.IFuture? Read (Java.Nio.ByteBuffer? dst, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Read(class Java.Nio.ByteBuffer dst, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Read(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer * int64 -&gt; Java.Util.Concurrent.IFuture" Usage="asynchronousFileChannel.Read (dst, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;", "GetRead_Ljava_nio_ByteBuffer_JHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;", "GetRead_Ljava_nio_ByteBuffer_JHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dst">The buffer into which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                     must be non-negative</param>
        <summary>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</summary>
        <returns>A <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</para>
          <para>This method initiates the reading of a sequence of bytes from this
            channel into the given buffer, starting at the given file position. This
            method returns a <c>Future</c> representing the pending result of the
            operation. The <c>Future</c>'s <c>Future#get() get</c> method returns
            the number of bytes read or <c>-1</c> if the given position is greater
            than or equal to the file's size at the time that the read is attempted.</para>
          <para>This method works in the same manner as the <c>AsynchronousByteChannel#read(ByteBuffer)</c> method, except that bytes are
            read starting at the given file position. If the given file position is
            greater than the file's size at the time that the read is attempted then
            no bytes are read.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#read(java.nio.ByteBuffer,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract void Read (Java.Nio.ByteBuffer? dst, long position, Java.Lang.Object? attachment, Java.Nio.Channels.ICompletionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class Java.Nio.ByteBuffer dst, int64 position, class Java.Lang.Object attachment, class Java.Nio.Channels.ICompletionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Read(Java.Nio.ByteBuffer,System.Int64,Java.Lang.Object,Java.Nio.Channels.ICompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer * int64 * Java.Lang.Object * Java.Nio.Channels.ICompletionHandler -&gt; unit" Usage="asynchronousFileChannel.Read (dst, position, attachment, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetRead_Ljava_nio_ByteBuffer_JLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetRead_Ljava_nio_ByteBuffer_JLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "A" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "A" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="attachment" Type="Java.Lang.Object" />
        <Parameter Name="handler" Type="Java.Nio.Channels.ICompletionHandler" />
      </Parameters>
      <Docs>
        <param name="&lt;A&gt;&lt;A&gt;">The type of the attachment</param>
        <param name="dst">The buffer into which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                     must be non-negative</param>
        <param name="attachment">The object to attach to the I/O operation; can be <c>null</c></param>
        <param name="handler">The handler for consuming the result</param>
        <summary>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</summary>
        <returns>A <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</para>
          <para>This method initiates the reading of a sequence of bytes from this
            channel into the given buffer, starting at the given file position. The
            result of the read is the number of bytes read or <c>-1</c> if the given
            position is greater than or equal to the file's size at the time that the
            read is attempted.</para>
          <para>This method works in the same manner as the <c>AsynchronousByteChannel#read(ByteBuffer,Object,CompletionHandler)</c>
            method, except that bytes are read starting at the given file position.
            If the given file position is greater than the file's size at the time
            that the read is attempted then no bytes are read.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#read(java.nio.ByteBuffer,%20long,%20A,%20java.nio.channels.CompletionHandler%3Cjava.lang.Integer,%20?%20super%20A%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer, ? super A&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public abstract long Size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Size" />
      <MemberSignature Language="F#" Value="abstract member Size : unit -&gt; int64" Usage="asynchronousFileChannel.Size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("size", "()J", "GetSizeHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("size", "()J", "GetSizeHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current size of this channel's file.</summary>
        <returns>The current size of this channel's file, measured in bytes</returns>
        <remarks>
          <para>Returns the current size of this channel's file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#size()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.size()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.AsynchronousFileChannel.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.Channels.AsynchronousFileChannel.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.AsynchronousFileChannel.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.Channels.AsynchronousFileChannel.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.AsynchronousFileChannel? Truncate (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.AsynchronousFileChannel Truncate(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Truncate(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Truncate : int64 -&gt; Java.Nio.Channels.AsynchronousFileChannel" Usage="asynchronousFileChannel.Truncate size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("truncate", "(J)Ljava/nio/channels/AsynchronousFileChannel;", "GetTruncate_JHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("truncate", "(J)Ljava/nio/channels/AsynchronousFileChannel;", "GetTruncate_JHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.AsynchronousFileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">The new size, a non-negative byte count</param>
        <summary>Truncates this channel's file to the given size.</summary>
        <returns>This file channel</returns>
        <remarks>
          <para>Truncates this channel's file to the given size.</para>
          <para>If the given size is less than the file's current size then the file
            is truncated, discarding any bytes beyond the new end of the file.  If
            the given size is greater than or equal to the file's current size then
            the file is not modified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#truncate(long)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.truncate(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileLock? TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileLock TryLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.TryLock" />
      <MemberSignature Language="F#" Value="member this.TryLock : unit -&gt; Java.Nio.Channels.FileLock" Usage="asynchronousFileChannel.TryLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "()Ljava/nio/channels/FileLock;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "()Ljava/nio/channels/FileLock;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to acquire an exclusive lock on this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock,
                     or <c>null</c> if the lock could not be acquired
                     because another program holds an overlapping lock</returns>
        <remarks>
          <para>Attempts to acquire an exclusive lock on this channel's file.</para>
          <para>An invocation of this method of the form <c>ch.tryLock()</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">ch.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#tryLock()" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.tryLock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileLock? TryLock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileLock TryLock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.TryLock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryLock : int64 * int64 * bool -&gt; Java.Nio.Channels.FileLock" Usage="asynchronousFileChannel.TryLock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "(JJZ)Ljava/nio/channels/FileLock;", "GetTryLock_JJZHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "(JJZ)Ljava/nio/channels/FileLock;", "GetTryLock_JJZHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">The position at which the locked region is to start; must be
                    non-negative</param>
        <param name="size">The size of the locked region; must be non-negative, and the sum
                    <c>position</c>&amp;nbsp;+&amp;nbsp;<c>size</c> must be non-negative</param>
        <param name="shared">
          <c>true</c> to request a shared lock,
                    <c>false</c> to request an exclusive lock</param>
        <summary>Attempts to acquire a lock on the given region of this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock,
                     or <c>null</c> if the lock could not be acquired
                     because another program holds an overlapping lock</returns>
        <remarks>
          <para>Attempts to acquire a lock on the given region of this channel's file.</para>
          <para>This method does not block. An invocation always returns immediately,
            either having acquired a lock on the requested region or having failed to
            do so.  If it fails to acquire a lock because an overlapping lock is held
            by another program then it returns <c>null</c>.  If it fails to acquire
            a lock for any other reason then an appropriate exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#tryLock(long,%20long,%20boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.tryLock(long, long, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract Java.Util.Concurrent.IFuture? Write (Java.Nio.ByteBuffer? src, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Write(class Java.Nio.ByteBuffer src, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Write(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int64 -&gt; Java.Util.Concurrent.IFuture" Usage="asynchronousFileChannel.Write (src, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;", "GetWrite_Ljava_nio_ByteBuffer_JHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;", "GetWrite_Ljava_nio_ByteBuffer_JHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">The buffer from which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                     must be non-negative</param>
        <summary>Writes a sequence of bytes to this channel from the given buffer, starting
            at the given file position.</summary>
        <returns>A <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffer, starting
            at the given file position.</para>
          <para>This method initiates the writing of a sequence of bytes to this
            channel from the given buffer, starting at the given file position. The
            method returns a <c>Future</c> representing the pending result of the
            write operation. The <c>Future</c>'s <c>Future#get() get</c> method
            returns the number of bytes written.</para>
          <para>This method works in the same manner as the <c>AsynchronousByteChannel#write(ByteBuffer)</c> method, except that bytes are
            written starting at the given file position. If the given position is
            greater than the file's size, at the time that the write is attempted,
            then the file will be grown to accommodate the new bytes; the values of
            any bytes between the previous end-of-file and the newly-written bytes
            are unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#write(java.nio.ByteBuffer,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (Java.Nio.ByteBuffer? src, long position, Java.Lang.Object? attachment, Java.Nio.Channels.ICompletionHandler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class Java.Nio.ByteBuffer src, int64 position, class Java.Lang.Object attachment, class Java.Nio.Channels.ICompletionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.AsynchronousFileChannel.Write(Java.Nio.ByteBuffer,System.Int64,Java.Lang.Object,Java.Nio.Channels.ICompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int64 * Java.Lang.Object * Java.Nio.Channels.ICompletionHandler -&gt; unit" Usage="asynchronousFileChannel.Write (src, position, attachment, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetWrite_Ljava_nio_ByteBuffer_JLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V", "GetWrite_Ljava_nio_ByteBuffer_JLjava_lang_Object_Ljava_nio_channels_CompletionHandler_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "A" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "A" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="attachment" Type="Java.Lang.Object" />
        <Parameter Name="handler" Type="Java.Nio.Channels.ICompletionHandler" />
      </Parameters>
      <Docs>
        <param name="&lt;A&gt;&lt;A&gt;">The type of the attachment</param>
        <param name="src">The buffer from which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                     must be non-negative</param>
        <param name="attachment">The object to attach to the I/O operation; can be <c>null</c></param>
        <param name="handler">The handler for consuming the result</param>
        <summary>Writes a sequence of bytes to this channel from the given buffer, starting
            at the given file position.</summary>
        <returns>A <c>Future</c> object representing the pending result</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffer, starting
            at the given file position.</para>
          <para>This method works in the same manner as the <c>AsynchronousByteChannel#write(ByteBuffer,Object,CompletionHandler)</c>
            method, except that bytes are written starting at the given file position.
            If the given position is greater than the file's size, at the time that
            the write is attempted, then the file will be grown to accommodate the new
            bytes; the values of any bytes between the previous end-of-file and the
            newly-written bytes are unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel#write(java.nio.ByteBuffer,%20long,%20A,%20java.nio.channels.CompletionHandler%3Cjava.lang.Integer,%20?%20super%20A%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer, ? super A&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
