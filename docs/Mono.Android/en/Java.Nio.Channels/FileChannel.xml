<Type Name="FileChannel" FullName="Java.Nio.Channels.FileChannel">
  <TypeSignature Language="C#" Value="public abstract class FileChannel : Java.Nio.Channels.Spi.AbstractInterruptibleChannel, IDisposable, Java.Interop.IJavaPeerable, Java.Nio.Channels.IGatheringByteChannel, Java.Nio.Channels.IScatteringByteChannel, Java.Nio.Channels.ISeekableByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileChannel extends Java.Nio.Channels.Spi.AbstractInterruptibleChannel implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.Nio.Channels.IByteChannel, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IGatheringByteChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class Java.Nio.Channels.ISeekableByteChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.FileChannel" />
  <TypeSignature Language="F#" Value="type FileChannel = class&#xA;    inherit AbstractInterruptibleChannel&#xA;    interface IByteChannel&#xA;    interface IReadableByteChannel&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IWritableByteChannel&#xA;    interface IGatheringByteChannel&#xA;    interface IScatteringByteChannel&#xA;    interface ISeekableByteChannel" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractInterruptibleChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IGatheringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IReadableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.ISeekableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IWritableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/FileChannel", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/FileChannel", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A channel for reading, writing, mapping, and manipulating a file.</summary>
    <remarks>
      <para>A channel for reading, writing, mapping, and manipulating a file.</para>
      <para>A file channel is a <c>SeekableByteChannel</c> that is connected to
            a file. It has a current <i>position</i> within its file which can
            be both <c>#position() &lt;i&gt;queried&lt;/i&gt;</c> and <c>#position(long)
            &lt;i&gt;modified&lt;/i&gt;</c>.  The file itself contains a variable-length sequence
            of bytes that can be read and written and whose current <c>#size
            &lt;i&gt;size&lt;/i&gt;</c> can be queried.  The size of the file increases
            when bytes are written beyond its current size; the size of the file
            decreases when it is <c>#truncate &lt;i&gt;truncated&lt;/i&gt;</c>.  The
            file may also have some associated <i>metadata</i> such as access
            permissions, content type, and last-modification time; this class does not
            define methods for metadata access.</para>
      <para>In addition to the familiar read, write, and close operations of byte
            channels, this class defines the following file-specific operations:</para>
      <para>&lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>Bytes may be <c>#read(ByteBuffer, long) read</c> or
              <c>#write(ByteBuffer, long) &lt;i&gt;written&lt;/i&gt;</c> at an absolute
              position in a file in a way that does not affect the channel's current
              position.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>A region of a file may be <c>#map &lt;i&gt;mapped&lt;/i&gt;</c>
              directly into memory; for large files this is often much more efficient
              than invoking the usual <c>read</c> or <c>write</c> methods.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Updates made to a file may be <c>#force &lt;i&gt;forced
              out&lt;/i&gt;</c> to the underlying storage device, ensuring that data are not
              lost in the event of a system crash.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Bytes can be transferred from a file <c>#transferTo &lt;i&gt;to
              some other channel&lt;/i&gt;</c>, and <c>#transferFrom &lt;i&gt;vice
              versa&lt;/i&gt;</c>, in a way that can be optimized by many operating systems
              into a very fast transfer directly to or from the filesystem cache.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>A region of a file may be <c>FileLock &lt;i&gt;locked&lt;/i&gt;</c>
              against access by other programs.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>File channels are safe for use by multiple concurrent threads.  The
            <c>Channel#close close</c> method may be invoked at any time, as specified
            by the <c>Channel</c> interface.  Only one operation that involves the
            channel's position or can change its file's size may be in progress at any
            given time; attempts to initiate a second such operation while the first is
            still in progress will block until the first operation completes.  Other
            operations, in particular those that take an explicit position, may proceed
            concurrently; whether they in fact do so is dependent upon the underlying
            implementation and is therefore unspecified.</para>
      <para>The view of a file provided by an instance of this class is guaranteed
            to be consistent with other views of the same file provided by other
            instances in the same program.  The view provided by an instance of this
            class may or may not, however, be consistent with the views seen by other
            concurrently-running programs due to caching performed by the underlying
            operating system and delays induced by network-filesystem protocols.  This
            is true regardless of the language in which these other programs are
            written, and whether they are running on the same machine or on some other
            machine.  The exact nature of any such inconsistencies are system-dependent
            and are therefore unspecified.</para>
      <para>A file channel is created by invoking one of the <c>#open open</c>
            methods defined by this class. A file channel can also be obtained from an
            existing <c>java.io.FileInputStream#getChannel FileInputStream</c>, <c>java.io.FileOutputStream#getChannel FileOutputStream</c>, or <c>java.io.RandomAccessFile#getChannel RandomAccessFile</c> object by invoking
            that object's <c>getChannel</c> method, which returns a file channel that
            is connected to the same underlying file. Where the file channel is obtained
            from an existing stream or random access file then the state of the file
            channel is intimately connected to that of the object whose <c>getChannel</c>
            method returned the channel.  Changing the channel's position, whether
            explicitly or by reading or writing bytes, will change the file position of
            the originating object, and vice versa. Changing the file's length via the
            file channel will change the length seen via the originating object, and vice
            versa.  Changing the file's content by writing bytes will change the content
            seen by the originating object, and vice versa.
            
            "open-mode"&gt;</para>
      <para>At various points this class specifies that an
            instance that is "open for reading," "open for writing," or "open for
            reading and writing" is required.  A channel obtained via the <c>java.io.FileInputStream#getChannel getChannel</c> method of a <c>java.io.FileInputStream</c> instance will be open for reading.  A channel
            obtained via the <c>java.io.FileOutputStream#getChannel getChannel</c>
            method of a <c>java.io.FileOutputStream</c> instance will be open for
            writing.  Finally, a channel obtained via the <c>java.io.RandomAccessFile#getChannel getChannel</c> method of a <c>java.io.RandomAccessFile</c> instance will be open for reading if the instance
            was created with mode <c>"r"</c> and will be open for reading and writing
            if the instance was created with mode <c>"rw"</c>.
            
            "append-mode"&gt;</para>
      <para>A file channel that is open for writing may be in
            <i>append mode</i>, for example if it was obtained from a file-output stream
            that was created by invoking the <c>java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)
            FileOutputStream(File,boolean)</c> constructor and passing <c>true</c> for
            the second parameter.  In this mode each invocation of a relative write
            operation first advances the position to the end of the file and then writes
            the requested data.  Whether the advancement of the position and the writing
            of the data are done in a single atomic operation is system-dependent and
            therefore unspecified.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/FileChannel" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of this class.</summary>
        <remarks>
          <para>Initializes a new instance of this class.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#FileChannel()" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.FileChannel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.FileChannel : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.Channels.FileChannel" Usage="new Java.Nio.Channels.FileChannel (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Force">
      <MemberSignature Language="C#" Value="public abstract void Force (bool metaData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Force(bool metaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Force(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Force : bool -&gt; unit" Usage="fileChannel.Force metaData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("force", "(Z)V", "GetForce_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("force", "(Z)V", "GetForce_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metaData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metaData">If <c>true</c> then this method is required to force changes
                     to both the file's content and metadata to be written to
                     storage; otherwise, it need only force content changes to be
                     written</param>
        <summary>Forces any updates to this channel's file to be written to the storage
            device that contains it.</summary>
        <remarks>
          <para>Forces any updates to this channel's file to be written to the storage
            device that contains it.</para>
          <para>If this channel's file resides on a local storage device then when
            this method returns it is guaranteed that all changes made to the file
            since this channel was created, or since this method was last invoked,
            will have been written to that device.  This is useful for ensuring that
            critical information is not lost in the event of a system crash.</para>
          <para>If the file does not reside on a local device then no such guarantee
            is made.</para>
          <para>The <c>metaData</c> parameter can be used to limit the number of
            I/O operations that this method is required to perform.  Passing
            <c>false</c> for this parameter indicates that only updates to the
            file's content need be written to storage; passing <c>true</c>
            indicates that updates to both the file's content and metadata must be
            written, which generally requires at least one more I/O operation.
            Whether this parameter actually has any effect is dependent upon the
            underlying operating system and is therefore unspecified.</para>
          <para>Invoking this method may cause an I/O operation to occur even if the
            channel was only opened for reading.  Some operating systems, for
            example, maintain a last-access time as part of a file's metadata, and
            this time is updated whenever the file is read.  Whether or not this is
            actually done is system-dependent and is therefore unspecified.</para>
          <para>This method is only guaranteed to force changes that were made to
            this channel's file via the methods defined in this class.  It may or
            may not force changes that were made by modifying the content of a
            <c>MappedByteBuffer &lt;i&gt;mapped byte buffer&lt;/i&gt;</c> obtained by
            invoking the <c>#map map</c> method.  Invoking the <c>MappedByteBuffer#force force</c> method of the mapped byte buffer will
            force changes made to the buffer's content to be written.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#force(boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.force(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is already closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ForceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForceAsync (bool metaData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ForceAsync(bool metaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ForceAsync(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.ForceAsync : bool -&gt; System.Threading.Tasks.Task" Usage="fileChannel.ForceAsync metaData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metaData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metaData">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Nio.Channels.ISeekableByteChannel.Position">
      <MemberSignature Language="C#" Value="Java.Nio.Channels.ISeekableByteChannel? ISeekableByteChannel.Position (long newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Nio.Channels.ISeekableByteChannel Java.Nio.Channels.ISeekableByteChannel.Position(int64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Java#Nio#Channels#ISeekableByteChannel#Position(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Java.Nio.Channels.ISeekableByteChannel.Position : int64 -&gt; Java.Nio.Channels.ISeekableByteChannel&#xA;override this.Java.Nio.Channels.ISeekableByteChannel.Position : int64 -&gt; Java.Nio.Channels.ISeekableByteChannel" Usage="fileChannel.Java.Nio.Channels.ISeekableByteChannel.Position newPosition" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Position(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Nio.Channels.ISeekableByteChannel.Truncate">
      <MemberSignature Language="C#" Value="Java.Nio.Channels.ISeekableByteChannel? ISeekableByteChannel.Truncate (long size);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Nio.Channels.ISeekableByteChannel Java.Nio.Channels.ISeekableByteChannel.Truncate(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Java#Nio#Channels#ISeekableByteChannel#Truncate(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Java.Nio.Channels.ISeekableByteChannel.Truncate : int64 -&gt; Java.Nio.Channels.ISeekableByteChannel&#xA;override this.Java.Nio.Channels.ISeekableByteChannel.Truncate : int64 -&gt; Java.Nio.Channels.ISeekableByteChannel" Usage="fileChannel.Java.Nio.Channels.ISeekableByteChannel.Truncate size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Truncate(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.Channels.FileChannel.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileLock? Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileLock Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Lock" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "()Ljava/nio/channels/FileLock;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "()Ljava/nio/channels/FileLock;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires an exclusive lock on this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock</returns>
        <remarks>
          <para>Acquires an exclusive lock on this channel's file.</para>
          <para>An invocation of this method of the form <c>fc.lock()</c> behaves
            in exactly the same way as the invocation</para>
          <code lang="text/java">fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#lock()" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.lock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">this channel was not opened for writing.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">either a lock is already held that overlaps this lock
             request, or another thread is waiting to acquire a lock that
             will overlap with this request.</exception>
        <exception cref="T:Java.Nio.Channels.FileLockInterruptionException">the calling thread was interrupted while waiting to acquire
             the lock.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">the channel was closed while the calling thread was waiting
             to acquire the lock.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs while obtaining the requested
             lock.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileLock? Lock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileLock Lock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Lock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 * bool -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.Lock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lock", "(JJZ)Ljava/nio/channels/FileLock;", "GetLock_JJZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lock", "(JJZ)Ljava/nio/channels/FileLock;", "GetLock_JJZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">The position at which the locked region is to start; must be
                    non-negative</param>
        <param name="size">The size of the locked region; must be non-negative, and the sum
                    <c>position</c>&amp;nbsp;+&amp;nbsp;<c>size</c> must be non-negative</param>
        <param name="shared">
          <c>true</c> to request a shared lock, in which case this
                    channel must be open for reading (and possibly writing);
                    <c>false</c> to request an exclusive lock, in which case this
                    channel must be open for writing (and possibly reading)</param>
        <summary>Acquires a lock on the given region of this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock</returns>
        <remarks>
          <para>Acquires a lock on the given region of this channel's file.</para>
          <para>An invocation of this method will block until the region can be
            locked, this channel is closed, or the invoking thread is interrupted,
            whichever comes first.</para>
          <para>If this channel is closed by another thread during an invocation of
            this method then an <c>AsynchronousCloseException</c> will be thrown.</para>
          <para>If the invoking thread is interrupted while waiting to acquire the
            lock then its interrupt status will be set and a <c>FileLockInterruptionException</c> will be thrown.  If the invoker's
            interrupt status is set when this method is invoked then that exception
            will be thrown immediately; the thread's interrupt status will not be
            changed.</para>
          <para>The region specified by the <c>position</c> and <c>size</c>
            parameters need not be contained within, or even overlap, the actual
            underlying file.  Lock regions are fixed in size; if a locked region
            initially contains the end of the file and the file grows beyond the
            region then the new portion of the file will not be covered by the lock.
            If a file is expected to grow in size and a lock on the entire file is
            required then a region starting at zero, and no smaller than the
            expected maximum size of the file, should be locked.  The zero-argument
            <c>#lock()</c> method simply locks a region of size <c>Long#MAX_VALUE</c>.</para>
          <para>Some operating systems do not support shared locks, in which case a
            request for a shared lock is automatically converted into a request for
            an exclusive lock.  Whether the newly-acquired lock is shared or
            exclusive may be tested by invoking the resulting lock object's <c>FileLock#isShared() isShared</c> method.</para>
          <para>File locks are held on behalf of the entire Java virtual machine.
            They are not suitable for controlling access to a file by multiple
            threads within the same virtual machine.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#lock(long,%20long,%20boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.lock(long, long, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> or <c>size</c> is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if the requested region overlaps an existing lock or pending
             lock request.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel is not opened in read-mode but shared is true.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel is not opened in write mode but shared is
             false.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.FileLockInterruptionException">if the thread is interrupted while in the state of waiting on
             the desired file lock.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Map">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.MappedByteBuffer? Map (Java.Nio.Channels.FileChannel.MapMode? mode, long position, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.MappedByteBuffer Map(class Java.Nio.Channels.FileChannel/MapMode mode, int64 position, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Map(Java.Nio.Channels.FileChannel.MapMode,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Map : Java.Nio.Channels.FileChannel.MapMode * int64 * int64 -&gt; Java.Nio.MappedByteBuffer" Usage="fileChannel.Map (mode, position, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("map", "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;", "GetMap_Ljava_nio_channels_FileChannel_MapMode_JJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("map", "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;", "GetMap_Ljava_nio_channels_FileChannel_MapMode_JJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.MappedByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Java.Nio.Channels.FileChannel+MapMode" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="mode">One of the constants <c>MapMode#READ_ONLY READ_ONLY</c>, <c>MapMode#READ_WRITE READ_WRITE</c>, or <c>MapMode#PRIVATE
                    PRIVATE</c> defined in the <c>MapMode</c> class, according to
                    whether the file is to be mapped read-only, read/write, or
                    privately (copy-on-write), respectively</param>
        <param name="position">The position within the file at which the mapped region
                    is to start; must be non-negative</param>
        <param name="size">The size of the region to be mapped; must be non-negative and
                    no greater than <c>java.lang.Integer#MAX_VALUE</c></param>
        <summary>Maps a region of this channel's file directly into memory.</summary>
        <returns>The mapped byte buffer</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#map(java.nio.channels.MapMode,%20long,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.map(java.nio.channels.MapMode, long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the FileChannel is not opened for reading but the given
             mode is "READ_ONLY".</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the FileChannel is not opened for writing but the given
             mode is not "READ_ONLY".</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given parameters of position and size are not correct.
             Both must be non negative. <c>size</c> also must not be
             bigger than max integer.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.FileChannel? Open (Java.Nio.FileNio.IPath? path, params Java.Nio.FileNio.IOpenOption[]? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.FileChannel Open(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Open(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.Channels.FileChannel" Usage="Java.Nio.Channels.FileChannel.Open (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("open", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("open", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open or create</param>
        <param name="options">Options specifying how the file is opened</param>
        <summary>Opens or creates a file, returning a file channel to access the file.</summary>
        <returns>A new file channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#open(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.open(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.FileChannel? Open (Java.Nio.FileNio.IPath? path, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;? options, params Java.Nio.FileNio.Attributes.IFileAttribute[]? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.FileChannel Open(class Java.Nio.FileNio.IPath path, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.IOpenOption&gt; options, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Open(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.IOpenOption},Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt; * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.Channels.FileChannel" Usage="Java.Nio.Channels.FileChannel.Open (path, options, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("open", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("open", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open or create</param>
        <param name="options">Options specifying how the file is opened</param>
        <param name="attrs">To be added.</param>
        <summary>Opens or creates a file, returning a file channel to access the file.</summary>
        <returns>A new file channel</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#open(java.nio.file.Path,%20java.nio.file.OpenOption)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.open(java.nio.file.Path, java.nio.file.OpenOption)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Position() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Position" />
      <MemberSignature Language="F#" Value="abstract member Position : unit -&gt; int64" Usage="fileChannel.Position " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Position</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("position", "()J", "GetPositionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("position", "()J", "GetPositionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this channel's file position.</summary>
        <returns>This channel's file position,
                     a non-negative integer counting the number of bytes
                     from the beginning of the file to the current position</returns>
        <remarks>
          <para>Returns this channel's file position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#position()" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.position()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileChannel? Position (long newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileChannel Position(int64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Position(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Position : int64 -&gt; Java.Nio.Channels.FileChannel" Usage="fileChannel.Position newPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("position", "(J)Ljava/nio/channels/FileChannel;", "GetPosition_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("position", "(J)Ljava/nio/channels/FileChannel;", "GetPosition_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newPosition">The new position, a non-negative integer counting
                    the number of bytes from the beginning of the file</param>
        <summary>Sets this channel's file position.</summary>
        <returns>This file channel</returns>
        <remarks>
          <para>Sets this channel's file position.</para>
          <para>Setting the position to a value that is greater than the file's
            current size is legal but does not change the size of the file.  A later
            attempt to read bytes at such a position will immediately return an
            end-of-file indication.  A later attempt to write bytes at such a
            position will cause the file to be grown to accommodate the new bytes;
            the values of any bytes between the previous end-of-file and the
            newly-written bytes are unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#position(long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.position(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new position is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer -&gt; int" Usage="fileChannel.Read dst" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)</InterfaceMember>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Read(Java.Nio.ByteBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <summary>Reads a sequence of bytes from this channel into the given buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffer.</para>
          <para>Bytes are read starting at this channel's current file position, and
            then the file position is updated with the number of bytes actually
            read.  Otherwise this method behaves exactly as specified in the <c>ReadableByteChannel</c> interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#read(java.nio.ByteBuffer)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.read(java.nio.ByteBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the read.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread during the
             read.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs, details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public long Read (Java.Nio.ByteBuffer[]? dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] -&gt; int64&#xA;override this.Read : Java.Nio.ByteBuffer[] -&gt; int64" Usage="fileChannel.Read dsts" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <summary>Reads a sequence of bytes from this channel into the given buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffers.</para>
          <para>Bytes are read starting at this channel's current file position, and
            then the file position is updated with the number of bytes actually
            read.  Otherwise this method behaves exactly as specified in the <c>ScatteringByteChannel</c> interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#read(java.nio.ByteBuffer[])" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.read(java.nio.ByteBuffer[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted by another thread during this
             read operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer? dst, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer dst, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer * int64 -&gt; int" Usage="fileChannel.Read (dst, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;J)I", "GetRead_Ljava_nio_ByteBuffer_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;J)I", "GetRead_Ljava_nio_ByteBuffer_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dst">The buffer into which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                    must be non-negative</param>
        <summary>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</summary>
        <returns>The number of bytes read, possibly zero, or <c>-1</c> if the
                     given position is greater than or equal to the file's current
                     size</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into the given buffer,
            starting at the given file position.</para>
          <para>This method works in the same manner as the <c>#read(ByteBuffer)</c> method, except that bytes are read starting at the
            given file position rather than at the channel's current position.  This
            method does not modify this channel's position.  If the given position
            is greater than the file's current size then no bytes are read.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#read(java.nio.ByteBuffer,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.read(java.nio.ByteBuffer, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The calling thread will have the
             interrupt state set, and the channel will be closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> is less than 0.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[]? dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="fileChannel.Read (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>Reads a sequence of bytes from this channel into a subsequence of the
            given buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Reads a sequence of bytes from this channel into a subsequence of the
            given buffers.</para>
          <para>Bytes are read starting at this channel's current file position, and
            then the file position is updated with the number of bytes actually
            read.  Otherwise this method behaves exactly as specified in the <c>ScatteringByteChannel</c> interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#read(java.nio.ByteBuffer[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.read(java.nio.ByteBuffer[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted by another thread during this
             read operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>start </c> or <c>number </c>, or if
             <c>start + number</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (Java.Nio.ByteBuffer? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.ReadAsync dst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[]? dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.ReadAsync dsts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (Java.Nio.ByteBuffer? dst, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(class Java.Nio.ByteBuffer dst, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer * int64 -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.ReadAsync (dst, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[]? dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] * int * int -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.ReadAsync (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public abstract long Size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Size" />
      <MemberSignature Language="F#" Value="abstract member Size : unit -&gt; int64" Usage="fileChannel.Size " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Size</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("size", "()J", "GetSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("size", "()J", "GetSizeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current size of this channel's file.</summary>
        <returns>The current size of this channel's file,
                     measured in bytes</returns>
        <remarks>
          <para>Returns the current size of this channel's file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#size()" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.size()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while getting the size of the file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.Channels.FileChannel.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.Channels.FileChannel.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferFrom">
      <MemberSignature Language="C#" Value="public abstract long TransferFrom (Java.Nio.Channels.IReadableByteChannel? src, long position, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TransferFrom(class Java.Nio.Channels.IReadableByteChannel src, int64 position, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferFrom(Java.Nio.Channels.IReadableByteChannel,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TransferFrom : Java.Nio.Channels.IReadableByteChannel * int64 * int64 -&gt; int64" Usage="fileChannel.TransferFrom (src, position, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("transferFrom", "(Ljava/nio/channels/ReadableByteChannel;JJ)J", "GetTransferFrom_Ljava_nio_channels_ReadableByteChannel_JJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("transferFrom", "(Ljava/nio/channels/ReadableByteChannel;JJ)J", "GetTransferFrom_Ljava_nio_channels_ReadableByteChannel_JJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">The source channel</param>
        <param name="position">The position within the file at which the transfer is to begin;
                    must be non-negative</param>
        <param name="count">The maximum number of bytes to be transferred; must be
                    non-negative</param>
        <summary>Transfers bytes into this channel's file from the given readable byte
            channel.</summary>
        <returns>The number of bytes, possibly zero,
                     that were actually transferred</returns>
        <remarks>
          <para>Transfers bytes into this channel's file from the given readable byte
            channel.</para>
          <para>An attempt is made to read up to <c>count</c> bytes from the
            source channel and write them to this channel's file starting at the
            given <c>position</c>.  An invocation of this method may or may not
            transfer all of the requested bytes; whether or not it does so depends
            upon the natures and states of the channels.  Fewer than the requested
            number of bytes will be transferred if the source channel has fewer than
            <c>count</c> bytes remaining, or if the source channel is non-blocking
            and has fewer than <c>count</c> bytes immediately available in its
            input buffer.</para>
          <para>This method does not modify this channel's position.  If the given
            position is greater than the file's current size then no bytes are
            transferred.  If the source channel has a position then bytes are read
            starting at that position and then the position is incremented by the
            number of bytes read.</para>
          <para>This method is potentially much more efficient than a simple loop
            that reads from the source channel and writes to this channel.  Many
            operating systems can transfer bytes directly from the source channel
            into the filesystem cache without actually copying them.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#transferFrom(java.nio.channels.ReadableByteChannel,%20long,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel, long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the source channel is not readable.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel is not writable.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if either channel has already been closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if either channel is closed by other threads during this
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted during this operation.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferFromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; TransferFromAsync (Java.Nio.Channels.IReadableByteChannel? src, long position, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; TransferFromAsync(class Java.Nio.Channels.IReadableByteChannel src, int64 position, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferFromAsync(Java.Nio.Channels.IReadableByteChannel,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TransferFromAsync : Java.Nio.Channels.IReadableByteChannel * int64 * int64 -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.TransferFromAsync (src, position, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="position">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferTo">
      <MemberSignature Language="C#" Value="public abstract long TransferTo (long position, long count, Java.Nio.Channels.IWritableByteChannel? target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TransferTo(int64 position, int64 count, class Java.Nio.Channels.IWritableByteChannel target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferTo(System.Int64,System.Int64,Java.Nio.Channels.IWritableByteChannel)" />
      <MemberSignature Language="F#" Value="abstract member TransferTo : int64 * int64 * Java.Nio.Channels.IWritableByteChannel -&gt; int64" Usage="fileChannel.TransferTo (position, count, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("transferTo", "(JJLjava/nio/channels/WritableByteChannel;)J", "GetTransferTo_JJLjava_nio_channels_WritableByteChannel_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("transferTo", "(JJLjava/nio/channels/WritableByteChannel;)J", "GetTransferTo_JJLjava_nio_channels_WritableByteChannel_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="target" Type="Java.Nio.Channels.IWritableByteChannel" />
      </Parameters>
      <Docs>
        <param name="position">The position within the file at which the transfer is to begin;
                    must be non-negative</param>
        <param name="count">The maximum number of bytes to be transferred; must be
                    non-negative</param>
        <param name="target">The target channel</param>
        <summary>Transfers bytes from this channel's file to the given writable byte
            channel.</summary>
        <returns>The number of bytes, possibly zero,
                     that were actually transferred</returns>
        <remarks>
          <para>Transfers bytes from this channel's file to the given writable byte
            channel.</para>
          <para>An attempt is made to read up to <c>count</c> bytes starting at
            the given <c>position</c> in this channel's file and write them to the
            target channel.  An invocation of this method may or may not transfer
            all of the requested bytes; whether or not it does so depends upon the
            natures and states of the channels.  Fewer than the requested number of
            bytes are transferred if this channel's file contains fewer than
            <c>count</c> bytes starting at the given <c>position</c>, or if the
            target channel is non-blocking and it has fewer than <c>count</c>
            bytes free in its output buffer.</para>
          <para>This method does not modify this channel's position.  If the given
            position is greater than the file's current size then no bytes are
            transferred.  If the target channel has a position then bytes are
            written starting at that position and then the position is incremented
            by the number of bytes written.</para>
          <para>This method is potentially much more efficient than a simple loop
            that reads from this channel and writes to the target channel.  Many
            operating systems can transfer bytes directly from the filesystem cache
            to the target channel without actually copying them.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#transferTo(long,%20long,%20java.nio.channels.WritableByteChannel)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.transferTo(long, long, java.nio.channels.WritableByteChannel)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if this channel is not readable.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the target channel is not writable.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if either channel has already been closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if either channel is closed by other threads during this
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted during this operation.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; TransferToAsync (long position, long count, Java.Nio.Channels.IWritableByteChannel? target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; TransferToAsync(int64 position, int64 count, class Java.Nio.Channels.IWritableByteChannel target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferToAsync(System.Int64,System.Int64,Java.Nio.Channels.IWritableByteChannel)" />
      <MemberSignature Language="F#" Value="member this.TransferToAsync : int64 * int64 * Java.Nio.Channels.IWritableByteChannel -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.TransferToAsync (position, count, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="target" Type="Java.Nio.Channels.IWritableByteChannel" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="count">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileChannel? Truncate (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileChannel Truncate(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Truncate(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Truncate : int64 -&gt; Java.Nio.Channels.FileChannel" Usage="fileChannel.Truncate size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("truncate", "(J)Ljava/nio/channels/FileChannel;", "GetTruncate_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("truncate", "(J)Ljava/nio/channels/FileChannel;", "GetTruncate_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">The new size, a non-negative byte count</param>
        <summary>Truncates this channel's file to the given size.</summary>
        <returns>This file channel</returns>
        <remarks>
          <para>Truncates this channel's file to the given size.</para>
          <para>If the given size is less than the file's current size then the file
            is truncated, discarding any bytes beyond the new end of the file.  If
            the given size is greater than or equal to the file's current size then
            the file is not modified.  In either case, if this channel's file
            position is greater than the given size then it is set to that size.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#truncate(long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.truncate(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the requested size is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel cannot be written to.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="TruncateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel?&gt; TruncateAsync (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Nio.Channels.FileChannel&gt; TruncateAsync(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TruncateAsync(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TruncateAsync : int64 -&gt; System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel&gt;" Usage="fileChannel.TruncateAsync size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileLock? TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileLock TryLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TryLock" />
      <MemberSignature Language="F#" Value="member this.TryLock : unit -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.TryLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "()Ljava/nio/channels/FileLock;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "()Ljava/nio/channels/FileLock;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to acquire an exclusive lock on this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock,
                     or <c>null</c> if the lock could not be acquired
                     because another program holds an overlapping lock</returns>
        <remarks>
          <para>Attempts to acquire an exclusive lock on this channel's file.</para>
          <para>An invocation of this method of the form <c>fc.tryLock()</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">fc.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#tryLock()" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.tryLock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if a lock already exists that overlaps this lock request or
             another thread is waiting to acquire a lock that will overlap
             with this request.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileLock? TryLock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileLock TryLock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TryLock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryLock : int64 * int64 * bool -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.TryLock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryLock", "(JJZ)Ljava/nio/channels/FileLock;", "GetTryLock_JJZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryLock", "(JJZ)Ljava/nio/channels/FileLock;", "GetTryLock_JJZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">The position at which the locked region is to start; must be
                    non-negative</param>
        <param name="size">The size of the locked region; must be non-negative, and the sum
                    <c>position</c>&amp;nbsp;+&amp;nbsp;<c>size</c> must be non-negative</param>
        <param name="shared">
          <c>true</c> to request a shared lock,
                    <c>false</c> to request an exclusive lock</param>
        <summary>Attempts to acquire a lock on the given region of this channel's file.</summary>
        <returns>A lock object representing the newly-acquired lock,
                     or <c>null</c> if the lock could not be acquired
                     because another program holds an overlapping lock</returns>
        <remarks>
          <para>Attempts to acquire a lock on the given region of this channel's file.</para>
          <para>This method does not block.  An invocation always returns
            immediately, either having acquired a lock on the requested region or
            having failed to do so.  If it fails to acquire a lock because an
            overlapping lock is held by another program then it returns
            <c>null</c>.  If it fails to acquire a lock for any other reason then
            an appropriate exception is thrown.</para>
          <para>The region specified by the <c>position</c> and <c>size</c>
            parameters need not be contained within, or even overlap, the actual
            underlying file.  Lock regions are fixed in size; if a locked region
            initially contains the end of the file and the file grows beyond the
            region then the new portion of the file will not be covered by the lock.
            If a file is expected to grow in size and a lock on the entire file is
            required then a region starting at zero, and no smaller than the
            expected maximum size of the file, should be locked.  The zero-argument
            <c>#tryLock()</c> method simply locks a region of size <c>Long#MAX_VALUE</c>.</para>
          <para>Some operating systems do not support shared locks, in which case a
            request for a shared lock is automatically converted into a request for
            an exclusive lock.  Whether the newly-acquired lock is shared or
            exclusive may be tested by invoking the resulting lock object's <c>FileLock#isShared() isShared</c> method.</para>
          <para>File locks are held on behalf of the entire Java virtual machine.
            They are not suitable for controlling access to a file by multiple
            threads within the same virtual machine.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#tryLock(long,%20long,%20boolean)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.tryLock(long, long, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if any parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if a lock is already held that overlaps this lock request or
             another thread is waiting to acquire a lock that will overlap
             with this request.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer -&gt; int" Usage="fileChannel.Write src" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)</InterfaceMember>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Write(Java.Nio.ByteBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="src">the byte buffer containing the bytes to be written.</param>
        <summary>Writes a sequence of bytes to this channel from the given buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffer.</para>
          <para>Bytes are written starting at this channel's current file position
            unless the channel is in append mode, in which case the position is
            first advanced to the end of the file.  The file is grown, if necessary,
            to accommodate the written bytes, and then the file position is updated
            with the number of bytes actually written.  Otherwise this method
            behaves exactly as specified by the <c>WritableByteChannel</c>
            interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#write(java.nio.ByteBuffer)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.write(java.nio.ByteBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened for writing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel was already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the write.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs, details are in the message.</exception>
        <altmember cref="M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[]? srcs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] -&gt; int64&#xA;override this.Write : Java.Nio.ByteBuffer[] -&gt; int64" Usage="fileChannel.Write srcs" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <summary>Writes a sequence of bytes to this channel from the given buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffers.</para>
          <para>Bytes are written starting at this channel's current file position
            unless the channel is in append mode, in which case the position is
            first advanced to the end of the file.  The file is grown, if necessary,
            to accommodate the written bytes, and then the file position is updated
            with the number of bytes actually written.  Otherwise this method
            behaves exactly as specified in the <c>GatheringByteChannel</c>
            interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#write(java.nio.ByteBuffer[])" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.write(java.nio.ByteBuffer[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel was not opened for writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer? src, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer src, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int64 -&gt; int" Usage="fileChannel.Write (src, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;J)I", "GetWrite_Ljava_nio_ByteBuffer_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;J)I", "GetWrite_Ljava_nio_ByteBuffer_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">The buffer from which bytes are to be transferred</param>
        <param name="position">The file position at which the transfer is to begin;
                    must be non-negative</param>
        <summary>Writes a sequence of bytes to this channel from the given buffer,
            starting at the given file position.</summary>
        <returns>The number of bytes written, possibly zero</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from the given buffer,
            starting at the given file position.</para>
          <para>This method works in the same manner as the <c>#write(ByteBuffer)</c> method, except that bytes are written starting at
            the given file position rather than at the channel's current position.
            This method does not modify this channel's position.  If the given
            position is greater than the file's current size then the file will be
            grown to accommodate the new bytes; the values of any bytes between the
            previous end-of-file and the newly-written bytes are unspecified.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#write(java.nio.ByteBuffer,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.write(java.nio.ByteBuffer, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> is less than 0.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened in write-mode.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract long Write (Java.Nio.ByteBuffer[]? srcs, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="fileChannel.Write (srcs, offset, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <param name="offset">the index of the first buffer in <c>buffers </c>to get bytes
            from.</param>
        <param name="length">the number of buffers to get bytes from.</param>
        <summary>Writes a sequence of bytes to this channel from a subsequence of the
            given buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Writes a sequence of bytes to this channel from a subsequence of the
            given buffers.</para>
          <para>Bytes are written starting at this channel's current file position
            unless the channel is in append mode, in which case the position is
            first advanced to the end of the file.  The file is grown, if necessary,
            to accommodate the written bytes, and then the file position is updated
            with the number of bytes actually written.  Otherwise this method
            behaves exactly as specified in the <c>GatheringByteChannel</c>
            interface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/FileChannel#write(java.nio.ByteBuffer[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.channels.FileChannel.write(java.nio.ByteBuffer[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if
             <c>offset + length</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel was not opened for writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.WriteAsync src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; WriteAsync (Java.Nio.ByteBuffer[]? srcs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; WriteAsync(class Java.Nio.ByteBuffer[] srcs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer[] -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.WriteAsync srcs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer? src, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer src, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer * int64 -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.WriteAsync (src, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; WriteAsync (Java.Nio.ByteBuffer[]? srcs, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; WriteAsync(class Java.Nio.ByteBuffer[] srcs, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer[] * int * int -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.WriteAsync (srcs, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
