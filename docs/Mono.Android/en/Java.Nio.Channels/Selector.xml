<Type Name="Selector" FullName="Java.Nio.Channels.Selector">
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Selector&#xA;Inherits Object&#xA;Implements ICloseable, IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Selector abstract : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::IO::ICloseable" />
  <TypeSignature Language="C#" Value="public abstract class Selector : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Selector extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.Selector" />
  <TypeSignature Language="F#" Value="type Selector = class&#xA;    inherit Object&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/channels/Selector", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/channels/Selector", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A multiplexor of <c>SelectableChannel</c> objects.</summary>
    <remarks>
      <para>A multiplexor of <c>SelectableChannel</c> objects.</para>
      <para>A selector may be created by invoking the <c>#open open</c> method of
            this class, which will use the system's default <c>java.nio.channels.spi.SelectorProvider selector provider</c> to
            create a new selector.  A selector may also be created by invoking the
            <c>java.nio.channels.spi.SelectorProvider#openSelector openSelector</c>
            method of a custom selector provider.  A selector remains open until it is
            closed via its <c>#close close</c> method.
            
            "ks"&gt;</para>
      <para>A selectable channel's registration with a selector is represented by a
            <c>SelectionKey</c> object.  A selector maintains three sets of selection
            keys:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>The <i>key set</i> contains the keys representing the current
              channel registrations of this selector.  This set is returned by the
              <c>#keys() keys</c> method.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <i>selected-key set</i> is the set of keys such that each
              key's channel was detected to be ready for at least one of the operations
              identified in the key's interest set during a prior selection operation
              that adds keys or updates keys in the set.
              This set is returned by the <c>#selectedKeys() selectedKeys</c> method.
              The selected-key set is always a subset of the key set.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <i>cancelled-key</i> set is the set of keys that have been
              cancelled but whose channels have not yet been deregistered.  This set is
              not directly accessible.  The cancelled-key set is always a subset of the
              key set.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>All three sets are empty in a newly-created selector.</para>
      <para>A key is added to a selector's key set as a side effect of registering a
            channel via the channel's <c>SelectableChannel#register(Selector,int)
            register</c> method.  Cancelled keys are removed from the key set during
            selection operations.  The key set itself is not directly modifiable.</para>
      <para>A key is added to its selector's cancelled-key set when it is cancelled,
            whether by closing its channel or by invoking its <c>SelectionKey#cancel
            cancel</c> method.  Cancelling a key will cause its channel to be deregistered
            during the next selection operation, at which time the key will be removed
            from all of the selector's key sets.
            
            "sks"&gt;</para>
      <para>Keys are added to the selected-key set by selection
            operations.  A key may be removed directly from the selected-key set by
            invoking the set's <c>java.util.Set#remove(java.lang.Object) remove</c>
            method or by invoking the <c>java.util.Iterator#remove() remove</c> method
            of an <c>java.util.Iterator iterator</c> obtained from the set.
            All keys may be removed from the selected-key set by invoking the set's
            <c>java.util.Set#clear() clear</c> method.  Keys may not be added directly
            to the selected-key set.</para>
      <para>"selop"&gt;&lt;h2&gt;Selection&lt;/h2&gt;</para>
      <para>A selection operation queries the underlying operating system for an
            update as to the readiness of each registered channel to perform any of the
            operations identified by its key's interest set.  There are two forms of
            selection operation:
            
            &lt;ol&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#select()</c>, <c>#select(long)</c>, and <c>#selectNow()</c>
              methods add the keys of channels ready to perform an operation to the
              selected-key set, or update the ready-operation set of keys already in the
              selected-key set.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#select(Consumer)</c>, <c>#select(Consumer, long)</c>, and
              <c>#selectNow(Consumer)</c> methods perform an <i>action</i> on the key
              of each channel that is ready to perform an operation.  These methods do
              not add to the selected-key set.</para>
      <para>&lt;/li&gt;
            
            &lt;/ol&gt;
            
            &lt;h3&gt;Selection operations that add to the selected-key set&lt;/h3&gt;</para>
      <para>During each selection operation, keys may be added to and removed from a
            selector's selected-key set and may be removed from its key and
            cancelled-key sets.  Selection is performed by the <c>#select()</c>, <c>#select(long)</c>, and <c>#selectNow()</c> methods, and involves three steps:</para>
      <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
      <para>Each key in the cancelled-key set is removed from each key set of
              which it is a member, and its channel is deregistered.  This step leaves
              the cancelled-key set empty.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The underlying operating system is queried for an update as to the
              readiness of each remaining channel to perform any of the operations
              identified by its key's interest set as of the moment that the selection
              operation began.  For a channel that is ready for at least one such
              operation, one of the following two actions is performed:</para>
      <para>&lt;ol&gt;
            
                &lt;li&gt;</para>
      <para>If the channel's key is not already in the selected-key set then
                it is added to that set and its ready-operation set is modified to
                identify exactly those operations for which the channel is now reported
                to be ready.  Any readiness information previously recorded in the ready
                set is discarded.</para>
      <para>&lt;/li&gt;
            
                &lt;li&gt;</para>
      <para>Otherwise the channel's key is already in the selected-key set,
                so its ready-operation set is modified to identify any new operations
                for which the channel is reported to be ready.  Any readiness
                information previously recorded in the ready set is preserved; in other
                words, the ready set returned by the underlying system is
                bitwise-disjoined into the key's current ready set.</para>
      <para>&lt;/li&gt;
            
              &lt;/ol&gt;
            
              If all of the keys in the key set at the start of this step have empty
              interest sets then neither the selected-key set nor any of the keys'
              ready-operation sets will be updated.
            
              &lt;li&gt;</para>
      <para>If any keys were added to the cancelled-key set while step (2) was
              in progress then they are processed as in step (1).</para>
      <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
      <para>Whether or not a selection operation blocks to wait for one or more
            channels to become ready, and if so for how long, is the only essential
            difference between the three selection methods.</para>
      <para>&lt;h3&gt;Selection operations that perform an action on selected keys&lt;/h3&gt;</para>
      <para>During each selection operation, keys may be removed from the selector's
            key, selected-key, and cancelled-key sets.  Selection is performed by the
            <c>#select(Consumer)</c>, <c>#select(Consumer,long)</c>, and <c>#selectNow(Consumer)</c> methods, and involves three steps:</para>
      <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
      <para>Each key in the cancelled-key set is removed from each key set of
              which it is a member, and its channel is deregistered.  This step leaves
              the cancelled-key set empty.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The underlying operating system is queried for an update as to the
              readiness of each remaining channel to perform any of the operations
              identified by its key's interest set as of the moment that the selection
              operation began.</para>
      <para>For a channel that is ready for at least one such operation, the
              ready-operation set of the channel's key is set to identify exactly the
              operations for which the channel is ready and the <i>action</i> specified
              to the <c>select</c> method is invoked to consume the channel's key.  Any
              readiness information previously recorded in the ready set is discarded
              prior to invoking the <i>action</i>.</para>
      <para>Alternatively, where a channel is ready for more than one operation,
              the <i>action</i> may be invoked more than once with the channel's key and
              ready-operation set modified to a subset of the operations for which the
              channel is ready.  Where the <i>action</i> is invoked more than once for
              the same key then its ready-operation set never contains operation bits
              that were contained in the set at previous calls to the <i>action</i>
              in the same selection operation.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>If any keys were added to the cancelled-key set while step (2) was
              in progress then they are processed as in step (1).</para>
      <para>&lt;/li&gt;
            
            &lt;/ol&gt;
            
            
            &lt;h2&gt;Concurrency&lt;/h2&gt;</para>
      <para>A Selector and its key set are safe for use by multiple concurrent
            threads.  Its selected-key set and cancelled-key set, however, are not.</para>
      <para>The selection operations synchronize on the selector itself, on the
            selected-key set, in that order.  They also synchronize on the cancelled-key
            set during steps (1) and (3) above.</para>
      <para>Changes made to the interest sets of a selector's keys while a
            selection operation is in progress have no effect upon that operation; they
            will be seen by the next selection operation.</para>
      <para>Keys may be cancelled and channels may be closed at any time.  Hence the
            presence of a key in one or more of a selector's key sets does not imply
            that the key is valid or that its channel is open. Application code should
            be careful to synchronize and check these conditions as necessary if there
            is any possibility that another thread will cancel a key or close a channel.</para>
      <para>A thread blocked in a selection operation may be interrupted by some
            other thread in one of three ways:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>By invoking the selector's <c>#wakeup wakeup</c> method,</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>By invoking the selector's <c>#close close</c> method, or</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>By invoking the blocked thread's <c>java.lang.Thread#interrupt() interrupt</c> method, in which case its
              interrupt status will be set and the selector's <c>#wakeup wakeup</c>
              method will be invoked.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>The <c>#close close</c> method synchronizes on the selector and its
            selected-key set in the same order as in a selection operation.
            
            "ksc"&gt;</para>
      <para>A Selector's key set is safe for use by multiple concurrent threads.
            Retrieval operations from the key set do not generally block and so may
            overlap with new registrations that add to the set, or with the cancellation
            steps of selection operations that remove keys from the set.  Iterators and
            spliterators return elements reflecting the state of the set at some point at
            or since the creation of the iterator/spliterator.  They do not throw
            <c>java.util.ConcurrentModificationException ConcurrentModificationException</c>.
            
            "sksc"&gt;</para>
      <para>A selector's selected-key set is not, in general, safe for use by
            multiple concurrent threads.  If such a thread might modify the set directly
            then access should be controlled by synchronizing on the set itself.  The
            iterators returned by the set's <c>java.util.Set#iterator() iterator</c>
            methods are <i>fail-fast:</i> If the set is modified after the iterator is
            created, in any way except by invoking the iterator's own <c>java.util.Iterator#remove() remove</c> method, then a <c>java.util.ConcurrentModificationException</c> will be thrown.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/channels/Selector" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Selector();" />
      <MemberSignature Language="C#" Value="protected Selector ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of this class.</summary>
        <remarks>
          <para>Initializes a new instance of this class.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#Selector()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.Selector()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Selector(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected Selector (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.Selector : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.Channels.Selector" Usage="new Java.Nio.Channels.Selector (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Close();" />
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="selector.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.ICloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this selector.</summary>
        <remarks>
          <para>Closes this selector.</para>
          <para>If a thread is currently blocked in one of this selector's selection
            methods then it is interrupted as if by invoking the selector's <c>#wakeup wakeup</c> method.</para>
          <para>Any uncancelled keys still associated with this selector are
            invalidated, their channels are deregistered, and any other resources
            associated with this selector are released.</para>
          <para>If this selector is already closed then invoking this method has no
            effect.</para>
          <para>After a selector is closed, any further attempt to use it, except by
            invoking this method or the <c>#wakeup wakeup</c> method, will cause a
            <c>ClosedSelectorException</c> to be thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#close()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsOpen { bool get(); };" />
      <MemberSignature Language="C#" Value="public abstract bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Selector.IsOpen" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool" Usage="Java.Nio.Channels.Selector.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isOpen", "()Z", "GetIsOpenHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isOpen", "()Z", "GetIsOpenHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this selector is open.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Selector.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.Channels.Selector.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Keys () As ICollection(Of SelectionKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::ICollection&lt;Java::Nio::Channels::SelectionKey ^&gt; ^ Keys();" />
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;? Keys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;class Java.Nio.Channels.SelectionKey&gt; Keys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Keys" />
      <MemberSignature Language="F#" Value="abstract member Keys : unit -&gt; System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;" Usage="selector.Keys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("keys", "()Ljava/util/Set;", "GetKeysHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("keys", "()Ljava/util/Set;", "GetKeysHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this selector's key set.</summary>
        <returns>This selector's key set</returns>
        <remarks>
          <para>Returns this selector's key set.</para>
          <para>The key set is not directly modifiable.  A key is removed only after
            it has been cancelled and its channel has been deregistered.  Any
            attempt to modify the key set will cause an <c>UnsupportedOperationException</c> to be thrown.</para>
          <para>The set is safe for use by multiple concurrent
            threads.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#keys()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.keys()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open () As Selector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Nio::Channels::Selector ^ Open();" />
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.Selector? Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.Selector Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Open" />
      <MemberSignature Language="F#" Value="static member Open : unit -&gt; Java.Nio.Channels.Selector" Usage="Java.Nio.Channels.Selector.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("open", "()Ljava/nio/channels/Selector;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("open", "()Ljava/nio/channels/Selector;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Selector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opens a selector.</summary>
        <returns>A new selector</returns>
        <remarks>
          <para>Opens a selector.</para>
          <para>The new selector is created by invoking the <c>java.nio.channels.spi.SelectorProvider#openSelector openSelector</c> method
            of the system-wide default <c>java.nio.channels.spi.SelectorProvider</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#open()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.open()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Provider () As SelectorProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::Channels::Spi::SelectorProvider ^ Provider();" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.Spi.SelectorProvider? Provider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.Spi.SelectorProvider Provider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Provider" />
      <MemberSignature Language="F#" Value="abstract member Provider : unit -&gt; Java.Nio.Channels.Spi.SelectorProvider" Usage="selector.Provider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("provider", "()Ljava/nio/channels/spi/SelectorProvider;", "GetProviderHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("provider", "()Ljava/nio/channels/spi/SelectorProvider;", "GetProviderHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Spi.SelectorProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the provider that created this channel.</summary>
        <returns>The provider that created this channel</returns>
        <remarks>
          <para>Returns the provider that created this channel.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#provider()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.provider()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Select () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Select();" />
      <MemberSignature Language="C#" Value="public abstract int Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Select" />
      <MemberSignature Language="F#" Value="abstract member Select : unit -&gt; int" Usage="selector.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("select", "()I", "GetSelectHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("select", "()I", "GetSelectHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</summary>
        <returns>The number of keys, possibly zero,
                     whose ready-operation sets were updated</returns>
        <remarks>
          <para>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</para>
          <para>This method performs a blocking selection
            operation.  It returns only after at least one channel is selected,
            this selector's <c>#wakeup wakeup</c> method is invoked, or the current
            thread is interrupted, whichever comes first.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#select()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.select()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedSelectorException">if the selector is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (action As IConsumer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Select(Java::Util::Functions::IConsumer ^ action);" />
      <MemberSignature Language="C#" Value="public virtual int Select (Java.Util.Functions.IConsumer? action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Select(class Java.Util.Functions.IConsumer action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Select(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member Select : Java.Util.Functions.IConsumer -&gt; int&#xA;override this.Select : Java.Util.Functions.IConsumer -&gt; int" Usage="selector.Select action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("select", "(Ljava/util/function/Consumer;)I", "GetSelect_Ljava_util_function_Consumer_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("select", "(Ljava/util/function/Consumer;)I", "GetSelect_Ljava_util_function_Consumer_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="action">The action to perform</param>
        <summary>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</summary>
        <returns>The number of unique keys consumed, possibly zero</returns>
        <remarks>
          <para>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</para>
          <para>This method performs a blocking selection
            operation.  It wakes up from querying the operating system only when
            at least one channel is selected, this selector's <c>#wakeup wakeup</c>
            method is invoked, or the current thread is interrupted, whichever comes
            first.</para>
          <para>This method is equivalent to invoking the 2-arg
            <c>#select(Consumer, long) select</c> method with a timeout of <c>0</c>
            to block indefinitely.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#select(java.util.function.Consumer%3Cjava.nio.channels.SelectionKey%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.select(java.util.function.Consumer&lt;java.nio.channels.SelectionKey&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Select (timeout As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Select(long timeout);" />
      <MemberSignature Language="C#" Value="public abstract int Select (long timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Select(int64 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Select(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Select : int64 -&gt; int" Usage="selector.Select timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("select", "(J)I", "GetSelect_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("select", "(J)I", "GetSelect_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeout">If positive, block for up to <c>timeout</c>
                             milliseconds, more or less, while waiting for a
                             channel to become ready; if zero, block indefinitely;
                             must not be negative</param>
        <summary>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</summary>
        <returns>The number of keys, possibly zero,
                     whose ready-operation sets were updated</returns>
        <remarks>
          <para>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</para>
          <para>This method performs a blocking selection
            operation.  It returns only after at least one channel is selected,
            this selector's <c>#wakeup wakeup</c> method is invoked, the current
            thread is interrupted, or the given timeout period expires, whichever
            comes first.</para>
          <para>This method does not offer real-time guarantees: It schedules the
            timeout as if by invoking the <c>Object#wait(long)</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#select(long)" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.select(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedSelectorException">if the selector is closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given timeout argument is less than zero.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (action As IConsumer, timeout As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Select(Java::Util::Functions::IConsumer ^ action, long timeout);" />
      <MemberSignature Language="C#" Value="public virtual int Select (Java.Util.Functions.IConsumer? action, long timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Select(class Java.Util.Functions.IConsumer action, int64 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Select(Java.Util.Functions.IConsumer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Select : Java.Util.Functions.IConsumer * int64 -&gt; int&#xA;override this.Select : Java.Util.Functions.IConsumer * int64 -&gt; int" Usage="selector.Select (action, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("select", "(Ljava/util/function/Consumer;J)I", "GetSelect_Ljava_util_function_Consumer_JHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("select", "(Ljava/util/function/Consumer;J)I", "GetSelect_Ljava_util_function_Consumer_JHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IConsumer" />
        <Parameter Name="timeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="action">The action to perform</param>
        <param name="timeout">If positive, block for up to <c>timeout</c>
                             milliseconds, more or less, while waiting for a
                             channel to become ready; if zero, block indefinitely;
                             must not be negative</param>
        <summary>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</summary>
        <returns>The number of unique keys consumed, possibly zero</returns>
        <remarks>
          <para>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</para>
          <para>This method performs a blocking selection
            operation.  It wakes up from querying the operating system only when
            at least one channel is selected, this selector's <c>#wakeup wakeup</c>
            method is invoked, the current thread is interrupted, or the given
            timeout period expires, whichever comes first.</para>
          <para>The specified <i>action</i>'s <c>Consumer#accept(Object) accept</c>
            method is invoked with the key for each channel that is ready to perform
            an operation identified by its key's interest set.  The <c>accept</c>
            method may be invoked more than once for the same key but with the
            ready-operation set containing a subset of the operations for which the
            channel is ready (as described above).  The <c>accept</c> method is
            invoked while synchronized on the selector and its selected-key set.
            Great care must be taken to avoid deadlocking with other threads that
            also synchronize on these objects.  Selection operations are not reentrant
            in general and consequently the <i>action</i> should take great care not
            to attempt a selection operation on the same selector.  The behavior when
            attempting a reentrant selection operation is implementation specific and
            therefore not specified.  If the <i>action</i> closes the selector then
            <c>ClosedSelectorException</c> is thrown when the action completes.
            The <i>action</i> is not prohibited from closing channels registered with
            the selector, nor prohibited from cancelling keys or changing a key's
            interest set.  If a channel is selected but its key is cancelled or its
            interest set changed before the <i>action</i> is performed on the key
            then it is implementation specific as to whether the <i>action</i> is
            invoked (it may be invoked with an <c>SelectionKey#isValid() invalid</c>
            key).  Exceptions thrown by the action are relayed to the caller.</para>
          <para>This method does not offer real-time guarantees: It schedules the
            timeout as if by invoking the <c>Object#wait(long)</c> method.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#select(java.util.function.Consumer%3Cjava.nio.channels.SelectionKey%3E,%20long)" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.select(java.util.function.Consumer&lt;java.nio.channels.SelectionKey&gt;, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedKeys">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectedKeys () As ICollection(Of SelectionKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::ICollection&lt;Java::Nio::Channels::SelectionKey ^&gt; ^ SelectedKeys();" />
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;? SelectedKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;class Java.Nio.Channels.SelectionKey&gt; SelectedKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.SelectedKeys" />
      <MemberSignature Language="F#" Value="abstract member SelectedKeys : unit -&gt; System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;" Usage="selector.SelectedKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("selectedKeys", "()Ljava/util/Set;", "GetSelectedKeysHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("selectedKeys", "()Ljava/util/Set;", "GetSelectedKeysHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Nio.Channels.SelectionKey&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this selector's selected-key set.</summary>
        <returns>This selector's selected-key set</returns>
        <remarks>
          <para>Returns this selector's selected-key set.</para>
          <para>Keys may be removed from, but not directly added to, the
            selected-key set.  Any attempt to add an object to the key set will
            cause an <c>UnsupportedOperationException</c> to be thrown.</para>
          <para>The selected-key set is not thread-safe.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#selectedKeys()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.selectedKeys()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedSelectorException">if the selector is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectNow">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectNow () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int SelectNow();" />
      <MemberSignature Language="C#" Value="public abstract int SelectNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SelectNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.SelectNow" />
      <MemberSignature Language="F#" Value="abstract member SelectNow : unit -&gt; int" Usage="selector.SelectNow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("selectNow", "()I", "GetSelectNowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("selectNow", "()I", "GetSelectNowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</summary>
        <returns>The number of keys, possibly zero, whose ready-operation sets
                     were updated by the selection operation</returns>
        <remarks>
          <para>Selects a set of keys whose corresponding channels are ready for I/O
            operations.</para>
          <para>This method performs a non-blocking selection
            operation.  If no channels have become selectable since the previous
            selection operation then this method immediately returns zero.</para>
          <para>Invoking this method clears the effect of any previous invocations
            of the <c>#wakeup wakeup</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#selectNow()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.selectNow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurrs.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedSelectorException">if the selector is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectNow">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectNow (action As IConsumer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SelectNow(Java::Util::Functions::IConsumer ^ action);" />
      <MemberSignature Language="C#" Value="public virtual int SelectNow (Java.Util.Functions.IConsumer? action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SelectNow(class Java.Util.Functions.IConsumer action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.SelectNow(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member SelectNow : Java.Util.Functions.IConsumer -&gt; int&#xA;override this.SelectNow : Java.Util.Functions.IConsumer -&gt; int" Usage="selector.SelectNow action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("selectNow", "(Ljava/util/function/Consumer;)I", "GetSelectNow_Ljava_util_function_Consumer_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("selectNow", "(Ljava/util/function/Consumer;)I", "GetSelectNow_Ljava_util_function_Consumer_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="action">The action to perform</param>
        <summary>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</summary>
        <returns>The number of unique keys consumed, possibly zero</returns>
        <remarks>
          <para>Selects and performs an action on the keys whose corresponding channels
            are ready for I/O operations.</para>
          <para>This method performs a non-blocking selection
            operation.</para>
          <para>Invoking this method clears the effect of any previous invocations
            of the <c>#wakeup wakeup</c> method.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#selectNow(java.util.function.Consumer%3Cjava.nio.channels.SelectionKey%3E)" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.selectNow(java.util.function.Consumer&lt;java.nio.channels.SelectionKey&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Selector.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.Channels.Selector.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.Selector.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.Channels.Selector.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wakeup">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Wakeup () As Selector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::Channels::Selector ^ Wakeup();" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.Selector? Wakeup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.Selector Wakeup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.Selector.Wakeup" />
      <MemberSignature Language="F#" Value="abstract member Wakeup : unit -&gt; Java.Nio.Channels.Selector" Usage="selector.Wakeup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wakeup", "()Ljava/nio/channels/Selector;", "GetWakeupHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wakeup", "()Ljava/nio/channels/Selector;", "GetWakeupHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Selector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the first selection operation that has not yet returned to return
            immediately.</summary>
        <returns>This selector</returns>
        <remarks>
          <para>Causes the first selection operation that has not yet returned to return
            immediately.</para>
          <para>If another thread is currently blocked in a selection operation then
            that invocation will return immediately.  If no selection operation is
            currently in progress then the next invocation of a selection operation
            will return immediately unless <c>#selectNow()</c> or <c>#selectNow(Consumer)</c> is invoked in the meantime.  In any case the value
            returned by that invocation may be non-zero.  Subsequent selection
            operations will block as usual unless this method is invoked again in the
            meantime.</para>
          <para>Invoking this method more than once between two successive selection
            operations has the same effect as invoking it just once.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/channels/Selector#wakeup()" title="Reference documentation">Java documentation for <code>java.nio.channels.Selector.wakeup()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedSelectorException">if the selector is closed.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
