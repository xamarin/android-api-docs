<Type Name="DateTimeFormatter" FullName="Java.Time.Format.DateTimeFormatter">
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatter&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatter sealed : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateTimeFormatter extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Time.Format.DateTimeFormatter" />
  <TypeSignature Language="F#" Value="type DateTimeFormatter = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/time/format/DateTimeFormatter", ApiSince=26, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/time/format/DateTimeFormatter", ApiSince=26, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Formatter for printing and parsing date-time objects.</summary>
    <remarks>
      <para>Formatter for printing and parsing date-time objects.</para>
      <para>This class provides the main application entry point for printing and parsing
            and provides common implementations of <c>DateTimeFormatter</c>:
            &lt;ul&gt;
            &lt;li&gt;Using predefined constants, such as <c>#ISO_LOCAL_DATE</c>&lt;/li&gt;
            &lt;li&gt;Using pattern letters, such as <c>uuuu-MMM-dd</c>&lt;/li&gt;
            &lt;li&gt;Using localized styles, such as <c>long</c> or <c>medium</c>&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>More complex formatters are provided by
            <c>DateTimeFormatterBuilder DateTimeFormatterBuilder</c>.</para>
      <para>The main date-time classes provide two methods - one for formatting,
            <c>format(DateTimeFormatter formatter)</c>, and one for parsing,
            <c>parse(CharSequence text, DateTimeFormatter formatter)</c>.</para>
      <para>For example:
            &lt;blockquote&gt;</para>
      <code lang="text/java">LocalDate date = LocalDate.now();
             String text = date.format(formatter);
             LocalDate parsedDate = LocalDate.parse(text, formatter);
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>In addition to the format, formatters can be created with desired Locale,
            Chronology, ZoneId, and DecimalStyle.</para>
      <para>The <c>#withLocale withLocale</c> method returns a new formatter that
            overrides the locale. The locale affects some aspects of formatting and
            parsing. For example, the <c>#ofLocalizedDate ofLocalizedDate</c> provides a
            formatter that uses the locale specific date format.</para>
      <para>The <c>#withChronology withChronology</c> method returns a new formatter
            that overrides the chronology. If overridden, the date-time value is
            converted to the chronology before formatting. During parsing the date-time
            value is converted to the chronology before it is returned.</para>
      <para>The <c>#withZone withZone</c> method returns a new formatter that overrides
            the zone. If overridden, the date-time value is converted to a ZonedDateTime
            with the requested ZoneId before formatting. During parsing the ZoneId is
            applied before the value is returned.</para>
      <para>The <c>#withDecimalStyle withDecimalStyle</c> method returns a new formatter that
            overrides the <c>DecimalStyle</c>. The DecimalStyle symbols are used for
            formatting and parsing.</para>
      <para>Some applications may need to use the older <c>Format java.text.Format</c>
            class for formatting. The <c>#toFormat()</c> method returns an
            implementation of <c>java.text.Format</c>.
            
            &lt;h2 id="predefined"&gt;Predefined Formatters&lt;/h2&gt;
            &lt;table class="striped" style="text-align:left"&gt;
            &lt;caption&gt;Predefined Formatters&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;
            &lt;th scope="col"&gt;Formatter&lt;/th&gt;
            &lt;th scope="col"&gt;Description&lt;/th&gt;
            &lt;th scope="col"&gt;Example&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt;<c>#ofLocalizedDate ofLocalizedDate(dateStyle)</c>&lt;/th&gt;
            &lt;td&gt; Formatter with date style from the locale &lt;/td&gt;
            &lt;td&gt; '2011-12-03'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ofLocalizedTime ofLocalizedTime(timeStyle)</c>&lt;/th&gt;
            &lt;td&gt; Formatter with time style from the locale &lt;/td&gt;
            &lt;td&gt; '10:15:30'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ofLocalizedDateTime ofLocalizedDateTime(dateTimeStyle)</c>&lt;/th&gt;
            &lt;td&gt; Formatter with a style for date and time from the locale&lt;/td&gt;
            &lt;td&gt; '3 Jun 2008 11:05:30'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ofLocalizedDateTime ofLocalizedDateTime(dateStyle,timeStyle)</c>&lt;/th&gt;
            &lt;td&gt; Formatter with date and time styles from the locale &lt;/td&gt;
            &lt;td&gt; '3 Jun 2008 11:05'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#BASIC_ISO_DATE</c>&lt;/th&gt;
            &lt;td&gt;Basic ISO date &lt;/td&gt; &lt;td&gt;'20111203'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_LOCAL_DATE</c>&lt;/th&gt;
            &lt;td&gt; ISO Local Date &lt;/td&gt;
            &lt;td&gt;'2011-12-03'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_OFFSET_DATE</c>&lt;/th&gt;
            &lt;td&gt; ISO Date with offset &lt;/td&gt;
            &lt;td&gt;'2011-12-03+01:00'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_DATE</c>&lt;/th&gt;
            &lt;td&gt; ISO Date with or without offset &lt;/td&gt;
            &lt;td&gt; '2011-12-03+01:00'; '2011-12-03'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_LOCAL_TIME</c>&lt;/th&gt;
            &lt;td&gt; Time without offset &lt;/td&gt;
            &lt;td&gt;'10:15:30'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_OFFSET_TIME</c>&lt;/th&gt;
            &lt;td&gt; Time with offset &lt;/td&gt;
            &lt;td&gt;'10:15:30+01:00'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_TIME</c>&lt;/th&gt;
            &lt;td&gt; Time with or without offset &lt;/td&gt;
            &lt;td&gt;'10:15:30+01:00'; '10:15:30'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_LOCAL_DATE_TIME</c>&lt;/th&gt;
            &lt;td&gt; ISO Local Date and Time &lt;/td&gt;
            &lt;td&gt;'2011-12-03T10:15:30'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_OFFSET_DATE_TIME</c>&lt;/th&gt;
            &lt;td&gt; Date Time with Offset
            &lt;/td&gt;&lt;td&gt;'2011-12-03T10:15:30+01:00'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_ZONED_DATE_TIME</c>&lt;/th&gt;
            &lt;td&gt; Zoned Date Time &lt;/td&gt;
            &lt;td&gt;'2011-12-03T10:15:30+01:00[Europe/Paris]'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_DATE_TIME</c>&lt;/th&gt;
            &lt;td&gt; Date and time with ZoneId &lt;/td&gt;
            &lt;td&gt;'2011-12-03T10:15:30+01:00[Europe/Paris]'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_ORDINAL_DATE</c>&lt;/th&gt;
            &lt;td&gt; Year and day of year &lt;/td&gt;
            &lt;td&gt;'2012-337'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_WEEK_DATE</c>&lt;/th&gt;
            &lt;td&gt; Year and Week &lt;/td&gt;
            &lt;td&gt;'2012-W48-6'&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#ISO_INSTANT</c>&lt;/th&gt;
            &lt;td&gt; Date and Time of an Instant &lt;/td&gt;
            &lt;td&gt;'2011-12-03T10:15:30Z' &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;th scope="row"&gt; <c>#RFC_1123_DATE_TIME</c>&lt;/th&gt;
            &lt;td&gt; RFC 1123 / RFC 822 &lt;/td&gt;
            &lt;td&gt;'Tue, 3 Jun 2008 11:05:30 GMT'&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            
            &lt;h2 id="patterns"&gt;Patterns for Formatting and Parsing&lt;/h2&gt;
            Patterns are based on a simple sequence of letters and symbols.
            A pattern is used to create a Formatter using the
            <c>#ofPattern(String)</c> and <c>#ofPattern(String, Locale)</c> methods.
            For example,
            <c>"d MMM uuuu"</c> will format 2011-12-03 as '3&amp;nbsp;Dec&amp;nbsp;2011'.
            A formatter created from a pattern can be used as many times as necessary,
            it is immutable and is thread-safe.</para>
      <para>For example:
            &lt;blockquote&gt;</para>
      <code lang="text/java">LocalDate date = LocalDate.now();
             DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy MM dd");
             String text = date.format(formatter);
             LocalDate parsedDate = LocalDate.parse(text, formatter);
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters. The
            following pattern letters are defined:
            &lt;table class="striped"&gt;
            &lt;caption&gt;Pattern Letters and Symbols&lt;/caption&gt;
            &lt;thead&gt;
             &lt;tr&gt;&lt;th scope="col"&gt;Symbol&lt;/th&gt;   &lt;th scope="col"&gt;Meaning&lt;/th&gt;         &lt;th scope="col"&gt;Presentation&lt;/th&gt; &lt;th scope="col"&gt;Examples&lt;/th&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;G&lt;/th&gt;       &lt;td&gt;era&lt;/td&gt;                         &lt;td&gt;text&lt;/td&gt;              &lt;td&gt;AD; Anno Domini; A&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;u&lt;/th&gt;       &lt;td&gt;year&lt;/td&gt;                        &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;y&lt;/th&gt;       &lt;td&gt;year-of-era&lt;/td&gt;                 &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;D&lt;/th&gt;       &lt;td&gt;day-of-year&lt;/td&gt;                 &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;189&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;M/L&lt;/th&gt;     &lt;td&gt;month-of-year&lt;/td&gt;               &lt;td&gt;number/text&lt;/td&gt;       &lt;td&gt;7; 07; Jul; July; J&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;d&lt;/th&gt;       &lt;td&gt;day-of-month&lt;/td&gt;                &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;10&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;g&lt;/th&gt;       &lt;td&gt;modified-julian-day&lt;/td&gt;         &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;2451334&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;Q/q&lt;/th&gt;     &lt;td&gt;quarter-of-year&lt;/td&gt;             &lt;td&gt;number/text&lt;/td&gt;       &lt;td&gt;3; 03; Q3; 3rd quarter&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;Y&lt;/th&gt;       &lt;td&gt;week-based-year&lt;/td&gt;             &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;1996; 96&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;w&lt;/th&gt;       &lt;td&gt;week-of-week-based-year&lt;/td&gt;     &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;27&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;W&lt;/th&gt;       &lt;td&gt;week-of-month&lt;/td&gt;               &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;4&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;E&lt;/th&gt;       &lt;td&gt;day-of-week&lt;/td&gt;                 &lt;td&gt;text&lt;/td&gt;              &lt;td&gt;Tue; Tuesday; T&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;e/c&lt;/th&gt;     &lt;td&gt;localized day-of-week&lt;/td&gt;       &lt;td&gt;number/text&lt;/td&gt;       &lt;td&gt;2; 02; Tue; Tuesday; T&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;F&lt;/th&gt;       &lt;td&gt;day-of-week-in-month&lt;/td&gt;        &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;3&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;a&lt;/th&gt;       &lt;td&gt;am-pm-of-day&lt;/td&gt;                &lt;td&gt;text&lt;/td&gt;              &lt;td&gt;PM&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;h&lt;/th&gt;       &lt;td&gt;clock-hour-of-am-pm (1-12)&lt;/td&gt;  &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;12&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;K&lt;/th&gt;       &lt;td&gt;hour-of-am-pm (0-11)&lt;/td&gt;        &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;0&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;k&lt;/th&gt;       &lt;td&gt;clock-hour-of-day (1-24)&lt;/td&gt;    &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;24&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;H&lt;/th&gt;       &lt;td&gt;hour-of-day (0-23)&lt;/td&gt;          &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;0&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;m&lt;/th&gt;       &lt;td&gt;minute-of-hour&lt;/td&gt;              &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;30&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;s&lt;/th&gt;       &lt;td&gt;second-of-minute&lt;/td&gt;            &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;55&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;S&lt;/th&gt;       &lt;td&gt;fraction-of-second&lt;/td&gt;          &lt;td&gt;fraction&lt;/td&gt;          &lt;td&gt;978&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;A&lt;/th&gt;       &lt;td&gt;milli-of-day&lt;/td&gt;                &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;1234&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;n&lt;/th&gt;       &lt;td&gt;nano-of-second&lt;/td&gt;              &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;987654321&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;N&lt;/th&gt;       &lt;td&gt;nano-of-day&lt;/td&gt;                 &lt;td&gt;number&lt;/td&gt;            &lt;td&gt;1234000000&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;V&lt;/th&gt;       &lt;td&gt;time-zone ID&lt;/td&gt;                &lt;td&gt;zone-id&lt;/td&gt;           &lt;td&gt;America/Los_Angeles; Z; -08:30&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;v&lt;/th&gt;       &lt;td&gt;generic time-zone name&lt;/td&gt;      &lt;td&gt;zone-name&lt;/td&gt;         &lt;td&gt;Pacific Time; PT&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;z&lt;/th&gt;       &lt;td&gt;time-zone name&lt;/td&gt;              &lt;td&gt;zone-name&lt;/td&gt;         &lt;td&gt;Pacific Standard Time; PST&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;O&lt;/th&gt;       &lt;td&gt;localized zone-offset&lt;/td&gt;       &lt;td&gt;offset-O&lt;/td&gt;          &lt;td&gt;GMT+8; GMT+08:00; UTC-08:00&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;X&lt;/th&gt;       &lt;td&gt;zone-offset 'Z' for zero&lt;/td&gt;    &lt;td&gt;offset-X&lt;/td&gt;          &lt;td&gt;Z; -08; -0830; -08:30; -083015; -08:30:15&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;x&lt;/th&gt;       &lt;td&gt;zone-offset&lt;/td&gt;                 &lt;td&gt;offset-x&lt;/td&gt;          &lt;td&gt;+0000; -08; -0830; -08:30; -083015; -08:30:15&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;Z&lt;/th&gt;       &lt;td&gt;zone-offset&lt;/td&gt;                 &lt;td&gt;offset-Z&lt;/td&gt;          &lt;td&gt;+0000; -0800; -08:00&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;p&lt;/th&gt;       &lt;td&gt;pad next&lt;/td&gt;                    &lt;td&gt;pad modifier&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;
            
              &lt;tr&gt;&lt;th scope="row"&gt;'&lt;/th&gt;       &lt;td&gt;escape for text&lt;/td&gt;             &lt;td&gt;delimiter&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;''&lt;/th&gt;      &lt;td&gt;single quote&lt;/td&gt;                &lt;td&gt;literal&lt;/td&gt;           &lt;td&gt;'&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;[&lt;/th&gt;       &lt;td&gt;optional section start&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;]&lt;/th&gt;       &lt;td&gt;optional section end&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;#&lt;/th&gt;       &lt;td&gt;reserved for future use&lt;/td&gt;     &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;{&lt;/th&gt;       &lt;td&gt;reserved for future use&lt;/td&gt;     &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;
              &lt;tr&gt;&lt;th scope="row"&gt;}&lt;/th&gt;       &lt;td&gt;reserved for future use&lt;/td&gt;     &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>The count of pattern letters determines the format.</para>
      <para>&lt;b&gt;Text&lt;/b&gt;: The text style is determined based on the number of pattern
            letters used. Less than 4 pattern letters will use the
            <c>TextStyle#SHORT short form</c>. Exactly 4 pattern letters will use the
            <c>TextStyle#FULL full form</c>. Exactly 5 pattern letters will use the
            <c>TextStyle#NARROW narrow form</c>.
            Pattern letters 'L', 'c', and 'q' specify the stand-alone form of the text styles.</para>
      <para>&lt;b&gt;Number&lt;/b&gt;: If the count of letters is one, then the value is output using
            the minimum number of digits and without padding. Otherwise, the count of digits
            is used as the width of the output field, with the value zero-padded as necessary.
            The following pattern letters have constraints on the count of letters.
            Only one letter of 'c' and 'F' can be specified.
            Up to two letters of 'd', 'H', 'h', 'K', 'k', 'm', and 's' can be specified.
            Up to three letters of 'D' can be specified.</para>
      <para>&lt;b&gt;Number/Text&lt;/b&gt;: If the count of pattern letters is 3 or greater, use the
            Text rules above. Otherwise use the Number rules above.</para>
      <para>&lt;b&gt;Fraction&lt;/b&gt;: Outputs the nano-of-second field as a fraction-of-second.
            The nano-of-second value has nine digits, thus the count of pattern letters
            is from 1 to 9. If it is less than 9, then the nano-of-second value is
            truncated, with only the most significant digits being output.</para>
      <para>&lt;b&gt;Year&lt;/b&gt;: The count of letters determines the minimum field width below
            which padding is used. If the count of letters is two, then a
            <c>DateTimeFormatterBuilder#appendValueReduced reduced</c> two digit form is
            used. For printing, this outputs the rightmost two digits. For parsing, this
            will parse using the base value of 2000, resulting in a year within the range
            2000 to 2099 inclusive. If the count of letters is less than four (but not
            two), then the sign is only output for negative years as per
            <c>SignStyle#NORMAL</c>. Otherwise, the sign is output if the pad width is
            exceeded, as per <c>SignStyle#EXCEEDS_PAD</c>.</para>
      <para>&lt;b&gt;ZoneId&lt;/b&gt;: This outputs the time-zone ID, such as 'Europe/Paris'. If the
            count of letters is two, then the time-zone ID is output. Any other count of
            letters throws <c>IllegalArgumentException</c>.</para>
      <para>&lt;b&gt;Zone names&lt;/b&gt;: This outputs the display name of the time-zone ID. If the
            pattern letter is 'z' the output is the daylight savings aware zone name.
            If there is insufficient information to determine whether DST applies,
            the name ignoring daylight savings time will be used.
            If the count of letters is one, two or three, then the short name is output.
            If the count of letters is four, then the full name is output.
            Five or more letters throws <c>IllegalArgumentException</c>.</para>
      <para>If the pattern letter is 'v' the output provides the zone name ignoring
            daylight savings time. If the count of letters is one, then the short name is output.
            If the count of letters is four, then the full name is output.
            Two, three and five or more letters throw <c>IllegalArgumentException</c>.</para>
      <para>&lt;b&gt;Offset X and x&lt;/b&gt;: This formats the offset based on the number of pattern
            letters. One letter outputs just the hour, such as '+01', unless the minute
            is non-zero in which case the minute is also output, such as '+0130'. Two
            letters outputs the hour and minute, without a colon, such as '+0130'. Three
            letters outputs the hour and minute, with a colon, such as '+01:30'. Four
            letters outputs the hour and minute and optional second, without a colon,
            such as '+013015'. Five letters outputs the hour and minute and optional
            second, with a colon, such as '+01:30:15'. Six or more letters throws
            <c>IllegalArgumentException</c>. Pattern letter 'X' (upper case) will output
            'Z' when the offset to be output would be zero, whereas pattern letter 'x'
            (lower case) will output '+00', '+0000', or '+00:00'.</para>
      <para>&lt;b&gt;Offset O&lt;/b&gt;: With a non-zero offset, this formats the localized offset
            based on the number of pattern letters. One letter outputs the
            TextStyle#SHORT short form of the localized offset, which is
            localized offset text, such as 'GMT', with hour without leading zero, optional
            2-digit minute and second if non-zero, and colon, for example 'GMT+8'. Four
            letters outputs the TextStyle#FULL full form, which is localized
            offset text, such as 'GMT, with 2-digit hour and minute field, optional second
            field if non-zero, and colon, for example 'GMT+08:00'. If the offset is zero,
            only localized text is output. Any other count of letters throws
            <c>IllegalArgumentException</c>.</para>
      <para>&lt;b&gt;Offset Z&lt;/b&gt;: This formats the offset based on the number of pattern
            letters. One, two or three letters outputs the hour and minute, without a
            colon, such as '+0130'. The output will be '+0000' when the offset is zero.
            Four letters outputs the TextStyle#FULL full form of localized
            offset, equivalent to four letters of Offset-O. The output will be the
            corresponding localized offset text if the offset is zero. Five
            letters outputs the hour, minute, with optional second if non-zero, with
            colon. It outputs 'Z' if the offset is zero.
            Six or more letters throws <c>IllegalArgumentException</c>.</para>
      <para>&lt;b&gt;Optional section&lt;/b&gt;: The optional section markers work exactly like
            calling <c>DateTimeFormatterBuilder#optionalStart()</c> and
            <c>DateTimeFormatterBuilder#optionalEnd()</c>.</para>
      <para>&lt;b&gt;Pad modifier&lt;/b&gt;: Modifies the pattern that immediately follows to be
            padded with spaces. The pad width is determined by the number of pattern
            letters. This is the same as calling
            <c>DateTimeFormatterBuilder#padNext(int)</c>.</para>
      <para>For example, 'ppH' outputs the hour-of-day padded on the left with spaces to
            a width of 2.</para>
      <para>Any unrecognized letter is an error. Any non-letter character, other than
            '[', ']', '{', '}', '#' and the single quote will be output directly.
            Despite this, it is recommended to use single quotes around all characters
            that you want to output directly to ensure that future changes do not break
            your application.
            
            &lt;h2 id="resolving"&gt;Resolving&lt;/h2&gt;
            Parsing is implemented as a two-phase operation.
            First, the text is parsed using the layout defined by the formatter, producing
            a <c>Map</c> of field to value, a <c>ZoneId</c> and a <c>Chronology</c>.
            Second, the parsed data is &lt;em&gt;resolved&lt;/em&gt;, by validating, combining and
            simplifying the various fields into more useful ones.</para>
      <para>Five parsing methods are supplied by this class.
            Four of these perform both the parse and resolve phases.
            The fifth method, <c>#parseUnresolved(CharSequence, ParsePosition)</c>,
            only performs the first phase, leaving the result unresolved.
            As such, it is essentially a low-level operation.</para>
      <para>The resolve phase is controlled by two parameters, set on this class.</para>
      <para>The <c>ResolverStyle</c> is an enum that offers three different approaches,
            strict, smart and lenient. The smart option is the default.
            It can be set using <c>#withResolverStyle(ResolverStyle)</c>.</para>
      <para>The <c>#withResolverFields(TemporalField...)</c> parameter allows the
            set of fields that will be resolved to be filtered before resolving starts.
            For example, if the formatter has parsed a year, month, day-of-month
            and day-of-year, then there are two approaches to resolve a date:
            (year + month + day-of-month) and (year + day-of-year).
            The resolver fields allows one of the two approaches to be selected.
            If no resolver fields are set then both approaches must result in the same date.</para>
      <para>Resolving separate fields to form a complete date and time is a complex
            process with behaviour distributed across a number of classes.
            It follows these steps:
            &lt;ol&gt;
            &lt;li&gt;The chronology is determined.
            The chronology of the result is either the chronology that was parsed,
            or if no chronology was parsed, it is the chronology set on this class,
            or if that is null, it is <c>IsoChronology</c>.
            &lt;li&gt;The <c>ChronoField</c> date fields are resolved.
            This is achieved using <c>Chronology#resolveDate(Map, ResolverStyle)</c>.
            Documentation about field resolution is located in the implementation
            of <c>Chronology</c>.
            &lt;li&gt;The <c>ChronoField</c> time fields are resolved.
            This is documented on <c>ChronoField</c> and is the same for all chronologies.
            &lt;li&gt;Any fields that are not <c>ChronoField</c> are processed.
            This is achieved using <c>TemporalField#resolve(Map, TemporalAccessor, ResolverStyle)</c>.
            Documentation about field resolution is located in the implementation
            of <c>TemporalField</c>.
            &lt;li&gt;The <c>ChronoField</c> date and time fields are re-resolved.
            This allows fields in step four to produce <c>ChronoField</c> values
            and have them be processed into dates and times.
            &lt;li&gt;A <c>LocalTime</c> is formed if there is at least an hour-of-day available.
            This involves providing default values for minute, second and fraction of second.
            &lt;li&gt;Any remaining unresolved fields are cross-checked against any
            date and/or time that was resolved. Thus, an earlier stage would resolve
            (year + month + day-of-month) to a date, and this stage would check that
            day-of-week was valid for the date.
            &lt;li&gt;If an #parsedExcessDays() excess number of days
            was parsed then it is added to the date if a date is available.
            &lt;li&gt; If a second-based field is present, but <c>LocalTime</c> was not parsed,
            then the resolver ensures that milli, micro and nano second values are
            available to meet the contract of <c>ChronoField</c>.
            These will be set to zero if missing.
            &lt;li&gt;If both date and time were parsed and either an offset or zone is present,
            the field <c>ChronoField#INSTANT_SECONDS</c> is created.
            If an offset was parsed then the offset will be combined with the
            <c>LocalDateTime</c> to form the instant, with any zone ignored.
            If a <c>ZoneId</c> was parsed without an offset then the zone will be
            combined with the <c>LocalDateTime</c> to form the instant using the rules
            of <c>ChronoLocalDateTime#atZone(ZoneId)</c>.
            &lt;/ol&gt;</para>
      <para>Added in 1.8.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BasicIsoDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BasicIsoDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ BasicIsoDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? BasicIsoDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter BasicIsoDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.BasicIsoDate" />
      <MemberSignature Language="F#" Value="member this.BasicIsoDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.BasicIsoDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BASIC_ISO_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BASIC_ISO_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses a date without an
            offset, such as '20111203'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses a date without an
            offset, such as '20111203'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 basic local date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;Four digits for the <c>ChronoField#YEAR year</c>.
             Only years in the range 0000 to 9999 are supported.
            &lt;li&gt;Two digits for the <c>ChronoField#MONTH_OF_YEAR month-of-year</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;Two digits for the <c>ChronoField#DAY_OF_MONTH day-of-month</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;If the offset is not available to format or parse then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c> without colons. If the offset has
             seconds then they will be handled even though this is not part of the ISO-8601 standard.
             The offset parsing is lenient, which allows the minutes and seconds to be optional.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#BASIC_ISO_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.BASIC_ISO_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Chronology">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Chronology As IChronology" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Time::Chrono::IChronology ^ Chronology { Java::Time::Chrono::IChronology ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Time.Chrono.IChronology? Chronology { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Time.Chrono.IChronology Chronology" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.Chronology" />
      <MemberSignature Language="F#" Value="member this.Chronology : Java.Time.Chrono.IChronology" Usage="Java.Time.Format.DateTimeFormatter.Chronology" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getChronology", "()Ljava/time/chrono/Chronology;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getChronology", "()Ljava/time/chrono/Chronology;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Chrono.IChronology</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the overriding chronology to be used during formatting.</summary>
        <value>the override chronology of this formatter, null if no override</value>
        <remarks>
          <para>Gets the overriding chronology to be used during formatting.</para>
          <para>This returns the override chronology, used to convert dates.
            By default, a formatter has no override chronology, returning null.
            See <c>#withChronology(Chronology)</c> for more details on overriding.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getChronology()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getChronology()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecimalStyle">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DecimalStyle As DecimalStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Time::Format::DecimalStyle ^ DecimalStyle { Java::Time::Format::DecimalStyle ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DecimalStyle? DecimalStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Time.Format.DecimalStyle DecimalStyle" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.DecimalStyle" />
      <MemberSignature Language="F#" Value="member this.DecimalStyle : Java.Time.Format.DecimalStyle" Usage="Java.Time.Format.DateTimeFormatter.DecimalStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDecimalStyle", "()Ljava/time/format/DecimalStyle;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDecimalStyle", "()Ljava/time/format/DecimalStyle;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DecimalStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the DecimalStyle to be used during formatting.</summary>
        <value>the locale of this formatter, not null</value>
        <remarks>
          <para>Gets the DecimalStyle to be used during formatting.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getDecimalStyle()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getDecimalStyle()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="VB.NET" Value="Public Function Format (temporal As ITemporalAccessor) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(Java::Time::Temporal::ITemporalAccessor ^ temporal);" />
      <MemberSignature Language="C#" Value="public string? Format (Java.Time.Temporal.ITemporalAccessor? temporal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Format(class Java.Time.Temporal.ITemporalAccessor temporal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Format(Java.Time.Temporal.ITemporalAccessor)" />
      <MemberSignature Language="F#" Value="member this.Format : Java.Time.Temporal.ITemporalAccessor -&gt; string" Usage="dateTimeFormatter.Format temporal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="temporal" Type="Java.Time.Temporal.ITemporalAccessor" />
      </Parameters>
      <Docs>
        <param name="temporal">the temporal object to format, not null</param>
        <summary>Formats a date-time object using this formatter.</summary>
        <returns>the formatted string, not null</returns>
        <remarks>
          <para>Formats a date-time object using this formatter.</para>
          <para>This formats the date-time to a String using the rules of the formatter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#format(java.time.temporal.TemporalAccessor)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.format(java.time.temporal.TemporalAccessor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatTo">
      <MemberSignature Language="VB.NET" Value="Public Sub FormatTo (temporal As ITemporalAccessor, appendable As IAppendable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FormatTo(Java::Time::Temporal::ITemporalAccessor ^ temporal, Java::Lang::IAppendable ^ appendable);" />
      <MemberSignature Language="C#" Value="public void FormatTo (Java.Time.Temporal.ITemporalAccessor? temporal, Java.Lang.IAppendable? appendable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FormatTo(class Java.Time.Temporal.ITemporalAccessor temporal, class Java.Lang.IAppendable appendable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.FormatTo(Java.Time.Temporal.ITemporalAccessor,Java.Lang.IAppendable)" />
      <MemberSignature Language="F#" Value="member this.FormatTo : Java.Time.Temporal.ITemporalAccessor * Java.Lang.IAppendable -&gt; unit" Usage="dateTimeFormatter.FormatTo (temporal, appendable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("formatTo", "(Ljava/time/temporal/TemporalAccessor;Ljava/lang/Appendable;)V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("formatTo", "(Ljava/time/temporal/TemporalAccessor;Ljava/lang/Appendable;)V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="temporal" Type="Java.Time.Temporal.ITemporalAccessor" />
        <Parameter Name="appendable" Type="Java.Lang.IAppendable" />
      </Parameters>
      <Docs>
        <param name="temporal">the temporal object to format, not null</param>
        <param name="appendable">the appendable to format to, not null</param>
        <summary>Formats a date-time object to an <c>Appendable</c> using this formatter.</summary>
        <remarks>
          <para>Formats a date-time object to an <c>Appendable</c> using this formatter.</para>
          <para>This outputs the formatted date-time to the specified destination.
            <c>Appendable</c> is a general purpose interface that is implemented by all
            key character output classes including <c>StringBuffer</c>, <c>StringBuilder</c>,
            <c>PrintStream</c> and <c>Writer</c>.</para>
          <para>Although <c>Appendable</c> methods throw an <c>IOException</c>, this method does not.
            Instead, any <c>IOException</c> is wrapped in a runtime exception.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#formatTo(java.time.temporal.TemporalAccessor,%20java.lang.Appendable)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.formatTo(java.time.temporal.TemporalAccessor, java.lang.Appendable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoDate" />
      <MemberSignature Language="F#" Value="member this.IsoDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses a date with the
            offset if available, such as '2011-12-03' or '2011-12-03+01:00'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses a date with the
            offset if available, such as '2011-12-03' or '2011-12-03+01:00'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_DATE</c>&lt;li&gt;If the offset is not available then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoDateTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoDateTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoDateTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoDateTime" />
      <MemberSignature Language="F#" Value="member this.IsoDateTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_DATE_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_DATE_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO-like date-time formatter that formats or parses a date-time with
            the offset and zone if available, such as '2011-12-03T10:15:30',
            '2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO-like date-time formatter that formats or parses a date-time with
            the offset and zone if available, such as '2011-12-03T10:15:30',
            '2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended local or offset date-time format, as well as the
            extended non-ISO form specifying the time-zone.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_DATE_TIME</c>&lt;li&gt;If the offset is not available to format or parse then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
            &lt;li&gt;If the zone ID is not available or is a <c>ZoneOffset</c> then the format is complete.
            &lt;li&gt;An open square bracket '['.
            &lt;li&gt;The <c>ZoneId#getId() zone ID</c>. This is not part of the ISO-8601 standard.
             Parsing is case sensitive.
            &lt;li&gt;A close square bracket ']'.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_DATE_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_DATE_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoInstant">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoInstant As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoInstant { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoInstant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoInstant" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoInstant" />
      <MemberSignature Language="F#" Value="member this.IsoInstant : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoInstant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_INSTANT", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_INSTANT", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO instant formatter that formats or parses an instant in UTC,
            such as '2011-12-03T10:15:30Z'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO instant formatter that formats or parses an instant in UTC,
            such as '2011-12-03T10:15:30Z'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 instant format.
            When formatting, the instant will always be suffixed by 'Z' to indicate UTC.
            The second-of-minute is always output.
            The nano-of-second outputs zero, three, six or nine digits as necessary.
            When parsing, the behaviour of <c>DateTimeFormatterBuilder#appendOffsetId()</c>
            will be used to parse the offset, converting the instant to UTC as necessary.
            The time to at least the seconds field is required.
            Fractional seconds from zero to nine are parsed.
            The localized decimal style is not used.</para>
          <para>This is a special case formatter intended to allow a human readable form
            of an <c>java.time.Instant</c>. The <c>Instant</c> class is designed to
            only represent a point in time and internally stores a value in nanoseconds
            from a fixed epoch of 1970-01-01Z. As such, an <c>Instant</c> cannot be
            formatted as a date or time without providing some form of time-zone.
            This formatter allows the <c>Instant</c> to be formatted, by providing
            a suitable conversion using <c>ZoneOffset.UTC</c>.</para>
          <para>The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_OFFSET_DATE_TIME</c> where the instant is converted from
             <c>ChronoField#INSTANT_SECONDS</c> and <c>ChronoField#NANO_OF_SECOND</c>
             using the <c>UTC</c> offset. Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>The returned formatter has no override chronology or zone.
            It uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_INSTANT" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_INSTANT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoLocalDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoLocalDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoLocalDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoLocalDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoLocalDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoLocalDate" />
      <MemberSignature Language="F#" Value="member this.IsoLocalDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoLocalDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_LOCAL_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_LOCAL_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses a date without an
            offset, such as '2011-12-03'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses a date without an
            offset, such as '2011-12-03'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended local date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;Four digits or more for the <c>ChronoField#YEAR year</c>.
            Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
            Years outside that range will have a prefixed positive or negative symbol.
            &lt;li&gt;A dash
            &lt;li&gt;Two digits for the <c>ChronoField#MONTH_OF_YEAR month-of-year</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;A dash
            &lt;li&gt;Two digits for the <c>ChronoField#DAY_OF_MONTH day-of-month</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;/ul&gt;</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_LOCAL_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_LOCAL_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoLocalDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoLocalDateTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoLocalDateTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoLocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoLocalDateTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoLocalDateTime" />
      <MemberSignature Language="F#" Value="member this.IsoLocalDateTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoLocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_LOCAL_DATE_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_LOCAL_DATE_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date-time formatter that formats or parses a date-time without
            an offset, such as '2011-12-03T10:15:30'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date-time formatter that formats or parses a date-time without
            an offset, such as '2011-12-03T10:15:30'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended offset date-time format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_DATE</c>&lt;li&gt;The letter 'T'. Parsing is case insensitive.
            &lt;li&gt;The <c>#ISO_LOCAL_TIME</c>&lt;/ul&gt;</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_LOCAL_DATE_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoLocalTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoLocalTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoLocalTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoLocalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoLocalTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoLocalTime" />
      <MemberSignature Language="F#" Value="member this.IsoLocalTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoLocalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_LOCAL_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_LOCAL_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO time formatter that formats or parses a time without an
            offset, such as '10:15' or '10:15:30'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO time formatter that formats or parses a time without an
            offset, such as '10:15' or '10:15:30'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended local time format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;Two digits for the <c>ChronoField#HOUR_OF_DAY hour-of-day</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;A colon
            &lt;li&gt;Two digits for the <c>ChronoField#MINUTE_OF_HOUR minute-of-hour</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;If the second-of-minute is not available then the format is complete.
            &lt;li&gt;A colon
            &lt;li&gt;Two digits for the <c>ChronoField#SECOND_OF_MINUTE second-of-minute</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;If the nano-of-second is zero or not available then the format is complete.
            &lt;li&gt;A decimal point
            &lt;li&gt;One to nine digits for the <c>ChronoField#NANO_OF_SECOND nano-of-second</c>.
             As many digits will be output as required.
            &lt;/ul&gt;</para>
          <para>The returned formatter has no override chronology or zone.
            It uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_LOCAL_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_LOCAL_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoOffsetDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoOffsetDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoOffsetDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoOffsetDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoOffsetDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoOffsetDate" />
      <MemberSignature Language="F#" Value="member this.IsoOffsetDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoOffsetDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_OFFSET_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_OFFSET_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses a date with an
            offset, such as '2011-12-03+01:00'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses a date with an
            offset, such as '2011-12-03+01:00'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended offset date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_DATE</c>&lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_OFFSET_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_OFFSET_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoOffsetDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoOffsetDateTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoOffsetDateTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoOffsetDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoOffsetDateTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoOffsetDateTime" />
      <MemberSignature Language="F#" Value="member this.IsoOffsetDateTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoOffsetDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_OFFSET_DATE_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_OFFSET_DATE_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date-time formatter that formats or parses a date-time with an
            offset, such as '2011-12-03T10:15:30+01:00'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date-time formatter that formats or parses a date-time with an
            offset, such as '2011-12-03T10:15:30+01:00'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended offset date-time format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_DATE_TIME</c>&lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             The offset parsing is lenient, which allows the minutes and seconds to be optional.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_OFFSET_DATE_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoOffsetTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoOffsetTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoOffsetTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoOffsetTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoOffsetTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoOffsetTime" />
      <MemberSignature Language="F#" Value="member this.IsoOffsetTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoOffsetTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_OFFSET_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_OFFSET_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO time formatter that formats or parses a time with an
            offset, such as '10:15+01:00' or '10:15:30+01:00'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO time formatter that formats or parses a time with an
            offset, such as '10:15+01:00' or '10:15:30+01:00'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended offset time format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_TIME</c>&lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>The returned formatter has no override chronology or zone.
            It uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_OFFSET_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_OFFSET_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoOrdinalDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoOrdinalDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoOrdinalDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoOrdinalDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoOrdinalDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoOrdinalDate" />
      <MemberSignature Language="F#" Value="member this.IsoOrdinalDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoOrdinalDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_ORDINAL_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_ORDINAL_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses the ordinal date
            without an offset, such as '2012-337'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses the ordinal date
            without an offset, such as '2012-337'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended ordinal date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;Four digits or more for the <c>ChronoField#YEAR year</c>.
            Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
            Years outside that range will have a prefixed positive or negative symbol.
            &lt;li&gt;A dash
            &lt;li&gt;Three digits for the <c>ChronoField#DAY_OF_YEAR day-of-year</c>.
             This is pre-padded by zero to ensure three digits.
            &lt;li&gt;If the offset is not available to format or parse then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_ORDINAL_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoTime" />
      <MemberSignature Language="F#" Value="member this.IsoTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO time formatter that formats or parses a time, with the
            offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO time formatter that formats or parses a time, with the
            offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended offset time format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_LOCAL_TIME</c>&lt;li&gt;If the offset is not available then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has no override chronology or zone.
            It uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekDate">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoWeekDate As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoWeekDate { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoWeekDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoWeekDate" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoWeekDate" />
      <MemberSignature Language="F#" Value="member this.IsoWeekDate : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoWeekDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_WEEK_DATE", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_WEEK_DATE", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO date formatter that formats or parses the week-based date
            without an offset, such as '2012-W48-6'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO date formatter that formats or parses the week-based date
            without an offset, such as '2012-W48-6'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            the ISO-8601 extended week-based date format.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;Four digits or more for the <c>IsoFields#WEEK_BASED_YEAR week-based-year</c>.
            Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
            Years outside that range will have a prefixed positive or negative symbol.
            &lt;li&gt;A dash
            &lt;li&gt;The letter 'W'. Parsing is case insensitive.
            &lt;li&gt;Two digits for the <c>IsoFields#WEEK_OF_WEEK_BASED_YEAR week-of-week-based-year</c>.
             This is pre-padded by zero to ensure three digits.
            &lt;li&gt;A dash
            &lt;li&gt;One digit for the <c>ChronoField#DAY_OF_WEEK day-of-week</c>.
             The value run from Monday (1) to Sunday (7).
            &lt;li&gt;If the offset is not available to format or parse then the format is complete.
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c>. If the offset has seconds then
             they will be handled even though this is not part of the ISO-8601 standard.
             Parsing is case insensitive.
            &lt;/ul&gt;</para>
          <para>As this formatter has an optional element, it may be necessary to parse using
            <c>DateTimeFormatter#parseBest</c>.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_WEEK_DATE" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_WEEK_DATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoZonedDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsoZonedDateTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ IsoZonedDateTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? IsoZonedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter IsoZonedDateTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.IsoZonedDateTime" />
      <MemberSignature Language="F#" Value="member this.IsoZonedDateTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.IsoZonedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ISO_ZONED_DATE_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ISO_ZONED_DATE_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ISO-like date-time formatter that formats or parses a date-time with
            offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The ISO-like date-time formatter that formats or parses a date-time with
            offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            a format that extends the ISO-8601 extended offset date-time format
            to add the time-zone.
            The section in square brackets is not part of the ISO-8601 standard.
            The format consists of:
            &lt;ul&gt;
            &lt;li&gt;The <c>#ISO_OFFSET_DATE_TIME</c>&lt;li&gt;If the zone ID is not available or is a <c>ZoneOffset</c> then the format is complete.
            &lt;li&gt;An open square bracket '['.
            &lt;li&gt;The <c>ZoneId#getId() zone ID</c>. This is not part of the ISO-8601 standard.
             Parsing is case sensitive.
            &lt;li&gt;A close square bracket ']'.
            &lt;/ul&gt;</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#STRICT STRICT</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ISO_ZONED_DATE_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Time.Format.DateTimeFormatter.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Locale As Locale" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Util::Locale ^ Locale { Java::Util::Locale ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Util.Locale? Locale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Locale Locale" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.Locale" />
      <MemberSignature Language="F#" Value="member this.Locale : Java.Util.Locale" Usage="Java.Time.Format.DateTimeFormatter.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLocale", "()Ljava/util/Locale;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLocale", "()Ljava/util/Locale;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the locale to be used during formatting.</summary>
        <value>the locale of this formatter, not null</value>
        <remarks>
          <para>Gets the locale to be used during formatting.</para>
          <para>This is used to lookup any part of the formatter needing specific
            localization, such as the text or localized pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getLocale()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getLocale()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedBy">
      <MemberSignature Language="VB.NET" Value="Public Function LocalizedBy (locale As Locale) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ LocalizedBy(Java::Util::Locale ^ locale);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? LocalizedBy (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter LocalizedBy(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.LocalizedBy(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="member this.LocalizedBy : Java.Util.Locale -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.LocalizedBy locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("localizedBy", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("localizedBy", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the locale, not null</param>
        <summary>Returns a copy of this formatter with localized values of the locale,
            calendar, decimal style and/or timezone, that superseded values in
            this formatter.</summary>
        <returns>a formatter based on this formatter with localized values of
                 the calendar, decimal style and/or timezone, that superseded values in this
                 formatter.</returns>
        <remarks>
          <para>Returns a copy of this formatter with localized values of the locale,
            calendar, decimal style and/or timezone, that superseded values in
            this formatter.</para>
          <para>This is used to lookup any part of the formatter needing specific
            localization, such as the text or localized pattern. If the locale contains the
            "ca" (calendar), "nu" (numbering system) and/or
            "tz" (timezone)
            Unicode extensions,
            the chronology, numbering system and/or the zone are overridden.</para>
          <para>Unlike the <c>#withLocale withLocale</c> method, the call to this method may
            produce a different formatter depending on the order of method chaining with
            other withXXXX() methods.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>Added in 10.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#localizedBy(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.localizedBy(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfLocalizedDate">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfLocalizedDate (dateStyle As FormatStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfLocalizedDate(Java::Time::Format::FormatStyle ^ dateStyle);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfLocalizedDate (Java.Time.Format.FormatStyle? dateStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfLocalizedDate(class Java.Time.Format.FormatStyle dateStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfLocalizedDate(Java.Time.Format.FormatStyle)" />
      <MemberSignature Language="F#" Value="static member OfLocalizedDate : Java.Time.Format.FormatStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfLocalizedDate dateStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofLocalizedDate", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofLocalizedDate", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStyle" Type="Java.Time.Format.FormatStyle" />
      </Parameters>
      <Docs>
        <param name="dateStyle">the formatter style to obtain, not null</param>
        <summary>Returns a locale specific date format for the ISO chronology.</summary>
        <returns>the date formatter, not null</returns>
        <remarks>
          <para>Returns a locale specific date format for the ISO chronology.</para>
          <para>This returns a formatter that will format or parse a date.
            The exact format pattern used varies by locale.</para>
          <para>The locale is determined from the formatter. The formatter returned directly by
            this method will use the <c>Locale#getDefault(Locale.Category) default FORMAT locale</c>.
            The locale can be controlled using <c>DateTimeFormatter#withLocale(Locale) withLocale(Locale)</c>
            on the result of this method.</para>
          <para>Note that the localized pattern is looked up lazily.
            This <c>DateTimeFormatter</c> holds the style required and the locale,
            looking up the pattern required on demand.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#SMART SMART</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofLocalizedDate(java.time.format.FormatStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofLocalizedDate(java.time.format.FormatStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfLocalizedDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfLocalizedDateTime (dateTimeStyle As FormatStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfLocalizedDateTime(Java::Time::Format::FormatStyle ^ dateTimeStyle);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfLocalizedDateTime (Java.Time.Format.FormatStyle? dateTimeStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfLocalizedDateTime(class Java.Time.Format.FormatStyle dateTimeStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfLocalizedDateTime(Java.Time.Format.FormatStyle)" />
      <MemberSignature Language="F#" Value="static member OfLocalizedDateTime : Java.Time.Format.FormatStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfLocalizedDateTime dateTimeStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeStyle" Type="Java.Time.Format.FormatStyle" />
      </Parameters>
      <Docs>
        <param name="dateTimeStyle">the formatter style to obtain, not null</param>
        <summary>Returns a locale specific date-time formatter for the ISO chronology.</summary>
        <returns>the date-time formatter, not null</returns>
        <remarks>
          <para>Returns a locale specific date-time formatter for the ISO chronology.</para>
          <para>This returns a formatter that will format or parse a date-time.
            The exact format pattern used varies by locale.</para>
          <para>The locale is determined from the formatter. The formatter returned directly by
            this method will use the <c>Locale#getDefault(Locale.Category) default FORMAT locale</c>.
            The locale can be controlled using <c>DateTimeFormatter#withLocale(Locale) withLocale(Locale)</c>
            on the result of this method.</para>
          <para>Note that the localized pattern is looked up lazily.
            This <c>DateTimeFormatter</c> holds the style required and the locale,
            looking up the pattern required on demand.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#SMART SMART</c> resolver style.
            The <c>FULL</c> and <c>LONG</c> styles typically require a time-zone.
            When formatting using these styles, a <c>ZoneId</c> must be available,
            either by using <c>ZonedDateTime</c> or <c>DateTimeFormatter#withZone</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofLocalizedDateTime(java.time.format.FormatStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfLocalizedDateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfLocalizedDateTime (dateStyle As FormatStyle, timeStyle As FormatStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfLocalizedDateTime(Java::Time::Format::FormatStyle ^ dateStyle, Java::Time::Format::FormatStyle ^ timeStyle);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfLocalizedDateTime (Java.Time.Format.FormatStyle? dateStyle, Java.Time.Format.FormatStyle? timeStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfLocalizedDateTime(class Java.Time.Format.FormatStyle dateStyle, class Java.Time.Format.FormatStyle timeStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfLocalizedDateTime(Java.Time.Format.FormatStyle,Java.Time.Format.FormatStyle)" />
      <MemberSignature Language="F#" Value="static member OfLocalizedDateTime : Java.Time.Format.FormatStyle * Java.Time.Format.FormatStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfLocalizedDateTime (dateStyle, timeStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStyle" Type="Java.Time.Format.FormatStyle" />
        <Parameter Name="timeStyle" Type="Java.Time.Format.FormatStyle" />
      </Parameters>
      <Docs>
        <param name="dateStyle">the date formatter style to obtain, not null</param>
        <param name="timeStyle">the time formatter style to obtain, not null</param>
        <summary>Returns a locale specific date and time format for the ISO chronology.</summary>
        <returns>the date, time or date-time formatter, not null</returns>
        <remarks>
          <para>Returns a locale specific date and time format for the ISO chronology.</para>
          <para>This returns a formatter that will format or parse a date-time.
            The exact format pattern used varies by locale.</para>
          <para>The locale is determined from the formatter. The formatter returned directly by
            this method will use the <c>Locale#getDefault() default FORMAT locale</c>.
            The locale can be controlled using <c>DateTimeFormatter#withLocale(Locale) withLocale(Locale)</c>
            on the result of this method.</para>
          <para>Note that the localized pattern is looked up lazily.
            This <c>DateTimeFormatter</c> holds the style required and the locale,
            looking up the pattern required on demand.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#SMART SMART</c> resolver style.
            The <c>FULL</c> and <c>LONG</c> styles typically require a time-zone.
            When formatting using these styles, a <c>ZoneId</c> must be available,
            either by using <c>ZonedDateTime</c> or <c>DateTimeFormatter#withZone</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofLocalizedDateTime(java.time.format.FormatStyle,%20java.time.format.FormatStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle, java.time.format.FormatStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfLocalizedTime">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfLocalizedTime (timeStyle As FormatStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfLocalizedTime(Java::Time::Format::FormatStyle ^ timeStyle);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfLocalizedTime (Java.Time.Format.FormatStyle? timeStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfLocalizedTime(class Java.Time.Format.FormatStyle timeStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfLocalizedTime(Java.Time.Format.FormatStyle)" />
      <MemberSignature Language="F#" Value="static member OfLocalizedTime : Java.Time.Format.FormatStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfLocalizedTime timeStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofLocalizedTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofLocalizedTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeStyle" Type="Java.Time.Format.FormatStyle" />
      </Parameters>
      <Docs>
        <param name="timeStyle">the formatter style to obtain, not null</param>
        <summary>Returns a locale specific time format for the ISO chronology.</summary>
        <returns>the time formatter, not null</returns>
        <remarks>
          <para>Returns a locale specific time format for the ISO chronology.</para>
          <para>This returns a formatter that will format or parse a time.
            The exact format pattern used varies by locale.</para>
          <para>The locale is determined from the formatter. The formatter returned directly by
            this method will use the <c>Locale#getDefault(Locale.Category) default FORMAT locale</c>.
            The locale can be controlled using <c>DateTimeFormatter#withLocale(Locale) withLocale(Locale)</c>
            on the result of this method.</para>
          <para>Note that the localized pattern is looked up lazily.
            This <c>DateTimeFormatter</c> holds the style required and the locale,
            looking up the pattern required on demand.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#SMART SMART</c> resolver style.
            The <c>FULL</c> and <c>LONG</c> styles typically require a time-zone.
            When formatting using these styles, a <c>ZoneId</c> must be available,
            either by using <c>ZonedDateTime</c> or <c>DateTimeFormatter#withZone</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofLocalizedTime(java.time.format.FormatStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofLocalizedTime(java.time.format.FormatStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfPattern">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfPattern (pattern As String) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfPattern(System::String ^ pattern);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfPattern (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfPattern(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfPattern(System.String)" />
      <MemberSignature Language="F#" Value="static member OfPattern : string -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfPattern pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofPattern", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofPattern", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern to use, not null</param>
        <summary>Creates a formatter using the specified pattern.</summary>
        <returns>the formatter based on the pattern, not null</returns>
        <remarks>
          <para>Creates a formatter using the specified pattern.</para>
          <para>This method will create a formatter based on a simple
            pattern of letters and symbols
            as described in the class documentation.
            For example, <c>d MMM uuuu</c> will format 2011-12-03 as '3 Dec 2011'.</para>
          <para>The formatter will use the <c>Locale#getDefault(Locale.Category) default FORMAT locale</c>.
            This can be changed using <c>DateTimeFormatter#withLocale(Locale)</c> on the returned formatter.
            Alternatively use the <c>#ofPattern(String, Locale)</c> variant of this method.</para>
          <para>The returned formatter has no override chronology or zone.
            It uses <c>ResolverStyle#SMART SMART</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofPattern(java.lang.String)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofPattern(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OfPattern">
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfPattern (pattern As String, locale As Locale) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Format::DateTimeFormatter ^ OfPattern(System::String ^ pattern, Java::Util::Locale ^ locale);" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? OfPattern (string? pattern, Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Format.DateTimeFormatter OfPattern(string pattern, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.OfPattern(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="static member OfPattern : string * Java.Util.Locale -&gt; Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.OfPattern (pattern, locale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ofPattern", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ofPattern", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern to use, not null</param>
        <param name="locale">the locale to use, not null</param>
        <summary>Creates a formatter using the specified pattern and locale.</summary>
        <returns>the formatter based on the pattern, not null</returns>
        <remarks>
          <para>Creates a formatter using the specified pattern and locale.</para>
          <para>This method will create a formatter based on a simple
            pattern of letters and symbols
            as described in the class documentation.
            For example, <c>d MMM uuuu</c> will format 2011-12-03 as '3 Dec 2011'.</para>
          <para>The formatter will use the specified locale.
            This can be changed using <c>DateTimeFormatter#withLocale(Locale)</c> on the returned formatter.</para>
          <para>The returned formatter has no override chronology or zone.
            It uses <c>ResolverStyle#SMART SMART</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#ofPattern(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.ofPattern(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As ICharSequence) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ Parse(Java::Lang::ICharSequence ^ text);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? Parse (Java.Lang.ICharSequence? text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor Parse(class Java.Lang.ICharSequence text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="member this.Parse : Java.Lang.ICharSequence -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <summary>Fully parses the text producing a temporal object.</summary>
        <returns>the parsed temporal object, not null</returns>
        <remarks>
          <para>Fully parses the text producing a temporal object.</para>
          <para>This parses the entire text producing a temporal object.
            It is typically more useful to use <c>#parse(CharSequence, TemporalQuery)</c>.
            The result of this method is <c>TemporalAccessor</c> which has been resolved,
            applying basic validation checks to help ensure a valid date-time.</para>
          <para>If the parse completes without reading the entire length of the text,
            or a problem occurs during parsing or merging, then an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As String) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ Parse(System::String ^ text);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? Parse (string? text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(System.String)" />
      <MemberSignature Language="F#" Value="member this.Parse : string -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <summary>Fully parses the text producing a temporal object.</summary>
        <returns>the parsed temporal object, not null</returns>
        <remarks>
          <para>Fully parses the text producing a temporal object.</para>
          <para>This parses the entire text producing a temporal object.
            It is typically more useful to use <c>#parse(CharSequence, TemporalQuery)</c>.
            The result of this method is <c>TemporalAccessor</c> which has been resolved,
            applying basic validation checks to help ensure a valid date-time.</para>
          <para>If the parse completes without reading the entire length of the text,
            or a problem occurs during parsing or merging, then an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As ICharSequence, position As ParsePosition) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ Parse(Java::Lang::ICharSequence ^ text, Java::Text::ParsePosition ^ position);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? Parse (Java.Lang.ICharSequence? text, Java.Text.ParsePosition? position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor Parse(class Java.Lang.ICharSequence text, class Java.Text.ParsePosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(Java.Lang.ICharSequence,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="member this.Parse : Java.Lang.ICharSequence * Java.Text.ParsePosition -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.Parse (text, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <param name="position">the position to parse from, updated with length parsed
             and the index of any error, not null</param>
        <summary>Parses the text using this formatter, providing control over the text position.</summary>
        <returns>the parsed temporal object, not null</returns>
        <remarks>
          <para>Parses the text using this formatter, providing control over the text position.</para>
          <para>This parses the text without requiring the parse to start from the beginning
            of the string or finish at the end.
            The result of this method is <c>TemporalAccessor</c> which has been resolved,
            applying basic validation checks to help ensure a valid date-time.</para>
          <para>The text will be parsed from the specified start <c>ParsePosition</c>.
            The entire length of the text does not have to be parsed, the <c>ParsePosition</c>
            will be updated with the index at the end of parsing.</para>
          <para>The operation of this method is slightly different to similar methods using
            <c>ParsePosition</c> on <c>java.text.Format</c>. That class will return
            errors using the error index on the <c>ParsePosition</c>. By contrast, this
            method will throw a <c>DateTimeParseException</c> if an error occurs, with
            the exception containing the error index.
            This change in behavior is necessary due to the increased complexity of
            parsing and resolving dates/times in this API.</para>
          <para>If the formatter parses the same field more than once with different values,
            the result will be an error.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As ICharSequence, query As ITemporalQuery) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ Parse(Java::Lang::ICharSequence ^ text, Java::Time::Temporal::ITemporalQuery ^ query);" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Parse (Java.Lang.ICharSequence? text, Java.Time.Temporal.ITemporalQuery? query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Parse(class Java.Lang.ICharSequence text, class Java.Time.Temporal.ITemporalQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(Java.Lang.ICharSequence,Java.Time.Temporal.ITemporalQuery)" />
      <MemberSignature Language="F#" Value="member this.Parse : Java.Lang.ICharSequence * Java.Time.Temporal.ITemporalQuery -&gt; Java.Lang.Object" Usage="dateTimeFormatter.Parse (text, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="query" Type="Java.Time.Temporal.ITemporalQuery" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the parsed date-time</param>
        <param name="text">the text to parse, not null</param>
        <param name="query">the query defining the type to parse to, not null</param>
        <summary>Fully parses the text producing an object of the specified type.</summary>
        <returns>the parsed date-time, not null</returns>
        <remarks>
          <para>Fully parses the text producing an object of the specified type.</para>
          <para>Most applications should use this method for parsing.
            It parses the entire text to produce the required date-time.
            The query is typically a method reference to a <c>from(TemporalAccessor)</c> method.
            For example:</para>
          <code lang="text/java">LocalDateTime dt = parser.parse(str, LocalDateTime::from);
            </code>
          <para>If the parse completes without reading the entire length of the text,
            or a problem occurs during parsing or merging, then an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence,%20java.time.temporal.TemporalQuery%3CT%3E)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence, java.time.temporal.TemporalQuery&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As String, position As ParsePosition) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ Parse(System::String ^ text, Java::Text::ParsePosition ^ position);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? Parse (string? text, Java.Text.ParsePosition? position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor Parse(string text, class Java.Text.ParsePosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(System.String,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="member this.Parse : string * Java.Text.ParsePosition -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.Parse (text, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <param name="position">the position to parse from, updated with length parsed
             and the index of any error, not null</param>
        <summary>Parses the text using this formatter, providing control over the text position.</summary>
        <returns>the parsed temporal object, not null</returns>
        <remarks>
          <para>Parses the text using this formatter, providing control over the text position.</para>
          <para>This parses the text without requiring the parse to start from the beginning
            of the string or finish at the end.
            The result of this method is <c>TemporalAccessor</c> which has been resolved,
            applying basic validation checks to help ensure a valid date-time.</para>
          <para>The text will be parsed from the specified start <c>ParsePosition</c>.
            The entire length of the text does not have to be parsed, the <c>ParsePosition</c>
            will be updated with the index at the end of parsing.</para>
          <para>The operation of this method is slightly different to similar methods using
            <c>ParsePosition</c> on <c>java.text.Format</c>. That class will return
            errors using the error index on the <c>ParsePosition</c>. By contrast, this
            method will throw a <c>DateTimeParseException</c> if an error occurs, with
            the exception containing the error index.
            This change in behavior is necessary due to the increased complexity of
            parsing and resolving dates/times in this API.</para>
          <para>If the formatter parses the same field more than once with different values,
            the result will be an error.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="VB.NET" Value="Public Function Parse (text As String, query As ITemporalQuery) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ Parse(System::String ^ text, Java::Time::Temporal::ITemporalQuery ^ query);" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Parse (string? text, Java.Time.Temporal.ITemporalQuery? query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Parse(string text, class Java.Time.Temporal.ITemporalQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.Parse(System.String,Java.Time.Temporal.ITemporalQuery)" />
      <MemberSignature Language="F#" Value="member this.Parse : string * Java.Time.Temporal.ITemporalQuery -&gt; Java.Lang.Object" Usage="dateTimeFormatter.Parse (text, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="query" Type="Java.Time.Temporal.ITemporalQuery" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the parsed date-time</param>
        <param name="text">the text to parse, not null</param>
        <param name="query">the query defining the type to parse to, not null</param>
        <summary>Fully parses the text producing an object of the specified type.</summary>
        <returns>the parsed date-time, not null</returns>
        <remarks>
          <para>Fully parses the text producing an object of the specified type.</para>
          <para>Most applications should use this method for parsing.
            It parses the entire text to produce the required date-time.
            The query is typically a method reference to a <c>from(TemporalAccessor)</c> method.
            For example:</para>
          <code lang="text/java">LocalDateTime dt = parser.parse(str, LocalDateTime::from);
            </code>
          <para>If the parse completes without reading the entire length of the text,
            or a problem occurs during parsing or merging, then an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parse(java.lang.CharSequence,%20java.time.temporal.TemporalQuery%3CT%3E)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parse(java.lang.CharSequence, java.time.temporal.TemporalQuery&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseBest">
      <MemberSignature Language="VB.NET" Value="Public Function ParseBest (text As ICharSequence, ParamArray queries As ITemporalQuery()) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ ParseBest(Java::Lang::ICharSequence ^ text, ... cli::array &lt;Java::Time::Temporal::ITemporalQuery ^&gt; ^ queries);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? ParseBest (Java.Lang.ICharSequence? text, params Java.Time.Temporal.ITemporalQuery[]? queries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor ParseBest(class Java.Lang.ICharSequence text, class Java.Time.Temporal.ITemporalQuery[] queries) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParseBest(Java.Lang.ICharSequence,Java.Time.Temporal.ITemporalQuery[])" />
      <MemberSignature Language="F#" Value="member this.ParseBest : Java.Lang.ICharSequence * Java.Time.Temporal.ITemporalQuery[] -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.ParseBest (text, queries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parseBest", "(Ljava/lang/CharSequence;[Ljava/time/temporal/TemporalQuery;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parseBest", "(Ljava/lang/CharSequence;[Ljava/time/temporal/TemporalQuery;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="queries" Type="Java.Time.Temporal.ITemporalQuery[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="queries">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseBest">
      <MemberSignature Language="VB.NET" Value="Public Function ParseBest (text As String, ParamArray queries As ITemporalQuery()) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ ParseBest(System::String ^ text, ... cli::array &lt;Java::Time::Temporal::ITemporalQuery ^&gt; ^ queries);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? ParseBest (string? text, params Java.Time.Temporal.ITemporalQuery[]? queries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor ParseBest(string text, class Java.Time.Temporal.ITemporalQuery[] queries) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParseBest(System.String,Java.Time.Temporal.ITemporalQuery[])" />
      <MemberSignature Language="F#" Value="member this.ParseBest : string * Java.Time.Temporal.ITemporalQuery[] -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.ParseBest (text, queries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="queries" Type="Java.Time.Temporal.ITemporalQuery[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="queries">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParsedExcessDays">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParsedExcessDays () As ITemporalQuery" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Temporal::ITemporalQuery ^ ParsedExcessDays();" />
      <MemberSignature Language="C#" Value="public static Java.Time.Temporal.ITemporalQuery? ParsedExcessDays ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Temporal.ITemporalQuery ParsedExcessDays() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParsedExcessDays" />
      <MemberSignature Language="F#" Value="static member ParsedExcessDays : unit -&gt; Java.Time.Temporal.ITemporalQuery" Usage="Java.Time.Format.DateTimeFormatter.ParsedExcessDays " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parsedExcessDays", "()Ljava/time/temporal/TemporalQuery;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parsedExcessDays", "()Ljava/time/temporal/TemporalQuery;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalQuery</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A query that provides access to the excess days that were parsed.</summary>
        <returns>a query that provides access to the excess days that were parsed</returns>
        <remarks>
          <para>A query that provides access to the excess days that were parsed.</para>
          <para>This returns a singleton TemporalQuery query that provides
            access to additional information from the parse. The query always returns
            a non-null period, with a zero period returned instead of null.</para>
          <para>There are two situations where this query may return a non-zero period.
            &lt;ul&gt;
            &lt;li&gt;If the <c>ResolverStyle</c> is <c>LENIENT</c> and a time is parsed
             without a date, then the complete result of the parse consists of a
             <c>LocalTime</c> and an excess <c>Period</c> in days.
            
            &lt;li&gt;If the <c>ResolverStyle</c> is <c>SMART</c> and a time is parsed
             without a date where the time is 24:00:00, then the complete result of
             the parse consists of a <c>LocalTime</c> of 00:00:00 and an excess
             <c>Period</c> of one day.
            &lt;/ul&gt;</para>
          <para>In both cases, if a complete <c>ChronoLocalDateTime</c> or <c>Instant</c>
            is parsed, then the excess days are added to the date part.
            As a result, this query will return a zero period.</para>
          <para>The <c>SMART</c> behaviour handles the common "end of day" 24:00 value.
            Processing in <c>LENIENT</c> mode also produces the same result:</para>
          <code lang="text/java">Text to parse        Parsed object                         Excess days
             "2012-12-03T00:00"   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO
             "2012-12-03T24:00"   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO
             "00:00"              LocalTime.of(0, 0)                    ZERO
             "24:00"              LocalTime.of(0, 0)                    Period.ofDays(1)
            </code>
          <para>The query can be used as follows:</para>
          <code lang="text/java">TemporalAccessor parsed = formatter.parse(str);
             LocalTime time = parsed.query(LocalTime::from);
             Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays());
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parsedExcessDays()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parsedExcessDays()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParsedLeapSecond">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParsedLeapSecond () As ITemporalQuery" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Time::Temporal::ITemporalQuery ^ ParsedLeapSecond();" />
      <MemberSignature Language="C#" Value="public static Java.Time.Temporal.ITemporalQuery? ParsedLeapSecond ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Time.Temporal.ITemporalQuery ParsedLeapSecond() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParsedLeapSecond" />
      <MemberSignature Language="F#" Value="static member ParsedLeapSecond : unit -&gt; Java.Time.Temporal.ITemporalQuery" Usage="Java.Time.Format.DateTimeFormatter.ParsedLeapSecond " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parsedLeapSecond", "()Ljava/time/temporal/TemporalQuery;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parsedLeapSecond", "()Ljava/time/temporal/TemporalQuery;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalQuery</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A query that provides access to whether a leap-second was parsed.</summary>
        <returns>a query that provides access to whether a leap-second was parsed</returns>
        <remarks>
          <para>A query that provides access to whether a leap-second was parsed.</para>
          <para>This returns a singleton TemporalQuery query that provides
            access to additional information from the parse. The query always returns
            a non-null boolean, true if parsing saw a leap-second, false if not.</para>
          <para>Instant parsing handles the special "leap second" time of '23:59:60'.
            Leap seconds occur at '23:59:60' in the UTC time-zone, but at other
            local times in different time-zones. To avoid this potential ambiguity,
            the handling of leap-seconds is limited to
            <c>DateTimeFormatterBuilder#appendInstant()</c>, as that method
            always parses the instant with the UTC zone offset.</para>
          <para>If the time '23:59:60' is received, then a simple conversion is applied,
            replacing the second-of-minute of 60 with 59. This query can be used
            on the parse result to determine if the leap-second adjustment was made.
            The query will return <c>true</c> if it did adjust to remove the
            leap-second, and <c>false</c> if not. Note that applying a leap-second
            smoothing mechanism, such as UTC-SLS, is the responsibility of the
            application, as follows:</para>
          <code lang="text/java">TemporalAccessor parsed = formatter.parse(str);
             Instant instant = parsed.query(Instant::from);
             if (parsed.query(DateTimeFormatter.parsedLeapSecond())) {
               // validate leap-second is correct and apply correct smoothing
             }
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parsedLeapSecond()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parsedLeapSecond()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseUnresolved">
      <MemberSignature Language="VB.NET" Value="Public Function ParseUnresolved (text As ICharSequence, position As ParsePosition) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ ParseUnresolved(Java::Lang::ICharSequence ^ text, Java::Text::ParsePosition ^ position);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? ParseUnresolved (Java.Lang.ICharSequence? text, Java.Text.ParsePosition? position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor ParseUnresolved(class Java.Lang.ICharSequence text, class Java.Text.ParsePosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParseUnresolved(Java.Lang.ICharSequence,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="member this.ParseUnresolved : Java.Lang.ICharSequence * Java.Text.ParsePosition -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.ParseUnresolved (text, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parseUnresolved", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parseUnresolved", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <param name="position">the position to parse from, updated with length parsed
             and the index of any error, not null</param>
        <summary>Parses the text using this formatter, without resolving the result, intended
            for advanced use cases.</summary>
        <returns>the parsed text, null if the parse results in an error</returns>
        <remarks>
          <para>Parses the text using this formatter, without resolving the result, intended
            for advanced use cases.</para>
          <para>Parsing is implemented as a two-phase operation.
            First, the text is parsed using the layout defined by the formatter, producing
            a <c>Map</c> of field to value, a <c>ZoneId</c> and a <c>Chronology</c>.
            Second, the parsed data is &lt;em&gt;resolved&lt;/em&gt;, by validating, combining and
            simplifying the various fields into more useful ones.
            This method performs the parsing stage but not the resolving stage.</para>
          <para>The result of this method is <c>TemporalAccessor</c> which represents the
            data as seen in the input. Values are not validated, thus parsing a date string
            of '2012-00-65' would result in a temporal with three fields - year of '2012',
            month of '0' and day-of-month of '65'.</para>
          <para>The text will be parsed from the specified start <c>ParsePosition</c>.
            The entire length of the text does not have to be parsed, the <c>ParsePosition</c>
            will be updated with the index at the end of parsing.</para>
          <para>Errors are returned using the error index field of the <c>ParsePosition</c>
            instead of <c>DateTimeParseException</c>.
            The returned error index will be set to an index indicative of the error.
            Callers must check for errors before using the result.</para>
          <para>If the formatter parses the same field more than once with different values,
            the result will be an error.</para>
          <para>This method is intended for advanced use cases that need access to the
            internal state during parsing. Typical application code should use
            <c>#parse(CharSequence, TemporalQuery)</c> or the parse method on the target type.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parseUnresolved(java.lang.CharSequence,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parseUnresolved(java.lang.CharSequence, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseUnresolved">
      <MemberSignature Language="VB.NET" Value="Public Function ParseUnresolved (text As String, position As ParsePosition) As ITemporalAccessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Temporal::ITemporalAccessor ^ ParseUnresolved(System::String ^ text, Java::Text::ParsePosition ^ position);" />
      <MemberSignature Language="C#" Value="public Java.Time.Temporal.ITemporalAccessor? ParseUnresolved (string? text, Java.Text.ParsePosition? position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Temporal.ITemporalAccessor ParseUnresolved(string text, class Java.Text.ParsePosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ParseUnresolved(System.String,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="member this.ParseUnresolved : string * Java.Text.ParsePosition -&gt; Java.Time.Temporal.ITemporalAccessor" Usage="dateTimeFormatter.ParseUnresolved (text, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Temporal.ITemporalAccessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse, not null</param>
        <param name="position">the position to parse from, updated with length parsed
             and the index of any error, not null</param>
        <summary>Parses the text using this formatter, without resolving the result, intended
            for advanced use cases.</summary>
        <returns>the parsed text, null if the parse results in an error</returns>
        <remarks>
          <para>Parses the text using this formatter, without resolving the result, intended
            for advanced use cases.</para>
          <para>Parsing is implemented as a two-phase operation.
            First, the text is parsed using the layout defined by the formatter, producing
            a <c>Map</c> of field to value, a <c>ZoneId</c> and a <c>Chronology</c>.
            Second, the parsed data is &lt;em&gt;resolved&lt;/em&gt;, by validating, combining and
            simplifying the various fields into more useful ones.
            This method performs the parsing stage but not the resolving stage.</para>
          <para>The result of this method is <c>TemporalAccessor</c> which represents the
            data as seen in the input. Values are not validated, thus parsing a date string
            of '2012-00-65' would result in a temporal with three fields - year of '2012',
            month of '0' and day-of-month of '65'.</para>
          <para>The text will be parsed from the specified start <c>ParsePosition</c>.
            The entire length of the text does not have to be parsed, the <c>ParsePosition</c>
            will be updated with the index at the end of parsing.</para>
          <para>Errors are returned using the error index field of the <c>ParsePosition</c>
            instead of <c>DateTimeParseException</c>.
            The returned error index will be set to an index indicative of the error.
            Callers must check for errors before using the result.</para>
          <para>If the formatter parses the same field more than once with different values,
            the result will be an error.</para>
          <para>This method is intended for advanced use cases that need access to the
            internal state during parsing. Typical application code should use
            <c>#parse(CharSequence, TemporalQuery)</c> or the parse method on the target type.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#parseUnresolved(java.lang.CharSequence,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.parseUnresolved(java.lang.CharSequence, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolverFields">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResolverFields As ICollection(Of ITemporalField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;Java::Time::Temporal::ITemporalField ^&gt; ^ ResolverFields { System::Collections::Generic::ICollection&lt;Java::Time::Temporal::ITemporalField ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt;? ResolverFields { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Time.Temporal.ITemporalField&gt; ResolverFields" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.ResolverFields" />
      <MemberSignature Language="F#" Value="member this.ResolverFields : System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt;" Usage="Java.Time.Format.DateTimeFormatter.ResolverFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getResolverFields", "()Ljava/util/Set;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getResolverFields", "()Ljava/util/Set;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the resolver fields to use during parsing.</summary>
        <value>the immutable set of resolver fields of this formatter, null if no fields</value>
        <remarks>
          <para>Gets the resolver fields to use during parsing.</para>
          <para>This returns the resolver fields, used during the second phase of parsing
            when fields are resolved into dates and times.
            By default, a formatter has no resolver fields, and thus returns null.
            See <c>#withResolverFields(Set)</c> for more details.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getResolverFields()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getResolverFields()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolverStyle">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResolverStyle As ResolverStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Time::Format::ResolverStyle ^ ResolverStyle { Java::Time::Format::ResolverStyle ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.ResolverStyle? ResolverStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Time.Format.ResolverStyle ResolverStyle" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.ResolverStyle" />
      <MemberSignature Language="F#" Value="member this.ResolverStyle : Java.Time.Format.ResolverStyle" Usage="Java.Time.Format.DateTimeFormatter.ResolverStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getResolverStyle", "()Ljava/time/format/ResolverStyle;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getResolverStyle", "()Ljava/time/format/ResolverStyle;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.ResolverStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the resolver style to use during parsing.</summary>
        <value>the resolver style of this formatter, not null</value>
        <remarks>
          <para>Gets the resolver style to use during parsing.</para>
          <para>This returns the resolver style, used during the second phase of parsing
            when fields are resolved into dates and times.
            By default, a formatter has the <c>ResolverStyle#SMART SMART</c> resolver style.
            See <c>#withResolverStyle(ResolverStyle)</c> for more details.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getResolverStyle()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getResolverStyle()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rfc1123DateTime">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Rfc1123DateTime As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Java::Time::Format::DateTimeFormatter ^ Rfc1123DateTime { Java::Time::Format::DateTimeFormatter ^ get(); };" />
      <MemberSignature Language="C#" Value="public static Java.Time.Format.DateTimeFormatter? Rfc1123DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Time.Format.DateTimeFormatter Rfc1123DateTime" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.Rfc1123DateTime" />
      <MemberSignature Language="F#" Value="member this.Rfc1123DateTime : Java.Time.Format.DateTimeFormatter" Usage="Java.Time.Format.DateTimeFormatter.Rfc1123DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("RFC_1123_DATE_TIME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("RFC_1123_DATE_TIME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The RFC-1123 date-time formatter, such as 'Tue, 3 Jun 2008 11:05:30 GMT'.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The RFC-1123 date-time formatter, such as 'Tue, 3 Jun 2008 11:05:30 GMT'.</para>
          <para>This returns an immutable formatter capable of formatting and parsing
            most of the RFC-1123 format.
            RFC-1123 updates RFC-822 changing the year from two digits to four.
            This implementation requires a four digit year.
            This implementation also does not handle North American or military zone
            names, only 'GMT' and offset amounts.</para>
          <para>The format consists of:
            &lt;ul&gt;
            &lt;li&gt;If the day-of-week is not available to format or parse then jump to day-of-month.
            &lt;li&gt;Three letter <c>ChronoField#DAY_OF_WEEK day-of-week</c> in English.
            &lt;li&gt;A comma
            &lt;li&gt;A space
            &lt;li&gt;One or two digits for the <c>ChronoField#DAY_OF_MONTH day-of-month</c>.
            &lt;li&gt;A space
            &lt;li&gt;Three letter <c>ChronoField#MONTH_OF_YEAR month-of-year</c> in English.
            &lt;li&gt;A space
            &lt;li&gt;Four digits for the <c>ChronoField#YEAR year</c>.
             Only years in the range 0000 to 9999 are supported.
            &lt;li&gt;A space
            &lt;li&gt;Two digits for the <c>ChronoField#HOUR_OF_DAY hour-of-day</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;A colon
            &lt;li&gt;Two digits for the <c>ChronoField#MINUTE_OF_HOUR minute-of-hour</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;If the second-of-minute is not available then jump to the next space.
            &lt;li&gt;A colon
            &lt;li&gt;Two digits for the <c>ChronoField#SECOND_OF_MINUTE second-of-minute</c>.
             This is pre-padded by zero to ensure two digits.
            &lt;li&gt;A space
            &lt;li&gt;The <c>ZoneOffset#getId() offset ID</c> without colons or seconds.
             An offset of zero uses "GMT". North American zone names and military zone names are not handled.
            &lt;/ul&gt;</para>
          <para>Parsing is case insensitive.</para>
          <para>The returned formatter has a chronology of ISO set to ensure dates in
            other calendar systems are correctly converted.
            It has no override zone and uses the <c>ResolverStyle#SMART SMART</c> resolver style.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#RFC_1123_DATE_TIME" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Time.Format.DateTimeFormatter.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Time.Format.DateTimeFormatter.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFormat">
      <MemberSignature Language="VB.NET" Value="Public Function ToFormat () As _Format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Text::_Format ^ ToFormat();" />
      <MemberSignature Language="C#" Value="public Java.Text._Format? ToFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Text._Format ToFormat() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ToFormat" />
      <MemberSignature Language="F#" Value="member this.ToFormat : unit -&gt; Java.Text._Format" Usage="dateTimeFormatter.ToFormat " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toFormat", "()Ljava/text/Format;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toFormat", "()Ljava/text/Format;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this formatter as a <c>java.text.Format</c> instance.</summary>
        <returns>this formatter as a classic format instance, not null</returns>
        <remarks>
          <para>Returns this formatter as a <c>java.text.Format</c> instance.</para>
          <para>The returned <c>Format</c> instance will format any <c>TemporalAccessor</c>
            and parses to a resolved <c>TemporalAccessor</c>.</para>
          <para>Exceptions will follow the definitions of <c>Format</c>, see those methods
            for details about <c>IllegalArgumentException</c> during formatting and
            <c>ParseException</c> or null during parsing.
            The format does not support attributing of the returned format string.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#toFormat()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.toFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFormat">
      <MemberSignature Language="VB.NET" Value="Public Function ToFormat (parseQuery As ITemporalQuery) As _Format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Text::_Format ^ ToFormat(Java::Time::Temporal::ITemporalQuery ^ parseQuery);" />
      <MemberSignature Language="C#" Value="public Java.Text._Format? ToFormat (Java.Time.Temporal.ITemporalQuery? parseQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Text._Format ToFormat(class Java.Time.Temporal.ITemporalQuery parseQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.ToFormat(Java.Time.Temporal.ITemporalQuery)" />
      <MemberSignature Language="F#" Value="member this.ToFormat : Java.Time.Temporal.ITemporalQuery -&gt; Java.Text._Format" Usage="dateTimeFormatter.ToFormat parseQuery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toFormat", "(Ljava/time/temporal/TemporalQuery;)Ljava/text/Format;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toFormat", "(Ljava/time/temporal/TemporalQuery;)Ljava/text/Format;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parseQuery" Type="Java.Time.Temporal.ITemporalQuery" />
      </Parameters>
      <Docs>
        <param name="parseQuery">the query defining the type to parse to, not null</param>
        <summary>Returns this formatter as a <c>java.text.Format</c> instance that will
            parse using the specified query.</summary>
        <returns>this formatter as a classic format instance, not null</returns>
        <remarks>
          <para>Returns this formatter as a <c>java.text.Format</c> instance that will
            parse using the specified query.</para>
          <para>The returned <c>Format</c> instance will format any <c>TemporalAccessor</c>
            and parses to the type specified.
            The type must be one that is supported by <c>#parse</c>.</para>
          <para>Exceptions will follow the definitions of <c>Format</c>, see those methods
            for details about <c>IllegalArgumentException</c> during formatting and
            <c>ParseException</c> or null during parsing.
            The format does not support attributing of the returned format string.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#toFormat(java.time.temporal.TemporalQuery%3C?%3E)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.toFormat(java.time.temporal.TemporalQuery&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithChronology">
      <MemberSignature Language="VB.NET" Value="Public Function WithChronology (chrono As IChronology) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithChronology(Java::Time::Chrono::IChronology ^ chrono);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithChronology (Java.Time.Chrono.IChronology? chrono);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithChronology(class Java.Time.Chrono.IChronology chrono) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithChronology(Java.Time.Chrono.IChronology)" />
      <MemberSignature Language="F#" Value="member this.WithChronology : Java.Time.Chrono.IChronology -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithChronology chrono" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withChronology", "(Ljava/time/chrono/Chronology;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withChronology", "(Ljava/time/chrono/Chronology;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chrono" Type="Java.Time.Chrono.IChronology" />
      </Parameters>
      <Docs>
        <param name="chrono">the new chronology, null if no override</param>
        <summary>Returns a copy of this formatter with a new override chronology.</summary>
        <returns>a formatter based on this formatter with the requested override chronology, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new override chronology.</para>
          <para>This returns a formatter with similar state to this formatter but
            with the override chronology set.
            By default, a formatter has no override chronology, returning null.</para>
          <para>If an override is added, then any date that is formatted or parsed will be affected.</para>
          <para>When formatting, if the temporal object contains a date, then it will
            be converted to a date in the override chronology.
            Whether the temporal contains a date is determined by querying the
            <c>ChronoField#EPOCH_DAY EPOCH_DAY</c> field.
            Any time or zone will be retained unaltered unless overridden.</para>
          <para>If the temporal object does not contain a date, but does contain one
            or more <c>ChronoField</c> date fields, then a <c>DateTimeException</c>
            is thrown. In all other cases, the override chronology is added to the temporal,
            replacing any previous chronology, but without changing the date/time.</para>
          <para>When parsing, there are two distinct cases to consider.
            If a chronology has been parsed directly from the text, perhaps because
            <c>DateTimeFormatterBuilder#appendChronologyId()</c> was used, then
            this override chronology has no effect.
            If no zone has been parsed, then this override chronology will be used
            to interpret the <c>ChronoField</c> values into a date according to the
            date resolving rules of the chronology.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withChronology(java.time.chrono.Chronology)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withChronology(java.time.chrono.Chronology)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDecimalStyle">
      <MemberSignature Language="VB.NET" Value="Public Function WithDecimalStyle (decimalStyle As DecimalStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithDecimalStyle(Java::Time::Format::DecimalStyle ^ decimalStyle);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithDecimalStyle (Java.Time.Format.DecimalStyle? decimalStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithDecimalStyle(class Java.Time.Format.DecimalStyle decimalStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithDecimalStyle(Java.Time.Format.DecimalStyle)" />
      <MemberSignature Language="F#" Value="member this.WithDecimalStyle : Java.Time.Format.DecimalStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithDecimalStyle decimalStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withDecimalStyle", "(Ljava/time/format/DecimalStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withDecimalStyle", "(Ljava/time/format/DecimalStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="decimalStyle" Type="Java.Time.Format.DecimalStyle" />
      </Parameters>
      <Docs>
        <param name="decimalStyle">the new DecimalStyle, not null</param>
        <summary>Returns a copy of this formatter with a new DecimalStyle.</summary>
        <returns>a formatter based on this formatter with the requested DecimalStyle, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new DecimalStyle.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withDecimalStyle(java.time.format.DecimalStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withDecimalStyle(java.time.format.DecimalStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLocale">
      <MemberSignature Language="VB.NET" Value="Public Function WithLocale (locale As Locale) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithLocale(Java::Util::Locale ^ locale);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithLocale (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithLocale(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithLocale(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="member this.WithLocale : Java.Util.Locale -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithLocale locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withLocale", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withLocale", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the new locale, not null</param>
        <summary>Returns a copy of this formatter with a new locale.</summary>
        <returns>a formatter based on this formatter with the requested locale, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new locale.</para>
          <para>This is used to lookup any part of the formatter needing specific
            localization, such as the text or localized pattern.</para>
          <para>The locale is stored as passed in, without further processing.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withLocale(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withLocale(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithResolverFields">
      <MemberSignature Language="VB.NET" Value="Public Function WithResolverFields (ParamArray resolverFields As ITemporalField()) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithResolverFields(... cli::array &lt;Java::Time::Temporal::ITemporalField ^&gt; ^ resolverFields);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithResolverFields (params Java.Time.Temporal.ITemporalField[]? resolverFields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithResolverFields(class Java.Time.Temporal.ITemporalField[] resolverFields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithResolverFields(Java.Time.Temporal.ITemporalField[])" />
      <MemberSignature Language="F#" Value="member this.WithResolverFields : Java.Time.Temporal.ITemporalField[] -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithResolverFields resolverFields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withResolverFields", "([Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withResolverFields", "([Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolverFields" Type="Java.Time.Temporal.ITemporalField[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resolverFields">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithResolverFields">
      <MemberSignature Language="VB.NET" Value="Public Function WithResolverFields (resolverFields As ICollection(Of ITemporalField)) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithResolverFields(System::Collections::Generic::ICollection&lt;Java::Time::Temporal::ITemporalField ^&gt; ^ resolverFields);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithResolverFields (System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt;? resolverFields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithResolverFields(class System.Collections.Generic.ICollection`1&lt;class Java.Time.Temporal.ITemporalField&gt; resolverFields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithResolverFields(System.Collections.Generic.ICollection{Java.Time.Temporal.ITemporalField})" />
      <MemberSignature Language="F#" Value="member this.WithResolverFields : System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt; -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithResolverFields resolverFields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withResolverFields", "(Ljava/util/Set;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withResolverFields", "(Ljava/util/Set;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolverFields" Type="System.Collections.Generic.ICollection&lt;Java.Time.Temporal.ITemporalField&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resolverFields">the new set of resolver fields, null if no fields</param>
        <summary>Returns a copy of this formatter with a new set of resolver fields.</summary>
        <returns>a formatter based on this formatter with the requested resolver style, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new set of resolver fields.</para>
          <para>This returns a formatter with similar state to this formatter but with
            the resolver fields set. By default, a formatter has no resolver fields.</para>
          <para>Changing the resolver fields only has an effect during parsing.
            Parsing a text string occurs in two phases.
            Phase 1 is a basic text parse according to the fields added to the builder.
            Phase 2 resolves the parsed field-value pairs into date and/or time objects.
            The resolver fields are used to filter the field-value pairs between phase 1 and 2.</para>
          <para>This can be used to select between two or more ways that a date or time might
            be resolved. For example, if the formatter consists of year, month, day-of-month
            and day-of-year, then there are two ways to resolve a date.
            Calling this method with the arguments <c>ChronoField#YEAR YEAR</c> and
            <c>ChronoField#DAY_OF_YEAR DAY_OF_YEAR</c> will ensure that the date is
            resolved using the year and day-of-year, effectively meaning that the month
            and day-of-month are ignored during the resolving phase.</para>
          <para>In a similar manner, this method can be used to ignore secondary fields that
            would otherwise be cross-checked. For example, if the formatter consists of year,
            month, day-of-month and day-of-week, then there is only one way to resolve a
            date, but the parsed value for day-of-week will be cross-checked against the
            resolved date. Calling this method with the arguments <c>ChronoField#YEAR YEAR</c>,
            <c>ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR</c> and
            <c>ChronoField#DAY_OF_MONTH DAY_OF_MONTH</c> will ensure that the date is
            resolved correctly, but without any cross-check for the day-of-week.</para>
          <para>In implementation terms, this method behaves as follows. The result of the
            parsing phase can be considered to be a map of field to value. The behavior
            of this method is to cause that map to be filtered between phase 1 and 2,
            removing all fields other than those specified as arguments to this method.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withResolverFields(java.util.Set%3Cjava.time.temporal.TemporalField%3E)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withResolverFields(java.util.Set&lt;java.time.temporal.TemporalField&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithResolverStyle">
      <MemberSignature Language="VB.NET" Value="Public Function WithResolverStyle (resolverStyle As ResolverStyle) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithResolverStyle(Java::Time::Format::ResolverStyle ^ resolverStyle);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithResolverStyle (Java.Time.Format.ResolverStyle? resolverStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithResolverStyle(class Java.Time.Format.ResolverStyle resolverStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithResolverStyle(Java.Time.Format.ResolverStyle)" />
      <MemberSignature Language="F#" Value="member this.WithResolverStyle : Java.Time.Format.ResolverStyle -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithResolverStyle resolverStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withResolverStyle", "(Ljava/time/format/ResolverStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withResolverStyle", "(Ljava/time/format/ResolverStyle;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolverStyle" Type="Java.Time.Format.ResolverStyle" />
      </Parameters>
      <Docs>
        <param name="resolverStyle">the new resolver style, not null</param>
        <summary>Returns a copy of this formatter with a new resolver style.</summary>
        <returns>a formatter based on this formatter with the requested resolver style, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new resolver style.</para>
          <para>This returns a formatter with similar state to this formatter but
            with the resolver style set. By default, a formatter has the
            <c>ResolverStyle#SMART SMART</c> resolver style.</para>
          <para>Changing the resolver style only has an effect during parsing.
            Parsing a text string occurs in two phases.
            Phase 1 is a basic text parse according to the fields added to the builder.
            Phase 2 resolves the parsed field-value pairs into date and/or time objects.
            The resolver style is used to control how phase 2, resolving, happens.
            See <c>ResolverStyle</c> for more information on the options available.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withResolverStyle(java.time.format.ResolverStyle)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withResolverStyle(java.time.format.ResolverStyle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithZone">
      <MemberSignature Language="VB.NET" Value="Public Function WithZone (zone As ZoneId) As DateTimeFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Time::Format::DateTimeFormatter ^ WithZone(Java::Time::ZoneId ^ zone);" />
      <MemberSignature Language="C#" Value="public Java.Time.Format.DateTimeFormatter? WithZone (Java.Time.ZoneId? zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Time.Format.DateTimeFormatter WithZone(class Java.Time.ZoneId zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Time.Format.DateTimeFormatter.WithZone(Java.Time.ZoneId)" />
      <MemberSignature Language="F#" Value="member this.WithZone : Java.Time.ZoneId -&gt; Java.Time.Format.DateTimeFormatter" Usage="dateTimeFormatter.WithZone zone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("withZone", "(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("withZone", "(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.Format.DateTimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Java.Time.ZoneId" />
      </Parameters>
      <Docs>
        <param name="zone">the new override zone, null if no override</param>
        <summary>Returns a copy of this formatter with a new override zone.</summary>
        <returns>a formatter based on this formatter with the requested override zone, not null</returns>
        <remarks>
          <para>Returns a copy of this formatter with a new override zone.</para>
          <para>This returns a formatter with similar state to this formatter but
            with the override zone set.
            By default, a formatter has no override zone, returning null.</para>
          <para>If an override is added, then any instant that is formatted or parsed will be affected.</para>
          <para>When formatting, if the temporal object contains an instant, then it will
            be converted to a zoned date-time using the override zone.
            Whether the temporal is an instant is determined by querying the
            <c>ChronoField#INSTANT_SECONDS INSTANT_SECONDS</c> field.
            If the input has a chronology then it will be retained unless overridden.
            If the input does not have a chronology, such as <c>Instant</c>, then
            the ISO chronology will be used.</para>
          <para>If the temporal object does not contain an instant, but does contain
            an offset then an additional check is made. If the normalized override
            zone is an offset that differs from the offset of the temporal, then
            a <c>DateTimeException</c> is thrown. In all other cases, the override
            zone is added to the temporal, replacing any previous zone, but without
            changing the date/time.</para>
          <para>When parsing, there are two distinct cases to consider.
            If a zone has been parsed directly from the text, perhaps because
            <c>DateTimeFormatterBuilder#appendZoneId()</c> was used, then
            this override zone has no effect.
            If no zone has been parsed, then this override zone will be included in
            the result of the parse where it can be used to build instants and date-times.</para>
          <para>This instance is immutable and unaffected by this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#withZone(java.time.ZoneId)" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.withZone(java.time.ZoneId)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zone">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Zone As ZoneId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Java::Time::ZoneId ^ Zone { Java::Time::ZoneId ^ get(); };" />
      <MemberSignature Language="C#" Value="public Java.Time.ZoneId? Zone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Time.ZoneId Zone" />
      <MemberSignature Language="DocId" Value="P:Java.Time.Format.DateTimeFormatter.Zone" />
      <MemberSignature Language="F#" Value="member this.Zone : Java.Time.ZoneId" Usage="Java.Time.Format.DateTimeFormatter.Zone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getZone", "()Ljava/time/ZoneId;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getZone", "()Ljava/time/ZoneId;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Time.ZoneId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the overriding zone to be used during formatting.</summary>
        <value>the override zone of this formatter, null if no override</value>
        <remarks>
          <para>Gets the overriding zone to be used during formatting.</para>
          <para>This returns the override zone, used to convert instants.
            By default, a formatter has no override zone, returning null.
            See <c>#withZone(ZoneId)</c> for more details on overriding.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/time/format/DateTimeFormatter#getZone()" title="Reference documentation">Java documentation for <code>java.time.format.DateTimeFormatter.getZone()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
