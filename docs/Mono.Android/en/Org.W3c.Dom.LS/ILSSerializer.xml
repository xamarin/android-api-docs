<Type Name="ILSSerializer" FullName="Org.W3c.Dom.LS.ILSSerializer">
  <TypeSignature Language="C#" Value="public interface ILSSerializer : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ILSSerializer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Org.W3c.Dom.LS.ILSSerializer" />
  <TypeSignature Language="F#" Value="type ILSSerializer = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/w3c/dom/ls/LSSerializer", "", "Org.W3c.Dom.LS.ILSSerializerInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/w3c/dom/ls/LSSerializer", "", "Org.W3c.Dom.LS.ILSSerializerInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>LSSerializer</c> provides an API for serializing (writing) a
            DOM document out into XML.</summary>
    <remarks>
      <para>A <c>LSSerializer</c> provides an API for serializing (writing) a
            DOM document out into XML. The XML data is written to a string or an
            output stream. Any changes or fixups made during the serialization affect
            only the serialized data. The <c>Document</c> object and its
            children are never altered by the serialization operation.</para>
      <para>During serialization of XML data, namespace fixup is done as defined in [<see href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407">DOM Level 3 Core</see>]
            , Appendix B. [<see href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">DOM Level 2 Core</see>]
             allows empty strings as a real namespace URI. If the
            <c>namespaceURI</c> of a <c>Node</c> is empty string, the
            serialization will treat them as <c>null</c>, ignoring the prefix
            if any.</para>
      <para>
        <c>LSSerializer</c> accepts any node type for serialization. For
            nodes of type <c>Document</c> or <c>Entity</c>, well-formed
            XML will be created when possible (well-formedness is guaranteed if the
            document or entity comes from a parse operation and is unchanged since it
            was created). The serialized output for these node types is either as a
            XML document or an External XML Entity, respectively, and is acceptable
            input for an XML parser. For all other types of nodes the serialized form
            is implementation dependent.</para>
      <para>Within a <c>Document</c>, <c>DocumentFragment</c>, or
            <c>Entity</c> being serialized, <c>Nodes</c> are processed as
            follows
            &lt;ul&gt;
            &lt;li&gt; <c>Document</c> nodes are written, including the XML
            declaration (unless the parameter "xml-declaration" is set to
            <c>false</c>) and a DTD subset, if one exists in the DOM. Writing a
            <c>Document</c> node serializes the entire document.
            &lt;/li&gt;
            &lt;li&gt;
            <c>Entity</c> nodes, when written directly by
            <c>LSSerializer.write</c>, outputs the entity expansion but no
            namespace fixup is done. The resulting output will be valid as an
            external entity.
            &lt;/li&gt;
            &lt;li&gt; If the parameter "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities">
            entities</see>" is set to <c>true</c>, <c>EntityReference</c> nodes are
            serialized as an entity reference of the form "
            <c>&amp;amp;entityName;</c>" in the output. Child nodes (the expansion)
            of the entity reference are ignored. If the parameter "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities">
            entities</see>" is set to <c>false</c>, only the children of the entity reference
            are serialized. <c>EntityReference</c> nodes with no children (no
            corresponding <c>Entity</c> node or the corresponding
            <c>Entity</c> nodes have no children) are always serialized.
            &lt;/li&gt;
            &lt;li&gt;
            <c>CDATAsections</c> containing content characters that cannot be
            represented in the specified output encoding are handled according to the
            "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-split-cdata-sections">
            split-cdata-sections</see>" parameter.  If the parameter is set to <c>true</c>,
            <c>CDATAsections</c> are split, and the unrepresentable characters
            are serialized as numeric character references in ordinary content. The
            exact position and number of splits is not specified.  If the parameter
            is set to <c>false</c>, unrepresentable characters in a
            <c>CDATAsection</c> are reported as
            <c>"wf-invalid-character"</c> errors if the parameter "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-well-formed">
            well-formed</see>" is set to <c>true</c>. The error is not recoverable - there is no
            mechanism for supplying alternative characters and continuing with the
            serialization.
            &lt;/li&gt;
            &lt;li&gt; <c>DocumentFragment</c> nodes are serialized by
            serializing the children of the document fragment in the order they
            appear in the document fragment.
            &lt;/li&gt;
            &lt;li&gt; All other node types (Element, Text,
            etc.) are serialized to their corresponding XML source form.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p &gt;&lt;b&gt;Note:&lt;/b&gt;  The serialization of a <c>Node</c> does not always
            generate a well-formed XML document, i.e. a <c>LSParser</c> might
            throw fatal errors when parsing the resulting serialization.</para>
      <para>Within the character data of a document (outside of markup), any
            characters that cannot be represented directly are replaced with
            character references. Occurrences of '&amp;lt;' and '&amp;amp;' are replaced by
            the predefined entities &amp;amp;lt; and &amp;amp;amp;. The other predefined
            entities (&amp;amp;gt;, &amp;amp;apos;, and &amp;amp;quot;) might not be used, except
            where needed (e.g. using &amp;amp;gt; in cases such as ']]&amp;gt;'). Any
            characters that cannot be represented directly in the output character
            encoding are serialized as numeric character references (and since
            character encoding standards commonly use hexadecimal representations of
            characters, using the hexadecimal representation when serializing
            character references is encouraged).</para>
      <para>To allow attribute values to contain both single and double quotes, the
            apostrophe or single-quote character (') may be represented as
            "&amp;amp;apos;", and the double-quote character (")  as "&amp;amp;quot;". New
            line characters and other characters that cannot be represented directly
            in attribute values in the output character encoding are serialized as a
            numeric character reference.</para>
      <para>Within markup, but outside of attributes, any occurrence of a character
            that cannot be represented in the output character encoding is reported
            as a <c>DOMError</c> fatal error. An example would be serializing
            the element &amp;lt;LaCa\u00f1ada/&amp;gt; with <c>encoding="us-ascii"</c>.
            This will result with a generation of a <c>DOMError</c>
            "wf-invalid-character-in-node-name" (as proposed in "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-well-formed">
            well-formed</see>").</para>
      <para>When requested by setting the parameter "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-normalize-characters">
            normalize-characters</see>" on <c>LSSerializer</c> to true, character normalization is
            performed according to the definition of <see href="http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm">fully
            normalized</see> characters included in appendix E of [<see href="http://www.w3.org/TR/2004/REC-xml11-20040204/">XML 1.1</see>] on all
            data to be serialized, both markup and character data. The character
            normalization process affects only the data as it is being written; it
            does not alter the DOM's view of the document after serialization has
            completed.</para>
      <para>Implementations are required to support the encodings "UTF-8",
            "UTF-16", "UTF-16BE", and "UTF-16LE" to guarantee that data is
            serializable in all encodings that are required to be supported by all
            XML parsers. When the encoding is UTF-8, whether or not a byte order mark
            is serialized, or if the output is big-endian or little-endian, is
            implementation dependent. When the encoding is UTF-16, whether or not the
            output is big-endian or little-endian is implementation dependent, but a
            Byte Order Mark must be generated for non-character outputs, such as
            <c>LSOutput.byteStream</c> or <c>LSOutput.systemId</c>. If
            the Byte Order Mark is not generated, a "byte-order-mark-needed" warning
            is reported. When the encoding is UTF-16LE or UTF-16BE, the output is
            big-endian (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark
            is not be generated. In all cases, the encoding declaration, if
            generated, will correspond to the encoding used during the serialization
            (e.g. <c>encoding="UTF-16"</c> will appear if UTF-16 was
            requested).</para>
      <para>Namespaces are fixed up during serialization, the serialization process
            will verify that namespace declarations, namespace prefixes and the
            namespace URI associated with elements and attributes are consistent. If
            inconsistencies are found, the serialized form of the document will be
            altered to remove them. The method used for doing the namespace fixup
            while serializing a document is the algorithm defined in Appendix B.1,
            "Namespace normalization", of [<see href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407">DOM Level 3 Core</see>]
            .</para>
      <para>While serializing a document, the parameter "discard-default-content"
            controls whether or not non-specified data is serialized.</para>
      <para>While serializing, errors and warnings are reported to the application
            through the error handler (<c>LSSerializer.domConfig</c>'s "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler">
            error-handler</see>" parameter). This specification does in no way try to define all possible
            errors and warnings that can occur while serializing a DOM node, but some
            common error and warning cases are defined. The types (
            <c>DOMError.type</c>) of errors and warnings defined by this
            specification are:
            &lt;dl&gt;
            &lt;dt&gt;<c>"no-output-specified" [fatal]</c>&lt;/dt&gt;
            &lt;dd&gt; Raised when
            writing to a <c>LSOutput</c> if no output is specified in the
            <c>LSOutput</c>. &lt;/dd&gt;
            &lt;dt&gt;
            <c>"unbound-prefix-in-entity-reference" [fatal]</c>&lt;/dt&gt;
            &lt;dd&gt; Raised if the
            configuration parameter "<see href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-namespaces">
            namespaces</see>" is set to <c>true</c> and an entity whose replacement text
            contains unbound namespace prefixes is referenced in a location where
            there are no bindings for the namespace prefixes. &lt;/dd&gt;
            &lt;dt&gt;
            <c>"unsupported-encoding" [fatal]</c>&lt;/dt&gt;
            &lt;dd&gt; Raised if an unsupported
            encoding is encountered. &lt;/dd&gt;
            &lt;/dl&gt;</para>
      <para>In addition to raising the defined errors and warnings, implementations
            are expected to raise implementation specific errors and warnings for any
            other error and warning cases such as IO errors (file not found,
            permission denied,...) and so on.</para>
      <para>See also the <see href="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407">Document Object Model (DOM) Level 3 Load
            and Save Specification</see>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/w3c/dom/ls/LSSerializer" title="Reference documentation">Java documentation for <code>org.w3c.dom.ls.LSSerializer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DomConfig">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IDOMConfiguration? DomConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Org.W3c.Dom.IDOMConfiguration DomConfig" />
      <MemberSignature Language="DocId" Value="P:Org.W3c.Dom.LS.ILSSerializer.DomConfig" />
      <MemberSignature Language="F#" Value="member this.DomConfig : Org.W3c.Dom.IDOMConfiguration" Usage="Org.W3c.Dom.LS.ILSSerializer.DomConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDomConfig", "()Lorg/w3c/dom/DOMConfiguration;", "GetGetDomConfigHandler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDomConfig", "()Lorg/w3c/dom/DOMConfiguration;", "GetGetDomConfigHandler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IDOMConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public string? NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:Org.W3c.Dom.LS.ILSSerializer.NewLine" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="Org.W3c.Dom.LS.ILSSerializer.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNewLine", "()Ljava/lang/String;", "GetGetNewLineHandler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNewLine", "()Ljava/lang/String;", "GetGetNewLineHandler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNewLine", "(Ljava/lang/String;)V", "GetSetNewLine_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNewLine", "(Ljava/lang/String;)V", "GetSetNewLine_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public bool Write (Org.W3c.Dom.INode? nodeArg, Org.W3c.Dom.LS.ILSOutput? destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Write(class Org.W3c.Dom.INode nodeArg, class Org.W3c.Dom.LS.ILSOutput destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.W3c.Dom.LS.ILSSerializer.Write(Org.W3c.Dom.INode,Org.W3c.Dom.LS.ILSOutput)" />
      <MemberSignature Language="F#" Value="abstract member Write : Org.W3c.Dom.INode * Org.W3c.Dom.LS.ILSOutput -&gt; bool" Usage="iLSSerializer.Write (nodeArg, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(Lorg/w3c/dom/Node;Lorg/w3c/dom/ls/LSOutput;)Z", "GetWrite_Lorg_w3c_dom_Node_Lorg_w3c_dom_ls_LSOutput_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(Lorg/w3c/dom/Node;Lorg/w3c/dom/ls/LSOutput;)Z", "GetWrite_Lorg_w3c_dom_Node_Lorg_w3c_dom_ls_LSOutput_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArg" Type="Org.W3c.Dom.INode" />
        <Parameter Name="destination" Type="Org.W3c.Dom.LS.ILSOutput" />
      </Parameters>
      <Docs>
        <param name="nodeArg">The node to serialize.</param>
        <param name="destination">The destination for the serialized DOM.</param>
        <summary>Serialize the specified node as described above in the general
            description of the <c>LSSerializer</c> interface.</summary>
        <returns>Returns <c>true</c> if <c>node</c> was
              successfully serialized. Return <c>false</c> in case the
              normal processing stopped but the implementation kept serializing
              the document; the result of the serialization being implementation
              dependent then.</returns>
        <remarks>
          <para>Serialize the specified node as described above in the general
            description of the <c>LSSerializer</c> interface. The output is
            written to the supplied <c>LSOutput</c>.
            &lt;br&gt; When writing to a <c>LSOutput</c>, the encoding is found by
            looking at the encoding information that is reachable through the
            <c>LSOutput</c> and the item to be written (or its owner
            document) in this order:
            &lt;ol&gt;
            &lt;li&gt; <c>LSOutput.encoding</c>,
            &lt;/li&gt;
            &lt;li&gt;
            <c>Document.inputEncoding</c>,
            &lt;/li&gt;
            &lt;li&gt;
            <c>Document.xmlEncoding</c>.
            &lt;/li&gt;
            &lt;/ol&gt;
            &lt;br&gt; If no encoding is reachable through the above properties, a
            default encoding of "UTF-8" will be used. If the specified encoding
            is not supported an "unsupported-encoding" fatal error is raised.
            &lt;br&gt; If no output is specified in the <c>LSOutput</c>, a
            "no-output-specified" fatal error is raised.
            &lt;br&gt; The implementation is responsible of associating the appropriate
            media type with the serialized data.
            &lt;br&gt; When writing to a HTTP URI, a HTTP PUT is performed. When writing
            to other types of URIs, the mechanism for writing the data to the URI
            is implementation dependent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/w3c/dom/ls/LSSerializer#write(org.w3c.dom.Node,%20org.w3c.dom.ls.LSOutput)" title="Reference documentation">Java documentation for <code>org.w3c.dom.ls.LSSerializer.write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToString">
      <MemberSignature Language="C#" Value="public string? WriteToString (Org.W3c.Dom.INode? nodeArg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToString(class Org.W3c.Dom.INode nodeArg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.W3c.Dom.LS.ILSSerializer.WriteToString(Org.W3c.Dom.INode)" />
      <MemberSignature Language="F#" Value="abstract member WriteToString : Org.W3c.Dom.INode -&gt; string" Usage="iLSSerializer.WriteToString nodeArg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeToString", "(Lorg/w3c/dom/Node;)Ljava/lang/String;", "GetWriteToString_Lorg_w3c_dom_Node_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeToString", "(Lorg/w3c/dom/Node;)Ljava/lang/String;", "GetWriteToString_Lorg_w3c_dom_Node_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArg" Type="Org.W3c.Dom.INode" />
      </Parameters>
      <Docs>
        <param name="nodeArg">The node to serialize.</param>
        <summary>Serialize the specified node as described above in the general
            description of the <c>LSSerializer</c> interface.</summary>
        <returns>Returns the serialized data.</returns>
        <remarks>
          <para>Serialize the specified node as described above in the general
            description of the <c>LSSerializer</c> interface. The output is
            written to a <c>DOMString</c> that is returned to the caller.
            The encoding used is the encoding of the <c>DOMString</c> type,
            i.e. UTF-16. Note that no Byte Order Mark is generated in a
            <c>DOMString</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/w3c/dom/ls/LSSerializer#writeToString(org.w3c.dom.Node)" title="Reference documentation">Java documentation for <code>org.w3c.dom.ls.LSSerializer.writeToString(org.w3c.dom.Node)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToURI">
      <MemberSignature Language="C#" Value="public bool WriteToURI (Org.W3c.Dom.INode? nodeArg, string? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WriteToURI(class Org.W3c.Dom.INode nodeArg, string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.W3c.Dom.LS.ILSSerializer.WriteToURI(Org.W3c.Dom.INode,System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteToURI : Org.W3c.Dom.INode * string -&gt; bool" Usage="iLSSerializer.WriteToURI (nodeArg, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeToURI", "(Lorg/w3c/dom/Node;Ljava/lang/String;)Z", "GetWriteToURI_Lorg_w3c_dom_Node_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeToURI", "(Lorg/w3c/dom/Node;Ljava/lang/String;)Z", "GetWriteToURI_Lorg_w3c_dom_Node_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSSerializerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArg" Type="Org.W3c.Dom.INode" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nodeArg">The node to serialize.</param>
        <param name="uri">The URI to write to.</param>
        <summary>A convenience method that acts as if <c>LSSerializer.write</c>
            was called with a <c>LSOutput</c> with no encoding specified
            and <c>LSOutput.systemId</c> set to the <c>uri</c>
            argument.</summary>
        <returns>Returns <c>true</c> if <c>node</c> was
              successfully serialized. Return <c>false</c> in case the
              normal processing stopped but the implementation kept serializing
              the document; the result of the serialization being implementation
              dependent then.</returns>
        <remarks>
          <para>A convenience method that acts as if <c>LSSerializer.write</c>
            was called with a <c>LSOutput</c> with no encoding specified
            and <c>LSOutput.systemId</c> set to the <c>uri</c>
            argument.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/w3c/dom/ls/LSSerializer#writeToURI(org.w3c.dom.Node,%20java.lang.String)" title="Reference documentation">Java documentation for <code>org.w3c.dom.ls.LSSerializer.writeToURI(org.w3c.dom.Node, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
