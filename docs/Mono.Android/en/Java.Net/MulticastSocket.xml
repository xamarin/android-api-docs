<Type Name="MulticastSocket" FullName="Java.Net.MulticastSocket">
  <TypeSignature Language="VB.NET" Value="Public Class MulticastSocket&#xA;Inherits DatagramSocket" />
  <TypeSignature Language="C++ CLI" Value="public ref class MulticastSocket : Java::Net::DatagramSocket" />
  <TypeSignature Language="C#" Value="public class MulticastSocket : Java.Net.DatagramSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MulticastSocket extends Java.Net.DatagramSocket" />
  <TypeSignature Language="DocId" Value="T:Java.Net.MulticastSocket" />
  <TypeSignature Language="F#" Value="type MulticastSocket = class&#xA;    inherit DatagramSocket" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.DatagramSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/net/MulticastSocket", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/net/MulticastSocket", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The multicast datagram socket class is useful for sending
            and receiving IP multicast packets.</summary>
    <remarks>
      <para>The multicast datagram socket class is useful for sending
            and receiving IP multicast packets.  A MulticastSocket is
            a (UDP) DatagramSocket, with additional capabilities for
            joining "groups" of other multicast hosts on the internet.</para>
      <para>A multicast group is specified by a class D IP address
            and by a standard UDP port number. Class D IP addresses
            are in the range <c>224.0.0.0</c> to <c>239.255.255.255</c>,
            inclusive. The address 224.0.0.0 is reserved and should not be used.</para>
      <para>One would join a multicast group by first creating a MulticastSocket
            with the desired port, then invoking the
            <c>joinGroup(InetAddress groupAddr)</c>
            method:</para>
      <code lang="text/java">// join a Multicast group and send the group salutations
            ...
            String msg = "Hello";
            InetAddress group = InetAddress.getByName("228.5.6.7");
            MulticastSocket s = new MulticastSocket(6789);
            s.joinGroup(group);
            byte[] bytes = msg.getBytes(StandardCharsets.UTF_8);
            DatagramPacket hi = new DatagramPacket(bytes, bytes.length,
                                        group, 6789);
            s.send(hi);
            // get their responses!
            byte[] buf = new byte[1000];
            DatagramPacket recv = new DatagramPacket(buf, buf.length);
            s.receive(recv);
            ...
            // OK, I'm done talking - leave the group...
            s.leaveGroup(group);
            </code>
      <para>When one sends a message to a multicast group, &lt;B&gt;all&lt;/B&gt; subscribing
            recipients to that host and port receive the message (within the
            time-to-live range of the packet, see below).  The socket needn't
            be a member of the multicast group to send messages to it.</para>
      <para>When a socket subscribes to a multicast group/port, it receives
            datagrams sent by other hosts to the group/port, as do all other
            members of the group and port.  A socket relinquishes membership
            in a group by the leaveGroup(InetAddress addr) method.  &lt;B&gt;
            Multiple MulticastSocket's&lt;/B&gt; may subscribe to a multicast group
            and port concurrently, and they will all receive group datagrams.</para>
      <para>Currently applets are not allowed to use multicast sockets.</para>
      <para>Added in 1.1.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/net/MulticastSocket" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MulticastSocket();" />
      <MemberSignature Language="C#" Value="public MulticastSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Create a multicast socket.</summary>
        <remarks>
          <para>Create a multicast socket.</para>
          <para>If there is a security manager, its <c>checkListen</c> method is first
            called with 0 as its argument to ensure the operation is allowed. This
            could result in a SecurityException.</para>
          <para>When the socket is created the
            <c>DatagramSocket#setReuseAddress(boolean)</c> method is called to
            enable the SO_REUSEADDR socket option.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#MulticastSocket()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.MulticastSocket()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (bindaddr As SocketAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MulticastSocket(Java::Net::SocketAddress ^ bindaddr);" />
      <MemberSignature Language="C#" Value="public MulticastSocket (Java.Net.SocketAddress? bindaddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Net.SocketAddress bindaddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.#ctor(Java.Net.SocketAddress)" />
      <MemberSignature Language="F#" Value="new Java.Net.MulticastSocket : Java.Net.SocketAddress -&gt; Java.Net.MulticastSocket" Usage="new Java.Net.MulticastSocket bindaddr" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/net/SocketAddress;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/net/SocketAddress;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="bindaddr" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="bindaddr">Socket address to bind to, or <c>null</c> for
                            an unbound socket.</param>
        <summary>Create a MulticastSocket bound to the specified socket address.</summary>
        <remarks>
          <para>Create a MulticastSocket bound to the specified socket address.</para>
          <para>Or, if the address is <c>null</c>, create an unbound socket.</para>
          <para>If there is a security manager,
            its <c>checkListen</c> method is first called
            with the SocketAddress port as its argument to ensure the operation is allowed.
            This could result in a SecurityException.</para>
          <para>When the socket is created the
            <c>DatagramSocket#setReuseAddress(boolean)</c> method is
            called to enable the SO_REUSEADDR socket option.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#MulticastSocket(java.net.SocketAddress)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.MulticastSocket(java.net.SocketAddress)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>localAddress</c> is not supported (because it's not
 an <c>InetSocketAddress</c>, say).</exception>
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MulticastSocket(int port);" />
      <MemberSignature Language="C#" Value="public MulticastSocket (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Net.MulticastSocket : int -&gt; Java.Net.MulticastSocket" Usage="new Java.Net.MulticastSocket port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">port to use</param>
        <summary>Create a multicast socket and bind it to a specific port.</summary>
        <remarks>
          <para>Create a multicast socket and bind it to a specific port.</para>
          <para>If there is a security manager,
            its <c>checkListen</c> method is first called
            with the <c>port</c> argument
            as its argument to ensure the operation is allowed.
            This could result in a SecurityException.</para>
          <para>When the socket is created the
            <c>DatagramSocket#setReuseAddress(boolean)</c> method is
            called to enable the SO_REUSEADDR socket option.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#MulticastSocket(int)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.MulticastSocket(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MulticastSocket(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected MulticastSocket (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Net.MulticastSocket : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Net.MulticastSocket" Usage="new Java.Net.MulticastSocket (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interface">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Interface As InetAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Net::InetAddress ^ Interface { Java::Net::InetAddress ^ get(); void set(Java::Net::InetAddress ^ value); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Net.InetAddress? Interface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.InetAddress Interface" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.Interface" />
      <MemberSignature Language="F#" Value="member this.Interface : Java.Net.InetAddress with get, set" Usage="Java.Net.MulticastSocket.Interface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getInterface", "()Ljava/net/InetAddress;", "GetGetInterfaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getInterface", "()Ljava/net/InetAddress;", "GetGetInterfaceHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setInterface", "(Ljava/net/InetAddress;)V", "GetSetInterface_Ljava_net_InetAddress_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setInterface", "(Ljava/net/InetAddress;)V", "GetSetInterface_Ljava_net_InetAddress_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="inf">the InetAddress</param>
        <summary>Retrieve the address of the network interface used for
            multicast packets. -or- Set the multicast network interface used by methods
            whose behavior would be affected by the value of the
            network interface.</summary>
        <value>An <c>InetAddress</c> representing
             the address of the network interface used for
             multicast packets.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Retrieve the address of the network interface used for
            multicast packets.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#getInterface()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.getInterface()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the multicast network interface used by methods
            whose behavior would be affected by the value of the
            network interface. Useful for multihomed hosts.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#setInterface(java.net.InetAddress)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.setInterface(java.net.InetAddress)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Net.MulticastSocket.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinGroup">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub JoinGroup (mcastaddr As InetAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void JoinGroup(Java::Net::InetAddress ^ mcastaddr);" />
      <MemberSignature Language="C#" Value="public virtual void JoinGroup (Java.Net.InetAddress? mcastaddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void JoinGroup(class Java.Net.InetAddress mcastaddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.JoinGroup(Java.Net.InetAddress)" />
      <MemberSignature Language="F#" Value="abstract member JoinGroup : Java.Net.InetAddress -&gt; unit&#xA;override this.JoinGroup : Java.Net.InetAddress -&gt; unit" Usage="multicastSocket.JoinGroup mcastaddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("joinGroup", "(Ljava/net/InetAddress;)V", "GetJoinGroup_Ljava_net_InetAddress_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("joinGroup", "(Ljava/net/InetAddress;)V", "GetJoinGroup_Ljava_net_InetAddress_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mcastaddr" Type="Java.Net.InetAddress" />
      </Parameters>
      <Docs>
        <param name="mcastaddr">is the multicast address to join</param>
        <summary>Joins a multicast group.</summary>
        <remarks>
          <para>Joins a multicast group. Its behavior may be affected by
            <c>setInterface</c> or <c>setNetworkInterface</c>.</para>
          <para>If there is a security manager, this method first
            calls its <c>checkMulticast</c> method
            with the <c>mcastaddr</c> argument
            as its argument.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#joinGroup(java.net.InetAddress)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.joinGroup(java.net.InetAddress)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinGroup">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub JoinGroup (mcastaddr As SocketAddress, netIf As NetworkInterface)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void JoinGroup(Java::Net::SocketAddress ^ mcastaddr, Java::Net::NetworkInterface ^ netIf);" />
      <MemberSignature Language="C#" Value="public virtual void JoinGroup (Java.Net.SocketAddress? mcastaddr, Java.Net.NetworkInterface? netIf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void JoinGroup(class Java.Net.SocketAddress mcastaddr, class Java.Net.NetworkInterface netIf) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.JoinGroup(Java.Net.SocketAddress,Java.Net.NetworkInterface)" />
      <MemberSignature Language="F#" Value="abstract member JoinGroup : Java.Net.SocketAddress * Java.Net.NetworkInterface -&gt; unit&#xA;override this.JoinGroup : Java.Net.SocketAddress * Java.Net.NetworkInterface -&gt; unit" Usage="multicastSocket.JoinGroup (mcastaddr, netIf)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("joinGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetJoinGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("joinGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetJoinGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mcastaddr" Type="Java.Net.SocketAddress" />
        <Parameter Name="netIf" Type="Java.Net.NetworkInterface" />
      </Parameters>
      <Docs>
        <param name="mcastaddr">is the multicast address to join</param>
        <param name="netIf">specifies the local interface to receive multicast
                   datagram packets, or <i>null</i> to defer to the interface set by
                  <c>MulticastSocket#setInterface(InetAddress)</c> or
                  <c>MulticastSocket#setNetworkInterface(NetworkInterface)</c></param>
        <summary>Joins the specified multicast group at the specified interface.</summary>
        <remarks>
          <para>Joins the specified multicast group at the specified interface.</para>
          <para>If there is a security manager, this method first
            calls its <c>checkMulticast</c> method
            with the <c>mcastaddr</c> argument
            as its argument.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#joinGroup(java.net.SocketAddress,%20java.net.NetworkInterface)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.joinGroup(java.net.SocketAddress, java.net.NetworkInterface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the specified address is not a multicast address.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if no multicast group is specified.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LeaveGroup">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LeaveGroup (mcastaddr As InetAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LeaveGroup(Java::Net::InetAddress ^ mcastaddr);" />
      <MemberSignature Language="C#" Value="public virtual void LeaveGroup (Java.Net.InetAddress? mcastaddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LeaveGroup(class Java.Net.InetAddress mcastaddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.LeaveGroup(Java.Net.InetAddress)" />
      <MemberSignature Language="F#" Value="abstract member LeaveGroup : Java.Net.InetAddress -&gt; unit&#xA;override this.LeaveGroup : Java.Net.InetAddress -&gt; unit" Usage="multicastSocket.LeaveGroup mcastaddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("leaveGroup", "(Ljava/net/InetAddress;)V", "GetLeaveGroup_Ljava_net_InetAddress_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("leaveGroup", "(Ljava/net/InetAddress;)V", "GetLeaveGroup_Ljava_net_InetAddress_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mcastaddr" Type="Java.Net.InetAddress" />
      </Parameters>
      <Docs>
        <param name="mcastaddr">is the multicast address to leave</param>
        <summary>Leave a multicast group.</summary>
        <remarks>
          <para>Leave a multicast group. Its behavior may be affected by
            <c>setInterface</c> or <c>setNetworkInterface</c>.</para>
          <para>If there is a security manager, this method first
            calls its <c>checkMulticast</c> method
            with the <c>mcastaddr</c> argument
            as its argument.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#leaveGroup(java.net.InetAddress)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.leaveGroup(java.net.InetAddress)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>groupAddr</c> is <c>null</c>.</exception>
        <exception cref="T:Java.IO.IOException">if the specified group address is not a multicast address.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LeaveGroup">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LeaveGroup (mcastaddr As SocketAddress, netIf As NetworkInterface)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LeaveGroup(Java::Net::SocketAddress ^ mcastaddr, Java::Net::NetworkInterface ^ netIf);" />
      <MemberSignature Language="C#" Value="public virtual void LeaveGroup (Java.Net.SocketAddress? mcastaddr, Java.Net.NetworkInterface? netIf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LeaveGroup(class Java.Net.SocketAddress mcastaddr, class Java.Net.NetworkInterface netIf) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.LeaveGroup(Java.Net.SocketAddress,Java.Net.NetworkInterface)" />
      <MemberSignature Language="F#" Value="abstract member LeaveGroup : Java.Net.SocketAddress * Java.Net.NetworkInterface -&gt; unit&#xA;override this.LeaveGroup : Java.Net.SocketAddress * Java.Net.NetworkInterface -&gt; unit" Usage="multicastSocket.LeaveGroup (mcastaddr, netIf)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("leaveGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetLeaveGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("leaveGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetLeaveGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mcastaddr" Type="Java.Net.SocketAddress" />
        <Parameter Name="netIf" Type="Java.Net.NetworkInterface" />
      </Parameters>
      <Docs>
        <param name="mcastaddr">is the multicast address to leave</param>
        <param name="netIf">specifies the local interface or <i>null</i> to defer
                        to the interface set by
                        <c>MulticastSocket#setInterface(InetAddress)</c> or
                        <c>MulticastSocket#setNetworkInterface(NetworkInterface)</c></param>
        <summary>Leave a multicast group on a specified local interface.</summary>
        <remarks>
          <para>Leave a multicast group on a specified local interface.</para>
          <para>If there is a security manager, this method first
            calls its <c>checkMulticast</c> method
            with the <c>mcastaddr</c> argument
            as its argument.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#leaveGroup(java.net.SocketAddress,%20java.net.NetworkInterface)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the specified group address is not a multicast address.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>groupAddress</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoopbackMode">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LoopbackMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool LoopbackMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="C#" Value="public virtual bool LoopbackMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoopbackMode" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.LoopbackMode" />
      <MemberSignature Language="F#" Value="member this.LoopbackMode : bool with get, set" Usage="Java.Net.MulticastSocket.LoopbackMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLoopbackMode", "()Z", "GetGetLoopbackModeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLoopbackMode", "()Z", "GetGetLoopbackModeHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLoopbackMode", "(Z)V", "GetSetLoopbackMode_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setLoopbackMode", "(Z)V", "GetSetLoopbackMode_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="disable">
          <c>true</c> to disable the LoopbackMode</param>
        <summary>Get the setting for local loopback of multicast datagrams. -or- Disable/Enable local loopback of multicast datagrams
            The option is used by the platform's networking code as a hint
            for setting whether multicast data will be looped back to
            the local socket.</summary>
        <value>true if the LoopbackMode has been disabled</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the setting for local loopback of multicast datagrams.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#getLoopbackMode()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.getLoopbackMode()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Disable/Enable local loopback of multicast datagrams
            The option is used by the platform's networking code as a hint
            for setting whether multicast data will be looped back to
            the local socket.</para>
          <para>Because this option is a hint, applications that want to
            verify what loopback mode is set to should call
            <c>#getLoopbackMode()</c></para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#setLoopbackMode(boolean)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.setLoopbackMode(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NetworkInterface">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NetworkInterface As NetworkInterface" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Net::NetworkInterface ^ NetworkInterface { Java::Net::NetworkInterface ^ get(); void set(Java::Net::NetworkInterface ^ value); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Net.NetworkInterface? NetworkInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.NetworkInterface NetworkInterface" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.NetworkInterface" />
      <MemberSignature Language="F#" Value="member this.NetworkInterface : Java.Net.NetworkInterface with get, set" Usage="Java.Net.MulticastSocket.NetworkInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNetworkInterface", "()Ljava/net/NetworkInterface;", "GetGetNetworkInterfaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNetworkInterface", "()Ljava/net/NetworkInterface;", "GetGetNetworkInterfaceHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNetworkInterface", "(Ljava/net/NetworkInterface;)V", "GetSetNetworkInterface_Ljava_net_NetworkInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNetworkInterface", "(Ljava/net/NetworkInterface;)V", "GetSetNetworkInterface_Ljava_net_NetworkInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.NetworkInterface</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="netIf">the interface</param>
        <summary>Get the multicast network interface set. -or- Specify the network interface for outgoing multicast datagrams
            sent on this socket.</summary>
        <value>the multicast <c>NetworkInterface</c> currently
            set or <c>null</c> when no interface is set.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the multicast network interface set.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#getNetworkInterface()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.getNetworkInterface()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Specify the network interface for outgoing multicast datagrams
            sent on this socket.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#setNetworkInterface(java.net.NetworkInterface)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.setNetworkInterface(java.net.NetworkInterface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Send (p As DatagramPacket, ttl As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Send(Java::Net::DatagramPacket ^ p, System::SByte ttl);" />
      <MemberSignature Language="C#" Value="public virtual void Send (Java.Net.DatagramPacket? p, sbyte ttl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Send(class Java.Net.DatagramPacket p, int8 ttl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.MulticastSocket.Send(Java.Net.DatagramPacket,System.SByte)" />
      <MemberSignature Language="F#" Value="override this.Send : Java.Net.DatagramPacket * sbyte -&gt; unit" Usage="multicastSocket.Send (p, ttl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Ljava/net/DatagramPacket;B)V", "GetSend_Ljava_net_DatagramPacket_BHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Ljava/net/DatagramPacket;B)V", "GetSend_Ljava_net_DatagramPacket_BHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="Java.Net.DatagramPacket" />
        <Parameter Name="ttl" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="p">is the packet to be sent. The packet should contain
            the destination multicast ip address and the data to be sent.
            One does not need to be the member of the group to send
            packets to a destination multicast address.</param>
        <param name="ttl">optional time to live for multicast packet.
            default ttl is 1.</param>
        <summary>Sends a datagram packet to the destination, with a TTL (time-
            to-live) other than the default for the socket.</summary>
        <remarks>
          <para>Sends a datagram packet to the destination, with a TTL (time-
            to-live) other than the default for the socket.  This method
            need only be used in instances where a particular TTL is desired;
            otherwise it is preferable to set a TTL once on the socket, and
            use that default TTL for all packets.  This method does &lt;B&gt;not
            &lt;/B&gt; alter the default TTL for the socket. Its behavior may be
            affected by <c>setInterface</c>.</para>
          <para>If there is a security manager, this method first performs some
            security checks. First, if <c>p.getAddress().isMulticastAddress()</c>
            is true, this method calls the
            security manager's <c>checkMulticast</c> method
            with <c>p.getAddress()</c> and <c>ttl</c> as its arguments.
            If the evaluation of that expression is false,
            this method instead calls the security manager's
            <c>checkConnect</c> method with arguments
            <c>p.getAddress().getHostAddress()</c> and
            <c>p.getPort()</c>. Each call to a security manager method
            could result in a SecurityException if the operation is not allowed.</para>
          <para>This member is deprecated. Use the following code or its equivalent instead:
             ......
             int ttl = mcastSocket.getTimeToLive();
             mcastSocket.setTimeToLive(newttl);
             mcastSocket.send(p);
             mcastSocket.setTimeToLive(ttl);
             ......</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#send(java.net.DatagramPacket,%20byte)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.send(java.net.DatagramPacket, byte)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Net.MulticastSocket.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Net.MulticastSocket.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeToLive">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TimeToLive As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TimeToLive { int get(); void set(int value); };" />
      <MemberSignature Language="C#" Value="public virtual int TimeToLive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeToLive" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.TimeToLive" />
      <MemberSignature Language="F#" Value="member this.TimeToLive : int with get, set" Usage="Java.Net.MulticastSocket.TimeToLive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTimeToLive", "()I", "GetGetTimeToLiveHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTimeToLive", "()I", "GetGetTimeToLiveHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTimeToLive", "(I)V", "GetSetTimeToLive_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setTimeToLive", "(I)V", "GetSetTimeToLive_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="ttl">the time-to-live</param>
        <summary>Get the default time-to-live for multicast packets sent out on
            the socket. -or- Set the default time-to-live for multicast packets sent out
            on this <c>MulticastSocket</c> in order to control the
            scope of the multicasts.</summary>
        <value>the default time-to-live value</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the default time-to-live for multicast packets sent out on
            the socket.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#getTimeToLive()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.getTimeToLive()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the default time-to-live for multicast packets sent out
            on this <c>MulticastSocket</c> in order to control the
            scope of the multicasts.</para>
          <para>The ttl &lt;B&gt;must&lt;/B&gt; be in the range <c>0 &lt;= ttl &lt;=
            255</c> or an <c>IllegalArgumentException</c> will be thrown.
            Multicast packets sent with a TTL of <c>0</c> are not transmitted
            on the network but may be delivered locally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#setTimeToLive(int)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.setTimeToLive(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TTL">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TTL As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::SByte TTL { System::SByte get(); void set(System::SByte value); };" />
      <MemberSignature Language="C#" Value="public virtual sbyte TTL { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int8 TTL" />
      <MemberSignature Language="DocId" Value="P:Java.Net.MulticastSocket.TTL" />
      <MemberSignature Language="F#" Value="member this.TTL : sbyte with get, set" Usage="Java.Net.MulticastSocket.TTL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTTL", "()B", "GetGetTTLHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTTL", "()B", "GetGetTTLHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTTL", "(B)V", "GetSetTTL_BHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setTTL", "(B)V", "GetSetTTL_BHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="ttl">the time-to-live</param>
        <summary>Get the default time-to-live for multicast packets sent out on
            the socket. -or- Set the default time-to-live for multicast packets sent out
            on this <c>MulticastSocket</c> in order to control the
            scope of the multicasts.</summary>
        <value>the default time-to-live value</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the default time-to-live for multicast packets sent out on
            the socket.</para>
          <para>This member is deprecated. use the getTimeToLive method instead, which returns
            an &lt;b&gt;int&lt;/b&gt; instead of a &lt;b&gt;byte&lt;/b&gt;.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#getTTL()" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.getTTL()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the default time-to-live for multicast packets sent out
            on this <c>MulticastSocket</c> in order to control the
            scope of the multicasts.</para>
          <para>The ttl is an &lt;b&gt;unsigned&lt;/b&gt; 8-bit quantity, and so &lt;B&gt;must&lt;/B&gt; be
            in the range <c>0 &lt;= ttl &lt;= 0xFF</c>.</para>
          <para>This member is deprecated. use the setTimeToLive method instead, which uses
            &lt;b&gt;int&lt;/b&gt; instead of &lt;b&gt;byte&lt;/b&gt; as the type for ttl.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/MulticastSocket#setTTL(byte)" title="Reference documentation">Java documentation for <code>java.net.MulticastSocket.setTTL(byte)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
