<Type Name="URI" FullName="Java.Net.URI">
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class URI&#xA;Inherits Object&#xA;Implements IComparable, IDisposable, IJavaPeerable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class URI sealed : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::IO::ISerializable, Java::Lang::IComparable" />
  <TypeSignature Language="C#" Value="public sealed class URI : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit URI extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class Java.Lang.IComparable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Net.URI" />
  <TypeSignature Language="F#" Value="type URI = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/net/URI", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/net/URI", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Represents a Uniform Resource Identifier (URI) reference.</summary>
    <remarks>
      <para>Represents a Uniform Resource Identifier (URI) reference.</para>
      <para>Aside from some minor deviations noted below, an instance of this
            class represents a URI reference as defined by
            <see href="http://www.ietf.org/rfc/rfc2396.txt"><i>RFC&amp;nbsp;2396: Uniform
            Resource Identifiers (URI): Generic Syntax</i></see>, amended by <see href="http://www.ietf.org/rfc/rfc2732.txt"><i>RFC&amp;nbsp;2732: Format for
            Literal IPv6 Addresses in URLs</i></see>. The Literal IPv6 address format
            also supports scope_ids. The syntax and usage of scope_ids is described
            here.
            This class provides constructors for creating URI instances from
            their components or by parsing their string forms, methods for accessing the
            various components of an instance, and methods for normalizing, resolving,
            and relativizing URI instances.  Instances of this class are immutable.
            
            
            &lt;h3&gt; URI syntax and components &lt;/h3&gt;
            
            At the highest level a URI reference (hereinafter simply "URI") in string
            form has the syntax
            
            &lt;blockquote&gt;
            [<i>scheme</i>&lt;b&gt;<c>:</c>&lt;/b&gt;]<i>scheme-specific-part</i>[&lt;b&gt;<c>#</c>&lt;/b&gt;<i>fragment</i>]
            &lt;/blockquote&gt;
            
            where square brackets [...] delineate optional components and the characters
            &lt;b&gt;<c>:</c>&lt;/b&gt; and &lt;b&gt;<c>#</c>&lt;/b&gt; stand for themselves.</para>
      <para>An <i>absolute</i> URI specifies a scheme; a URI that is not absolute is
            said to be <i>relative</i>.  URIs are also classified according to whether
            they are <i>opaque</i> or <i>hierarchical</i>.</para>
      <para>An <i>opaque</i> URI is an absolute URI whose scheme-specific part does
            not begin with a slash character (<c>'/'</c>).  Opaque URIs are not
            subject to further parsing.  Some examples of opaque URIs are:
            
            &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary="layout"&gt;
            &lt;tr&gt;&lt;td&gt;<c>mailto:java-net@java.sun.com</c>&lt;td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;<c>news:comp.lang.java</c>&lt;td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;<c>urn:isbn:096139210x</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;&lt;/blockquote&gt;</para>
      <para>A <i>hierarchical</i> URI is either an absolute URI whose
            scheme-specific part begins with a slash character, or a relative URI, that
            is, a URI that does not specify a scheme.  Some examples of hierarchical
            URIs are:
            
            &lt;blockquote&gt;
            <c>http://java.sun.com/j2se/1.3/</c>&lt;br&gt;
            <c>docs/guide/collections/designfaq.html#28</c>&lt;br&gt;
            <c>../../../demo/jfc/SwingSet2/src/SwingSet2.java</c>&lt;br&gt;
            <c>file:///~/calendar</c>&lt;/blockquote&gt;</para>
      <para>A hierarchical URI is subject to further parsing according to the syntax
            
            &lt;blockquote&gt;
            [<i>scheme</i>&lt;b&gt;<c>:</c>&lt;/b&gt;][&lt;b&gt;<c>//</c>&lt;/b&gt;<i>authority</i>][<i>path</i>][&lt;b&gt;<c>?</c>&lt;/b&gt;<i>query</i>][&lt;b&gt;<c>#</c>&lt;/b&gt;<i>fragment</i>]
            &lt;/blockquote&gt;
            
            where the characters &lt;b&gt;<c>:</c>&lt;/b&gt;, &lt;b&gt;<c>/</c>&lt;/b&gt;,
            &lt;b&gt;<c>?</c>&lt;/b&gt;, and &lt;b&gt;<c>#</c>&lt;/b&gt; stand for themselves.  The
            scheme-specific part of a hierarchical URI consists of the characters
            between the scheme and fragment components.</para>
      <para>The authority component of a hierarchical URI is, if specified, either
            <i>server-based</i> or <i>registry-based</i>.  A server-based authority
            parses according to the familiar syntax
            
            &lt;blockquote&gt;
            [<i>user-info</i>&lt;b&gt;<c>@</c>&lt;/b&gt;]<i>host</i>[&lt;b&gt;<c>:</c>&lt;/b&gt;<i>port</i>]
            &lt;/blockquote&gt;
            
            where the characters &lt;b&gt;<c>@</c>&lt;/b&gt; and &lt;b&gt;<c>:</c>&lt;/b&gt; stand for
            themselves.  Nearly all URI schemes currently in use are server-based.  An
            authority component that does not parse in this way is considered to be
            registry-based.</para>
      <para>The path component of a hierarchical URI is itself said to be absolute
            if it begins with a slash character (<c>'/'</c>); otherwise it is
            relative.  The path of a hierarchical URI that is either absolute or
            specifies an authority is always absolute.</para>
      <para>All told, then, a URI instance has the following nine components:
            
            &lt;blockquote&gt;&lt;table summary="Describes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment"&gt;
            &lt;tr&gt;&lt;th&gt;<i>Component</i>&lt;/th&gt;&lt;th&gt;<i>Type</i>&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;scheme&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;scheme-specific-part&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;authority&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;user-info&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;host&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;port&lt;/td&gt;&lt;td&gt;<c>int</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;path&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;query&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;fragment&lt;/td&gt;&lt;td&gt;<c>String</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;&lt;/blockquote&gt;
            
            In a given instance any particular component is either <i>undefined</i> or
            <i>defined</i> with a distinct value.  Undefined string components are
            represented by <c>null</c>, while undefined integer components are
            represented by <c>-1</c>.  A string component may be defined to have the
            empty string as its value; this is not equivalent to that component being
            undefined.</para>
      <para>Whether a particular component is or is not defined in an instance
            depends upon the type of the URI being represented.  An absolute URI has a
            scheme component.  An opaque URI has a scheme, a scheme-specific part, and
            possibly a fragment, but has no other components.  A hierarchical URI always
            has a path (though it may be empty) and a scheme-specific-part (which at
            least contains the path), and may have any of the other components.  If the
            authority component is present and is server-based then the host component
            will be defined and the user-information and port components may be defined.
            
            
            &lt;h4&gt; Operations on URI instances &lt;/h4&gt;
            
            The key operations supported by this class are those of
            <i>normalization</i>, <i>resolution</i>, and <i>relativization</i>.</para>
      <para>
        <i>Normalization</i> is the process of removing unnecessary <c>"."</c>
            and <c>".."</c> segments from the path component of a hierarchical URI.
            Each <c>"."</c> segment is simply removed.  A <c>".."</c> segment is
            removed only if it is preceded by a non-<c>".."</c> segment.
            Normalization has no effect upon opaque URIs.</para>
      <para>
        <i>Resolution</i> is the process of resolving one URI against another,
            <i>base</i> URI.  The resulting URI is constructed from components of both
            URIs in the manner specified by RFC&amp;nbsp;2396, taking components from the
            base URI for those not specified in the original.  For hierarchical URIs,
            the path of the original is resolved against the path of the base and then
            normalized.  The result, for example, of resolving
            
            &lt;blockquote&gt;
            <c>docs/guide/collections/designfaq.html#28</c>
            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1)
            &lt;/blockquote&gt;
            
            against the base URI <c>http://java.sun.com/j2se/1.3/</c> is the result
            URI
            
            &lt;blockquote&gt;
            <c>http://java.sun.com/j2se/1.3/docs/guide/collections/designfaq.html#28</c>&lt;/blockquote&gt;
            
            Resolving the relative URI
            
            &lt;blockquote&gt;
            <c>../../../demo/jfc/SwingSet2/src/SwingSet2.java</c>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2)
            &lt;/blockquote&gt;
            
            against this result yields, in turn,
            
            &lt;blockquote&gt;
            <c>http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java</c>&lt;/blockquote&gt;
            
            Resolution of both absolute and relative URIs, and of both absolute and
            relative paths in the case of hierarchical URIs, is supported.  Resolving
            the URI <c>file:///~calendar</c> against any other URI simply yields the
            original URI, since it is absolute.  Resolving the relative URI (2) above
            against the relative base URI (1) yields the normalized, but still relative,
            URI
            
            &lt;blockquote&gt;
            <c>demo/jfc/SwingSet2/src/SwingSet2.java</c>&lt;/blockquote&gt;</para>
      <para>
        <i>Relativization</i>, finally, is the inverse of resolution: For any
            two normalized URIs <i>u</i> and&amp;nbsp;<i>v</i>,
            
            &lt;blockquote&gt;
              <i>u</i><c>.relativize(</c><i>u</i><c>.resolve(</c><i>v</i><c>)).equals(</c><i>v</i><c>)</c>&amp;nbsp;&amp;nbsp;and&lt;br&gt;
              <i>u</i><c>.resolve(</c><i>u</i><c>.relativize(</c><i>v</i><c>)).equals(</c><i>v</i><c>)</c>&amp;nbsp;&amp;nbsp;.&lt;br&gt;
            &lt;/blockquote&gt;
            
            This operation is often useful when constructing a document containing URIs
            that must be made relative to the base URI of the document wherever
            possible.  For example, relativizing the URI
            
            &lt;blockquote&gt;
            <c>http://java.sun.com/j2se/1.3/docs/guide/index.html</c>&lt;/blockquote&gt;
            
            against the base URI
            
            &lt;blockquote&gt;
            <c>http://java.sun.com/j2se/1.3</c>&lt;/blockquote&gt;
            
            yields the relative URI <c>docs/guide/index.html</c>.
            
            
            &lt;h4&gt; Character categories &lt;/h4&gt;
            
            RFC&amp;nbsp;2396 specifies precisely which characters are permitted in the
            various components of a URI reference.  The following categories, most of
            which are taken from that specification, are used below to describe these
            constraints:
            
            &lt;blockquote&gt;&lt;table cellspacing=2 summary="Describes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other"&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>alpha</i>&lt;/th&gt;
                  &lt;td&gt;The US-ASCII alphabetic characters,
                   <c>'A'</c>&amp;nbsp;through&amp;nbsp;<c>'Z'</c>
                   and <c>'a'</c>&amp;nbsp;through&amp;nbsp;<c>'z'</c>&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>digit</i>&lt;/th&gt;
                  &lt;td&gt;The US-ASCII decimal digit characters,
                  <c>'0'</c>&amp;nbsp;through&amp;nbsp;<c>'9'</c>&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>alphanum</i>&lt;/th&gt;
                  &lt;td&gt;All <i>alpha</i> and <i>digit</i> characters&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>unreserved</i>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
                  &lt;td&gt;All <i>alphanum</i> characters together with those in the string
                   <c>"_-!.~'()*"</c>&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>punct</i>&lt;/th&gt;
                  &lt;td&gt;The characters in the string <c>",;:$&amp;+="</c>&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>reserved</i>&lt;/th&gt;
                  &lt;td&gt;All <i>punct</i> characters together with those in the string
                   <c>"?/[]@"</c>&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>escaped</i>&lt;/th&gt;
                  &lt;td&gt;Escaped octets, that is, triplets consisting of the percent
                      character (<c>'%'</c>) followed by two hexadecimal digits
                      (<c>'0'</c>-<c>'9'</c>, <c>'A'</c>-<c>'F'</c>, and
                      <c>'a'</c>-<c>'f'</c>)&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;th valign=top&gt;<i>other</i>&lt;/th&gt;
                  &lt;td&gt;The Unicode characters that are not in the US-ASCII character set,
                      are not control characters (according to the <c>java.lang.Character#isISOControl(char) Character.isISOControl</c>
                      method), and are not space characters (according to the <c>java.lang.Character#isSpaceChar(char) Character.isSpaceChar</c>
                      method)&amp;nbsp;&amp;nbsp;<i>(&lt;b&gt;Deviation from RFC 2396&lt;/b&gt;, which is
                      limited to US-ASCII)</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;&lt;/blockquote&gt;</para>
      <para>"legal-chars"&gt; The set of all legal URI characters consists of
            the <i>unreserved</i>, <i>reserved</i>, <i>escaped</i>, and <i>other</i>
            characters.
            
            
            &lt;h4&gt; Escaped octets, quotation, encoding, and decoding &lt;/h4&gt;
            
            RFC 2396 allows escaped octets to appear in the user-info, path, query, and
            fragment components.  Escaping serves two purposes in URIs:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>To <i>encode</i> non-US-ASCII characters when a URI is required to
              conform strictly to RFC&amp;nbsp;2396 by not containing any <i>other</i>
              characters.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>To <i>quote</i> characters that are otherwise illegal in a
              component.  The user-info, path, query, and fragment components differ
              slightly in terms of which characters are considered legal and illegal.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;
            
            These purposes are served in this class by three related operations:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>"encode"&gt; A character is <i>encoded</i> by replacing it
              with the sequence of escaped octets that represent that character in the
              UTF-8 character set.  The Euro currency symbol (<c>'\u005Cu20AC'</c>),
              for example, is encoded as <c>"%E2%82%AC"</c>.  <i>(&lt;b&gt;Deviation from
              RFC&amp;nbsp;2396&lt;/b&gt;, which does not specify any particular character
              set.)</i></para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>"quote"&gt; An illegal character is <i>quoted</i> simply by
              encoding it.  The space character, for example, is quoted by replacing it
              with <c>"%20"</c>.  UTF-8 contains US-ASCII, hence for US-ASCII
              characters this transformation has exactly the effect required by
              RFC&amp;nbsp;2396.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>"decode"&gt;
              A sequence of escaped octets is <i>decoded</i> by
              replacing it with the sequence of characters that it represents in the
              UTF-8 character set.  UTF-8 contains US-ASCII, hence decoding has the
              effect of de-quoting any quoted US-ASCII characters as well as that of
              decoding any encoded non-US-ASCII characters.  If a decoding error occurs
              when decoding the escaped octets then the erroneous octets are replaced by
              <c>'\u005CuFFFD'</c>, the Unicode replacement character.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;
            
            These operations are exposed in the constructors and methods of this class
            as follows:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>The #URI(java.lang.String) single-argument
              constructor requires any illegal characters in its argument to be
              quoted and preserves any escaped octets and <i>other</i> characters that
              are present.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The #URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)
              multi-argument constructors quote illegal characters as
              required by the components in which they appear.  The percent character
              (<c>'%'</c>) is always quoted by these constructors.  Any <i>other</i>
              characters are preserved.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#getRawUserInfo() getRawUserInfo</c>, <c>#getRawPath()
              getRawPath</c>, <c>#getRawQuery() getRawQuery</c>, <c>#getRawFragment()
              getRawFragment</c>, <c>#getRawAuthority() getRawAuthority</c>, and <c>#getRawSchemeSpecificPart() getRawSchemeSpecificPart</c> methods return the
              values of their corresponding components in raw form, without interpreting
              any escaped octets.  The strings returned by these methods may contain
              both escaped octets and <i>other</i> characters, and will not contain any
              illegal characters.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#getUserInfo() getUserInfo</c>, <c>#getPath()
              getPath</c>, <c>#getQuery() getQuery</c>, <c>#getFragment()
              getFragment</c>, <c>#getAuthority() getAuthority</c>, and <c>#getSchemeSpecificPart() getSchemeSpecificPart</c> methods decode any escaped
              octets in their corresponding components.  The strings returned by these
              methods may contain both <i>other</i> characters and illegal characters,
              and will not contain any escaped octets.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#toString() toString</c> method returns a URI string with
              all necessary quotation but which may contain <i>other</i> characters.</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>The <c>#toASCIIString() toASCIIString</c> method returns a fully
              quoted and encoded URI string that does not contain any <i>other</i>
              characters.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;
            
            
            &lt;h4&gt; Identities &lt;/h4&gt;
            
            For any URI <i>u</i>, it is always the case that
            
            &lt;blockquote&gt;
            <c>new URI(</c><i>u</i><c>.toString()).equals(</c><i>u</i><c>)</c>&amp;nbsp;.
            &lt;/blockquote&gt;
            
            For any URI <i>u</i> that does not contain redundant syntax such as two
            slashes before an empty authority (as in <c>file:///tmp/</c>&amp;nbsp;) or a
            colon following a host name but no port (as in
            <c>http://java.sun.com:</c>&amp;nbsp;), and that does not encode characters
            except those that must be quoted, the following identities also hold:</para>
      <code lang="text/java">new URI(&lt;i&gt;u&lt;/i&gt;.getScheme(),
                        &lt;i&gt;u&lt;/i&gt;.getSchemeSpecificPart(),
                        &lt;i&gt;u&lt;/i&gt;.getFragment())
                .equals(&lt;i&gt;u&lt;/i&gt;)</code>
      <para>in all cases,</para>
      <code lang="text/java">new URI(&lt;i&gt;u&lt;/i&gt;.getScheme(),
                        &lt;i&gt;u&lt;/i&gt;.getUserInfo(), &lt;i&gt;u&lt;/i&gt;.getAuthority(),
                        &lt;i&gt;u&lt;/i&gt;.getPath(), &lt;i&gt;u&lt;/i&gt;.getQuery(),
                        &lt;i&gt;u&lt;/i&gt;.getFragment())
                .equals(&lt;i&gt;u&lt;/i&gt;)</code>
      <para>if <i>u</i> is hierarchical, and</para>
      <code lang="text/java">new URI(&lt;i&gt;u&lt;/i&gt;.getScheme(),
                        &lt;i&gt;u&lt;/i&gt;.getUserInfo(), &lt;i&gt;u&lt;/i&gt;.getHost(), &lt;i&gt;u&lt;/i&gt;.getPort(),
                        &lt;i&gt;u&lt;/i&gt;.getPath(), &lt;i&gt;u&lt;/i&gt;.getQuery(),
                        &lt;i&gt;u&lt;/i&gt;.getFragment())
                .equals(&lt;i&gt;u&lt;/i&gt;)</code>
      <para>if <i>u</i> is hierarchical and has either no authority or a server-based
            authority.
            
            
            &lt;h4&gt; URIs, URLs, and URNs &lt;/h4&gt;
            
            A URI is a uniform resource <i>identifier</i> while a URL is a uniform
            resource <i>locator</i>.  Hence every URL is a URI, abstractly speaking, but
            not every URI is a URL.  This is because there is another subcategory of
            URIs, uniform resource <i>names</i> (URNs), which name resources but do not
            specify how to locate them.  The <c>mailto</c>, <c>news</c>, and
            <c>isbn</c> URIs shown above are examples of URNs.</para>
      <para>The conceptual distinction between URIs and URLs is reflected in the
            differences between this class and the <c>URL</c> class.</para>
      <para>An instance of this class represents a URI reference in the syntactic
            sense defined by RFC&amp;nbsp;2396.  A URI may be either absolute or relative.
            A URI string is parsed according to the generic syntax without regard to the
            scheme, if any, that it specifies.  No lookup of the host, if any, is
            performed, and no scheme-dependent stream handler is constructed.  Equality,
            hashing, and comparison are defined strictly in terms of the character
            content of the instance.  In other words, a URI instance is little more than
            a structured string that supports the syntactic, scheme-independent
            operations of comparison, normalization, resolution, and relativization.</para>
      <para>An instance of the <c>URL</c> class, by contrast, represents the
            syntactic components of a URL together with some of the information required
            to access the resource that it describes.  A URL must be absolute, that is,
            it must always specify a scheme.  A URL string is parsed according to its
            scheme.  A stream handler is always established for a URL, and in fact it is
            impossible to create a URL instance for a scheme for which no handler is
            available.  Equality and hashing depend upon both the scheme and the
            Internet address of the host, if any; comparison is not defined.  In other
            words, a URL is a structured string that supports the syntactic operation of
            resolution as well as the network I/O operations of looking up the host and
            opening a connection to the specified resource.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/net/URI" title="Reference documentation">Java documentation for <code>java.net.URI</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (str As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; URI(System::String ^ str);" />
      <MemberSignature Language="C#" Value="public URI (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Java.Net.URI : string -&gt; Java.Net.URI" Usage="new Java.Net.URI str" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The string to be parsed into a URI</param>
        <summary>Constructs a URI by parsing the given string.</summary>
        <remarks>
          <para>Constructs a URI by parsing the given string.</para>
          <para>This constructor parses the given string exactly as specified by the
            grammar in <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>,
            Appendix&amp;nbsp;A, &lt;b&gt;<i>except for the following deviations:</i>&lt;/b&gt;</para>
          <para>&lt;ul&gt;
            
              &lt;li&gt;</para>
          <para>An empty authority component is permitted as long as it is
              followed by a non-empty path, a query component, or a fragment
              component.  This allows the parsing of URIs such as
              <c>"file:///foo/bar"</c>, which seems to be the intent of
              RFC&amp;nbsp;2396 although the grammar does not permit it.  If the
              authority component is empty then the user-information, host, and port
              components are undefined.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Empty relative paths are permitted; this seems to be the
              intent of RFC&amp;nbsp;2396 although the grammar does not permit it.  The
              primary consequence of this deviation is that a standalone fragment
              such as <c>"#foo"</c> parses as a relative URI with an empty path
              and the given fragment, and can be usefully resolved against a base URI.
            
              &lt;li&gt;</para>
          <para>IPv4 addresses in host components are parsed rigorously, as
              specified by <see href="http://www.ietf.org/rfc/rfc2732.txt">RFC 2732</see>: Each
              element of a dotted-quad address must contain no more than three
              decimal digits.  Each element is further constrained to have a value
              no greater than 255.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Hostnames in host components that comprise only a single
              domain label are permitted to start with an <i>alphanum</i>
              character. This seems to be the intent of <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>
              section&amp;nbsp;3.2.2 although the grammar does not permit it. The
              consequence of this deviation is that the authority component of a
              hierarchical URI such as <c>s://123</c>, will parse as a server-based
              authority.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>IPv6 addresses are permitted for the host component.  An IPv6
              address must be enclosed in square brackets (<c>'['</c> and
              <c>']'</c>) as specified by <see href="http://www.ietf.org/rfc/rfc2732.txt">RFC 2732</see>.  The
              IPv6 address itself must parse according to <see href="http://www.ietf.org/rfc/rfc2373.txt">RFC 2373</see>.  IPv6
              addresses are further constrained to describe no more than sixteen
              bytes of address information, a constraint implicit in RFC&amp;nbsp;2373
              but not expressible in the grammar.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Characters in the <i>other</i> category are permitted wherever
              RFC&amp;nbsp;2396 permits <i>escaped</i> octets, that is, in the
              user-information, path, query, and fragment components, as well as in
              the authority component if the authority is registry-based.  This
              allows URIs to contain Unicode characters beyond those in the US-ASCII
              character set.</para>
          <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#URI(java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.URI(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheme As String, ssp As String, fragment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; URI(System::String ^ scheme, System::String ^ ssp, System::String ^ fragment);" />
      <MemberSignature Language="C#" Value="public URI (string? scheme, string? ssp, string? fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scheme, string ssp, string fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.Net.URI : string * string * string -&gt; Java.Net.URI" Usage="new Java.Net.URI (scheme, ssp, fragment)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="ssp" Type="System.String" />
        <Parameter Name="fragment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scheme">Scheme name</param>
        <param name="ssp">Scheme-specific part</param>
        <param name="fragment">Fragment</param>
        <summary>Constructs a URI from the given components.</summary>
        <remarks>
          <para>Constructs a URI from the given components.</para>
          <para>A component may be left undefined by passing <c>null</c>.</para>
          <para>This constructor first builds a URI in string form using the given
            components as follows:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>Initially, the result string is empty.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a scheme is given then it is appended to the result,
              followed by a colon character (<c>':'</c>).</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a scheme-specific part is given then it is appended.  Any
              character that is not a legal URI character
              is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Finally, if a fragment is given then a hash character
              (<c>'#'</c>) is appended to the string, followed by the fragment.
              Any character that is not a legal URI character is quoted.</para>
          <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>The resulting URI string is then parsed in order to create the new
            URI instance as if by invoking the <c>#URI(String)</c> constructor;
            this may cause a <c>URISyntaxException</c> to be thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#URI(java.lang.String,%20java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.URI(java.lang.String, java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheme As String, host As String, path As String, fragment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; URI(System::String ^ scheme, System::String ^ host, System::String ^ path, System::String ^ fragment);" />
      <MemberSignature Language="C#" Value="public URI (string? scheme, string? host, string? path, string? fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scheme, string host, string path, string fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.Net.URI : string * string * string * string -&gt; Java.Net.URI" Usage="new Java.Net.URI (scheme, host, path, fragment)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fragment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scheme">Scheme name</param>
        <param name="host">Host name</param>
        <param name="path">Path</param>
        <param name="fragment">Fragment</param>
        <summary>Constructs a hierarchical URI from the given components.</summary>
        <remarks>
          <para>Constructs a hierarchical URI from the given components.</para>
          <para>A component may be left undefined by passing <c>null</c>.</para>
          <para>This convenience constructor works as if by invoking the
            seven-argument constructor as follows:
            
            &lt;blockquote&gt;
            <c>new</c><c>#URI(String, String, String, int, String, String, String)
            URI</c><c>(scheme, null, host, -1, path, null, fragment);</c>&lt;/blockquote&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#URI(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.URI(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheme As String, authority As String, path As String, query As String, fragment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; URI(System::String ^ scheme, System::String ^ authority, System::String ^ path, System::String ^ query, System::String ^ fragment);" />
      <MemberSignature Language="C#" Value="public URI (string? scheme, string? authority, string? path, string? query, string? fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scheme, string authority, string path, string query, string fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.#ctor(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.Net.URI : string * string * string * string * string -&gt; Java.Net.URI" Usage="new Java.Net.URI (scheme, authority, path, query, fragment)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="fragment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scheme">Scheme name</param>
        <param name="authority">Authority</param>
        <param name="path">Path</param>
        <param name="query">Query</param>
        <param name="fragment">Fragment</param>
        <summary>Constructs a hierarchical URI from the given components.</summary>
        <remarks>
          <para>Constructs a hierarchical URI from the given components.</para>
          <para>If a scheme is given then the path, if also given, must either be
            empty or begin with a slash character (<c>'/'</c>).  Otherwise a
            component of the new URI may be left undefined by passing <c>null</c>
            for the corresponding parameter.</para>
          <para>This constructor first builds a URI string from the given components
            according to the rules specified in <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>,
            section&amp;nbsp;5.2, step&amp;nbsp;7:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>Initially, the result string is empty.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a scheme is given then it is appended to the result,
              followed by a colon character (<c>':'</c>).</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If an authority is given then the string <c>"//"</c> is
              appended, followed by the authority.  If the authority contains a
              literal IPv6 address then the address must be enclosed in square
              brackets (<c>'['</c> and <c>']'</c>).  Any character not in the
              <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
              categories, and not equal to the commercial-at character
              (<c>'@'</c>), is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a path is given then it is appended.  Any character not in
              the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
              categories, and not equal to the slash character (<c>'/'</c>) or the
              commercial-at character (<c>'@'</c>), is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a query is given then a question-mark character
              (<c>'?'</c>) is appended, followed by the query.  Any character that
              is not a legal URI character is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Finally, if a fragment is given then a hash character
              (<c>'#'</c>) is appended, followed by the fragment.  Any character
              that is not a legal URI character is quoted.</para>
          <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>The resulting URI string is then parsed as if by invoking the <c>#URI(String)</c> constructor and then invoking the <c>#parseServerAuthority()</c> method upon the result; this may cause a <c>URISyntaxException</c> to be thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#URI(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.URI(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheme As String, userInfo As String, host As String, port As Integer, path As String, query As String, fragment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; URI(System::String ^ scheme, System::String ^ userInfo, System::String ^ host, int port, System::String ^ path, System::String ^ query, System::String ^ fragment);" />
      <MemberSignature Language="C#" Value="public URI (string? scheme, string? userInfo, string? host, int port, string? path, string? query, string? fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scheme, string userInfo, string host, int32 port, string path, string query, string fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.Net.URI : string * string * string * int * string * string * string -&gt; Java.Net.URI" Usage="new Java.Net.URI (scheme, userInfo, host, port, path, query, fragment)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="userInfo" Type="System.String" />
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="fragment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scheme">Scheme name</param>
        <param name="userInfo">User name and authorization information</param>
        <param name="host">Host name</param>
        <param name="port">Port number</param>
        <param name="path">Path</param>
        <param name="query">Query</param>
        <param name="fragment">Fragment</param>
        <summary>Constructs a hierarchical URI from the given components.</summary>
        <remarks>
          <para>Constructs a hierarchical URI from the given components.</para>
          <para>If a scheme is given then the path, if also given, must either be
            empty or begin with a slash character (<c>'/'</c>).  Otherwise a
            component of the new URI may be left undefined by passing <c>null</c>
            for the corresponding parameter or, in the case of the <c>port</c>
            parameter, by passing <c>-1</c>.</para>
          <para>This constructor first builds a URI string from the given components
            according to the rules specified in <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>,
            section&amp;nbsp;5.2, step&amp;nbsp;7:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>Initially, the result string is empty.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a scheme is given then it is appended to the result,
              followed by a colon character (<c>':'</c>).</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If user information, a host, or a port are given then the
              string <c>"//"</c> is appended.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If user information is given then it is appended, followed by
              a commercial-at character (<c>'@'</c>).  Any character not in the
              <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
              categories is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a host is given then it is appended.  If the host is a
              literal IPv6 address but is not enclosed in square brackets
              (<c>'['</c> and <c>']'</c>) then the square brackets are added.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a port number is given then a colon character
              (<c>':'</c>) is appended, followed by the port number in decimal.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a path is given then it is appended.  Any character not in
              the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
              categories, and not equal to the slash character (<c>'/'</c>) or the
              commercial-at character (<c>'@'</c>), is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a query is given then a question-mark character
              (<c>'?'</c>) is appended, followed by the query.  Any character that
              is not a legal URI character is quoted.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Finally, if a fragment is given then a hash character
              (<c>'#'</c>) is appended, followed by the fragment.  Any character
              that is not a legal URI character is quoted.</para>
          <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>The resulting URI string is then parsed as if by invoking the <c>#URI(String)</c> constructor and then invoking the <c>#parseServerAuthority()</c> method upon the result; this may cause a <c>URISyntaxException</c> to be thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#URI(java.lang.String,%20java.lang.String,%20java.lang.String,%20int,%20java.lang.String,%20java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.URI(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException" />
      </Docs>
    </Member>
    <Member MemberName="Authority">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authority As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Authority { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Authority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Authority" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Authority" />
      <MemberSignature Language="F#" Value="member this.Authority : string" Usage="Java.Net.URI.Authority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getAuthority", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getAuthority", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded authority component of this URI.</summary>
        <value>The decoded authority component of this URI,
                     or <c>null</c> if the authority is undefined</value>
        <remarks>
          <para>Returns the decoded authority component of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawAuthority() getRawAuthority</c> method except that all
            sequences of escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getAuthority()" title="Reference documentation">Java documentation for <code>java.net.URI.getAuthority()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (that As URI) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(Java::Net::URI ^ that);" />
      <MemberSignature Language="C#" Value="public int CompareTo (Java.Net.URI? that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class Java.Net.URI that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.CompareTo(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="member this.CompareTo : Java.Net.URI -&gt; int" Usage="uRI.CompareTo that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/net/URI;)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/net/URI;)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="that">The object to which this URI is to be compared</param>
        <summary>Compares this URI to another object, which must be a URI.</summary>
        <returns>A negative integer, zero, or a positive integer as this URI is
                     less than, equal to, or greater than the given URI</returns>
        <remarks>
          <para>Compares this URI to another object, which must be a URI.</para>
          <para>When comparing corresponding components of two URIs, if one
            component is undefined but the other is defined then the first is
            considered to be less than the second.  Unless otherwise noted, string
            components are ordered according to their natural, case-sensitive
            ordering as defined by the <c>java.lang.String#compareTo(Object)
            String.compareTo</c> method.  String components that are subject to
            encoding are compared by comparing their raw forms rather than their
            encoded forms.</para>
          <para>The ordering of URIs is defined as follows:</para>
          <para>&lt;ul&gt;
            
              &lt;li&gt;</para>
          <para>Two URIs with different schemes are ordered according the
              ordering of their schemes, without regard to case.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>A hierarchical URI is considered to be less than an opaque URI
              with an identical scheme.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Two opaque URIs with identical schemes are ordered according
              to the ordering of their scheme-specific parts.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Two opaque URIs with identical schemes and scheme-specific
              parts are ordered according to the ordering of their
              fragments.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Two hierarchical URIs with identical schemes are ordered
              according to the ordering of their authority components:</para>
          <para>&lt;ul&gt;
            
                &lt;li&gt;</para>
          <para>If both authority components are server-based then the URIs
                are ordered according to their user-information components; if these
                components are identical then the URIs are ordered according to the
                ordering of their hosts, without regard to case; if the hosts are
                identical then the URIs are ordered according to the ordering of
                their ports.</para>
          <para>&lt;/li&gt;
            
                &lt;li&gt;</para>
          <para>If one or both authority components are registry-based then
                the URIs are ordered according to the ordering of their authority
                components.</para>
          <para>&lt;/li&gt;
            
              &lt;/ul&gt;&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Finally, two hierarchical URIs with identical schemes and
              authority components are ordered according to the ordering of their
              paths; if their paths are identical then they are ordered according to
              the ordering of their queries; if the queries are identical then they
              are ordered according to the order of their fragments.</para>
          <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
          <para>This method satisfies the general contract of the <c>java.lang.Comparable#compareTo(Object) Comparable.compareTo</c>
            method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#compareTo(java.net.URI)" title="Reference documentation">Java documentation for <code>java.net.URI.compareTo(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (str As String) As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Net::URI ^ Create(System::String ^ str);" />
      <MemberSignature Language="C#" Value="public static Java.Net.URI? Create (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Net.URI Create(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Create(System.String)" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; Java.Net.URI" Usage="Java.Net.URI.Create str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Ljava/lang/String;)Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Ljava/lang/String;)Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The string to be parsed into a URI</param>
        <summary>Creates a URI by parsing the given string.</summary>
        <returns>The new URI</returns>
        <remarks>
          <para>Creates a URI by parsing the given string.</para>
          <para>This convenience factory method works as if by invoking the <c>#URI(String)</c> constructor; any <c>URISyntaxException</c> thrown by the
            constructor is caught and wrapped in a new <c>IllegalArgumentException</c> object, which is then thrown.</para>
          <para>This method is provided for use in situations where it is known that
            the given string is a legal URI, for example for URI constants declared
            within in a program, and so it would be considered a programming error
            for the string not to parse as such.  The constructors, which throw
            <c>URISyntaxException</c> directly, should be used situations where a
            URI is being constructed from user input or from some other source that
            may be prone to errors.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#create(java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.create(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Fragment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Fragment { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Fragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Fragment" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Fragment" />
      <MemberSignature Language="F#" Value="member this.Fragment : string" Usage="Java.Net.URI.Fragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFragment", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFragment", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded fragment component of this URI.</summary>
        <value>The decoded fragment component of this URI,
                     or <c>null</c> if the fragment is undefined</value>
        <remarks>
          <para>Returns the decoded fragment component of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawFragment() getRawFragment</c> method except that all
            sequences of escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getFragment()" title="Reference documentation">Java documentation for <code>java.net.URI.getFragment()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Host" />
      <MemberSignature Language="F#" Value="member this.Host : string" Usage="Java.Net.URI.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHost", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHost", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the host component of this URI.</summary>
        <value>The host component of this URI,
                     or <c>null</c> if the host is undefined</value>
        <remarks>
          <para>Returns the host component of this URI.</para>
          <para>The host component of a URI, if defined, will have one of the
            following forms:</para>
          <para>&lt;ul&gt;
            
              &lt;li&gt;</para>
          <para>A domain name consisting of one or more <i>labels</i>
              separated by period characters (<c>'.'</c>), optionally followed by
              a period character.  Each label consists of <i>alphanum</i> characters
              as well as hyphen characters (<c>'-'</c>), though hyphens never
              occur as the first or last characters in a label. The rightmost
              label of a domain name consisting of two or more labels, begins
              with an <i>alpha</i> character. &lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>A dotted-quad IPv4 address of the form
              <i>digit</i><c>+.</c><i>digit</i><c>+.</c><i>digit</i><c>+.</c><i>digit</i><c>+</c>,
              where no <i>digit</i> sequence is longer than three characters and no
              sequence has a value larger than 255.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>An IPv6 address enclosed in square brackets (<c>'['</c> and
              <c>']'</c>) and consisting of hexadecimal digits, colon characters
              (<c>':'</c>), and possibly an embedded IPv4 address.  The full
              syntax of IPv6 addresses is specified in <see href="http://www.ietf.org/rfc/rfc2373.txt"><i>RFC&amp;nbsp;2373: IPv6
              Addressing Architecture</i></see>.</para>
          <para>&lt;/li&gt;
            
            &lt;/ul&gt;
            
            The host component of a URI cannot contain escaped octets, hence this
            method does not perform any decoding.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getHost()" title="Reference documentation">Java documentation for <code>java.net.URI.getHost()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsAbsolute">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbsolute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbsolute { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool IsAbsolute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsolute" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.IsAbsolute" />
      <MemberSignature Language="F#" Value="member this.IsAbsolute : bool" Usage="Java.Net.URI.IsAbsolute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAbsolute", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isAbsolute", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells whether or not this URI is absolute.</summary>
        <value>
          <c>true</c> if, and only if, this URI is absolute</value>
        <remarks>
          <para>Tells whether or not this URI is absolute.</para>
          <para>A URI is absolute if, and only if, it has a scheme component.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#isAbsolute()" title="Reference documentation">Java documentation for <code>java.net.URI.isAbsolute()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsOpaque">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOpaque As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOpaque { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool IsOpaque { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpaque" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.IsOpaque" />
      <MemberSignature Language="F#" Value="member this.IsOpaque : bool" Usage="Java.Net.URI.IsOpaque" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isOpaque", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isOpaque", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells whether or not this URI is opaque.</summary>
        <value>
          <c>true</c> if, and only if, this URI is opaque</value>
        <remarks>
          <para>Tells whether or not this URI is opaque.</para>
          <para>A URI is opaque if, and only if, it is absolute and its
            scheme-specific part does not begin with a slash character ('/').
            An opaque URI has a scheme, a scheme-specific part, and possibly
            a fragment; all other components are undefined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#isOpaque()" title="Reference documentation">Java documentation for <code>java.net.URI.isOpaque()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="VB.NET" Value="Function CompareTo (o As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int Java.Lang.IComparable.CompareTo(Java::Lang::Object ^ o) = Java::Lang::IComparable::CompareTo;" />
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Java#Lang#IComparable#CompareTo(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int&#xA;override this.Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int" Usage="uRI.Java.Lang.IComparable.CompareTo o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IComparable.CompareTo(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Net.URI.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URI ^ Normalize();" />
      <MemberSignature Language="C#" Value="public Java.Net.URI? Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URI Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Normalize" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; Java.Net.URI" Usage="uRI.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("normalize", "()Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("normalize", "()Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Normalizes this URI's path.</summary>
        <returns>A URI equivalent to this URI,
                     but whose path is in normal form</returns>
        <remarks>
          <para>Normalizes this URI's path.</para>
          <para>If this URI is opaque, or if its path is already in normal form,
            then this URI is returned.  Otherwise a new URI is constructed that is
            identical to this URI except that its path is computed by normalizing
            this URI's path in a manner consistent with <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>,
            section&amp;nbsp;5.2, step&amp;nbsp;6, sub-steps&amp;nbsp;c through&amp;nbsp;f; that is:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>All <c>"."</c> segments are removed.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If a <c>".."</c> segment is preceded by a non-<c>".."</c>
              segment then both of these segments are removed.  This step is
              repeated until it is no longer applicable.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If the path is relative, and if its first segment contains a
              colon character (<c>':'</c>), then a <c>"."</c> segment is
              prepended.  This prevents a relative URI with a path such as
              <c>"a:b/c/d"</c> from later being re-parsed as an opaque URI with a
              scheme of <c>"a"</c> and a scheme-specific part of <c>"b/c/d"</c>.
              &lt;b&gt;<i>(Deviation from RFC&amp;nbsp;2396)</i>&lt;/b&gt;</para>
          <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>A normalized path will begin with one or more <c>".."</c> segments
            if there were insufficient non-<c>".."</c> segments preceding them to
            allow their removal.  A normalized path will begin with a <c>"."</c>
            segment if one was inserted by step 3 above.  Otherwise, a normalized
            path will not contain any <c>"."</c> or <c>".."</c> segments.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#normalize()" title="Reference documentation">Java documentation for <code>java.net.URI.normalize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParseServerAuthority">
      <MemberSignature Language="VB.NET" Value="Public Function ParseServerAuthority () As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URI ^ ParseServerAuthority();" />
      <MemberSignature Language="C#" Value="public Java.Net.URI? ParseServerAuthority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URI ParseServerAuthority() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.ParseServerAuthority" />
      <MemberSignature Language="F#" Value="member this.ParseServerAuthority : unit -&gt; Java.Net.URI" Usage="uRI.ParseServerAuthority " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parseServerAuthority", "()Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parseServerAuthority", "()Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to parse this URI's authority component, if defined, into
            user-information, host, and port components.</summary>
        <returns>A URI whose authority field has been parsed
                     as a server-based authority</returns>
        <remarks>
          <para>Attempts to parse this URI's authority component, if defined, into
            user-information, host, and port components.</para>
          <para>If this URI's authority component has already been recognized as
            being server-based then it will already have been parsed into
            user-information, host, and port components.  In this case, or if this
            URI has no authority component, this method simply returns this URI.</para>
          <para>Otherwise this method attempts once more to parse the authority
            component into user-information, host, and port components, and throws
            an exception describing why the authority component could not be parsed
            in that way.</para>
          <para>This method is provided because the generic URI syntax specified in
            <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>
            cannot always distinguish a malformed server-based authority from a
            legitimate registry-based authority.  It must therefore treat some
            instances of the former as instances of the latter.  The authority
            component in the URI string <c>"//foo:bar"</c>, for example, is not a
            legal server-based authority but it is legal as a registry-based
            authority.</para>
          <para>In many common situations, for example when working URIs that are
            known to be either URNs or URLs, the hierarchical URIs being used will
            always be server-based.  They therefore must either be parsed as such or
            treated as an error.  In these cases a statement such as
            
            &lt;blockquote&gt;
            <c>URI</c><i>u</i><c>= new URI(str).parseServerAuthority();</c>&lt;/blockquote&gt;</para>
          <para>can be used to ensure that <i>u</i> always refers to a URI that, if
            it has an authority component, has a server-based authority with proper
            user-information, host, and port components.  Invoking this method also
            ensures that if the authority could not be parsed in that way then an
            appropriate diagnostic message can be issued based upon the exception
            that is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#parseServerAuthority()" title="Reference documentation">Java documentation for <code>java.net.URI.parseServerAuthority()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.URISyntaxException">if the authority part could not be parsed as a server-based
             authority.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Path" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="Java.Net.URI.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPath", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPath", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded path component of this URI.</summary>
        <value>The decoded path component of this URI,
                     or <c>null</c> if the path is undefined</value>
        <remarks>
          <para>Returns the decoded path component of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawPath() getRawPath</c> method except that all sequences of
            escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getPath()" title="Reference documentation">Java documentation for <code>java.net.URI.getPath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); };" />
      <MemberSignature Language="C#" Value="public int Port { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Port" />
      <MemberSignature Language="F#" Value="member this.Port : int" Usage="Java.Net.URI.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPort", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPort", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the port number of this URI.</summary>
        <value>The port component of this URI,
                     or <c>-1</c> if the port is undefined</value>
        <remarks>
          <para>Returns the port number of this URI.</para>
          <para>The port component of a URI, if defined, is a non-negative
            integer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getPort()" title="Reference documentation">Java documentation for <code>java.net.URI.getPort()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Query As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Query { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Query { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Query" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Query" />
      <MemberSignature Language="F#" Value="member this.Query : string" Usage="Java.Net.URI.Query" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getQuery", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getQuery", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded query component of this URI.</summary>
        <value>The decoded query component of this URI,
                     or <c>null</c> if the query is undefined</value>
        <remarks>
          <para>Returns the decoded query component of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawQuery() getRawQuery</c> method except that all sequences of
            escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getQuery()" title="Reference documentation">Java documentation for <code>java.net.URI.getQuery()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawAuthority">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawAuthority As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawAuthority { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawAuthority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawAuthority" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawAuthority" />
      <MemberSignature Language="F#" Value="member this.RawAuthority : string" Usage="Java.Net.URI.RawAuthority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawAuthority", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawAuthority", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw authority component of this URI.</summary>
        <value>The raw authority component of this URI,
                     or <c>null</c> if the authority is undefined</value>
        <remarks>
          <para>Returns the raw authority component of this URI.</para>
          <para>The authority component of a URI, if defined, only contains the
            commercial-at character (<c>'@'</c>) and characters in the
            <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and <i>other</i>
            categories.  If the authority is server-based then it is further
            constrained to have valid user-information, host, and port
            components.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawAuthority()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawAuthority()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawFragment">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawFragment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawFragment { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawFragment" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawFragment" />
      <MemberSignature Language="F#" Value="member this.RawFragment : string" Usage="Java.Net.URI.RawFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawFragment", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawFragment", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw fragment component of this URI.</summary>
        <value>The raw fragment component of this URI,
                     or <c>null</c> if the fragment is undefined</value>
        <remarks>
          <para>Returns the raw fragment component of this URI.</para>
          <para>The fragment component of a URI, if defined, only contains legal URI
            characters.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawFragment()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawFragment()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawPath">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawPath { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawPath" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawPath" />
      <MemberSignature Language="F#" Value="member this.RawPath : string" Usage="Java.Net.URI.RawPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawPath", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawPath", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw path component of this URI.</summary>
        <value>The path component of this URI,
                     or <c>null</c> if the path is undefined</value>
        <remarks>
          <para>Returns the raw path component of this URI.</para>
          <para>The path component of a URI, if defined, only contains the slash
            character (<c>'/'</c>), the commercial-at character (<c>'@'</c>),
            and characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>,
            and <i>other</i> categories.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawPath()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawPath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawQuery">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawQuery As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawQuery { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawQuery { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawQuery" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawQuery" />
      <MemberSignature Language="F#" Value="member this.RawQuery : string" Usage="Java.Net.URI.RawQuery" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawQuery", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawQuery", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw query component of this URI.</summary>
        <value>The raw query component of this URI,
                     or <c>null</c> if the query is undefined</value>
        <remarks>
          <para>Returns the raw query component of this URI.</para>
          <para>The query component of a URI, if defined, only contains legal URI
            characters.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawQuery()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawQuery()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawSchemeSpecificPart">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawSchemeSpecificPart As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawSchemeSpecificPart { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawSchemeSpecificPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawSchemeSpecificPart" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawSchemeSpecificPart" />
      <MemberSignature Language="F#" Value="member this.RawSchemeSpecificPart : string" Usage="Java.Net.URI.RawSchemeSpecificPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawSchemeSpecificPart", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawSchemeSpecificPart", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw scheme-specific part of this URI.</summary>
        <value>The raw scheme-specific part of this URI
                     (never <c>null</c>)</value>
        <remarks>
          <para>Returns the raw scheme-specific part of this URI.  The scheme-specific
            part is never undefined, though it may be empty.</para>
          <para>The scheme-specific part of a URI only contains legal URI
            characters.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawSchemeSpecificPart()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawSchemeSpecificPart()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RawUserInfo">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawUserInfo As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawUserInfo { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? RawUserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawUserInfo" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.RawUserInfo" />
      <MemberSignature Language="F#" Value="member this.RawUserInfo : string" Usage="Java.Net.URI.RawUserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRawUserInfo", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRawUserInfo", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the raw user-information component of this URI.</summary>
        <value>The raw user-information component of this URI,
                     or <c>null</c> if the user information is undefined</value>
        <remarks>
          <para>Returns the raw user-information component of this URI.</para>
          <para>The user-information component of a URI, if defined, only contains
            characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and
            <i>other</i> categories.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getRawUserInfo()" title="Reference documentation">Java documentation for <code>java.net.URI.getRawUserInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Relativize">
      <MemberSignature Language="VB.NET" Value="Public Function Relativize (uri As URI) As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URI ^ Relativize(Java::Net::URI ^ uri);" />
      <MemberSignature Language="C#" Value="public Java.Net.URI? Relativize (Java.Net.URI? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URI Relativize(class Java.Net.URI uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Relativize(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="member this.Relativize : Java.Net.URI -&gt; Java.Net.URI" Usage="uRI.Relativize uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("relativize", "(Ljava/net/URI;)Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("relativize", "(Ljava/net/URI;)Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to be relativized against this URI</param>
        <summary>Relativizes the given URI against this URI.</summary>
        <returns>The resulting URI</returns>
        <remarks>
          <para>Relativizes the given URI against this URI.</para>
          <para>The relativization of the given URI against this URI is computed as
            follows:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>If either this URI or the given URI are opaque, or if the
              scheme and authority components of the two URIs are not identical, or
              if the path of this URI is not a prefix of the path of the given URI,
              then the given URI is returned.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Otherwise a new relative hierarchical URI is constructed with
              query and fragment components taken from the given URI and with a path
              component computed by removing this URI's path from the beginning of
              the given URI's path.</para>
          <para>&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#relativize(java.net.URI)" title="Reference documentation">Java documentation for <code>java.net.URI.relativize(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="VB.NET" Value="Public Function Resolve (uri As URI) As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URI ^ Resolve(Java::Net::URI ^ uri);" />
      <MemberSignature Language="C#" Value="public Java.Net.URI? Resolve (Java.Net.URI? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URI Resolve(class Java.Net.URI uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Resolve(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="member this.Resolve : Java.Net.URI -&gt; Java.Net.URI" Usage="uRI.Resolve uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolve", "(Ljava/net/URI;)Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolve", "(Ljava/net/URI;)Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to be resolved against this URI</param>
        <summary>Resolves the given URI against this URI.</summary>
        <returns>The resulting URI</returns>
        <remarks>
          <para>Resolves the given URI against this URI.</para>
          <para>If the given URI is already absolute, or if this URI is opaque, then
            the given URI is returned.</para>
          <para>"resolve-frag"&gt; If the given URI's fragment component is
            defined, its path component is empty, and its scheme, authority, and
            query components are undefined, then a URI with the given fragment but
            with all other components equal to those of this URI is returned.  This
            allows a URI representing a standalone fragment reference, such as
            <c>"#foo"</c>, to be usefully resolved against a base URI.</para>
          <para>Otherwise this method constructs a new hierarchical URI in a manner
            consistent with <see href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</see>,
            section&amp;nbsp;5.2; that is:</para>
          <para>&lt;ol&gt;
            
              &lt;li&gt;</para>
          <para>A new URI is constructed with this URI's scheme and the given
              URI's query and fragment components.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>If the given URI has an authority component then the new URI's
              authority and path are taken from the given URI.</para>
          <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
          <para>Otherwise the new URI's authority component is copied from
              this URI, and its path is computed as follows:</para>
          <para>&lt;ol&gt;
            
                &lt;li&gt;</para>
          <para>If the given URI's path is absolute then the new URI's path
                is taken from the given URI.</para>
          <para>&lt;/li&gt;
            
                &lt;li&gt;</para>
          <para>Otherwise the given URI's path is relative, and so the new
                URI's path is computed by resolving the path of the given URI
                against the path of this URI.  This is done by concatenating all but
                the last segment of this URI's path, if any, with the given URI's
                path and then normalizing the result as if by invoking the <c>#normalize() normalize</c> method.</para>
          <para>&lt;/li&gt;
            
              &lt;/ol&gt;&lt;/li&gt;
            
            &lt;/ol&gt;</para>
          <para>The result of this method is absolute if, and only if, either this
            URI is absolute or the given URI is absolute.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#resolve(java.net.URI)" title="Reference documentation">Java documentation for <code>java.net.URI.resolve(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="VB.NET" Value="Public Function Resolve (str As String) As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URI ^ Resolve(System::String ^ str);" />
      <MemberSignature Language="C#" Value="public Java.Net.URI? Resolve (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URI Resolve(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.Resolve(System.String)" />
      <MemberSignature Language="F#" Value="member this.Resolve : string -&gt; Java.Net.URI" Usage="uRI.Resolve str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resolve", "(Ljava/lang/String;)Ljava/net/URI;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("resolve", "(Ljava/lang/String;)Ljava/net/URI;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The string to be parsed into a URI</param>
        <summary>Constructs a new URI by parsing the given string and then resolving it
            against this URI.</summary>
        <returns>The resulting URI</returns>
        <remarks>
          <para>Constructs a new URI by parsing the given string and then resolving it
            against this URI.</para>
          <para>This convenience method works as if invoking it were equivalent to
            evaluating the expression <c>#resolve(java.net.URI)
            resolve</c><c>(URI.</c><c>#create(String) create</c><c>(str))</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#resolve(java.lang.String)" title="Reference documentation">Java documentation for <code>java.net.URI.resolve(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.Scheme" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="Java.Net.URI.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getScheme", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getScheme", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the scheme component of this URI.</summary>
        <value>The scheme component of this URI,
                     or <c>null</c> if the scheme is undefined</value>
        <remarks>
          <para>Returns the scheme component of this URI.</para>
          <para>The scheme component of a URI, if defined, only contains characters
            in the <i>alphanum</i> category and in the string <c>"-.+"</c>.  A
            scheme always starts with an <i>alpha</i> character.</para>
          <para>The scheme component of a URI cannot contain escaped octets, hence this
            method does not perform any decoding.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getScheme()" title="Reference documentation">Java documentation for <code>java.net.URI.getScheme()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SchemeSpecificPart">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemeSpecificPart As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SchemeSpecificPart { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? SchemeSpecificPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemeSpecificPart" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.SchemeSpecificPart" />
      <MemberSignature Language="F#" Value="member this.SchemeSpecificPart : string" Usage="Java.Net.URI.SchemeSpecificPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSchemeSpecificPart", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSchemeSpecificPart", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded scheme-specific part of this URI.</summary>
        <value>The decoded scheme-specific part of this URI
                     (never <c>null</c>)</value>
        <remarks>
          <para>Returns the decoded scheme-specific part of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawSchemeSpecificPart() getRawSchemeSpecificPart</c> method
            except that all sequences of escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getSchemeSpecificPart()" title="Reference documentation">Java documentation for <code>java.net.URI.getSchemeSpecificPart()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Net.URI.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Net.URI.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToASCIIString">
      <MemberSignature Language="VB.NET" Value="Public Function ToASCIIString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToASCIIString();" />
      <MemberSignature Language="C#" Value="public string? ToASCIIString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToASCIIString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.ToASCIIString" />
      <MemberSignature Language="F#" Value="member this.ToASCIIString : unit -&gt; string" Usage="uRI.ToASCIIString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toASCIIString", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toASCIIString", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the content of this URI as a US-ASCII string.</summary>
        <returns>The string form of this URI, encoded as needed
                     so that it only contains characters in the US-ASCII
                     charset</returns>
        <remarks>
          <para>Returns the content of this URI as a US-ASCII string.</para>
          <para>If this URI does not contain any characters in the <i>other</i>
            category then an invocation of this method will return the same value as
            an invocation of the <c>#toString() toString</c> method.  Otherwise
            this method works as if by invoking that method and then encoding the result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#toASCIIString()" title="Reference documentation">Java documentation for <code>java.net.URI.toASCIIString()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToURL">
      <MemberSignature Language="VB.NET" Value="Public Function ToURL () As URL" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Net::URL ^ ToURL();" />
      <MemberSignature Language="C#" Value="public Java.Net.URL? ToURL ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Net.URL ToURL() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Net.URI.ToURL" />
      <MemberSignature Language="F#" Value="member this.ToURL : unit -&gt; Java.Net.URL" Usage="uRI.ToURL " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toURL", "()Ljava/net/URL;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toURL", "()Ljava/net/URL;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URL</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Constructs a URL from this URI.</summary>
        <returns>A URL constructed from this URI</returns>
        <remarks>
          <para>Constructs a URL from this URI.</para>
          <para>This convenience method works as if invoking it were equivalent to
            evaluating the expression <c>new URL(this.toString())</c> after
            first checking that this URI is absolute.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#toURL()" title="Reference documentation">Java documentation for <code>java.net.URI.toURL()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.MalformedURLException">if an error occurs while creating the URL or no protocol
             handler could be found.
</exception>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserInfo As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserInfo { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string? UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserInfo" />
      <MemberSignature Language="DocId" Value="P:Java.Net.URI.UserInfo" />
      <MemberSignature Language="F#" Value="member this.UserInfo : string" Usage="Java.Net.URI.UserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getUserInfo", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getUserInfo", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the decoded user-information component of this URI.</summary>
        <value>The decoded user-information component of this URI,
                     or <c>null</c> if the user information is undefined</value>
        <remarks>
          <para>Returns the decoded user-information component of this URI.</para>
          <para>The string returned by this method is equal to that returned by the
            <c>#getRawUserInfo() getRawUserInfo</c> method except that all
            sequences of escaped octets are decoded.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/net/URI#getUserInfo()" title="Reference documentation">Java documentation for <code>java.net.URI.getUserInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
